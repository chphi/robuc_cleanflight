# 1 "./src/main/telemetry/mavlink.c"
# 1 "C:\\cygwin64\\home\\Charles\\cleanflight//"
# 1 "<built-in>"
#define __STDC__ 1
#define __STDC_VERSION__ 199901L
#define __STDC_UTF_16__ 1
#define __STDC_UTF_32__ 1
#define __STDC_HOSTED__ 1
#define __GNUC__ 4
#define __GNUC_MINOR__ 8
#define __GNUC_PATCHLEVEL__ 4
#define __VERSION__ "4.8.4 20140526 (release) [ARM/embedded-4_8-branch revision 211358]"
#define __ATOMIC_RELAXED 0
#define __ATOMIC_SEQ_CST 5
#define __ATOMIC_ACQUIRE 2
#define __ATOMIC_RELEASE 3
#define __ATOMIC_ACQ_REL 4
#define __ATOMIC_CONSUME 1
#define __OPTIMIZE_SIZE__ 1
#define __OPTIMIZE__ 1
#define __FINITE_MATH_ONLY__ 0
#define __SIZEOF_INT__ 4
#define __SIZEOF_LONG__ 4
#define __SIZEOF_LONG_LONG__ 8
#define __SIZEOF_SHORT__ 2
#define __SIZEOF_FLOAT__ 4
#define __SIZEOF_DOUBLE__ 8
#define __SIZEOF_LONG_DOUBLE__ 8
#define __SIZEOF_SIZE_T__ 4
#define __CHAR_BIT__ 8
#define __BIGGEST_ALIGNMENT__ 8
#define __ORDER_LITTLE_ENDIAN__ 1234
#define __ORDER_BIG_ENDIAN__ 4321
#define __ORDER_PDP_ENDIAN__ 3412
#define __BYTE_ORDER__ __ORDER_LITTLE_ENDIAN__
#define __FLOAT_WORD_ORDER__ __ORDER_LITTLE_ENDIAN__
#define __SIZEOF_POINTER__ 4
#define __SIZE_TYPE__ unsigned int
#define __PTRDIFF_TYPE__ int
#define __WCHAR_TYPE__ unsigned int
#define __WINT_TYPE__ unsigned int
#define __INTMAX_TYPE__ long long int
#define __UINTMAX_TYPE__ long long unsigned int
#define __CHAR16_TYPE__ short unsigned int
#define __CHAR32_TYPE__ long unsigned int
#define __SIG_ATOMIC_TYPE__ int
#define __INT8_TYPE__ signed char
#define __INT16_TYPE__ short int
#define __INT32_TYPE__ long int
#define __INT64_TYPE__ long long int
#define __UINT8_TYPE__ unsigned char
#define __UINT16_TYPE__ short unsigned int
#define __UINT32_TYPE__ long unsigned int
#define __UINT64_TYPE__ long long unsigned int
#define __INT_LEAST8_TYPE__ signed char
#define __INT_LEAST16_TYPE__ short int
#define __INT_LEAST32_TYPE__ long int
#define __INT_LEAST64_TYPE__ long long int
#define __UINT_LEAST8_TYPE__ unsigned char
#define __UINT_LEAST16_TYPE__ short unsigned int
#define __UINT_LEAST32_TYPE__ long unsigned int
#define __UINT_LEAST64_TYPE__ long long unsigned int
#define __INT_FAST8_TYPE__ int
#define __INT_FAST16_TYPE__ int
#define __INT_FAST32_TYPE__ int
#define __INT_FAST64_TYPE__ long long int
#define __UINT_FAST8_TYPE__ unsigned int
#define __UINT_FAST16_TYPE__ unsigned int
#define __UINT_FAST32_TYPE__ unsigned int
#define __UINT_FAST64_TYPE__ long long unsigned int
#define __INTPTR_TYPE__ int
#define __UINTPTR_TYPE__ unsigned int
#define __GXX_ABI_VERSION 1002
#define __SCHAR_MAX__ 127
#define __SHRT_MAX__ 32767
#define __INT_MAX__ 2147483647
#define __LONG_MAX__ 2147483647L
#define __LONG_LONG_MAX__ 9223372036854775807LL
#define __WCHAR_MAX__ 4294967295U
#define __WCHAR_MIN__ 0U
#define __WINT_MAX__ 4294967295U
#define __WINT_MIN__ 0U
#define __PTRDIFF_MAX__ 2147483647
#define __SIZE_MAX__ 4294967295U
#define __INTMAX_MAX__ 9223372036854775807LL
#define __INTMAX_C(c) c ## LL
#define __UINTMAX_MAX__ 18446744073709551615ULL
#define __UINTMAX_C(c) c ## ULL
#define __SIG_ATOMIC_MAX__ 2147483647
#define __SIG_ATOMIC_MIN__ (-__SIG_ATOMIC_MAX__ - 1)
#define __INT8_MAX__ 127
#define __INT16_MAX__ 32767
#define __INT32_MAX__ 2147483647L
#define __INT64_MAX__ 9223372036854775807LL
#define __UINT8_MAX__ 255
#define __UINT16_MAX__ 65535
#define __UINT32_MAX__ 4294967295UL
#define __UINT64_MAX__ 18446744073709551615ULL
#define __INT_LEAST8_MAX__ 127
#define __INT8_C(c) c
#define __INT_LEAST16_MAX__ 32767
#define __INT16_C(c) c
#define __INT_LEAST32_MAX__ 2147483647L
#define __INT32_C(c) c ## L
#define __INT_LEAST64_MAX__ 9223372036854775807LL
#define __INT64_C(c) c ## LL
#define __UINT_LEAST8_MAX__ 255
#define __UINT8_C(c) c
#define __UINT_LEAST16_MAX__ 65535
#define __UINT16_C(c) c
#define __UINT_LEAST32_MAX__ 4294967295UL
#define __UINT32_C(c) c ## UL
#define __UINT_LEAST64_MAX__ 18446744073709551615ULL
#define __UINT64_C(c) c ## ULL
#define __INT_FAST8_MAX__ 2147483647
#define __INT_FAST16_MAX__ 2147483647
#define __INT_FAST32_MAX__ 2147483647
#define __INT_FAST64_MAX__ 9223372036854775807LL
#define __UINT_FAST8_MAX__ 4294967295U
#define __UINT_FAST16_MAX__ 4294967295U
#define __UINT_FAST32_MAX__ 4294967295U
#define __UINT_FAST64_MAX__ 18446744073709551615ULL
#define __INTPTR_MAX__ 2147483647
#define __UINTPTR_MAX__ 4294967295U
#define __FLT_EVAL_METHOD__ 0
#define __DEC_EVAL_METHOD__ 2
#define __FLT_RADIX__ 2
#define __FLT_MANT_DIG__ 24
#define __FLT_DIG__ 6
#define __FLT_MIN_EXP__ (-125)
#define __FLT_MIN_10_EXP__ (-37)
#define __FLT_MAX_EXP__ 128
#define __FLT_MAX_10_EXP__ 38
#define __FLT_DECIMAL_DIG__ 9
#define __FLT_MAX__ 3.4028234663852886e+38F
#define __FLT_MIN__ 1.1754943508222875e-38F
#define __FLT_EPSILON__ 1.1920928955078125e-7F
#define __FLT_DENORM_MIN__ 1.4012984643248171e-45F
#define __FLT_HAS_DENORM__ 1
#define __FLT_HAS_INFINITY__ 1
#define __FLT_HAS_QUIET_NAN__ 1
#define __DBL_MANT_DIG__ 53
#define __DBL_DIG__ 15
#define __DBL_MIN_EXP__ (-1021)
#define __DBL_MIN_10_EXP__ (-307)
#define __DBL_MAX_EXP__ 1024
#define __DBL_MAX_10_EXP__ 308
#define __DBL_DECIMAL_DIG__ 17
#define __DBL_MAX__ ((double)1.7976931348623157e+308L)
#define __DBL_MIN__ ((double)2.2250738585072014e-308L)
#define __DBL_EPSILON__ ((double)2.2204460492503131e-16L)
#define __DBL_DENORM_MIN__ ((double)4.9406564584124654e-324L)
#define __DBL_HAS_DENORM__ 1
#define __DBL_HAS_INFINITY__ 1
#define __DBL_HAS_QUIET_NAN__ 1
#define __LDBL_MANT_DIG__ 53
#define __LDBL_DIG__ 15
#define __LDBL_MIN_EXP__ (-1021)
#define __LDBL_MIN_10_EXP__ (-307)
#define __LDBL_MAX_EXP__ 1024
#define __LDBL_MAX_10_EXP__ 308
#define __DECIMAL_DIG__ 17
#define __LDBL_MAX__ 1.7976931348623157e+308L
#define __LDBL_MIN__ 2.2250738585072014e-308L
#define __LDBL_EPSILON__ 2.2204460492503131e-16L
#define __LDBL_DENORM_MIN__ 4.9406564584124654e-324L
#define __LDBL_HAS_DENORM__ 1
#define __LDBL_HAS_INFINITY__ 1
#define __LDBL_HAS_QUIET_NAN__ 1
#define __DEC32_MANT_DIG__ 7
#define __DEC32_MIN_EXP__ (-94)
#define __DEC32_MAX_EXP__ 97
#define __DEC32_MIN__ 1E-95DF
#define __DEC32_MAX__ 9.999999E96DF
#define __DEC32_EPSILON__ 1E-6DF
#define __DEC32_SUBNORMAL_MIN__ 0.000001E-95DF
#define __DEC64_MANT_DIG__ 16
#define __DEC64_MIN_EXP__ (-382)
#define __DEC64_MAX_EXP__ 385
#define __DEC64_MIN__ 1E-383DD
#define __DEC64_MAX__ 9.999999999999999E384DD
#define __DEC64_EPSILON__ 1E-15DD
#define __DEC64_SUBNORMAL_MIN__ 0.000000000000001E-383DD
#define __DEC128_MANT_DIG__ 34
#define __DEC128_MIN_EXP__ (-6142)
#define __DEC128_MAX_EXP__ 6145
#define __DEC128_MIN__ 1E-6143DL
#define __DEC128_MAX__ 9.999999999999999999999999999999999E6144DL
#define __DEC128_EPSILON__ 1E-33DL
#define __DEC128_SUBNORMAL_MIN__ 0.000000000000000000000000000000001E-6143DL
#define __SFRACT_FBIT__ 7
#define __SFRACT_IBIT__ 0
#define __SFRACT_MIN__ (-0.5HR-0.5HR)
#define __SFRACT_MAX__ 0X7FP-7HR
#define __SFRACT_EPSILON__ 0x1P-7HR
#define __USFRACT_FBIT__ 8
#define __USFRACT_IBIT__ 0
#define __USFRACT_MIN__ 0.0UHR
#define __USFRACT_MAX__ 0XFFP-8UHR
#define __USFRACT_EPSILON__ 0x1P-8UHR
#define __FRACT_FBIT__ 15
#define __FRACT_IBIT__ 0
#define __FRACT_MIN__ (-0.5R-0.5R)
#define __FRACT_MAX__ 0X7FFFP-15R
#define __FRACT_EPSILON__ 0x1P-15R
#define __UFRACT_FBIT__ 16
#define __UFRACT_IBIT__ 0
#define __UFRACT_MIN__ 0.0UR
#define __UFRACT_MAX__ 0XFFFFP-16UR
#define __UFRACT_EPSILON__ 0x1P-16UR
#define __LFRACT_FBIT__ 31
#define __LFRACT_IBIT__ 0
#define __LFRACT_MIN__ (-0.5LR-0.5LR)
#define __LFRACT_MAX__ 0X7FFFFFFFP-31LR
#define __LFRACT_EPSILON__ 0x1P-31LR
#define __ULFRACT_FBIT__ 32
#define __ULFRACT_IBIT__ 0
#define __ULFRACT_MIN__ 0.0ULR
#define __ULFRACT_MAX__ 0XFFFFFFFFP-32ULR
#define __ULFRACT_EPSILON__ 0x1P-32ULR
#define __LLFRACT_FBIT__ 63
#define __LLFRACT_IBIT__ 0
#define __LLFRACT_MIN__ (-0.5LLR-0.5LLR)
#define __LLFRACT_MAX__ 0X7FFFFFFFFFFFFFFFP-63LLR
#define __LLFRACT_EPSILON__ 0x1P-63LLR
#define __ULLFRACT_FBIT__ 64
#define __ULLFRACT_IBIT__ 0
#define __ULLFRACT_MIN__ 0.0ULLR
#define __ULLFRACT_MAX__ 0XFFFFFFFFFFFFFFFFP-64ULLR
#define __ULLFRACT_EPSILON__ 0x1P-64ULLR
#define __SACCUM_FBIT__ 7
#define __SACCUM_IBIT__ 8
#define __SACCUM_MIN__ (-0X1P7HK-0X1P7HK)
#define __SACCUM_MAX__ 0X7FFFP-7HK
#define __SACCUM_EPSILON__ 0x1P-7HK
#define __USACCUM_FBIT__ 8
#define __USACCUM_IBIT__ 8
#define __USACCUM_MIN__ 0.0UHK
#define __USACCUM_MAX__ 0XFFFFP-8UHK
#define __USACCUM_EPSILON__ 0x1P-8UHK
#define __ACCUM_FBIT__ 15
#define __ACCUM_IBIT__ 16
#define __ACCUM_MIN__ (-0X1P15K-0X1P15K)
#define __ACCUM_MAX__ 0X7FFFFFFFP-15K
#define __ACCUM_EPSILON__ 0x1P-15K
#define __UACCUM_FBIT__ 16
#define __UACCUM_IBIT__ 16
#define __UACCUM_MIN__ 0.0UK
#define __UACCUM_MAX__ 0XFFFFFFFFP-16UK
#define __UACCUM_EPSILON__ 0x1P-16UK
#define __LACCUM_FBIT__ 31
#define __LACCUM_IBIT__ 32
#define __LACCUM_MIN__ (-0X1P31LK-0X1P31LK)
#define __LACCUM_MAX__ 0X7FFFFFFFFFFFFFFFP-31LK
#define __LACCUM_EPSILON__ 0x1P-31LK
#define __ULACCUM_FBIT__ 32
#define __ULACCUM_IBIT__ 32
#define __ULACCUM_MIN__ 0.0ULK
#define __ULACCUM_MAX__ 0XFFFFFFFFFFFFFFFFP-32ULK
#define __ULACCUM_EPSILON__ 0x1P-32ULK
#define __LLACCUM_FBIT__ 31
#define __LLACCUM_IBIT__ 32
#define __LLACCUM_MIN__ (-0X1P31LLK-0X1P31LLK)
#define __LLACCUM_MAX__ 0X7FFFFFFFFFFFFFFFP-31LLK
#define __LLACCUM_EPSILON__ 0x1P-31LLK
#define __ULLACCUM_FBIT__ 32
#define __ULLACCUM_IBIT__ 32
#define __ULLACCUM_MIN__ 0.0ULLK
#define __ULLACCUM_MAX__ 0XFFFFFFFFFFFFFFFFP-32ULLK
#define __ULLACCUM_EPSILON__ 0x1P-32ULLK
#define __QQ_FBIT__ 7
#define __QQ_IBIT__ 0
#define __HQ_FBIT__ 15
#define __HQ_IBIT__ 0
#define __SQ_FBIT__ 31
#define __SQ_IBIT__ 0
#define __DQ_FBIT__ 63
#define __DQ_IBIT__ 0
#define __TQ_FBIT__ 127
#define __TQ_IBIT__ 0
#define __UQQ_FBIT__ 8
#define __UQQ_IBIT__ 0
#define __UHQ_FBIT__ 16
#define __UHQ_IBIT__ 0
#define __USQ_FBIT__ 32
#define __USQ_IBIT__ 0
#define __UDQ_FBIT__ 64
#define __UDQ_IBIT__ 0
#define __UTQ_FBIT__ 128
#define __UTQ_IBIT__ 0
#define __HA_FBIT__ 7
#define __HA_IBIT__ 8
#define __SA_FBIT__ 15
#define __SA_IBIT__ 16
#define __DA_FBIT__ 31
#define __DA_IBIT__ 32
#define __TA_FBIT__ 63
#define __TA_IBIT__ 64
#define __UHA_FBIT__ 8
#define __UHA_IBIT__ 8
#define __USA_FBIT__ 16
#define __USA_IBIT__ 16
#define __UDA_FBIT__ 32
#define __UDA_IBIT__ 32
#define __UTA_FBIT__ 64
#define __UTA_IBIT__ 64
#define __REGISTER_PREFIX__ 
#define __USER_LABEL_PREFIX__ 
#define __GNUC_STDC_INLINE__ 1
#define __CHAR_UNSIGNED__ 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 1
#define __GCC_ATOMIC_BOOL_LOCK_FREE 2
#define __GCC_ATOMIC_CHAR_LOCK_FREE 2
#define __GCC_ATOMIC_CHAR16_T_LOCK_FREE 2
#define __GCC_ATOMIC_CHAR32_T_LOCK_FREE 2
#define __GCC_ATOMIC_WCHAR_T_LOCK_FREE 2
#define __GCC_ATOMIC_SHORT_LOCK_FREE 2
#define __GCC_ATOMIC_INT_LOCK_FREE 2
#define __GCC_ATOMIC_LONG_LOCK_FREE 2
#define __GCC_ATOMIC_LLONG_LOCK_FREE 1
#define __GCC_ATOMIC_TEST_AND_SET_TRUEVAL 1
#define __GCC_ATOMIC_POINTER_LOCK_FREE 2
#define __GCC_HAVE_DWARF2_CFI_ASM 1
#define __PRAGMA_REDEFINE_EXTNAME 1
#define __SIZEOF_WCHAR_T__ 4
#define __SIZEOF_WINT_T__ 4
#define __SIZEOF_PTRDIFF_T__ 4
#define __ARM_FEATURE_QBIT 1
#define __ARM_FEATURE_SAT 1
#define __ARM_FEATURE_UNALIGNED 1
#define __ARM_FEATURE_LDREX 7
#define __ARM_FEATURE_CLZ 1
#define __ARM_SIZEOF_MINIMAL_ENUM 1
#define __ARM_SIZEOF_WCHAR_T 32
#define __ARM_ARCH_PROFILE 77
#define __arm__ 1
#define __ARM_ARCH 7
#define __APCS_32__ 1
#define __thumb__ 1
#define __thumb2__ 1
#define __ARM_ARCH_ISA_THUMB 2
#define __ARMEL__ 1
#define __THUMBEL__ 1
#define __SOFTFP__ 1
#define __VFP_FP__ 1
#define __ARM_FP 12
#define __ARM_NEON_FP 4
#define __THUMB_INTERWORK__ 1
#define __ARM_ARCH_7M__ 1
#define __ARM_PCS 1
#define __ARM_EABI__ 1
#define __ARM_ARCH_EXT_IDIV__ 1
#define __GXX_TYPEINFO_EQUALITY_INLINE 0
#define __ELF__ 1
# 1 "<command-line>"
#define __USES_INITFINI__ 1
#define DEBUG 1
#define STM32F10X_MD 1
#define STM32F10X 1
#define FLASH_SIZE 128
#define USE_STDPERIPH_DRIVER 1
#define NAZE 1
#define FC 1
#define __FORKNAME__ "cleanflight"
#define __TARGET__ "NAZE"
#define __REVISION__ "a47dc7e"
# 1 "./src/main/telemetry/mavlink.c"
# 23 "./src/main/telemetry/mavlink.c"
# 1 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\lib\\gcc\\arm-none-eabi\\4.8.4\\include\\stdbool.h" 1 3 4
# 29 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\lib\\gcc\\arm-none-eabi\\4.8.4\\include\\stdbool.h" 3 4
#define _STDBOOL_H 



#define bool _Bool
#define true 1
#define false 0
# 48 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\lib\\gcc\\arm-none-eabi\\4.8.4\\include\\stdbool.h" 3 4
#define __bool_true_false_are_defined 1
# 24 "./src/main/telemetry/mavlink.c" 2
# 1 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\lib\\gcc\\arm-none-eabi\\4.8.4\\include\\stdint.h" 1 3 4
# 9 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\lib\\gcc\\arm-none-eabi\\4.8.4\\include\\stdint.h" 3 4
# 1 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\stdint.h" 1 3 4
# 10 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\stdint.h" 3 4
#define _STDINT_H 

# 1 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\machine\\_default_types.h" 1 3 4





#define _MACHINE__DEFAULT_TYPES_H 

# 1 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\sys\\features.h" 1 3 4
# 22 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\sys\\features.h" 3 4
#define _SYS_FEATURES_H 
# 31 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\sys\\features.h" 3 4
#define __GNUC_PREREQ(maj,min) ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((maj) << 16) + (min))






#define __GNUC_PREREQ__(ma,mi) __GNUC_PREREQ(ma, mi)
# 9 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\machine\\_default_types.h" 2 3 4






#define __EXP(x) __ ##x ##__
# 27 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\machine\\_default_types.h" 3 4
typedef signed char __int8_t;
typedef unsigned char __uint8_t;
#define ___int8_t_defined 1







typedef short int __int16_t;
typedef short unsigned int __uint16_t;
#define ___int16_t_defined 1
# 55 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\machine\\_default_types.h" 3 4
typedef long int __int32_t;
typedef long unsigned int __uint32_t;
#define ___int32_t_defined 1
# 77 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\machine\\_default_types.h" 3 4
typedef long long int __int64_t;
typedef long long unsigned int __uint64_t;
#define ___int64_t_defined 1
# 104 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\machine\\_default_types.h" 3 4
typedef signed char __int_least8_t;
typedef unsigned char __uint_least8_t;
#define ___int_least8_t_defined 1
# 126 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\machine\\_default_types.h" 3 4
typedef short int __int_least16_t;
typedef short unsigned int __uint_least16_t;
#define ___int_least16_t_defined 1
# 144 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\machine\\_default_types.h" 3 4
typedef long int __int_least32_t;
typedef long unsigned int __uint_least32_t;
#define ___int_least32_t_defined 1
# 158 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\machine\\_default_types.h" 3 4
typedef long long int __int_least64_t;
typedef long long unsigned int __uint_least64_t;
#define ___int_least64_t_defined 1







typedef int __intptr_t;
typedef unsigned int __uintptr_t;
# 178 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\machine\\_default_types.h" 3 4
#undef __EXP
# 13 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\stdint.h" 2 3 4







#define __STDINT_EXP(x) __ ##x ##__
# 30 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\stdint.h" 3 4
#define __have_longlong64 1






#define __have_long32 1



typedef __int8_t int8_t ;
typedef __uint8_t uint8_t ;
#define __int8_t_defined 1



typedef __int_least8_t int_least8_t;
typedef __uint_least8_t uint_least8_t;
#define __int_least8_t_defined 1



typedef __int16_t int16_t ;
typedef __uint16_t uint16_t ;
#define __int16_t_defined 1



typedef __int_least16_t int_least16_t;
typedef __uint_least16_t uint_least16_t;
#define __int_least16_t_defined 1



typedef __int32_t int32_t ;
typedef __uint32_t uint32_t ;
#define __int32_t_defined 1



typedef __int_least32_t int_least32_t;
typedef __uint_least32_t uint_least32_t;
#define __int_least32_t_defined 1



typedef __int64_t int64_t ;
typedef __uint64_t uint64_t ;
#define __int64_t_defined 1



typedef __int_least64_t int_least64_t;
typedef __uint_least64_t uint_least64_t;
#define __int_least64_t_defined 1
# 95 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\stdint.h" 3 4
  typedef int int_fast8_t;
  typedef unsigned int uint_fast8_t;
#define __int_fast8_t_defined 1







  typedef int int_fast16_t;
  typedef unsigned int uint_fast16_t;
#define __int_fast16_t_defined 1







  typedef int int_fast32_t;
  typedef unsigned int uint_fast32_t;
#define __int_fast32_t_defined 1







  typedef long long int int_fast64_t;
  typedef long long unsigned int uint_fast64_t;
#define __int_fast64_t_defined 1
# 174 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\stdint.h" 3 4
  typedef long long int intmax_t;
# 183 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\stdint.h" 3 4
  typedef long long unsigned int uintmax_t;






typedef __intptr_t intptr_t;
typedef __uintptr_t uintptr_t;


#define INTPTR_MIN (-__INTPTR_MAX__ - 1)
#define INTPTR_MAX __INTPTR_MAX__
#define UINTPTR_MAX __UINTPTR_MAX__
# 218 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\stdint.h" 3 4
#define INT8_MIN (-__INT8_MAX__ - 1)
#define INT8_MAX __INT8_MAX__
#define UINT8_MAX __UINT8_MAX__







#define INT_LEAST8_MIN (-__INT_LEAST8_MAX__ - 1)
#define INT_LEAST8_MAX __INT_LEAST8_MAX__
#define UINT_LEAST8_MAX __UINT_LEAST8_MAX__
# 240 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\stdint.h" 3 4
#define INT16_MIN (-__INT16_MAX__ - 1)
#define INT16_MAX __INT16_MAX__
#define UINT16_MAX __UINT16_MAX__







#define INT_LEAST16_MIN (-__INT_LEAST16_MAX__ - 1)
#define INT_LEAST16_MAX __INT_LEAST16_MAX__
#define UINT_LEAST16_MAX __UINT_LEAST16_MAX__
# 262 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\stdint.h" 3 4
#define INT32_MIN (-__INT32_MAX__ - 1)
#define INT32_MAX __INT32_MAX__
#define UINT32_MAX __UINT32_MAX__
# 278 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\stdint.h" 3 4
#define INT_LEAST32_MIN (-__INT_LEAST32_MAX__ - 1)
#define INT_LEAST32_MAX __INT_LEAST32_MAX__
#define UINT_LEAST32_MAX __UINT_LEAST32_MAX__
# 296 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\stdint.h" 3 4
#define INT64_MIN (-__INT64_MAX__ - 1)
#define INT64_MAX __INT64_MAX__
#define UINT64_MAX __UINT64_MAX__
# 312 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\stdint.h" 3 4
#define INT_LEAST64_MIN (-__INT_LEAST64_MAX__ - 1)
#define INT_LEAST64_MAX __INT_LEAST64_MAX__
#define UINT_LEAST64_MAX __UINT_LEAST64_MAX__
# 328 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\stdint.h" 3 4
#define INT_FAST8_MIN (-__INT_FAST8_MAX__ - 1)
#define INT_FAST8_MAX __INT_FAST8_MAX__
#define UINT_FAST8_MAX __UINT_FAST8_MAX__
# 344 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\stdint.h" 3 4
#define INT_FAST16_MIN (-__INT_FAST16_MAX__ - 1)
#define INT_FAST16_MAX __INT_FAST16_MAX__
#define UINT_FAST16_MAX __UINT_FAST16_MAX__
# 360 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\stdint.h" 3 4
#define INT_FAST32_MIN (-__INT_FAST32_MAX__ - 1)
#define INT_FAST32_MAX __INT_FAST32_MAX__
#define UINT_FAST32_MAX __UINT_FAST32_MAX__
# 376 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\stdint.h" 3 4
#define INT_FAST64_MIN (-__INT_FAST64_MAX__ - 1)
#define INT_FAST64_MAX __INT_FAST64_MAX__
#define UINT_FAST64_MAX __UINT_FAST64_MAX__
# 392 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\stdint.h" 3 4
#define INTMAX_MAX __INTMAX_MAX__
#define INTMAX_MIN (-INTMAX_MAX - 1)







#define UINTMAX_MAX __UINTMAX_MAX__







#define SIZE_MAX __SIZE_MAX__





#define SIG_ATOMIC_MIN (-__STDINT_EXP(INT_MAX) - 1)
#define SIG_ATOMIC_MAX __STDINT_EXP(INT_MAX)



#define PTRDIFF_MAX __PTRDIFF_MAX__



#define PTRDIFF_MIN (-PTRDIFF_MAX - 1)


#define WCHAR_MAX __WCHAR_MAX__


#define WCHAR_MIN __WCHAR_MIN__




#define WINT_MAX __WINT_MAX__




#define WINT_MIN __WINT_MIN__






#define INT8_C(x) __INT8_C(x)
#define UINT8_C(x) __UINT8_C(x)
# 459 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\stdint.h" 3 4
#define INT16_C(x) __INT16_C(x)
#define UINT16_C(x) __UINT16_C(x)
# 471 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\stdint.h" 3 4
#define INT32_C(x) __INT32_C(x)
#define UINT32_C(x) __UINT32_C(x)
# 484 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\stdint.h" 3 4
#define INT64_C(x) __INT64_C(x)
#define UINT64_C(x) __UINT64_C(x)
# 500 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\stdint.h" 3 4
#define INTMAX_C(x) __INTMAX_C(x)
#define UINTMAX_C(x) __UINTMAX_C(x)
# 10 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\lib\\gcc\\arm-none-eabi\\4.8.4\\include\\stdint.h" 2 3 4



#define _GCC_WRAP_STDINT_H 
# 25 "./src/main/telemetry/mavlink.c" 2
# 1 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\string.h" 1 3







#define _STRING_H_ 

# 1 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\_ansi.h" 1 3
# 13 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\_ansi.h" 3
#define _ANSIDECL_H_ 

# 1 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\newlib.h" 1 3







#define __NEWLIB_H__ 1





#define _NEWLIB_VERSION "2.1.0"






#define _WANT_IO_LONG_LONG 1


#define _WANT_REGISTER_FINI 1
# 40 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\newlib.h" 3
#define _MB_LEN_MAX 1
# 50 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\newlib.h" 3
#define HAVE_INITFINI_ARRAY 1



#define _ATEXIT_DYNAMIC_ALLOC 1


#define _HAVE_LONG_DOUBLE 1


#define _HAVE_CC_INHIBIT_LOOP_TO_LIBCALL 1


#define _LDBL_EQ_DBL 1


#define _FVWRITE_IN_STREAMIO 1


#define _FSEEK_OPTIMIZATION 1


#define _WIDE_ORIENT 1


#define _UNBUF_STREAM_OPT 1
# 16 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\_ansi.h" 2 3
# 1 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\sys\\config.h" 1 3

#define __SYS_CONFIG_H__ 

# 1 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\machine\\ieeefp.h" 1 3
# 60 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\machine\\ieeefp.h" 3
#define __IEEE_LITTLE_ENDIAN 
# 5 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\sys\\config.h" 2 3
# 212 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\sys\\config.h" 3
#define _POINTER_INT long





#undef __RAND_MAX



#define __RAND_MAX 0x7fffffff
# 240 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\sys\\config.h" 3
#define __EXPORT 



#define __IMPORT 






#define _READ_WRITE_RETURN_TYPE int





#define _READ_WRITE_BUFSIZE_TYPE int
# 17 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\_ansi.h" 2 3






#define _HAVE_STDC 
# 44 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\_ansi.h" 3
#define _BEGIN_STD_C 
#define _END_STD_C 
#define _NOTHROW 



#define _PTR void *
#define _AND ,
#define _NOARGS void
#define _CONST const
#define _VOLATILE volatile
#define _SIGNED signed
#define _DOTS , ...
#define _VOID void






#define _EXFUN_NOTHROW(name,proto) name proto _NOTHROW
#define _EXFUN(name,proto) name proto
#define _EXPARM(name,proto) (* name) proto
#define _EXFNPTR(name,proto) (* name) proto

#define _DEFUN(name,arglist,args) name(args)
#define _DEFUN_VOID(name) name(_NOARGS)
#define _CAST_VOID (void)

#define _LONG_DOUBLE long double


#define _LONG_LONG_TYPE long long


#define _PARAMS(paramlist) paramlist
# 105 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\_ansi.h" 3
#define _ATTRIBUTE(attrs) __attribute__ (attrs)
# 131 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\_ansi.h" 3
#define _ELIDABLE_INLINE static __inline__



#define _NOINLINE __attribute__ ((__noinline__))
#define _NOINLINE_STATIC _NOINLINE static
# 11 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\string.h" 2 3
# 1 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\sys\\reent.h" 1 3
# 11 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\sys\\reent.h" 3
#define _SYS_REENT_H_ 

# 1 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\_ansi.h" 1 3
# 14 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\sys\\reent.h" 2 3
# 1 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\lib\\gcc\\arm-none-eabi\\4.8.4\\include\\stddef.h" 1 3 4
# 39 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\lib\\gcc\\arm-none-eabi\\4.8.4\\include\\stddef.h" 3 4
#define _STDDEF_H 
#define _STDDEF_H_ 

#define _ANSI_STDDEF_H 
# 136 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\lib\\gcc\\arm-none-eabi\\4.8.4\\include\\stddef.h" 3 4
#define _PTRDIFF_T 
#define _T_PTRDIFF_ 
#define _T_PTRDIFF 
#define __PTRDIFF_T 
#define _PTRDIFF_T_ 
#define _BSD_PTRDIFF_T_ 
#define ___int_ptrdiff_t_h 
#define _GCC_PTRDIFF_T 



typedef int ptrdiff_t;
# 158 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\lib\\gcc\\arm-none-eabi\\4.8.4\\include\\stddef.h" 3 4
#undef __need_ptrdiff_t
# 184 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\lib\\gcc\\arm-none-eabi\\4.8.4\\include\\stddef.h" 3 4
#define __size_t__ 
#define __SIZE_T__ 
#define _SIZE_T 
#define _SYS_SIZE_T_H 
#define _T_SIZE_ 
#define _T_SIZE 
#define __SIZE_T 
#define _SIZE_T_ 
#define _BSD_SIZE_T_ 
#define _SIZE_T_DEFINED_ 
#define _SIZE_T_DEFINED 
#define _BSD_SIZE_T_DEFINED_ 
#define _SIZE_T_DECLARED 
#define ___int_size_t_h 
#define _GCC_SIZE_T 
#define _SIZET_ 






#define __size_t 





typedef unsigned int size_t;
# 234 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\lib\\gcc\\arm-none-eabi\\4.8.4\\include\\stddef.h" 3 4
#undef __need_size_t
# 263 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\lib\\gcc\\arm-none-eabi\\4.8.4\\include\\stddef.h" 3 4
#define __wchar_t__ 
#define __WCHAR_T__ 
#define _WCHAR_T 
#define _T_WCHAR_ 
#define _T_WCHAR 
#define __WCHAR_T 
#define _WCHAR_T_ 
#define _BSD_WCHAR_T_ 
#define _WCHAR_T_DEFINED_ 
#define _WCHAR_T_DEFINED 
#define _WCHAR_T_H 
#define ___int_wchar_t_h 
#define __INT_WCHAR_T_H 
#define _GCC_WCHAR_T 
#define _WCHAR_T_DECLARED 
# 290 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\lib\\gcc\\arm-none-eabi\\4.8.4\\include\\stddef.h" 3 4
#undef _BSD_WCHAR_T_
# 324 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\lib\\gcc\\arm-none-eabi\\4.8.4\\include\\stddef.h" 3 4
typedef unsigned int wchar_t;
# 343 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\lib\\gcc\\arm-none-eabi\\4.8.4\\include\\stddef.h" 3 4
#undef __need_wchar_t
# 397 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\lib\\gcc\\arm-none-eabi\\4.8.4\\include\\stddef.h" 3 4
#undef NULL




#define NULL ((void *)0)





#undef __need_NULL




#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
# 15 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\sys\\reent.h" 2 3
# 1 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\sys\\_types.h" 1 3
# 10 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\sys\\_types.h" 3
#define _SYS__TYPES_H 

# 1 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\machine\\_types.h" 1 3





#define _MACHINE__TYPES_H 
# 13 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\sys\\_types.h" 2 3
# 1 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\sys\\lock.h" 1 3

#define __SYS_LOCK_H__ 



typedef int _LOCK_T;
typedef int _LOCK_RECURSIVE_T;



#define __LOCK_INIT(class,lock) static int lock = 0;
#define __LOCK_INIT_RECURSIVE(class,lock) static int lock = 0;
#define __lock_init(lock) (_CAST_VOID 0)
#define __lock_init_recursive(lock) (_CAST_VOID 0)
#define __lock_close(lock) (_CAST_VOID 0)
#define __lock_close_recursive(lock) (_CAST_VOID 0)
#define __lock_acquire(lock) (_CAST_VOID 0)
#define __lock_acquire_recursive(lock) (_CAST_VOID 0)
#define __lock_try_acquire(lock) (_CAST_VOID 0)
#define __lock_try_acquire_recursive(lock) (_CAST_VOID 0)
#define __lock_release(lock) (_CAST_VOID 0)
#define __lock_release_recursive(lock) (_CAST_VOID 0)
# 14 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\sys\\_types.h" 2 3


typedef long _off_t;



typedef short __dev_t;



typedef unsigned short __uid_t;


typedef unsigned short __gid_t;



__extension__ typedef long long _off64_t;







typedef long _fpos_t;
# 54 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\sys\\_types.h" 3
#define unsigned signed
typedef signed int _ssize_t;
#undef unsigned
# 66 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\sys\\_types.h" 3
#define __need_wint_t 
# 1 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\lib\\gcc\\arm-none-eabi\\4.8.4\\include\\stddef.h" 1 3 4
# 158 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\lib\\gcc\\arm-none-eabi\\4.8.4\\include\\stddef.h" 3 4
#undef __need_ptrdiff_t
# 234 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\lib\\gcc\\arm-none-eabi\\4.8.4\\include\\stddef.h" 3 4
#undef __need_size_t
# 343 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\lib\\gcc\\arm-none-eabi\\4.8.4\\include\\stddef.h" 3 4
#undef __need_wchar_t




#define _WINT_T 




typedef unsigned int wint_t;

#undef __need_wint_t
# 397 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\lib\\gcc\\arm-none-eabi\\4.8.4\\include\\stddef.h" 3 4
#undef NULL




#define NULL ((void *)0)





#undef __need_NULL




#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
# 68 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\sys\\_types.h" 2 3



typedef struct
{
  int __count;
  union
  {
    wint_t __wch;
    unsigned char __wchb[4];
  } __value;
} _mbstate_t;



typedef _LOCK_RECURSIVE_T _flock_t;




typedef void *_iconv_t;
# 16 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\sys\\reent.h" 2 3

#define _NULL 0



#define __Long long
typedef unsigned long __ULong;
# 38 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\sys\\reent.h" 3
struct _reent;






struct _Bigint
{
  struct _Bigint *_next;
  int _k, _maxwds, _sign, _wds;
  __ULong _x[1];
};


struct __tm
{
  int __tm_sec;
  int __tm_min;
  int __tm_hour;
  int __tm_mday;
  int __tm_mon;
  int __tm_year;
  int __tm_wday;
  int __tm_yday;
  int __tm_isdst;
};





#define _ATEXIT_SIZE 32

struct _on_exit_args {
 void * _fnargs[32];
 void * _dso_handle[32];

 __ULong _fntypes;


 __ULong _is_cxa;
};
# 91 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\sys\\reent.h" 3
struct _atexit {
 struct _atexit *_next;
 int _ind;

 void (*_fns[32])(void);
        struct _on_exit_args _on_exit_args;
};
#define _ATEXIT_INIT {_NULL, 0, {_NULL}, {{_NULL}, {_NULL}, 0, 0}}





#define _REENT_INIT_ATEXIT _NULL, _ATEXIT_INIT,
# 115 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\sys\\reent.h" 3
struct __sbuf {
 unsigned char *_base;
 int _size;
};
# 176 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\sys\\reent.h" 3
#define _REENT_SMALL_CHECK_INIT(ptr) 


struct __sFILE {
  unsigned char *_p;
  int _r;
  int _w;
  short _flags;
  short _file;
  struct __sbuf _bf;
  int _lbfsize;






  void * _cookie;

  int (* _read) (struct _reent *, void *, char *, int)
                                          ;
  int (* _write) (struct _reent *, void *, const char *, int)

                                   ;
  _fpos_t (* _seek) (struct _reent *, void *, _fpos_t, int);
  int (* _close) (struct _reent *, void *);


  struct __sbuf _ub;
  unsigned char *_up;
  int _ur;


  unsigned char _ubuf[3];
  unsigned char _nbuf[1];


  struct __sbuf _lb;


  int _blksize;
  _off_t _offset;


  struct _reent *_data;



  _flock_t _lock;

  _mbstate_t _mbstate;
  int _flags2;
};
# 285 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\sys\\reent.h" 3
typedef struct __sFILE __FILE;



struct _glue
{
  struct _glue *_next;
  int _niobs;
  __FILE *_iobs;
};
# 310 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\sys\\reent.h" 3
#define _RAND48_SEED_0 (0x330e)
#define _RAND48_SEED_1 (0xabcd)
#define _RAND48_SEED_2 (0x1234)
#define _RAND48_MULT_0 (0xe66d)
#define _RAND48_MULT_1 (0xdeec)
#define _RAND48_MULT_2 (0x0005)
#define _RAND48_ADD (0x000b)
struct _rand48 {
  unsigned short _seed[3];
  unsigned short _mult[3];
  unsigned short _add;




};


#define _REENT_EMERGENCY_SIZE 25
#define _REENT_ASCTIME_SIZE 26
#define _REENT_SIGNAL_SIZE 24
# 569 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\sys\\reent.h" 3
struct _reent
{
  int _errno;




  __FILE *_stdin, *_stdout, *_stderr;

  int _inc;
  char _emergency[25];

  int _current_category;
  const char *_current_locale;

  int __sdidinit;

  void (* __cleanup) (struct _reent *);


  struct _Bigint *_result;
  int _result_k;
  struct _Bigint *_p5s;
  struct _Bigint **_freelist;


  int _cvtlen;
  char *_cvtbuf;

  union
    {
      struct
        {
          unsigned int _unused_rand;
          char * _strtok_last;
          char _asctime_buf[26];
          struct __tm _localtime_buf;
          int _gamma_signgam;
          __extension__ unsigned long long _rand_next;
          struct _rand48 _r48;
          _mbstate_t _mblen_state;
          _mbstate_t _mbtowc_state;
          _mbstate_t _wctomb_state;
          char _l64a_buf[8];
          char _signal_buf[24];
          int _getdate_err;
          _mbstate_t _mbrlen_state;
          _mbstate_t _mbrtowc_state;
          _mbstate_t _mbsrtowcs_state;
          _mbstate_t _wcrtomb_state;
          _mbstate_t _wcsrtombs_state;
   int _h_errno;
        } _reent;



      struct
        {
#define _N_LISTS 30
          unsigned char * _nextf[30];
          unsigned int _nmalloc[30];
        } _unused;
    } _new;



  struct _atexit *_atexit;
  struct _atexit _atexit0;



  void (**(_sig_func))(int);




  struct _glue __sglue;
  __FILE __sf[3];
};

#define _REENT_INIT(var) { 0, &(var).__sf[0], &(var).__sf[1], &(var).__sf[2], 0, "", 0, "C", 0, _NULL, _NULL, 0, _NULL, _NULL, 0, _NULL, { { 0, _NULL, "", {0, 0, 0, 0, 0, 0, 0, 0, 0}, 0, 1, { {_RAND48_SEED_0, _RAND48_SEED_1, _RAND48_SEED_2}, {_RAND48_MULT_0, _RAND48_MULT_1, _RAND48_MULT_2}, _RAND48_ADD }, {0, {0}}, {0, {0}}, {0, {0}}, "", "", 0, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}} } }, _REENT_INIT_ATEXIT _NULL, {_NULL, 0, _NULL} }
# 697 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\sys\\reent.h" 3
#define _REENT_INIT_PTR(var) { memset((var), 0, sizeof(*(var))); (var)->_stdin = &(var)->__sf[0]; (var)->_stdout = &(var)->__sf[1]; (var)->_stderr = &(var)->__sf[2]; (var)->_current_locale = "C"; (var)->_new._reent._rand_next = 1; (var)->_new._reent._r48._seed[0] = _RAND48_SEED_0; (var)->_new._reent._r48._seed[1] = _RAND48_SEED_1; (var)->_new._reent._r48._seed[2] = _RAND48_SEED_2; (var)->_new._reent._r48._mult[0] = _RAND48_MULT_0; (var)->_new._reent._r48._mult[1] = _RAND48_MULT_1; (var)->_new._reent._r48._mult[2] = _RAND48_MULT_2; (var)->_new._reent._r48._add = _RAND48_ADD; }
# 713 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\sys\\reent.h" 3
#define _REENT_CHECK_RAND48(ptr) 
#define _REENT_CHECK_MP(ptr) 
#define _REENT_CHECK_TM(ptr) 
#define _REENT_CHECK_ASCTIME_BUF(ptr) 
#define _REENT_CHECK_EMERGENCY(ptr) 
#define _REENT_CHECK_MISC(ptr) 
#define _REENT_CHECK_SIGNAL_BUF(ptr) 

#define _REENT_SIGNGAM(ptr) ((ptr)->_new._reent._gamma_signgam)
#define _REENT_RAND_NEXT(ptr) ((ptr)->_new._reent._rand_next)
#define _REENT_RAND48_SEED(ptr) ((ptr)->_new._reent._r48._seed)
#define _REENT_RAND48_MULT(ptr) ((ptr)->_new._reent._r48._mult)
#define _REENT_RAND48_ADD(ptr) ((ptr)->_new._reent._r48._add)
#define _REENT_MP_RESULT(ptr) ((ptr)->_result)
#define _REENT_MP_RESULT_K(ptr) ((ptr)->_result_k)
#define _REENT_MP_P5S(ptr) ((ptr)->_p5s)
#define _REENT_MP_FREELIST(ptr) ((ptr)->_freelist)
#define _REENT_ASCTIME_BUF(ptr) ((ptr)->_new._reent._asctime_buf)
#define _REENT_TM(ptr) (&(ptr)->_new._reent._localtime_buf)
#define _REENT_EMERGENCY(ptr) ((ptr)->_emergency)
#define _REENT_STRTOK_LAST(ptr) ((ptr)->_new._reent._strtok_last)
#define _REENT_MBLEN_STATE(ptr) ((ptr)->_new._reent._mblen_state)
#define _REENT_MBTOWC_STATE(ptr) ((ptr)->_new._reent._mbtowc_state)
#define _REENT_WCTOMB_STATE(ptr) ((ptr)->_new._reent._wctomb_state)
#define _REENT_MBRLEN_STATE(ptr) ((ptr)->_new._reent._mbrlen_state)
#define _REENT_MBRTOWC_STATE(ptr) ((ptr)->_new._reent._mbrtowc_state)
#define _REENT_MBSRTOWCS_STATE(ptr) ((ptr)->_new._reent._mbsrtowcs_state)
#define _REENT_WCRTOMB_STATE(ptr) ((ptr)->_new._reent._wcrtomb_state)
#define _REENT_WCSRTOMBS_STATE(ptr) ((ptr)->_new._reent._wcsrtombs_state)
#define _REENT_L64A_BUF(ptr) ((ptr)->_new._reent._l64a_buf)
#define _REENT_SIGNAL_BUF(ptr) ((ptr)->_new._reent._signal_buf)
#define _REENT_GETDATE_ERR_P(ptr) (&((ptr)->_new._reent._getdate_err))






#define _Kmax (sizeof (size_t) << 3)







#define __ATTRIBUTE_IMPURE_PTR__ 


extern struct _reent *_impure_ptr ;
extern struct _reent *const _global_impure_ptr ;

void _reclaim_reent (struct _reent *);
# 775 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\sys\\reent.h" 3
#define _REENT _impure_ptr


#define _GLOBAL_REENT _global_impure_ptr





#define _GLOBAL_ATEXIT (_GLOBAL_REENT->_atexit)
# 12 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\string.h" 2 3
# 1 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\lib\\gcc\\arm-none-eabi\\4.8.4\\include-fixed\\sys\\cdefs.h" 1 3 4
# 50 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\lib\\gcc\\arm-none-eabi\\4.8.4\\include-fixed\\sys\\cdefs.h" 3 4
#define _SYS_CDEFS_H_ 



# 1 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\lib\\gcc\\arm-none-eabi\\4.8.4\\include\\stddef.h" 1 3 4
# 55 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\lib\\gcc\\arm-none-eabi\\4.8.4\\include-fixed\\sys\\cdefs.h" 2 3 4

#define __PMT(args) args
#define __DOTS , ...
#define __THROW 


#define __ASMNAME(cname) __XSTRING (__USER_LABEL_PREFIX__) cname


#define __ptr_t void *
#define __long_double_t long double

#define __attribute_malloc__ 
#define __attribute_pure__ 
#define __attribute_format_strfmon__(a,b) 
#define __flexarr [0]


#define __bounded 
#define __unbounded 
#define __ptrvalue 







#define __has_extension __has_feature


#define __has_feature(x) 0


#define __has_include(x) 0


#define __has_builtin(x) 0






#define __BEGIN_DECLS 
#define __END_DECLS 
# 112 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\lib\\gcc\\arm-none-eabi\\4.8.4\\include-fixed\\sys\\cdefs.h" 3 4
#define __GNUCLIKE_ASM 3
#define __GNUCLIKE_MATH_BUILTIN_CONSTANTS 



#define __GNUCLIKE___TYPEOF 1
#define __GNUCLIKE___OFFSETOF 1
#define __GNUCLIKE___SECTION 1


#define __GNUCLIKE_CTOR_SECTION_HANDLING 1


#define __GNUCLIKE_BUILTIN_CONSTANT_P 1






#define __GNUCLIKE_BUILTIN_VARARGS 1
#define __GNUCLIKE_BUILTIN_STDARG 1
#define __GNUCLIKE_BUILTIN_VAALIST 1



#define __GNUC_VA_LIST_COMPATIBILITY 1






#define __compiler_membar() __asm __volatile(" " : : : "memory")



#define __GNUCLIKE_BUILTIN_NEXT_ARG 1
#define __GNUCLIKE_MATH_BUILTIN_RELOPS 


#define __GNUCLIKE_BUILTIN_MEMCPY 1


#define __CC_SUPPORTS_INLINE 1
#define __CC_SUPPORTS___INLINE 1
#define __CC_SUPPORTS___INLINE__ 1

#define __CC_SUPPORTS___FUNC__ 1
#define __CC_SUPPORTS_WARNING 1

#define __CC_SUPPORTS_VARADIC_XXX 1

#define __CC_SUPPORTS_DYNAMIC_ARRAY_INIT 1
# 182 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\lib\\gcc\\arm-none-eabi\\4.8.4\\include-fixed\\sys\\cdefs.h" 3 4
#define __P(protos) protos
#define __CONCAT1(x,y) x ## y
#define __CONCAT(x,y) __CONCAT1(x,y)
#define __STRING(x) #x
#define __XSTRING(x) __STRING(x)

#define __const const
#define __signed signed
#define __volatile volatile
# 255 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\lib\\gcc\\arm-none-eabi\\4.8.4\\include-fixed\\sys\\cdefs.h" 3 4
#define __dead2 __attribute__((__noreturn__))
#define __pure2 __attribute__((__const__))
#define __unused __attribute__((__unused__))
#define __used __attribute__((__used__))
#define __packed __attribute__((__packed__))
#define __aligned(x) __attribute__((__aligned__(x)))
#define __section(x) __attribute__((__section__(x)))
# 290 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\lib\\gcc\\arm-none-eabi\\4.8.4\\include-fixed\\sys\\cdefs.h" 3 4
#define _Alignas(x) __aligned(x)






#define _Alignof(x) __alignof(x)







#define _Atomic(T) struct { T volatile __val; }





#define _Noreturn __dead2
# 335 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\lib\\gcc\\arm-none-eabi\\4.8.4\\include-fixed\\sys\\cdefs.h" 3 4
#define _Thread_local __thread
# 354 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\lib\\gcc\\arm-none-eabi\\4.8.4\\include-fixed\\sys\\cdefs.h" 3 4
#define __generic(expr,t,yes,no) __builtin_choose_expr( __builtin_types_compatible_p(__typeof(expr), t), yes, no)





#define __malloc_like __attribute__((__malloc__))
#define __pure __attribute__((__pure__))






#define __always_inline __attribute__((__always_inline__))





#define __noinline __attribute__ ((__noinline__))





#define __nonnull(x) __attribute__((__nonnull__(x)))





#define __fastcall __attribute__((__fastcall__))





#define __returns_twice __attribute__((__returns_twice__))
# 412 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\lib\\gcc\\arm-none-eabi\\4.8.4\\include-fixed\\sys\\cdefs.h" 3 4
#define __restrict restrict
# 445 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\lib\\gcc\\arm-none-eabi\\4.8.4\\include-fixed\\sys\\cdefs.h" 3 4
#define __predict_true(exp) __builtin_expect((exp), 1)
#define __predict_false(exp) __builtin_expect((exp), 0)






#define __hidden __attribute__((__visibility__("hidden")))
#define __exported __attribute__((__visibility__("default")))





#define __offsetof(type,field) offsetof(type, field)
#define __rangeof(type,start,end) (__offsetof(type, end) - __offsetof(type, start))
# 471 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\lib\\gcc\\arm-none-eabi\\4.8.4\\include-fixed\\sys\\cdefs.h" 3 4
#define __containerof(x,s,m) ({ const volatile __typeof__(((s *)0)->m) *__x = (x); __DEQUALIFY(s *, (const volatile char *)__x - __offsetof(s, m));})
# 493 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\lib\\gcc\\arm-none-eabi\\4.8.4\\include-fixed\\sys\\cdefs.h" 3 4
#define __printflike(fmtarg,firstvararg) __attribute__((__format__ (__printf__, fmtarg, firstvararg)))

#define __scanflike(fmtarg,firstvararg) __attribute__((__format__ (__scanf__, fmtarg, firstvararg)))

#define __format_arg(fmtarg) __attribute__((__format_arg__ (fmtarg)))
#define __strfmonlike(fmtarg,firstvararg) __attribute__((__format__ (__strfmon__, fmtarg, firstvararg)))

#define __strftimelike(fmtarg,firstvararg) __attribute__((__format__ (__strftime__, fmtarg, firstvararg)))
# 510 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\lib\\gcc\\arm-none-eabi\\4.8.4\\include-fixed\\sys\\cdefs.h" 3 4
#define __printf0like(fmtarg,firstvararg) 




#define __strong_reference(sym,aliassym) extern __typeof (sym) aliassym __attribute__ ((__alias__ (#sym)))




#define __weak_reference(sym,alias) __asm__(".weak " #alias); __asm__(".equ " #alias ", " #sym)


#define __warn_references(sym,msg) __asm__(".section .gnu.warning." #sym); __asm__(".asciz \"" msg "\""); __asm__(".previous")



#define __sym_compat(sym,impl,verid) __asm__(".symver " #impl ", " #sym "@" #verid)

#define __sym_default(sym,impl,verid) __asm__(".symver " #impl ", " #sym "@@" #verid)
# 564 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\lib\\gcc\\arm-none-eabi\\4.8.4\\include-fixed\\sys\\cdefs.h" 3 4
#define __FBSDID(s) struct __hack



#define __RCSID(s) struct __hack



#define __RCSID_SOURCE(s) struct __hack



#define __SCCSID(s) struct __hack



#define __COPYRIGHT(s) struct __hack



#define __DECONST(type,var) ((type)(__uintptr_t)(const void *)(var))



#define __DEVOLATILE(type,var) ((type)(__uintptr_t)(volatile void *)(var))



#define __DEQUALIFY(type,var) ((type)(__uintptr_t)(const volatile void *)(var))
# 712 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\lib\\gcc\\arm-none-eabi\\4.8.4\\include-fixed\\sys\\cdefs.h" 3 4
#define __POSIX_VISIBLE 200809
#define __XSI_VISIBLE 700
#define __BSD_VISIBLE 1
#define __ISO_C_VISIBLE 2011
# 13 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\string.h" 2 3


#define __need_size_t 
#define __need_NULL 
# 1 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\lib\\gcc\\arm-none-eabi\\4.8.4\\include\\stddef.h" 1 3 4
# 158 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\lib\\gcc\\arm-none-eabi\\4.8.4\\include\\stddef.h" 3 4
#undef __need_ptrdiff_t
# 234 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\lib\\gcc\\arm-none-eabi\\4.8.4\\include\\stddef.h" 3 4
#undef __need_size_t
# 343 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\lib\\gcc\\arm-none-eabi\\4.8.4\\include\\stddef.h" 3 4
#undef __need_wchar_t
# 397 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\lib\\gcc\\arm-none-eabi\\4.8.4\\include\\stddef.h" 3 4
#undef NULL




#define NULL ((void *)0)





#undef __need_NULL




#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
# 18 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\string.h" 2 3



void * memchr (const void *, int, size_t);
int memcmp (const void *, const void *, size_t);
void * memcpy (void * restrict, const void * restrict, size_t);
void * memmove (void *, const void *, size_t);
void * memset (void *, int, size_t);
char *strcat (char *restrict, const char *restrict);
char *strchr (const char *, int);
int strcmp (const char *, const char *);
int strcoll (const char *, const char *);
char *strcpy (char *restrict, const char *restrict);
size_t strcspn (const char *, const char *);
char *strerror (int);
size_t strlen (const char *);
char *strncat (char *restrict, const char *restrict, size_t);
int strncmp (const char *, const char *, size_t);
char *strncpy (char *restrict, const char *restrict, size_t);
char *strpbrk (const char *, const char *);
char *strrchr (const char *, int);
size_t strspn (const char *, const char *);
char *strstr (const char *, const char *);


char *strtok (char *restrict, const char *restrict);


size_t strxfrm (char *restrict, const char *restrict, size_t);


char *strtok_r (char *restrict, const char *restrict, char **restrict);

int bcmp (const void *, const void *, size_t);
void bcopy (const void *, void *, size_t);
void bzero (void *, size_t);
int ffs (int);
char *index (const char *, int);
void * memccpy (void * restrict, const void * restrict, int, size_t);
void * mempcpy (void *, const void *, size_t);
void * memmem (const void *, size_t, const void *, size_t);
void * memrchr (const void *, int, size_t);
void * rawmemchr (const void *, int);
char *rindex (const char *, int);
char *stpcpy (char *restrict, const char *restrict);
char *stpncpy (char *restrict, const char *restrict, size_t);
int strcasecmp (const char *, const char *);
char *strcasestr (const char *, const char *);
char *strchrnul (const char *, int);


char *strdup (const char *);


char *_strdup_r (struct _reent *, const char *);


char *strndup (const char *, size_t);


char *_strndup_r (struct _reent *, const char *, size_t);
# 87 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\string.h" 3
int strerror_r (int, char *, size_t) __asm__ ("" "__xpg_strerror_r");





size_t strlcat (char *, const char *, size_t);
size_t strlcpy (char *, const char *, size_t);
int strncasecmp (const char *, const char *, size_t);
size_t strnlen (const char *, size_t);
char *strsep (char **, const char *);
char *strlwr (char *);
char *strupr (char *);

char *strsignal (int __signo);






char * _strerror_r (struct _reent *, int, int, int *);
# 126 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\string.h" 3
#define strcmpi strcasecmp


#define stricmp strcasecmp


#define strncmpi strncasecmp


#define strnicmp strncasecmp




# 1 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\sys\\string.h" 1 3
# 141 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\string.h" 2 3


# 26 "./src/main/telemetry/mavlink.c" 2

# 1 "./src/main/platform.h" 1
# 18 "./src/main/platform.h"
       
# 35 "./src/main/platform.h"
# 1 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x_conf.h" 1
# 24 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x_conf.h"
#define __STM32F10x_CONF_H 



# 1 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_adc.h" 1
# 25 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_adc.h"
#define __STM32F10x_ADC_H 






# 1 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h" 1
# 51 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
#define __STM32F10x_H 
# 119 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
#define HSE_VALUE ((uint32_t)8000000)
# 128 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
#define HSE_STARTUP_TIMEOUT ((uint16_t)0x0500)

#define HSI_VALUE ((uint32_t)8000000)




#define __STM32F10X_STDPERIPH_VERSION_MAIN (0x03)
#define __STM32F10X_STDPERIPH_VERSION_SUB1 (0x05)
#define __STM32F10X_STDPERIPH_VERSION_SUB2 (0x00)
#define __STM32F10X_STDPERIPH_VERSION_RC (0x00)
#define __STM32F10X_STDPERIPH_VERSION ( (__STM32F10X_STDPERIPH_VERSION_MAIN << 24) |(__STM32F10X_STDPERIPH_VERSION_SUB1 << 16) |(__STM32F10X_STDPERIPH_VERSION_SUB2 << 8) |(__STM32F10X_STDPERIPH_VERSION_RC))
# 158 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
#define __MPU_PRESENT 0

#define __NVIC_PRIO_BITS 4
#define __Vendor_SysTickConfig 0





typedef enum IRQn
{

  NonMaskableInt_IRQn = -14,
  MemoryManagement_IRQn = -12,
  BusFault_IRQn = -11,
  UsageFault_IRQn = -10,
  SVCall_IRQn = -5,
  DebugMonitor_IRQn = -4,
  PendSV_IRQn = -2,
  SysTick_IRQn = -1,


  WWDG_IRQn = 0,
  PVD_IRQn = 1,
  TAMPER_IRQn = 2,
  RTC_IRQn = 3,
  FLASH_IRQn = 4,
  RCC_IRQn = 5,
  EXTI0_IRQn = 6,
  EXTI1_IRQn = 7,
  EXTI2_IRQn = 8,
  EXTI3_IRQn = 9,
  EXTI4_IRQn = 10,
  DMA1_Channel1_IRQn = 11,
  DMA1_Channel2_IRQn = 12,
  DMA1_Channel3_IRQn = 13,
  DMA1_Channel4_IRQn = 14,
  DMA1_Channel5_IRQn = 15,
  DMA1_Channel6_IRQn = 16,
  DMA1_Channel7_IRQn = 17,
# 244 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
  ADC1_2_IRQn = 18,
  USB_HP_CAN1_TX_IRQn = 19,
  USB_LP_CAN1_RX0_IRQn = 20,
  CAN1_RX1_IRQn = 21,
  CAN1_SCE_IRQn = 22,
  EXTI9_5_IRQn = 23,
  TIM1_BRK_IRQn = 24,
  TIM1_UP_IRQn = 25,
  TIM1_TRG_COM_IRQn = 26,
  TIM1_CC_IRQn = 27,
  TIM2_IRQn = 28,
  TIM3_IRQn = 29,
  TIM4_IRQn = 30,
  I2C1_EV_IRQn = 31,
  I2C1_ER_IRQn = 32,
  I2C2_EV_IRQn = 33,
  I2C2_ER_IRQn = 34,
  SPI1_IRQn = 35,
  SPI2_IRQn = 36,
  USART1_IRQn = 37,
  USART2_IRQn = 38,
  USART3_IRQn = 39,
  EXTI15_10_IRQn = 40,
  RTCAlarm_IRQn = 41,
  USBWakeUp_IRQn = 42
# 472 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
} IRQn_Type;





# 1 "./lib/main/CMSIS/CM3/CoreSupport/core_cm3.h" 1
# 25 "./lib/main/CMSIS/CM3/CoreSupport/core_cm3.h"
#define __CM3_CORE_H__ 
# 84 "./lib/main/CMSIS/CM3/CoreSupport/core_cm3.h"
#define __CM3_CMSIS_VERSION_MAIN (0x01)
#define __CM3_CMSIS_VERSION_SUB (0x30)
#define __CM3_CMSIS_VERSION ((__CM3_CMSIS_VERSION_MAIN << 16) | __CM3_CMSIS_VERSION_SUB)

#define __CORTEX_M (0x03)
# 113 "./lib/main/CMSIS/CM3/CoreSupport/core_cm3.h"
#define __I volatile const

#define __O volatile
#define __IO volatile
# 132 "./lib/main/CMSIS/CM3/CoreSupport/core_cm3.h"
typedef struct
{
  volatile uint32_t ISER[8];
       uint32_t RESERVED0[24];
  volatile uint32_t ICER[8];
       uint32_t RSERVED1[24];
  volatile uint32_t ISPR[8];
       uint32_t RESERVED2[24];
  volatile uint32_t ICPR[8];
       uint32_t RESERVED3[24];
  volatile uint32_t IABR[8];
       uint32_t RESERVED4[56];
  volatile uint8_t IP[240];
       uint32_t RESERVED5[644];
  volatile uint32_t STIR;
} NVIC_Type;







typedef struct
{
  volatile const uint32_t CPUID;
  volatile uint32_t ICSR;
  volatile uint32_t VTOR;
  volatile uint32_t AIRCR;
  volatile uint32_t SCR;
  volatile uint32_t CCR;
  volatile uint8_t SHP[12];
  volatile uint32_t SHCSR;
  volatile uint32_t CFSR;
  volatile uint32_t HFSR;
  volatile uint32_t DFSR;
  volatile uint32_t MMFAR;
  volatile uint32_t BFAR;
  volatile uint32_t AFSR;
  volatile const uint32_t PFR[2];
  volatile const uint32_t DFR;
  volatile const uint32_t ADR;
  volatile const uint32_t MMFR[4];
  volatile const uint32_t ISAR[5];
} SCB_Type;


#define SCB_CPUID_IMPLEMENTER_Pos 24
#define SCB_CPUID_IMPLEMENTER_Msk (0xFFul << SCB_CPUID_IMPLEMENTER_Pos)

#define SCB_CPUID_VARIANT_Pos 20
#define SCB_CPUID_VARIANT_Msk (0xFul << SCB_CPUID_VARIANT_Pos)

#define SCB_CPUID_PARTNO_Pos 4
#define SCB_CPUID_PARTNO_Msk (0xFFFul << SCB_CPUID_PARTNO_Pos)

#define SCB_CPUID_REVISION_Pos 0
#define SCB_CPUID_REVISION_Msk (0xFul << SCB_CPUID_REVISION_Pos)


#define SCB_ICSR_NMIPENDSET_Pos 31
#define SCB_ICSR_NMIPENDSET_Msk (1ul << SCB_ICSR_NMIPENDSET_Pos)

#define SCB_ICSR_PENDSVSET_Pos 28
#define SCB_ICSR_PENDSVSET_Msk (1ul << SCB_ICSR_PENDSVSET_Pos)

#define SCB_ICSR_PENDSVCLR_Pos 27
#define SCB_ICSR_PENDSVCLR_Msk (1ul << SCB_ICSR_PENDSVCLR_Pos)

#define SCB_ICSR_PENDSTSET_Pos 26
#define SCB_ICSR_PENDSTSET_Msk (1ul << SCB_ICSR_PENDSTSET_Pos)

#define SCB_ICSR_PENDSTCLR_Pos 25
#define SCB_ICSR_PENDSTCLR_Msk (1ul << SCB_ICSR_PENDSTCLR_Pos)

#define SCB_ICSR_ISRPREEMPT_Pos 23
#define SCB_ICSR_ISRPREEMPT_Msk (1ul << SCB_ICSR_ISRPREEMPT_Pos)

#define SCB_ICSR_ISRPENDING_Pos 22
#define SCB_ICSR_ISRPENDING_Msk (1ul << SCB_ICSR_ISRPENDING_Pos)

#define SCB_ICSR_VECTPENDING_Pos 12
#define SCB_ICSR_VECTPENDING_Msk (0x1FFul << SCB_ICSR_VECTPENDING_Pos)

#define SCB_ICSR_RETTOBASE_Pos 11
#define SCB_ICSR_RETTOBASE_Msk (1ul << SCB_ICSR_RETTOBASE_Pos)

#define SCB_ICSR_VECTACTIVE_Pos 0
#define SCB_ICSR_VECTACTIVE_Msk (0x1FFul << SCB_ICSR_VECTACTIVE_Pos)


#define SCB_VTOR_TBLBASE_Pos 29
#define SCB_VTOR_TBLBASE_Msk (0x1FFul << SCB_VTOR_TBLBASE_Pos)

#define SCB_VTOR_TBLOFF_Pos 7
#define SCB_VTOR_TBLOFF_Msk (0x3FFFFFul << SCB_VTOR_TBLOFF_Pos)


#define SCB_AIRCR_VECTKEY_Pos 16
#define SCB_AIRCR_VECTKEY_Msk (0xFFFFul << SCB_AIRCR_VECTKEY_Pos)

#define SCB_AIRCR_VECTKEYSTAT_Pos 16
#define SCB_AIRCR_VECTKEYSTAT_Msk (0xFFFFul << SCB_AIRCR_VECTKEYSTAT_Pos)

#define SCB_AIRCR_ENDIANESS_Pos 15
#define SCB_AIRCR_ENDIANESS_Msk (1ul << SCB_AIRCR_ENDIANESS_Pos)

#define SCB_AIRCR_PRIGROUP_Pos 8
#define SCB_AIRCR_PRIGROUP_Msk (7ul << SCB_AIRCR_PRIGROUP_Pos)

#define SCB_AIRCR_SYSRESETREQ_Pos 2
#define SCB_AIRCR_SYSRESETREQ_Msk (1ul << SCB_AIRCR_SYSRESETREQ_Pos)

#define SCB_AIRCR_VECTCLRACTIVE_Pos 1
#define SCB_AIRCR_VECTCLRACTIVE_Msk (1ul << SCB_AIRCR_VECTCLRACTIVE_Pos)

#define SCB_AIRCR_VECTRESET_Pos 0
#define SCB_AIRCR_VECTRESET_Msk (1ul << SCB_AIRCR_VECTRESET_Pos)


#define SCB_SCR_SEVONPEND_Pos 4
#define SCB_SCR_SEVONPEND_Msk (1ul << SCB_SCR_SEVONPEND_Pos)

#define SCB_SCR_SLEEPDEEP_Pos 2
#define SCB_SCR_SLEEPDEEP_Msk (1ul << SCB_SCR_SLEEPDEEP_Pos)

#define SCB_SCR_SLEEPONEXIT_Pos 1
#define SCB_SCR_SLEEPONEXIT_Msk (1ul << SCB_SCR_SLEEPONEXIT_Pos)


#define SCB_CCR_STKALIGN_Pos 9
#define SCB_CCR_STKALIGN_Msk (1ul << SCB_CCR_STKALIGN_Pos)

#define SCB_CCR_BFHFNMIGN_Pos 8
#define SCB_CCR_BFHFNMIGN_Msk (1ul << SCB_CCR_BFHFNMIGN_Pos)

#define SCB_CCR_DIV_0_TRP_Pos 4
#define SCB_CCR_DIV_0_TRP_Msk (1ul << SCB_CCR_DIV_0_TRP_Pos)

#define SCB_CCR_UNALIGN_TRP_Pos 3
#define SCB_CCR_UNALIGN_TRP_Msk (1ul << SCB_CCR_UNALIGN_TRP_Pos)

#define SCB_CCR_USERSETMPEND_Pos 1
#define SCB_CCR_USERSETMPEND_Msk (1ul << SCB_CCR_USERSETMPEND_Pos)

#define SCB_CCR_NONBASETHRDENA_Pos 0
#define SCB_CCR_NONBASETHRDENA_Msk (1ul << SCB_CCR_NONBASETHRDENA_Pos)


#define SCB_SHCSR_USGFAULTENA_Pos 18
#define SCB_SHCSR_USGFAULTENA_Msk (1ul << SCB_SHCSR_USGFAULTENA_Pos)

#define SCB_SHCSR_BUSFAULTENA_Pos 17
#define SCB_SHCSR_BUSFAULTENA_Msk (1ul << SCB_SHCSR_BUSFAULTENA_Pos)

#define SCB_SHCSR_MEMFAULTENA_Pos 16
#define SCB_SHCSR_MEMFAULTENA_Msk (1ul << SCB_SHCSR_MEMFAULTENA_Pos)

#define SCB_SHCSR_SVCALLPENDED_Pos 15
#define SCB_SHCSR_SVCALLPENDED_Msk (1ul << SCB_SHCSR_SVCALLPENDED_Pos)

#define SCB_SHCSR_BUSFAULTPENDED_Pos 14
#define SCB_SHCSR_BUSFAULTPENDED_Msk (1ul << SCB_SHCSR_BUSFAULTPENDED_Pos)

#define SCB_SHCSR_MEMFAULTPENDED_Pos 13
#define SCB_SHCSR_MEMFAULTPENDED_Msk (1ul << SCB_SHCSR_MEMFAULTPENDED_Pos)

#define SCB_SHCSR_USGFAULTPENDED_Pos 12
#define SCB_SHCSR_USGFAULTPENDED_Msk (1ul << SCB_SHCSR_USGFAULTPENDED_Pos)

#define SCB_SHCSR_SYSTICKACT_Pos 11
#define SCB_SHCSR_SYSTICKACT_Msk (1ul << SCB_SHCSR_SYSTICKACT_Pos)

#define SCB_SHCSR_PENDSVACT_Pos 10
#define SCB_SHCSR_PENDSVACT_Msk (1ul << SCB_SHCSR_PENDSVACT_Pos)

#define SCB_SHCSR_MONITORACT_Pos 8
#define SCB_SHCSR_MONITORACT_Msk (1ul << SCB_SHCSR_MONITORACT_Pos)

#define SCB_SHCSR_SVCALLACT_Pos 7
#define SCB_SHCSR_SVCALLACT_Msk (1ul << SCB_SHCSR_SVCALLACT_Pos)

#define SCB_SHCSR_USGFAULTACT_Pos 3
#define SCB_SHCSR_USGFAULTACT_Msk (1ul << SCB_SHCSR_USGFAULTACT_Pos)

#define SCB_SHCSR_BUSFAULTACT_Pos 1
#define SCB_SHCSR_BUSFAULTACT_Msk (1ul << SCB_SHCSR_BUSFAULTACT_Pos)

#define SCB_SHCSR_MEMFAULTACT_Pos 0
#define SCB_SHCSR_MEMFAULTACT_Msk (1ul << SCB_SHCSR_MEMFAULTACT_Pos)


#define SCB_CFSR_USGFAULTSR_Pos 16
#define SCB_CFSR_USGFAULTSR_Msk (0xFFFFul << SCB_CFSR_USGFAULTSR_Pos)

#define SCB_CFSR_BUSFAULTSR_Pos 8
#define SCB_CFSR_BUSFAULTSR_Msk (0xFFul << SCB_CFSR_BUSFAULTSR_Pos)

#define SCB_CFSR_MEMFAULTSR_Pos 0
#define SCB_CFSR_MEMFAULTSR_Msk (0xFFul << SCB_CFSR_MEMFAULTSR_Pos)


#define SCB_HFSR_DEBUGEVT_Pos 31
#define SCB_HFSR_DEBUGEVT_Msk (1ul << SCB_HFSR_DEBUGEVT_Pos)

#define SCB_HFSR_FORCED_Pos 30
#define SCB_HFSR_FORCED_Msk (1ul << SCB_HFSR_FORCED_Pos)

#define SCB_HFSR_VECTTBL_Pos 1
#define SCB_HFSR_VECTTBL_Msk (1ul << SCB_HFSR_VECTTBL_Pos)


#define SCB_DFSR_EXTERNAL_Pos 4
#define SCB_DFSR_EXTERNAL_Msk (1ul << SCB_DFSR_EXTERNAL_Pos)

#define SCB_DFSR_VCATCH_Pos 3
#define SCB_DFSR_VCATCH_Msk (1ul << SCB_DFSR_VCATCH_Pos)

#define SCB_DFSR_DWTTRAP_Pos 2
#define SCB_DFSR_DWTTRAP_Msk (1ul << SCB_DFSR_DWTTRAP_Pos)

#define SCB_DFSR_BKPT_Pos 1
#define SCB_DFSR_BKPT_Msk (1ul << SCB_DFSR_BKPT_Pos)

#define SCB_DFSR_HALTED_Pos 0
#define SCB_DFSR_HALTED_Msk (1ul << SCB_DFSR_HALTED_Pos)







typedef struct
{
  volatile uint32_t CTRL;
  volatile uint32_t LOAD;
  volatile uint32_t VAL;
  volatile const uint32_t CALIB;
} SysTick_Type;


#define SysTick_CTRL_COUNTFLAG_Pos 16
#define SysTick_CTRL_COUNTFLAG_Msk (1ul << SysTick_CTRL_COUNTFLAG_Pos)

#define SysTick_CTRL_CLKSOURCE_Pos 2
#define SysTick_CTRL_CLKSOURCE_Msk (1ul << SysTick_CTRL_CLKSOURCE_Pos)

#define SysTick_CTRL_TICKINT_Pos 1
#define SysTick_CTRL_TICKINT_Msk (1ul << SysTick_CTRL_TICKINT_Pos)

#define SysTick_CTRL_ENABLE_Pos 0
#define SysTick_CTRL_ENABLE_Msk (1ul << SysTick_CTRL_ENABLE_Pos)


#define SysTick_LOAD_RELOAD_Pos 0
#define SysTick_LOAD_RELOAD_Msk (0xFFFFFFul << SysTick_LOAD_RELOAD_Pos)


#define SysTick_VAL_CURRENT_Pos 0
#define SysTick_VAL_CURRENT_Msk (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)


#define SysTick_CALIB_NOREF_Pos 31
#define SysTick_CALIB_NOREF_Msk (1ul << SysTick_CALIB_NOREF_Pos)

#define SysTick_CALIB_SKEW_Pos 30
#define SysTick_CALIB_SKEW_Msk (1ul << SysTick_CALIB_SKEW_Pos)

#define SysTick_CALIB_TENMS_Pos 0
#define SysTick_CALIB_TENMS_Msk (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)







typedef struct
{
  volatile union
  {
    volatile uint8_t u8;
    volatile uint16_t u16;
    volatile uint32_t u32;
  } PORT [32];
       uint32_t RESERVED0[864];
  volatile uint32_t TER;
       uint32_t RESERVED1[15];
  volatile uint32_t TPR;
       uint32_t RESERVED2[15];
  volatile uint32_t TCR;
       uint32_t RESERVED3[29];
  volatile uint32_t IWR;
  volatile uint32_t IRR;
  volatile uint32_t IMCR;
       uint32_t RESERVED4[43];
  volatile uint32_t LAR;
  volatile uint32_t LSR;
       uint32_t RESERVED5[6];
  volatile const uint32_t PID4;
  volatile const uint32_t PID5;
  volatile const uint32_t PID6;
  volatile const uint32_t PID7;
  volatile const uint32_t PID0;
  volatile const uint32_t PID1;
  volatile const uint32_t PID2;
  volatile const uint32_t PID3;
  volatile const uint32_t CID0;
  volatile const uint32_t CID1;
  volatile const uint32_t CID2;
  volatile const uint32_t CID3;
} ITM_Type;


#define ITM_TPR_PRIVMASK_Pos 0
#define ITM_TPR_PRIVMASK_Msk (0xFul << ITM_TPR_PRIVMASK_Pos)


#define ITM_TCR_BUSY_Pos 23
#define ITM_TCR_BUSY_Msk (1ul << ITM_TCR_BUSY_Pos)

#define ITM_TCR_ATBID_Pos 16
#define ITM_TCR_ATBID_Msk (0x7Ful << ITM_TCR_ATBID_Pos)

#define ITM_TCR_TSPrescale_Pos 8
#define ITM_TCR_TSPrescale_Msk (3ul << ITM_TCR_TSPrescale_Pos)

#define ITM_TCR_SWOENA_Pos 4
#define ITM_TCR_SWOENA_Msk (1ul << ITM_TCR_SWOENA_Pos)

#define ITM_TCR_DWTENA_Pos 3
#define ITM_TCR_DWTENA_Msk (1ul << ITM_TCR_DWTENA_Pos)

#define ITM_TCR_SYNCENA_Pos 2
#define ITM_TCR_SYNCENA_Msk (1ul << ITM_TCR_SYNCENA_Pos)

#define ITM_TCR_TSENA_Pos 1
#define ITM_TCR_TSENA_Msk (1ul << ITM_TCR_TSENA_Pos)

#define ITM_TCR_ITMENA_Pos 0
#define ITM_TCR_ITMENA_Msk (1ul << ITM_TCR_ITMENA_Pos)


#define ITM_IWR_ATVALIDM_Pos 0
#define ITM_IWR_ATVALIDM_Msk (1ul << ITM_IWR_ATVALIDM_Pos)


#define ITM_IRR_ATREADYM_Pos 0
#define ITM_IRR_ATREADYM_Msk (1ul << ITM_IRR_ATREADYM_Pos)


#define ITM_IMCR_INTEGRATION_Pos 0
#define ITM_IMCR_INTEGRATION_Msk (1ul << ITM_IMCR_INTEGRATION_Pos)


#define ITM_LSR_ByteAcc_Pos 2
#define ITM_LSR_ByteAcc_Msk (1ul << ITM_LSR_ByteAcc_Pos)

#define ITM_LSR_Access_Pos 1
#define ITM_LSR_Access_Msk (1ul << ITM_LSR_Access_Pos)

#define ITM_LSR_Present_Pos 0
#define ITM_LSR_Present_Msk (1ul << ITM_LSR_Present_Pos)







typedef struct
{
       uint32_t RESERVED0;
  volatile const uint32_t ICTR;



       uint32_t RESERVED1;

} InterruptType_Type;


#define InterruptType_ICTR_INTLINESNUM_Pos 0
#define InterruptType_ICTR_INTLINESNUM_Msk (0x1Ful << InterruptType_ICTR_INTLINESNUM_Pos)


#define InterruptType_ACTLR_DISFOLD_Pos 2
#define InterruptType_ACTLR_DISFOLD_Msk (1ul << InterruptType_ACTLR_DISFOLD_Pos)

#define InterruptType_ACTLR_DISDEFWBUF_Pos 1
#define InterruptType_ACTLR_DISDEFWBUF_Msk (1ul << InterruptType_ACTLR_DISDEFWBUF_Pos)

#define InterruptType_ACTLR_DISMCYCINT_Pos 0
#define InterruptType_ACTLR_DISMCYCINT_Msk (1ul << InterruptType_ACTLR_DISMCYCINT_Pos)
# 620 "./lib/main/CMSIS/CM3/CoreSupport/core_cm3.h"
typedef struct
{
  volatile uint32_t DHCSR;
  volatile uint32_t DCRSR;
  volatile uint32_t DCRDR;
  volatile uint32_t DEMCR;
} CoreDebug_Type;


#define CoreDebug_DHCSR_DBGKEY_Pos 16
#define CoreDebug_DHCSR_DBGKEY_Msk (0xFFFFul << CoreDebug_DHCSR_DBGKEY_Pos)

#define CoreDebug_DHCSR_S_RESET_ST_Pos 25
#define CoreDebug_DHCSR_S_RESET_ST_Msk (1ul << CoreDebug_DHCSR_S_RESET_ST_Pos)

#define CoreDebug_DHCSR_S_RETIRE_ST_Pos 24
#define CoreDebug_DHCSR_S_RETIRE_ST_Msk (1ul << CoreDebug_DHCSR_S_RETIRE_ST_Pos)

#define CoreDebug_DHCSR_S_LOCKUP_Pos 19
#define CoreDebug_DHCSR_S_LOCKUP_Msk (1ul << CoreDebug_DHCSR_S_LOCKUP_Pos)

#define CoreDebug_DHCSR_S_SLEEP_Pos 18
#define CoreDebug_DHCSR_S_SLEEP_Msk (1ul << CoreDebug_DHCSR_S_SLEEP_Pos)

#define CoreDebug_DHCSR_S_HALT_Pos 17
#define CoreDebug_DHCSR_S_HALT_Msk (1ul << CoreDebug_DHCSR_S_HALT_Pos)

#define CoreDebug_DHCSR_S_REGRDY_Pos 16
#define CoreDebug_DHCSR_S_REGRDY_Msk (1ul << CoreDebug_DHCSR_S_REGRDY_Pos)

#define CoreDebug_DHCSR_C_SNAPSTALL_Pos 5
#define CoreDebug_DHCSR_C_SNAPSTALL_Msk (1ul << CoreDebug_DHCSR_C_SNAPSTALL_Pos)

#define CoreDebug_DHCSR_C_MASKINTS_Pos 3
#define CoreDebug_DHCSR_C_MASKINTS_Msk (1ul << CoreDebug_DHCSR_C_MASKINTS_Pos)

#define CoreDebug_DHCSR_C_STEP_Pos 2
#define CoreDebug_DHCSR_C_STEP_Msk (1ul << CoreDebug_DHCSR_C_STEP_Pos)

#define CoreDebug_DHCSR_C_HALT_Pos 1
#define CoreDebug_DHCSR_C_HALT_Msk (1ul << CoreDebug_DHCSR_C_HALT_Pos)

#define CoreDebug_DHCSR_C_DEBUGEN_Pos 0
#define CoreDebug_DHCSR_C_DEBUGEN_Msk (1ul << CoreDebug_DHCSR_C_DEBUGEN_Pos)


#define CoreDebug_DCRSR_REGWnR_Pos 16
#define CoreDebug_DCRSR_REGWnR_Msk (1ul << CoreDebug_DCRSR_REGWnR_Pos)

#define CoreDebug_DCRSR_REGSEL_Pos 0
#define CoreDebug_DCRSR_REGSEL_Msk (0x1Ful << CoreDebug_DCRSR_REGSEL_Pos)


#define CoreDebug_DEMCR_TRCENA_Pos 24
#define CoreDebug_DEMCR_TRCENA_Msk (1ul << CoreDebug_DEMCR_TRCENA_Pos)

#define CoreDebug_DEMCR_MON_REQ_Pos 19
#define CoreDebug_DEMCR_MON_REQ_Msk (1ul << CoreDebug_DEMCR_MON_REQ_Pos)

#define CoreDebug_DEMCR_MON_STEP_Pos 18
#define CoreDebug_DEMCR_MON_STEP_Msk (1ul << CoreDebug_DEMCR_MON_STEP_Pos)

#define CoreDebug_DEMCR_MON_PEND_Pos 17
#define CoreDebug_DEMCR_MON_PEND_Msk (1ul << CoreDebug_DEMCR_MON_PEND_Pos)

#define CoreDebug_DEMCR_MON_EN_Pos 16
#define CoreDebug_DEMCR_MON_EN_Msk (1ul << CoreDebug_DEMCR_MON_EN_Pos)

#define CoreDebug_DEMCR_VC_HARDERR_Pos 10
#define CoreDebug_DEMCR_VC_HARDERR_Msk (1ul << CoreDebug_DEMCR_VC_HARDERR_Pos)

#define CoreDebug_DEMCR_VC_INTERR_Pos 9
#define CoreDebug_DEMCR_VC_INTERR_Msk (1ul << CoreDebug_DEMCR_VC_INTERR_Pos)

#define CoreDebug_DEMCR_VC_BUSERR_Pos 8
#define CoreDebug_DEMCR_VC_BUSERR_Msk (1ul << CoreDebug_DEMCR_VC_BUSERR_Pos)

#define CoreDebug_DEMCR_VC_STATERR_Pos 7
#define CoreDebug_DEMCR_VC_STATERR_Msk (1ul << CoreDebug_DEMCR_VC_STATERR_Pos)

#define CoreDebug_DEMCR_VC_CHKERR_Pos 6
#define CoreDebug_DEMCR_VC_CHKERR_Msk (1ul << CoreDebug_DEMCR_VC_CHKERR_Pos)

#define CoreDebug_DEMCR_VC_NOCPERR_Pos 5
#define CoreDebug_DEMCR_VC_NOCPERR_Msk (1ul << CoreDebug_DEMCR_VC_NOCPERR_Pos)

#define CoreDebug_DEMCR_VC_MMERR_Pos 4
#define CoreDebug_DEMCR_VC_MMERR_Msk (1ul << CoreDebug_DEMCR_VC_MMERR_Pos)

#define CoreDebug_DEMCR_VC_CORERESET_Pos 0
#define CoreDebug_DEMCR_VC_CORERESET_Msk (1ul << CoreDebug_DEMCR_VC_CORERESET_Pos)




#define SCS_BASE (0xE000E000)
#define ITM_BASE (0xE0000000)
#define CoreDebug_BASE (0xE000EDF0)
#define SysTick_BASE (SCS_BASE + 0x0010)
#define NVIC_BASE (SCS_BASE + 0x0100)
#define SCB_BASE (SCS_BASE + 0x0D00)

#define InterruptType ((InterruptType_Type *) SCS_BASE)
#define SCB ((SCB_Type *) SCB_BASE)
#define SysTick ((SysTick_Type *) SysTick_BASE)
#define NVIC ((NVIC_Type *) NVIC_BASE)
#define ITM ((ITM_Type *) ITM_BASE)
#define CoreDebug ((CoreDebug_Type *) CoreDebug_BASE)
# 750 "./lib/main/CMSIS/CM3/CoreSupport/core_cm3.h"
#define __ASM __asm
#define __INLINE inline
# 1204 "./lib/main/CMSIS/CM3/CoreSupport/core_cm3.h"
static inline void __enable_irq() { __asm volatile ("cpsie i"); }
static inline void __disable_irq() { __asm volatile ("cpsid i"); }

static inline void __enable_fault_irq() { __asm volatile ("cpsie f"); }
static inline void __disable_fault_irq() { __asm volatile ("cpsid f"); }

static inline void __NOP() { __asm volatile ("nop"); }
static inline void __WFI() { __asm volatile ("wfi"); }
static inline void __WFE() { __asm volatile ("wfe"); }
static inline void __SEV() { __asm volatile ("sev"); }
static inline void __ISB() { __asm volatile ("isb"); }
static inline void __DSB() { __asm volatile ("dsb"); }
static inline void __DMB() { __asm volatile ("dmb"); }
static inline void __CLREX() { __asm volatile ("clrex"); }
# 1227 "./lib/main/CMSIS/CM3/CoreSupport/core_cm3.h"
extern uint32_t __get_PSP(void);
# 1237 "./lib/main/CMSIS/CM3/CoreSupport/core_cm3.h"
extern void __set_PSP(uint32_t topOfProcStack);
# 1247 "./lib/main/CMSIS/CM3/CoreSupport/core_cm3.h"
extern uint32_t __get_MSP(void);
# 1257 "./lib/main/CMSIS/CM3/CoreSupport/core_cm3.h"
extern void __set_MSP(uint32_t topOfMainStack);
# 1266 "./lib/main/CMSIS/CM3/CoreSupport/core_cm3.h"
extern uint32_t __get_BASEPRI(void);
# 1275 "./lib/main/CMSIS/CM3/CoreSupport/core_cm3.h"
extern void __set_BASEPRI(uint32_t basePri);
# 1284 "./lib/main/CMSIS/CM3/CoreSupport/core_cm3.h"
extern uint32_t __get_PRIMASK(void);
# 1293 "./lib/main/CMSIS/CM3/CoreSupport/core_cm3.h"
extern void __set_PRIMASK(uint32_t priMask);
# 1302 "./lib/main/CMSIS/CM3/CoreSupport/core_cm3.h"
extern uint32_t __get_FAULTMASK(void);
# 1311 "./lib/main/CMSIS/CM3/CoreSupport/core_cm3.h"
extern void __set_FAULTMASK(uint32_t faultMask);
# 1320 "./lib/main/CMSIS/CM3/CoreSupport/core_cm3.h"
extern uint32_t __get_CONTROL(void);
# 1329 "./lib/main/CMSIS/CM3/CoreSupport/core_cm3.h"
extern void __set_CONTROL(uint32_t control);
# 1339 "./lib/main/CMSIS/CM3/CoreSupport/core_cm3.h"
extern uint32_t __REV(uint32_t value);
# 1349 "./lib/main/CMSIS/CM3/CoreSupport/core_cm3.h"
extern uint32_t __REV16(uint16_t value);
# 1359 "./lib/main/CMSIS/CM3/CoreSupport/core_cm3.h"
extern int32_t __REVSH(int16_t value);
# 1369 "./lib/main/CMSIS/CM3/CoreSupport/core_cm3.h"
extern uint32_t __RBIT(uint32_t value);
# 1379 "./lib/main/CMSIS/CM3/CoreSupport/core_cm3.h"
extern uint8_t __LDREXB(uint8_t *addr);
# 1389 "./lib/main/CMSIS/CM3/CoreSupport/core_cm3.h"
extern uint16_t __LDREXH(uint16_t *addr);
# 1399 "./lib/main/CMSIS/CM3/CoreSupport/core_cm3.h"
extern uint32_t __LDREXW(uint32_t *addr);
# 1410 "./lib/main/CMSIS/CM3/CoreSupport/core_cm3.h"
extern uint32_t __STREXB(uint8_t value, uint8_t *addr);
# 1421 "./lib/main/CMSIS/CM3/CoreSupport/core_cm3.h"
extern uint32_t __STREXH(uint16_t value, uint16_t *addr);
# 1432 "./lib/main/CMSIS/CM3/CoreSupport/core_cm3.h"
extern uint32_t __STREXW(uint32_t value, uint32_t *addr);
# 1468 "./lib/main/CMSIS/CM3/CoreSupport/core_cm3.h"
static inline void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);

  reg_value = ((SCB_Type *) ((0xE000E000) + 0x0D00))->AIRCR;
  reg_value &= ~((0xFFFFul << 16) | (7ul << 8));
  reg_value = (reg_value |
                (0x5FA << 16) |
                (PriorityGroupTmp << 8));
  ((SCB_Type *) ((0xE000E000) + 0x0D00))->AIRCR = reg_value;
}
# 1489 "./lib/main/CMSIS/CM3/CoreSupport/core_cm3.h"
static inline uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((((SCB_Type *) ((0xE000E000) + 0x0D00))->AIRCR & (7ul << 8)) >> 8);
}
# 1502 "./lib/main/CMSIS/CM3/CoreSupport/core_cm3.h"
static inline void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  ((NVIC_Type *) ((0xE000E000) + 0x0100))->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
}
# 1515 "./lib/main/CMSIS/CM3/CoreSupport/core_cm3.h"
static inline void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  ((NVIC_Type *) ((0xE000E000) + 0x0100))->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
}
# 1529 "./lib/main/CMSIS/CM3/CoreSupport/core_cm3.h"
static inline uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
  return((uint32_t) ((((NVIC_Type *) ((0xE000E000) + 0x0100))->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));
}
# 1542 "./lib/main/CMSIS/CM3/CoreSupport/core_cm3.h"
static inline void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  ((NVIC_Type *) ((0xE000E000) + 0x0100))->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
}
# 1555 "./lib/main/CMSIS/CM3/CoreSupport/core_cm3.h"
static inline void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  ((NVIC_Type *) ((0xE000E000) + 0x0100))->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
}
# 1569 "./lib/main/CMSIS/CM3/CoreSupport/core_cm3.h"
static inline uint32_t NVIC_GetActive(IRQn_Type IRQn)
{
  return((uint32_t)((((NVIC_Type *) ((0xE000E000) + 0x0100))->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));
}
# 1586 "./lib/main/CMSIS/CM3/CoreSupport/core_cm3.h"
static inline void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    ((SCB_Type *) ((0xE000E000) + 0x0D00))->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - 4)) & 0xff); }
  else {
    ((NVIC_Type *) ((0xE000E000) + 0x0100))->IP[(uint32_t)(IRQn)] = ((priority << (8 - 4)) & 0xff); }
}
# 1609 "./lib/main/CMSIS/CM3/CoreSupport/core_cm3.h"
static inline uint32_t NVIC_GetPriority(IRQn_Type IRQn)
{

  if(IRQn < 0) {
    return((uint32_t)(((SCB_Type *) ((0xE000E000) + 0x0D00))->SHP[((uint32_t)(IRQn) & 0xF)-4] >> (8 - 4))); }
  else {
    return((uint32_t)(((NVIC_Type *) ((0xE000E000) + 0x0100))->IP[(uint32_t)(IRQn)] >> (8 - 4))); }
}
# 1634 "./lib/main/CMSIS/CM3/CoreSupport/core_cm3.h"
static inline uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > 4) ? 4 : 7 - PriorityGroupTmp;
  SubPriorityBits = ((PriorityGroupTmp + 4) < 7) ? 0 : PriorityGroupTmp - 7 + 4;

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
           ((SubPriority & ((1 << (SubPriorityBits )) - 1)))
         );
}
# 1665 "./lib/main/CMSIS/CM3/CoreSupport/core_cm3.h"
static inline void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* pPreemptPriority, uint32_t* pSubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > 4) ? 4 : 7 - PriorityGroupTmp;
  SubPriorityBits = ((PriorityGroupTmp + 4) < 7) ? 0 : PriorityGroupTmp - 7 + 4;

  *pPreemptPriority = (Priority >> SubPriorityBits) & ((1 << (PreemptPriorityBits)) - 1);
  *pSubPriority = (Priority ) & ((1 << (SubPriorityBits )) - 1);
}
# 1694 "./lib/main/CMSIS/CM3/CoreSupport/core_cm3.h"
static inline uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > (0xFFFFFFul << 0)) return (1);

  ((SysTick_Type *) ((0xE000E000) + 0x0010))->LOAD = (ticks & (0xFFFFFFul << 0)) - 1;
  NVIC_SetPriority (SysTick_IRQn, (1<<4) - 1);
  ((SysTick_Type *) ((0xE000E000) + 0x0010))->VAL = 0;
  ((SysTick_Type *) ((0xE000E000) + 0x0010))->CTRL = (1ul << 2) |
                   (1ul << 1) |
                   (1ul << 0);
  return (0);
}
# 1719 "./lib/main/CMSIS/CM3/CoreSupport/core_cm3.h"
static inline void NVIC_SystemReset(void)
{
  ((SCB_Type *) ((0xE000E000) + 0x0D00))->AIRCR = ((0x5FA << 16) |
                 (((SCB_Type *) ((0xE000E000) + 0x0D00))->AIRCR & (7ul << 8)) |
                 (1ul << 2));
  __DSB();
  while(1);
}
# 1742 "./lib/main/CMSIS/CM3/CoreSupport/core_cm3.h"
extern volatile int ITM_RxBuffer;
#define ITM_RXBUFFER_EMPTY 0x5AA55AA5
# 1756 "./lib/main/CMSIS/CM3/CoreSupport/core_cm3.h"
static inline uint32_t ITM_SendChar (uint32_t ch)
{
  if ((((CoreDebug_Type *) (0xE000EDF0))->DEMCR & (1ul << 24)) &&
      (((ITM_Type *) (0xE0000000))->TCR & (1ul << 0)) &&
      (((ITM_Type *) (0xE0000000))->TER & (1ul << 0) ) )
  {
    while (((ITM_Type *) (0xE0000000))->PORT[0].u32 == 0);
    ((ITM_Type *) (0xE0000000))->PORT[0].u8 = (uint8_t) ch;
  }
  return (ch);
}
# 1778 "./lib/main/CMSIS/CM3/CoreSupport/core_cm3.h"
static inline int ITM_ReceiveChar (void) {
  int ch = -1;

  if (ITM_RxBuffer != 0x5AA55AA5) {
    ch = ITM_RxBuffer;
    ITM_RxBuffer = 0x5AA55AA5;
  }

  return (ch);
}
# 1798 "./lib/main/CMSIS/CM3/CoreSupport/core_cm3.h"
static inline int ITM_CheckChar (void) {

  if (ITM_RxBuffer == 0x5AA55AA5) {
    return (0);
  } else {
    return (1);
  }
}
# 479 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h" 2
# 1 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/system_stm32f10x.h" 1
# 34 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/system_stm32f10x.h"
#define __SYSTEM_STM32F10X_H 
# 53 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/system_stm32f10x.h"
extern uint32_t SystemCoreClock;
# 79 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/system_stm32f10x.h"
extern void SystemInit(void);
extern void SystemCoreClockUpdate(void);
# 480 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h" 2







typedef int32_t s32;
typedef int16_t s16;
typedef int8_t s8;

typedef const int32_t sc32;
typedef const int16_t sc16;
typedef const int8_t sc8;

typedef volatile int32_t vs32;
typedef volatile int16_t vs16;
typedef volatile int8_t vs8;

typedef volatile const int32_t vsc32;
typedef volatile const int16_t vsc16;
typedef volatile const int8_t vsc8;

typedef uint32_t u32;
typedef uint16_t u16;
typedef uint8_t u8;

typedef const uint32_t uc32;
typedef const uint16_t uc16;
typedef const uint8_t uc8;

typedef volatile uint32_t vu32;
typedef volatile uint16_t vu16;
typedef volatile uint8_t vu8;

typedef volatile const uint32_t vuc32;
typedef volatile const uint16_t vuc16;
typedef volatile const uint8_t vuc8;

typedef enum {RESET = 0, SET = !RESET} FlagStatus, ITStatus;

typedef enum {DISABLE = 0, ENABLE = !DISABLE} FunctionalState;
#define IS_FUNCTIONAL_STATE(STATE) (((STATE) == DISABLE) || ((STATE) == ENABLE))

typedef enum {ERROR = 0, SUCCESS = !ERROR} ErrorStatus;


#define HSEStartUp_TimeOut HSE_STARTUP_TIMEOUT
#define HSE_Value HSE_VALUE
#define HSI_Value HSI_VALUE
# 542 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
typedef struct
{
  volatile uint32_t SR;
  volatile uint32_t CR1;
  volatile uint32_t CR2;
  volatile uint32_t SMPR1;
  volatile uint32_t SMPR2;
  volatile uint32_t JOFR1;
  volatile uint32_t JOFR2;
  volatile uint32_t JOFR3;
  volatile uint32_t JOFR4;
  volatile uint32_t HTR;
  volatile uint32_t LTR;
  volatile uint32_t SQR1;
  volatile uint32_t SQR2;
  volatile uint32_t SQR3;
  volatile uint32_t JSQR;
  volatile uint32_t JDR1;
  volatile uint32_t JDR2;
  volatile uint32_t JDR3;
  volatile uint32_t JDR4;
  volatile uint32_t DR;
} ADC_TypeDef;





typedef struct
{
  uint32_t RESERVED0;
  volatile uint16_t DR1;
  uint16_t RESERVED1;
  volatile uint16_t DR2;
  uint16_t RESERVED2;
  volatile uint16_t DR3;
  uint16_t RESERVED3;
  volatile uint16_t DR4;
  uint16_t RESERVED4;
  volatile uint16_t DR5;
  uint16_t RESERVED5;
  volatile uint16_t DR6;
  uint16_t RESERVED6;
  volatile uint16_t DR7;
  uint16_t RESERVED7;
  volatile uint16_t DR8;
  uint16_t RESERVED8;
  volatile uint16_t DR9;
  uint16_t RESERVED9;
  volatile uint16_t DR10;
  uint16_t RESERVED10;
  volatile uint16_t RTCCR;
  uint16_t RESERVED11;
  volatile uint16_t CR;
  uint16_t RESERVED12;
  volatile uint16_t CSR;
  uint16_t RESERVED13[5];
  volatile uint16_t DR11;
  uint16_t RESERVED14;
  volatile uint16_t DR12;
  uint16_t RESERVED15;
  volatile uint16_t DR13;
  uint16_t RESERVED16;
  volatile uint16_t DR14;
  uint16_t RESERVED17;
  volatile uint16_t DR15;
  uint16_t RESERVED18;
  volatile uint16_t DR16;
  uint16_t RESERVED19;
  volatile uint16_t DR17;
  uint16_t RESERVED20;
  volatile uint16_t DR18;
  uint16_t RESERVED21;
  volatile uint16_t DR19;
  uint16_t RESERVED22;
  volatile uint16_t DR20;
  uint16_t RESERVED23;
  volatile uint16_t DR21;
  uint16_t RESERVED24;
  volatile uint16_t DR22;
  uint16_t RESERVED25;
  volatile uint16_t DR23;
  uint16_t RESERVED26;
  volatile uint16_t DR24;
  uint16_t RESERVED27;
  volatile uint16_t DR25;
  uint16_t RESERVED28;
  volatile uint16_t DR26;
  uint16_t RESERVED29;
  volatile uint16_t DR27;
  uint16_t RESERVED30;
  volatile uint16_t DR28;
  uint16_t RESERVED31;
  volatile uint16_t DR29;
  uint16_t RESERVED32;
  volatile uint16_t DR30;
  uint16_t RESERVED33;
  volatile uint16_t DR31;
  uint16_t RESERVED34;
  volatile uint16_t DR32;
  uint16_t RESERVED35;
  volatile uint16_t DR33;
  uint16_t RESERVED36;
  volatile uint16_t DR34;
  uint16_t RESERVED37;
  volatile uint16_t DR35;
  uint16_t RESERVED38;
  volatile uint16_t DR36;
  uint16_t RESERVED39;
  volatile uint16_t DR37;
  uint16_t RESERVED40;
  volatile uint16_t DR38;
  uint16_t RESERVED41;
  volatile uint16_t DR39;
  uint16_t RESERVED42;
  volatile uint16_t DR40;
  uint16_t RESERVED43;
  volatile uint16_t DR41;
  uint16_t RESERVED44;
  volatile uint16_t DR42;
  uint16_t RESERVED45;
} BKP_TypeDef;





typedef struct
{
  volatile uint32_t TIR;
  volatile uint32_t TDTR;
  volatile uint32_t TDLR;
  volatile uint32_t TDHR;
} CAN_TxMailBox_TypeDef;





typedef struct
{
  volatile uint32_t RIR;
  volatile uint32_t RDTR;
  volatile uint32_t RDLR;
  volatile uint32_t RDHR;
} CAN_FIFOMailBox_TypeDef;





typedef struct
{
  volatile uint32_t FR1;
  volatile uint32_t FR2;
} CAN_FilterRegister_TypeDef;





typedef struct
{
  volatile uint32_t MCR;
  volatile uint32_t MSR;
  volatile uint32_t TSR;
  volatile uint32_t RF0R;
  volatile uint32_t RF1R;
  volatile uint32_t IER;
  volatile uint32_t ESR;
  volatile uint32_t BTR;
  uint32_t RESERVED0[88];
  CAN_TxMailBox_TypeDef sTxMailBox[3];
  CAN_FIFOMailBox_TypeDef sFIFOMailBox[2];
  uint32_t RESERVED1[12];
  volatile uint32_t FMR;
  volatile uint32_t FM1R;
  uint32_t RESERVED2;
  volatile uint32_t FS1R;
  uint32_t RESERVED3;
  volatile uint32_t FFA1R;
  uint32_t RESERVED4;
  volatile uint32_t FA1R;
  uint32_t RESERVED5[8];

  CAN_FilterRegister_TypeDef sFilterRegister[14];



} CAN_TypeDef;




typedef struct
{
  volatile uint32_t CFGR;
  volatile uint32_t OAR;
  volatile uint32_t PRES;
  volatile uint32_t ESR;
  volatile uint32_t CSR;
  volatile uint32_t TXD;
  volatile uint32_t RXD;
} CEC_TypeDef;





typedef struct
{
  volatile uint32_t DR;
  volatile uint8_t IDR;
  uint8_t RESERVED0;
  uint16_t RESERVED1;
  volatile uint32_t CR;
} CRC_TypeDef;





typedef struct
{
  volatile uint32_t CR;
  volatile uint32_t SWTRIGR;
  volatile uint32_t DHR12R1;
  volatile uint32_t DHR12L1;
  volatile uint32_t DHR8R1;
  volatile uint32_t DHR12R2;
  volatile uint32_t DHR12L2;
  volatile uint32_t DHR8R2;
  volatile uint32_t DHR12RD;
  volatile uint32_t DHR12LD;
  volatile uint32_t DHR8RD;
  volatile uint32_t DOR1;
  volatile uint32_t DOR2;



} DAC_TypeDef;





typedef struct
{
  volatile uint32_t IDCODE;
  volatile uint32_t CR;
}DBGMCU_TypeDef;





typedef struct
{
  volatile uint32_t CCR;
  volatile uint32_t CNDTR;
  volatile uint32_t CPAR;
  volatile uint32_t CMAR;
} DMA_Channel_TypeDef;

typedef struct
{
  volatile uint32_t ISR;
  volatile uint32_t IFCR;
} DMA_TypeDef;





typedef struct
{
  volatile uint32_t MACCR;
  volatile uint32_t MACFFR;
  volatile uint32_t MACHTHR;
  volatile uint32_t MACHTLR;
  volatile uint32_t MACMIIAR;
  volatile uint32_t MACMIIDR;
  volatile uint32_t MACFCR;
  volatile uint32_t MACVLANTR;
       uint32_t RESERVED0[2];
  volatile uint32_t MACRWUFFR;
  volatile uint32_t MACPMTCSR;
       uint32_t RESERVED1[2];
  volatile uint32_t MACSR;
  volatile uint32_t MACIMR;
  volatile uint32_t MACA0HR;
  volatile uint32_t MACA0LR;
  volatile uint32_t MACA1HR;
  volatile uint32_t MACA1LR;
  volatile uint32_t MACA2HR;
  volatile uint32_t MACA2LR;
  volatile uint32_t MACA3HR;
  volatile uint32_t MACA3LR;
       uint32_t RESERVED2[40];
  volatile uint32_t MMCCR;
  volatile uint32_t MMCRIR;
  volatile uint32_t MMCTIR;
  volatile uint32_t MMCRIMR;
  volatile uint32_t MMCTIMR;
       uint32_t RESERVED3[14];
  volatile uint32_t MMCTGFSCCR;
  volatile uint32_t MMCTGFMSCCR;
       uint32_t RESERVED4[5];
  volatile uint32_t MMCTGFCR;
       uint32_t RESERVED5[10];
  volatile uint32_t MMCRFCECR;
  volatile uint32_t MMCRFAECR;
       uint32_t RESERVED6[10];
  volatile uint32_t MMCRGUFCR;
       uint32_t RESERVED7[334];
  volatile uint32_t PTPTSCR;
  volatile uint32_t PTPSSIR;
  volatile uint32_t PTPTSHR;
  volatile uint32_t PTPTSLR;
  volatile uint32_t PTPTSHUR;
  volatile uint32_t PTPTSLUR;
  volatile uint32_t PTPTSAR;
  volatile uint32_t PTPTTHR;
  volatile uint32_t PTPTTLR;
       uint32_t RESERVED8[567];
  volatile uint32_t DMABMR;
  volatile uint32_t DMATPDR;
  volatile uint32_t DMARPDR;
  volatile uint32_t DMARDLAR;
  volatile uint32_t DMATDLAR;
  volatile uint32_t DMASR;
  volatile uint32_t DMAOMR;
  volatile uint32_t DMAIER;
  volatile uint32_t DMAMFBOCR;
       uint32_t RESERVED9[9];
  volatile uint32_t DMACHTDR;
  volatile uint32_t DMACHRDR;
  volatile uint32_t DMACHTBAR;
  volatile uint32_t DMACHRBAR;
} ETH_TypeDef;





typedef struct
{
  volatile uint32_t IMR;
  volatile uint32_t EMR;
  volatile uint32_t RTSR;
  volatile uint32_t FTSR;
  volatile uint32_t SWIER;
  volatile uint32_t PR;
} EXTI_TypeDef;





typedef struct
{
  volatile uint32_t ACR;
  volatile uint32_t KEYR;
  volatile uint32_t OPTKEYR;
  volatile uint32_t SR;
  volatile uint32_t CR;
  volatile uint32_t AR;
  volatile uint32_t RESERVED;
  volatile uint32_t OBR;
  volatile uint32_t WRPR;
# 920 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
} FLASH_TypeDef;





typedef struct
{
  volatile uint16_t RDP;
  volatile uint16_t USER;
  volatile uint16_t Data0;
  volatile uint16_t Data1;
  volatile uint16_t WRP0;
  volatile uint16_t WRP1;
  volatile uint16_t WRP2;
  volatile uint16_t WRP3;
} OB_TypeDef;





typedef struct
{
  volatile uint32_t BTCR[8];
} FSMC_Bank1_TypeDef;





typedef struct
{
  volatile uint32_t BWTR[7];
} FSMC_Bank1E_TypeDef;





typedef struct
{
  volatile uint32_t PCR2;
  volatile uint32_t SR2;
  volatile uint32_t PMEM2;
  volatile uint32_t PATT2;
  uint32_t RESERVED0;
  volatile uint32_t ECCR2;
} FSMC_Bank2_TypeDef;





typedef struct
{
  volatile uint32_t PCR3;
  volatile uint32_t SR3;
  volatile uint32_t PMEM3;
  volatile uint32_t PATT3;
  uint32_t RESERVED0;
  volatile uint32_t ECCR3;
} FSMC_Bank3_TypeDef;





typedef struct
{
  volatile uint32_t PCR4;
  volatile uint32_t SR4;
  volatile uint32_t PMEM4;
  volatile uint32_t PATT4;
  volatile uint32_t PIO4;
} FSMC_Bank4_TypeDef;





typedef struct
{
  volatile uint32_t CRL;
  volatile uint32_t CRH;
  volatile uint32_t IDR;
  volatile uint32_t ODR;
  volatile uint32_t BSRR;
  volatile uint32_t BRR;
  volatile uint32_t LCKR;
} GPIO_TypeDef;





typedef struct
{
  volatile uint32_t EVCR;
  volatile uint32_t MAPR;
  volatile uint32_t EXTICR[4];
  uint32_t RESERVED0;
  volatile uint32_t MAPR2;
} AFIO_TypeDef;




typedef struct
{
  volatile uint16_t CR1;
  uint16_t RESERVED0;
  volatile uint16_t CR2;
  uint16_t RESERVED1;
  volatile uint16_t OAR1;
  uint16_t RESERVED2;
  volatile uint16_t OAR2;
  uint16_t RESERVED3;
  volatile uint16_t DR;
  uint16_t RESERVED4;
  volatile uint16_t SR1;
  uint16_t RESERVED5;
  volatile uint16_t SR2;
  uint16_t RESERVED6;
  volatile uint16_t CCR;
  uint16_t RESERVED7;
  volatile uint16_t TRISE;
  uint16_t RESERVED8;
} I2C_TypeDef;





typedef struct
{
  volatile uint32_t KR;
  volatile uint32_t PR;
  volatile uint32_t RLR;
  volatile uint32_t SR;
} IWDG_TypeDef;





typedef struct
{
  volatile uint32_t CR;
  volatile uint32_t CSR;
} PWR_TypeDef;





typedef struct
{
  volatile uint32_t CR;
  volatile uint32_t CFGR;
  volatile uint32_t CIR;
  volatile uint32_t APB2RSTR;
  volatile uint32_t APB1RSTR;
  volatile uint32_t AHBENR;
  volatile uint32_t APB2ENR;
  volatile uint32_t APB1ENR;
  volatile uint32_t BDCR;
  volatile uint32_t CSR;
# 1098 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
} RCC_TypeDef;





typedef struct
{
  volatile uint16_t CRH;
  uint16_t RESERVED0;
  volatile uint16_t CRL;
  uint16_t RESERVED1;
  volatile uint16_t PRLH;
  uint16_t RESERVED2;
  volatile uint16_t PRLL;
  uint16_t RESERVED3;
  volatile uint16_t DIVH;
  uint16_t RESERVED4;
  volatile uint16_t DIVL;
  uint16_t RESERVED5;
  volatile uint16_t CNTH;
  uint16_t RESERVED6;
  volatile uint16_t CNTL;
  uint16_t RESERVED7;
  volatile uint16_t ALRH;
  uint16_t RESERVED8;
  volatile uint16_t ALRL;
  uint16_t RESERVED9;
} RTC_TypeDef;





typedef struct
{
  volatile uint32_t POWER;
  volatile uint32_t CLKCR;
  volatile uint32_t ARG;
  volatile uint32_t CMD;
  volatile const uint32_t RESPCMD;
  volatile const uint32_t RESP1;
  volatile const uint32_t RESP2;
  volatile const uint32_t RESP3;
  volatile const uint32_t RESP4;
  volatile uint32_t DTIMER;
  volatile uint32_t DLEN;
  volatile uint32_t DCTRL;
  volatile const uint32_t DCOUNT;
  volatile const uint32_t STA;
  volatile uint32_t ICR;
  volatile uint32_t MASK;
  uint32_t RESERVED0[2];
  volatile const uint32_t FIFOCNT;
  uint32_t RESERVED1[13];
  volatile uint32_t FIFO;
} SDIO_TypeDef;





typedef struct
{
  volatile uint16_t CR1;
  uint16_t RESERVED0;
  volatile uint16_t CR2;
  uint16_t RESERVED1;
  volatile uint16_t SR;
  uint16_t RESERVED2;
  volatile uint16_t DR;
  uint16_t RESERVED3;
  volatile uint16_t CRCPR;
  uint16_t RESERVED4;
  volatile uint16_t RXCRCR;
  uint16_t RESERVED5;
  volatile uint16_t TXCRCR;
  uint16_t RESERVED6;
  volatile uint16_t I2SCFGR;
  uint16_t RESERVED7;
  volatile uint16_t I2SPR;
  uint16_t RESERVED8;
} SPI_TypeDef;





typedef struct
{
  volatile uint16_t CR1;
  uint16_t RESERVED0;
  volatile uint16_t CR2;
  uint16_t RESERVED1;
  volatile uint16_t SMCR;
  uint16_t RESERVED2;
  volatile uint16_t DIER;
  uint16_t RESERVED3;
  volatile uint16_t SR;
  uint16_t RESERVED4;
  volatile uint16_t EGR;
  uint16_t RESERVED5;
  volatile uint16_t CCMR1;
  uint16_t RESERVED6;
  volatile uint16_t CCMR2;
  uint16_t RESERVED7;
  volatile uint16_t CCER;
  uint16_t RESERVED8;
  volatile uint16_t CNT;
  uint16_t RESERVED9;
  volatile uint16_t PSC;
  uint16_t RESERVED10;
  volatile uint16_t ARR;
  uint16_t RESERVED11;
  volatile uint16_t RCR;
  uint16_t RESERVED12;
  volatile uint16_t CCR1;
  uint16_t RESERVED13;
  volatile uint16_t CCR2;
  uint16_t RESERVED14;
  volatile uint16_t CCR3;
  uint16_t RESERVED15;
  volatile uint16_t CCR4;
  uint16_t RESERVED16;
  volatile uint16_t BDTR;
  uint16_t RESERVED17;
  volatile uint16_t DCR;
  uint16_t RESERVED18;
  volatile uint16_t DMAR;
  uint16_t RESERVED19;
} TIM_TypeDef;





typedef struct
{
  volatile uint16_t SR;
  uint16_t RESERVED0;
  volatile uint16_t DR;
  uint16_t RESERVED1;
  volatile uint16_t BRR;
  uint16_t RESERVED2;
  volatile uint16_t CR1;
  uint16_t RESERVED3;
  volatile uint16_t CR2;
  uint16_t RESERVED4;
  volatile uint16_t CR3;
  uint16_t RESERVED5;
  volatile uint16_t GTPR;
  uint16_t RESERVED6;
} USART_TypeDef;





typedef struct
{
  volatile uint32_t CR;
  volatile uint32_t CFR;
  volatile uint32_t SR;
} WWDG_TypeDef;
# 1272 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
#define FLASH_BASE ((uint32_t)0x08000000)
#define SRAM_BASE ((uint32_t)0x20000000)
#define PERIPH_BASE ((uint32_t)0x40000000)

#define SRAM_BB_BASE ((uint32_t)0x22000000)
#define PERIPH_BB_BASE ((uint32_t)0x42000000)

#define FSMC_R_BASE ((uint32_t)0xA0000000)


#define APB1PERIPH_BASE PERIPH_BASE
#define APB2PERIPH_BASE (PERIPH_BASE + 0x10000)
#define AHBPERIPH_BASE (PERIPH_BASE + 0x20000)

#define TIM2_BASE (APB1PERIPH_BASE + 0x0000)
#define TIM3_BASE (APB1PERIPH_BASE + 0x0400)
#define TIM4_BASE (APB1PERIPH_BASE + 0x0800)
#define TIM5_BASE (APB1PERIPH_BASE + 0x0C00)
#define TIM6_BASE (APB1PERIPH_BASE + 0x1000)
#define TIM7_BASE (APB1PERIPH_BASE + 0x1400)
#define TIM12_BASE (APB1PERIPH_BASE + 0x1800)
#define TIM13_BASE (APB1PERIPH_BASE + 0x1C00)
#define TIM14_BASE (APB1PERIPH_BASE + 0x2000)
#define RTC_BASE (APB1PERIPH_BASE + 0x2800)
#define WWDG_BASE (APB1PERIPH_BASE + 0x2C00)
#define IWDG_BASE (APB1PERIPH_BASE + 0x3000)
#define SPI2_BASE (APB1PERIPH_BASE + 0x3800)
#define SPI3_BASE (APB1PERIPH_BASE + 0x3C00)
#define USART2_BASE (APB1PERIPH_BASE + 0x4400)
#define USART3_BASE (APB1PERIPH_BASE + 0x4800)
#define UART4_BASE (APB1PERIPH_BASE + 0x4C00)
#define UART5_BASE (APB1PERIPH_BASE + 0x5000)
#define I2C1_BASE (APB1PERIPH_BASE + 0x5400)
#define I2C2_BASE (APB1PERIPH_BASE + 0x5800)
#define CAN1_BASE (APB1PERIPH_BASE + 0x6400)
#define CAN2_BASE (APB1PERIPH_BASE + 0x6800)
#define BKP_BASE (APB1PERIPH_BASE + 0x6C00)
#define PWR_BASE (APB1PERIPH_BASE + 0x7000)
#define DAC_BASE (APB1PERIPH_BASE + 0x7400)
#define CEC_BASE (APB1PERIPH_BASE + 0x7800)

#define AFIO_BASE (APB2PERIPH_BASE + 0x0000)
#define EXTI_BASE (APB2PERIPH_BASE + 0x0400)
#define GPIOA_BASE (APB2PERIPH_BASE + 0x0800)
#define GPIOB_BASE (APB2PERIPH_BASE + 0x0C00)
#define GPIOC_BASE (APB2PERIPH_BASE + 0x1000)
#define GPIOD_BASE (APB2PERIPH_BASE + 0x1400)
#define GPIOE_BASE (APB2PERIPH_BASE + 0x1800)
#define GPIOF_BASE (APB2PERIPH_BASE + 0x1C00)
#define GPIOG_BASE (APB2PERIPH_BASE + 0x2000)
#define ADC1_BASE (APB2PERIPH_BASE + 0x2400)
#define ADC2_BASE (APB2PERIPH_BASE + 0x2800)
#define TIM1_BASE (APB2PERIPH_BASE + 0x2C00)
#define SPI1_BASE (APB2PERIPH_BASE + 0x3000)
#define TIM8_BASE (APB2PERIPH_BASE + 0x3400)
#define USART1_BASE (APB2PERIPH_BASE + 0x3800)
#define ADC3_BASE (APB2PERIPH_BASE + 0x3C00)
#define TIM15_BASE (APB2PERIPH_BASE + 0x4000)
#define TIM16_BASE (APB2PERIPH_BASE + 0x4400)
#define TIM17_BASE (APB2PERIPH_BASE + 0x4800)
#define TIM9_BASE (APB2PERIPH_BASE + 0x4C00)
#define TIM10_BASE (APB2PERIPH_BASE + 0x5000)
#define TIM11_BASE (APB2PERIPH_BASE + 0x5400)

#define SDIO_BASE (PERIPH_BASE + 0x18000)

#define DMA1_BASE (AHBPERIPH_BASE + 0x0000)
#define DMA1_Channel1_BASE (AHBPERIPH_BASE + 0x0008)
#define DMA1_Channel2_BASE (AHBPERIPH_BASE + 0x001C)
#define DMA1_Channel3_BASE (AHBPERIPH_BASE + 0x0030)
#define DMA1_Channel4_BASE (AHBPERIPH_BASE + 0x0044)
#define DMA1_Channel5_BASE (AHBPERIPH_BASE + 0x0058)
#define DMA1_Channel6_BASE (AHBPERIPH_BASE + 0x006C)
#define DMA1_Channel7_BASE (AHBPERIPH_BASE + 0x0080)
#define DMA2_BASE (AHBPERIPH_BASE + 0x0400)
#define DMA2_Channel1_BASE (AHBPERIPH_BASE + 0x0408)
#define DMA2_Channel2_BASE (AHBPERIPH_BASE + 0x041C)
#define DMA2_Channel3_BASE (AHBPERIPH_BASE + 0x0430)
#define DMA2_Channel4_BASE (AHBPERIPH_BASE + 0x0444)
#define DMA2_Channel5_BASE (AHBPERIPH_BASE + 0x0458)
#define RCC_BASE (AHBPERIPH_BASE + 0x1000)
#define CRC_BASE (AHBPERIPH_BASE + 0x3000)

#define FLASH_R_BASE (AHBPERIPH_BASE + 0x2000)
#define OB_BASE ((uint32_t)0x1FFFF800)

#define ETH_BASE (AHBPERIPH_BASE + 0x8000)
#define ETH_MAC_BASE (ETH_BASE)
#define ETH_MMC_BASE (ETH_BASE + 0x0100)
#define ETH_PTP_BASE (ETH_BASE + 0x0700)
#define ETH_DMA_BASE (ETH_BASE + 0x1000)

#define FSMC_Bank1_R_BASE (FSMC_R_BASE + 0x0000)
#define FSMC_Bank1E_R_BASE (FSMC_R_BASE + 0x0104)
#define FSMC_Bank2_R_BASE (FSMC_R_BASE + 0x0060)
#define FSMC_Bank3_R_BASE (FSMC_R_BASE + 0x0080)
#define FSMC_Bank4_R_BASE (FSMC_R_BASE + 0x00A0)

#define DBGMCU_BASE ((uint32_t)0xE0042000)
# 1380 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
#define TIM2 ((TIM_TypeDef *) TIM2_BASE)
#define TIM3 ((TIM_TypeDef *) TIM3_BASE)
#define TIM4 ((TIM_TypeDef *) TIM4_BASE)
#define TIM5 ((TIM_TypeDef *) TIM5_BASE)
#define TIM6 ((TIM_TypeDef *) TIM6_BASE)
#define TIM7 ((TIM_TypeDef *) TIM7_BASE)
#define TIM12 ((TIM_TypeDef *) TIM12_BASE)
#define TIM13 ((TIM_TypeDef *) TIM13_BASE)
#define TIM14 ((TIM_TypeDef *) TIM14_BASE)
#define RTC ((RTC_TypeDef *) RTC_BASE)
#define WWDG ((WWDG_TypeDef *) WWDG_BASE)
#define IWDG ((IWDG_TypeDef *) IWDG_BASE)
#define SPI2 ((SPI_TypeDef *) SPI2_BASE)
#define SPI3 ((SPI_TypeDef *) SPI3_BASE)
#define USART2 ((USART_TypeDef *) USART2_BASE)
#define USART3 ((USART_TypeDef *) USART3_BASE)
#define UART4 ((USART_TypeDef *) UART4_BASE)
#define UART5 ((USART_TypeDef *) UART5_BASE)
#define I2C1 ((I2C_TypeDef *) I2C1_BASE)
#define I2C2 ((I2C_TypeDef *) I2C2_BASE)
#define CAN1 ((CAN_TypeDef *) CAN1_BASE)
#define CAN2 ((CAN_TypeDef *) CAN2_BASE)
#define BKP ((BKP_TypeDef *) BKP_BASE)
#define PWR ((PWR_TypeDef *) PWR_BASE)
#define DAC ((DAC_TypeDef *) DAC_BASE)
#define CEC ((CEC_TypeDef *) CEC_BASE)
#define AFIO ((AFIO_TypeDef *) AFIO_BASE)
#define EXTI ((EXTI_TypeDef *) EXTI_BASE)
#define GPIOA ((GPIO_TypeDef *) GPIOA_BASE)
#define GPIOB ((GPIO_TypeDef *) GPIOB_BASE)
#define GPIOC ((GPIO_TypeDef *) GPIOC_BASE)
#define GPIOD ((GPIO_TypeDef *) GPIOD_BASE)
#define GPIOE ((GPIO_TypeDef *) GPIOE_BASE)
#define GPIOF ((GPIO_TypeDef *) GPIOF_BASE)
#define GPIOG ((GPIO_TypeDef *) GPIOG_BASE)
#define ADC1 ((ADC_TypeDef *) ADC1_BASE)
#define ADC2 ((ADC_TypeDef *) ADC2_BASE)
#define TIM1 ((TIM_TypeDef *) TIM1_BASE)
#define SPI1 ((SPI_TypeDef *) SPI1_BASE)
#define TIM8 ((TIM_TypeDef *) TIM8_BASE)
#define USART1 ((USART_TypeDef *) USART1_BASE)
#define ADC3 ((ADC_TypeDef *) ADC3_BASE)
#define TIM15 ((TIM_TypeDef *) TIM15_BASE)
#define TIM16 ((TIM_TypeDef *) TIM16_BASE)
#define TIM17 ((TIM_TypeDef *) TIM17_BASE)
#define TIM9 ((TIM_TypeDef *) TIM9_BASE)
#define TIM10 ((TIM_TypeDef *) TIM10_BASE)
#define TIM11 ((TIM_TypeDef *) TIM11_BASE)
#define SDIO ((SDIO_TypeDef *) SDIO_BASE)
#define DMA1 ((DMA_TypeDef *) DMA1_BASE)
#define DMA2 ((DMA_TypeDef *) DMA2_BASE)
#define DMA1_Channel1 ((DMA_Channel_TypeDef *) DMA1_Channel1_BASE)
#define DMA1_Channel2 ((DMA_Channel_TypeDef *) DMA1_Channel2_BASE)
#define DMA1_Channel3 ((DMA_Channel_TypeDef *) DMA1_Channel3_BASE)
#define DMA1_Channel4 ((DMA_Channel_TypeDef *) DMA1_Channel4_BASE)
#define DMA1_Channel5 ((DMA_Channel_TypeDef *) DMA1_Channel5_BASE)
#define DMA1_Channel6 ((DMA_Channel_TypeDef *) DMA1_Channel6_BASE)
#define DMA1_Channel7 ((DMA_Channel_TypeDef *) DMA1_Channel7_BASE)
#define DMA2_Channel1 ((DMA_Channel_TypeDef *) DMA2_Channel1_BASE)
#define DMA2_Channel2 ((DMA_Channel_TypeDef *) DMA2_Channel2_BASE)
#define DMA2_Channel3 ((DMA_Channel_TypeDef *) DMA2_Channel3_BASE)
#define DMA2_Channel4 ((DMA_Channel_TypeDef *) DMA2_Channel4_BASE)
#define DMA2_Channel5 ((DMA_Channel_TypeDef *) DMA2_Channel5_BASE)
#define RCC ((RCC_TypeDef *) RCC_BASE)
#define CRC ((CRC_TypeDef *) CRC_BASE)
#define FLASH ((FLASH_TypeDef *) FLASH_R_BASE)
#define OB ((OB_TypeDef *) OB_BASE)
#define ETH ((ETH_TypeDef *) ETH_BASE)
#define FSMC_Bank1 ((FSMC_Bank1_TypeDef *) FSMC_Bank1_R_BASE)
#define FSMC_Bank1E ((FSMC_Bank1E_TypeDef *) FSMC_Bank1E_R_BASE)
#define FSMC_Bank2 ((FSMC_Bank2_TypeDef *) FSMC_Bank2_R_BASE)
#define FSMC_Bank3 ((FSMC_Bank3_TypeDef *) FSMC_Bank3_R_BASE)
#define FSMC_Bank4 ((FSMC_Bank4_TypeDef *) FSMC_Bank4_R_BASE)
#define DBGMCU ((DBGMCU_TypeDef *) DBGMCU_BASE)
# 1478 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
#define CRC_DR_DR ((uint32_t)0xFFFFFFFF)



#define CRC_IDR_IDR ((uint8_t)0xFF)



#define CRC_CR_RESET ((uint8_t)0x01)
# 1495 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
#define PWR_CR_LPDS ((uint16_t)0x0001)
#define PWR_CR_PDDS ((uint16_t)0x0002)
#define PWR_CR_CWUF ((uint16_t)0x0004)
#define PWR_CR_CSBF ((uint16_t)0x0008)
#define PWR_CR_PVDE ((uint16_t)0x0010)

#define PWR_CR_PLS ((uint16_t)0x00E0)
#define PWR_CR_PLS_0 ((uint16_t)0x0020)
#define PWR_CR_PLS_1 ((uint16_t)0x0040)
#define PWR_CR_PLS_2 ((uint16_t)0x0080)


#define PWR_CR_PLS_2V2 ((uint16_t)0x0000)
#define PWR_CR_PLS_2V3 ((uint16_t)0x0020)
#define PWR_CR_PLS_2V4 ((uint16_t)0x0040)
#define PWR_CR_PLS_2V5 ((uint16_t)0x0060)
#define PWR_CR_PLS_2V6 ((uint16_t)0x0080)
#define PWR_CR_PLS_2V7 ((uint16_t)0x00A0)
#define PWR_CR_PLS_2V8 ((uint16_t)0x00C0)
#define PWR_CR_PLS_2V9 ((uint16_t)0x00E0)

#define PWR_CR_DBP ((uint16_t)0x0100)



#define PWR_CSR_WUF ((uint16_t)0x0001)
#define PWR_CSR_SBF ((uint16_t)0x0002)
#define PWR_CSR_PVDO ((uint16_t)0x0004)
#define PWR_CSR_EWUP ((uint16_t)0x0100)
# 1532 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
#define BKP_DR1_D ((uint16_t)0xFFFF)


#define BKP_DR2_D ((uint16_t)0xFFFF)


#define BKP_DR3_D ((uint16_t)0xFFFF)


#define BKP_DR4_D ((uint16_t)0xFFFF)


#define BKP_DR5_D ((uint16_t)0xFFFF)


#define BKP_DR6_D ((uint16_t)0xFFFF)


#define BKP_DR7_D ((uint16_t)0xFFFF)


#define BKP_DR8_D ((uint16_t)0xFFFF)


#define BKP_DR9_D ((uint16_t)0xFFFF)


#define BKP_DR10_D ((uint16_t)0xFFFF)


#define BKP_DR11_D ((uint16_t)0xFFFF)


#define BKP_DR12_D ((uint16_t)0xFFFF)


#define BKP_DR13_D ((uint16_t)0xFFFF)


#define BKP_DR14_D ((uint16_t)0xFFFF)


#define BKP_DR15_D ((uint16_t)0xFFFF)


#define BKP_DR16_D ((uint16_t)0xFFFF)


#define BKP_DR17_D ((uint16_t)0xFFFF)


#define BKP_DR18_D ((uint16_t)0xFFFF)


#define BKP_DR19_D ((uint16_t)0xFFFF)


#define BKP_DR20_D ((uint16_t)0xFFFF)


#define BKP_DR21_D ((uint16_t)0xFFFF)


#define BKP_DR22_D ((uint16_t)0xFFFF)


#define BKP_DR23_D ((uint16_t)0xFFFF)


#define BKP_DR24_D ((uint16_t)0xFFFF)


#define BKP_DR25_D ((uint16_t)0xFFFF)


#define BKP_DR26_D ((uint16_t)0xFFFF)


#define BKP_DR27_D ((uint16_t)0xFFFF)


#define BKP_DR28_D ((uint16_t)0xFFFF)


#define BKP_DR29_D ((uint16_t)0xFFFF)


#define BKP_DR30_D ((uint16_t)0xFFFF)


#define BKP_DR31_D ((uint16_t)0xFFFF)


#define BKP_DR32_D ((uint16_t)0xFFFF)


#define BKP_DR33_D ((uint16_t)0xFFFF)


#define BKP_DR34_D ((uint16_t)0xFFFF)


#define BKP_DR35_D ((uint16_t)0xFFFF)


#define BKP_DR36_D ((uint16_t)0xFFFF)


#define BKP_DR37_D ((uint16_t)0xFFFF)


#define BKP_DR38_D ((uint16_t)0xFFFF)


#define BKP_DR39_D ((uint16_t)0xFFFF)


#define BKP_DR40_D ((uint16_t)0xFFFF)


#define BKP_DR41_D ((uint16_t)0xFFFF)


#define BKP_DR42_D ((uint16_t)0xFFFF)


#define BKP_RTCCR_CAL ((uint16_t)0x007F)
#define BKP_RTCCR_CCO ((uint16_t)0x0080)
#define BKP_RTCCR_ASOE ((uint16_t)0x0100)
#define BKP_RTCCR_ASOS ((uint16_t)0x0200)


#define BKP_CR_TPE ((uint8_t)0x01)
#define BKP_CR_TPAL ((uint8_t)0x02)


#define BKP_CSR_CTE ((uint16_t)0x0001)
#define BKP_CSR_CTI ((uint16_t)0x0002)
#define BKP_CSR_TPIE ((uint16_t)0x0004)
#define BKP_CSR_TEF ((uint16_t)0x0100)
#define BKP_CSR_TIF ((uint16_t)0x0200)
# 1681 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
#define RCC_CR_HSION ((uint32_t)0x00000001)
#define RCC_CR_HSIRDY ((uint32_t)0x00000002)
#define RCC_CR_HSITRIM ((uint32_t)0x000000F8)
#define RCC_CR_HSICAL ((uint32_t)0x0000FF00)
#define RCC_CR_HSEON ((uint32_t)0x00010000)
#define RCC_CR_HSERDY ((uint32_t)0x00020000)
#define RCC_CR_HSEBYP ((uint32_t)0x00040000)
#define RCC_CR_CSSON ((uint32_t)0x00080000)
#define RCC_CR_PLLON ((uint32_t)0x01000000)
#define RCC_CR_PLLRDY ((uint32_t)0x02000000)
# 1701 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
#define RCC_CFGR_SW ((uint32_t)0x00000003)
#define RCC_CFGR_SW_0 ((uint32_t)0x00000001)
#define RCC_CFGR_SW_1 ((uint32_t)0x00000002)

#define RCC_CFGR_SW_HSI ((uint32_t)0x00000000)
#define RCC_CFGR_SW_HSE ((uint32_t)0x00000001)
#define RCC_CFGR_SW_PLL ((uint32_t)0x00000002)


#define RCC_CFGR_SWS ((uint32_t)0x0000000C)
#define RCC_CFGR_SWS_0 ((uint32_t)0x00000004)
#define RCC_CFGR_SWS_1 ((uint32_t)0x00000008)

#define RCC_CFGR_SWS_HSI ((uint32_t)0x00000000)
#define RCC_CFGR_SWS_HSE ((uint32_t)0x00000004)
#define RCC_CFGR_SWS_PLL ((uint32_t)0x00000008)


#define RCC_CFGR_HPRE ((uint32_t)0x000000F0)
#define RCC_CFGR_HPRE_0 ((uint32_t)0x00000010)
#define RCC_CFGR_HPRE_1 ((uint32_t)0x00000020)
#define RCC_CFGR_HPRE_2 ((uint32_t)0x00000040)
#define RCC_CFGR_HPRE_3 ((uint32_t)0x00000080)

#define RCC_CFGR_HPRE_DIV1 ((uint32_t)0x00000000)
#define RCC_CFGR_HPRE_DIV2 ((uint32_t)0x00000080)
#define RCC_CFGR_HPRE_DIV4 ((uint32_t)0x00000090)
#define RCC_CFGR_HPRE_DIV8 ((uint32_t)0x000000A0)
#define RCC_CFGR_HPRE_DIV16 ((uint32_t)0x000000B0)
#define RCC_CFGR_HPRE_DIV64 ((uint32_t)0x000000C0)
#define RCC_CFGR_HPRE_DIV128 ((uint32_t)0x000000D0)
#define RCC_CFGR_HPRE_DIV256 ((uint32_t)0x000000E0)
#define RCC_CFGR_HPRE_DIV512 ((uint32_t)0x000000F0)


#define RCC_CFGR_PPRE1 ((uint32_t)0x00000700)
#define RCC_CFGR_PPRE1_0 ((uint32_t)0x00000100)
#define RCC_CFGR_PPRE1_1 ((uint32_t)0x00000200)
#define RCC_CFGR_PPRE1_2 ((uint32_t)0x00000400)

#define RCC_CFGR_PPRE1_DIV1 ((uint32_t)0x00000000)
#define RCC_CFGR_PPRE1_DIV2 ((uint32_t)0x00000400)
#define RCC_CFGR_PPRE1_DIV4 ((uint32_t)0x00000500)
#define RCC_CFGR_PPRE1_DIV8 ((uint32_t)0x00000600)
#define RCC_CFGR_PPRE1_DIV16 ((uint32_t)0x00000700)


#define RCC_CFGR_PPRE2 ((uint32_t)0x00003800)
#define RCC_CFGR_PPRE2_0 ((uint32_t)0x00000800)
#define RCC_CFGR_PPRE2_1 ((uint32_t)0x00001000)
#define RCC_CFGR_PPRE2_2 ((uint32_t)0x00002000)

#define RCC_CFGR_PPRE2_DIV1 ((uint32_t)0x00000000)
#define RCC_CFGR_PPRE2_DIV2 ((uint32_t)0x00002000)
#define RCC_CFGR_PPRE2_DIV4 ((uint32_t)0x00002800)
#define RCC_CFGR_PPRE2_DIV8 ((uint32_t)0x00003000)
#define RCC_CFGR_PPRE2_DIV16 ((uint32_t)0x00003800)


#define RCC_CFGR_ADCPRE ((uint32_t)0x0000C000)
#define RCC_CFGR_ADCPRE_0 ((uint32_t)0x00004000)
#define RCC_CFGR_ADCPRE_1 ((uint32_t)0x00008000)

#define RCC_CFGR_ADCPRE_DIV2 ((uint32_t)0x00000000)
#define RCC_CFGR_ADCPRE_DIV4 ((uint32_t)0x00004000)
#define RCC_CFGR_ADCPRE_DIV6 ((uint32_t)0x00008000)
#define RCC_CFGR_ADCPRE_DIV8 ((uint32_t)0x0000C000)

#define RCC_CFGR_PLLSRC ((uint32_t)0x00010000)

#define RCC_CFGR_PLLXTPRE ((uint32_t)0x00020000)


#define RCC_CFGR_PLLMULL ((uint32_t)0x003C0000)
#define RCC_CFGR_PLLMULL_0 ((uint32_t)0x00040000)
#define RCC_CFGR_PLLMULL_1 ((uint32_t)0x00080000)
#define RCC_CFGR_PLLMULL_2 ((uint32_t)0x00100000)
#define RCC_CFGR_PLLMULL_3 ((uint32_t)0x00200000)
# 1848 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
#define RCC_CFGR_PLLSRC_HSI_Div2 ((uint32_t)0x00000000)
#define RCC_CFGR_PLLSRC_HSE ((uint32_t)0x00010000)

#define RCC_CFGR_PLLXTPRE_HSE ((uint32_t)0x00000000)
#define RCC_CFGR_PLLXTPRE_HSE_Div2 ((uint32_t)0x00020000)

#define RCC_CFGR_PLLMULL2 ((uint32_t)0x00000000)
#define RCC_CFGR_PLLMULL3 ((uint32_t)0x00040000)
#define RCC_CFGR_PLLMULL4 ((uint32_t)0x00080000)
#define RCC_CFGR_PLLMULL5 ((uint32_t)0x000C0000)
#define RCC_CFGR_PLLMULL6 ((uint32_t)0x00100000)
#define RCC_CFGR_PLLMULL7 ((uint32_t)0x00140000)
#define RCC_CFGR_PLLMULL8 ((uint32_t)0x00180000)
#define RCC_CFGR_PLLMULL9 ((uint32_t)0x001C0000)
#define RCC_CFGR_PLLMULL10 ((uint32_t)0x00200000)
#define RCC_CFGR_PLLMULL11 ((uint32_t)0x00240000)
#define RCC_CFGR_PLLMULL12 ((uint32_t)0x00280000)
#define RCC_CFGR_PLLMULL13 ((uint32_t)0x002C0000)
#define RCC_CFGR_PLLMULL14 ((uint32_t)0x00300000)
#define RCC_CFGR_PLLMULL15 ((uint32_t)0x00340000)
#define RCC_CFGR_PLLMULL16 ((uint32_t)0x00380000)
#define RCC_CFGR_USBPRE ((uint32_t)0x00400000)


#define RCC_CFGR_MCO ((uint32_t)0x07000000)
#define RCC_CFGR_MCO_0 ((uint32_t)0x01000000)
#define RCC_CFGR_MCO_1 ((uint32_t)0x02000000)
#define RCC_CFGR_MCO_2 ((uint32_t)0x04000000)

#define RCC_CFGR_MCO_NOCLOCK ((uint32_t)0x00000000)
#define RCC_CFGR_MCO_SYSCLK ((uint32_t)0x04000000)
#define RCC_CFGR_MCO_HSI ((uint32_t)0x05000000)
#define RCC_CFGR_MCO_HSE ((uint32_t)0x06000000)
#define RCC_CFGR_MCO_PLL ((uint32_t)0x07000000)



#define RCC_CIR_LSIRDYF ((uint32_t)0x00000001)
#define RCC_CIR_LSERDYF ((uint32_t)0x00000002)
#define RCC_CIR_HSIRDYF ((uint32_t)0x00000004)
#define RCC_CIR_HSERDYF ((uint32_t)0x00000008)
#define RCC_CIR_PLLRDYF ((uint32_t)0x00000010)
#define RCC_CIR_CSSF ((uint32_t)0x00000080)
#define RCC_CIR_LSIRDYIE ((uint32_t)0x00000100)
#define RCC_CIR_LSERDYIE ((uint32_t)0x00000200)
#define RCC_CIR_HSIRDYIE ((uint32_t)0x00000400)
#define RCC_CIR_HSERDYIE ((uint32_t)0x00000800)
#define RCC_CIR_PLLRDYIE ((uint32_t)0x00001000)
#define RCC_CIR_LSIRDYC ((uint32_t)0x00010000)
#define RCC_CIR_LSERDYC ((uint32_t)0x00020000)
#define RCC_CIR_HSIRDYC ((uint32_t)0x00040000)
#define RCC_CIR_HSERDYC ((uint32_t)0x00080000)
#define RCC_CIR_PLLRDYC ((uint32_t)0x00100000)
#define RCC_CIR_CSSC ((uint32_t)0x00800000)
# 1913 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
#define RCC_APB2RSTR_AFIORST ((uint32_t)0x00000001)
#define RCC_APB2RSTR_IOPARST ((uint32_t)0x00000004)
#define RCC_APB2RSTR_IOPBRST ((uint32_t)0x00000008)
#define RCC_APB2RSTR_IOPCRST ((uint32_t)0x00000010)
#define RCC_APB2RSTR_IOPDRST ((uint32_t)0x00000020)
#define RCC_APB2RSTR_ADC1RST ((uint32_t)0x00000200)


#define RCC_APB2RSTR_ADC2RST ((uint32_t)0x00000400)


#define RCC_APB2RSTR_TIM1RST ((uint32_t)0x00000800)
#define RCC_APB2RSTR_SPI1RST ((uint32_t)0x00001000)
#define RCC_APB2RSTR_USART1RST ((uint32_t)0x00004000)
# 1935 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
#define RCC_APB2RSTR_IOPERST ((uint32_t)0x00000040)
# 1957 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
#define RCC_APB1RSTR_TIM2RST ((uint32_t)0x00000001)
#define RCC_APB1RSTR_TIM3RST ((uint32_t)0x00000002)
#define RCC_APB1RSTR_WWDGRST ((uint32_t)0x00000800)
#define RCC_APB1RSTR_USART2RST ((uint32_t)0x00020000)
#define RCC_APB1RSTR_I2C1RST ((uint32_t)0x00200000)


#define RCC_APB1RSTR_CAN1RST ((uint32_t)0x02000000)


#define RCC_APB1RSTR_BKPRST ((uint32_t)0x08000000)
#define RCC_APB1RSTR_PWRRST ((uint32_t)0x10000000)


#define RCC_APB1RSTR_TIM4RST ((uint32_t)0x00000004)
#define RCC_APB1RSTR_SPI2RST ((uint32_t)0x00004000)
#define RCC_APB1RSTR_USART3RST ((uint32_t)0x00040000)
#define RCC_APB1RSTR_I2C2RST ((uint32_t)0x00400000)



#define RCC_APB1RSTR_USBRST ((uint32_t)0x00800000)
# 2019 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
#define RCC_AHBENR_DMA1EN ((uint16_t)0x0001)
#define RCC_AHBENR_SRAMEN ((uint16_t)0x0004)
#define RCC_AHBENR_FLITFEN ((uint16_t)0x0010)
#define RCC_AHBENR_CRCEN ((uint16_t)0x0040)
# 2045 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
#define RCC_APB2ENR_AFIOEN ((uint32_t)0x00000001)
#define RCC_APB2ENR_IOPAEN ((uint32_t)0x00000004)
#define RCC_APB2ENR_IOPBEN ((uint32_t)0x00000008)
#define RCC_APB2ENR_IOPCEN ((uint32_t)0x00000010)
#define RCC_APB2ENR_IOPDEN ((uint32_t)0x00000020)
#define RCC_APB2ENR_ADC1EN ((uint32_t)0x00000200)


#define RCC_APB2ENR_ADC2EN ((uint32_t)0x00000400)


#define RCC_APB2ENR_TIM1EN ((uint32_t)0x00000800)
#define RCC_APB2ENR_SPI1EN ((uint32_t)0x00001000)
#define RCC_APB2ENR_USART1EN ((uint32_t)0x00004000)
# 2067 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
#define RCC_APB2ENR_IOPEEN ((uint32_t)0x00000040)
# 2089 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
#define RCC_APB1ENR_TIM2EN ((uint32_t)0x00000001)
#define RCC_APB1ENR_TIM3EN ((uint32_t)0x00000002)
#define RCC_APB1ENR_WWDGEN ((uint32_t)0x00000800)
#define RCC_APB1ENR_USART2EN ((uint32_t)0x00020000)
#define RCC_APB1ENR_I2C1EN ((uint32_t)0x00200000)


#define RCC_APB1ENR_CAN1EN ((uint32_t)0x02000000)


#define RCC_APB1ENR_BKPEN ((uint32_t)0x08000000)
#define RCC_APB1ENR_PWREN ((uint32_t)0x10000000)


#define RCC_APB1ENR_TIM4EN ((uint32_t)0x00000004)
#define RCC_APB1ENR_SPI2EN ((uint32_t)0x00004000)
#define RCC_APB1ENR_USART3EN ((uint32_t)0x00040000)
#define RCC_APB1ENR_I2C2EN ((uint32_t)0x00400000)



#define RCC_APB1ENR_USBEN ((uint32_t)0x00800000)
# 2151 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
#define RCC_BDCR_LSEON ((uint32_t)0x00000001)
#define RCC_BDCR_LSERDY ((uint32_t)0x00000002)
#define RCC_BDCR_LSEBYP ((uint32_t)0x00000004)

#define RCC_BDCR_RTCSEL ((uint32_t)0x00000300)
#define RCC_BDCR_RTCSEL_0 ((uint32_t)0x00000100)
#define RCC_BDCR_RTCSEL_1 ((uint32_t)0x00000200)


#define RCC_BDCR_RTCSEL_NOCLOCK ((uint32_t)0x00000000)
#define RCC_BDCR_RTCSEL_LSE ((uint32_t)0x00000100)
#define RCC_BDCR_RTCSEL_LSI ((uint32_t)0x00000200)
#define RCC_BDCR_RTCSEL_HSE ((uint32_t)0x00000300)

#define RCC_BDCR_RTCEN ((uint32_t)0x00008000)
#define RCC_BDCR_BDRST ((uint32_t)0x00010000)


#define RCC_CSR_LSION ((uint32_t)0x00000001)
#define RCC_CSR_LSIRDY ((uint32_t)0x00000002)
#define RCC_CSR_RMVF ((uint32_t)0x01000000)
#define RCC_CSR_PINRSTF ((uint32_t)0x04000000)
#define RCC_CSR_PORRSTF ((uint32_t)0x08000000)
#define RCC_CSR_SFTRSTF ((uint32_t)0x10000000)
#define RCC_CSR_IWDGRSTF ((uint32_t)0x20000000)
#define RCC_CSR_WWDGRSTF ((uint32_t)0x40000000)
#define RCC_CSR_LPWRRSTF ((uint32_t)0x80000000)
# 2308 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
#define GPIO_CRL_MODE ((uint32_t)0x33333333)

#define GPIO_CRL_MODE0 ((uint32_t)0x00000003)
#define GPIO_CRL_MODE0_0 ((uint32_t)0x00000001)
#define GPIO_CRL_MODE0_1 ((uint32_t)0x00000002)

#define GPIO_CRL_MODE1 ((uint32_t)0x00000030)
#define GPIO_CRL_MODE1_0 ((uint32_t)0x00000010)
#define GPIO_CRL_MODE1_1 ((uint32_t)0x00000020)

#define GPIO_CRL_MODE2 ((uint32_t)0x00000300)
#define GPIO_CRL_MODE2_0 ((uint32_t)0x00000100)
#define GPIO_CRL_MODE2_1 ((uint32_t)0x00000200)

#define GPIO_CRL_MODE3 ((uint32_t)0x00003000)
#define GPIO_CRL_MODE3_0 ((uint32_t)0x00001000)
#define GPIO_CRL_MODE3_1 ((uint32_t)0x00002000)

#define GPIO_CRL_MODE4 ((uint32_t)0x00030000)
#define GPIO_CRL_MODE4_0 ((uint32_t)0x00010000)
#define GPIO_CRL_MODE4_1 ((uint32_t)0x00020000)

#define GPIO_CRL_MODE5 ((uint32_t)0x00300000)
#define GPIO_CRL_MODE5_0 ((uint32_t)0x00100000)
#define GPIO_CRL_MODE5_1 ((uint32_t)0x00200000)

#define GPIO_CRL_MODE6 ((uint32_t)0x03000000)
#define GPIO_CRL_MODE6_0 ((uint32_t)0x01000000)
#define GPIO_CRL_MODE6_1 ((uint32_t)0x02000000)

#define GPIO_CRL_MODE7 ((uint32_t)0x30000000)
#define GPIO_CRL_MODE7_0 ((uint32_t)0x10000000)
#define GPIO_CRL_MODE7_1 ((uint32_t)0x20000000)

#define GPIO_CRL_CNF ((uint32_t)0xCCCCCCCC)

#define GPIO_CRL_CNF0 ((uint32_t)0x0000000C)
#define GPIO_CRL_CNF0_0 ((uint32_t)0x00000004)
#define GPIO_CRL_CNF0_1 ((uint32_t)0x00000008)

#define GPIO_CRL_CNF1 ((uint32_t)0x000000C0)
#define GPIO_CRL_CNF1_0 ((uint32_t)0x00000040)
#define GPIO_CRL_CNF1_1 ((uint32_t)0x00000080)

#define GPIO_CRL_CNF2 ((uint32_t)0x00000C00)
#define GPIO_CRL_CNF2_0 ((uint32_t)0x00000400)
#define GPIO_CRL_CNF2_1 ((uint32_t)0x00000800)

#define GPIO_CRL_CNF3 ((uint32_t)0x0000C000)
#define GPIO_CRL_CNF3_0 ((uint32_t)0x00004000)
#define GPIO_CRL_CNF3_1 ((uint32_t)0x00008000)

#define GPIO_CRL_CNF4 ((uint32_t)0x000C0000)
#define GPIO_CRL_CNF4_0 ((uint32_t)0x00040000)
#define GPIO_CRL_CNF4_1 ((uint32_t)0x00080000)

#define GPIO_CRL_CNF5 ((uint32_t)0x00C00000)
#define GPIO_CRL_CNF5_0 ((uint32_t)0x00400000)
#define GPIO_CRL_CNF5_1 ((uint32_t)0x00800000)

#define GPIO_CRL_CNF6 ((uint32_t)0x0C000000)
#define GPIO_CRL_CNF6_0 ((uint32_t)0x04000000)
#define GPIO_CRL_CNF6_1 ((uint32_t)0x08000000)

#define GPIO_CRL_CNF7 ((uint32_t)0xC0000000)
#define GPIO_CRL_CNF7_0 ((uint32_t)0x40000000)
#define GPIO_CRL_CNF7_1 ((uint32_t)0x80000000)


#define GPIO_CRH_MODE ((uint32_t)0x33333333)

#define GPIO_CRH_MODE8 ((uint32_t)0x00000003)
#define GPIO_CRH_MODE8_0 ((uint32_t)0x00000001)
#define GPIO_CRH_MODE8_1 ((uint32_t)0x00000002)

#define GPIO_CRH_MODE9 ((uint32_t)0x00000030)
#define GPIO_CRH_MODE9_0 ((uint32_t)0x00000010)
#define GPIO_CRH_MODE9_1 ((uint32_t)0x00000020)

#define GPIO_CRH_MODE10 ((uint32_t)0x00000300)
#define GPIO_CRH_MODE10_0 ((uint32_t)0x00000100)
#define GPIO_CRH_MODE10_1 ((uint32_t)0x00000200)

#define GPIO_CRH_MODE11 ((uint32_t)0x00003000)
#define GPIO_CRH_MODE11_0 ((uint32_t)0x00001000)
#define GPIO_CRH_MODE11_1 ((uint32_t)0x00002000)

#define GPIO_CRH_MODE12 ((uint32_t)0x00030000)
#define GPIO_CRH_MODE12_0 ((uint32_t)0x00010000)
#define GPIO_CRH_MODE12_1 ((uint32_t)0x00020000)

#define GPIO_CRH_MODE13 ((uint32_t)0x00300000)
#define GPIO_CRH_MODE13_0 ((uint32_t)0x00100000)
#define GPIO_CRH_MODE13_1 ((uint32_t)0x00200000)

#define GPIO_CRH_MODE14 ((uint32_t)0x03000000)
#define GPIO_CRH_MODE14_0 ((uint32_t)0x01000000)
#define GPIO_CRH_MODE14_1 ((uint32_t)0x02000000)

#define GPIO_CRH_MODE15 ((uint32_t)0x30000000)
#define GPIO_CRH_MODE15_0 ((uint32_t)0x10000000)
#define GPIO_CRH_MODE15_1 ((uint32_t)0x20000000)

#define GPIO_CRH_CNF ((uint32_t)0xCCCCCCCC)

#define GPIO_CRH_CNF8 ((uint32_t)0x0000000C)
#define GPIO_CRH_CNF8_0 ((uint32_t)0x00000004)
#define GPIO_CRH_CNF8_1 ((uint32_t)0x00000008)

#define GPIO_CRH_CNF9 ((uint32_t)0x000000C0)
#define GPIO_CRH_CNF9_0 ((uint32_t)0x00000040)
#define GPIO_CRH_CNF9_1 ((uint32_t)0x00000080)

#define GPIO_CRH_CNF10 ((uint32_t)0x00000C00)
#define GPIO_CRH_CNF10_0 ((uint32_t)0x00000400)
#define GPIO_CRH_CNF10_1 ((uint32_t)0x00000800)

#define GPIO_CRH_CNF11 ((uint32_t)0x0000C000)
#define GPIO_CRH_CNF11_0 ((uint32_t)0x00004000)
#define GPIO_CRH_CNF11_1 ((uint32_t)0x00008000)

#define GPIO_CRH_CNF12 ((uint32_t)0x000C0000)
#define GPIO_CRH_CNF12_0 ((uint32_t)0x00040000)
#define GPIO_CRH_CNF12_1 ((uint32_t)0x00080000)

#define GPIO_CRH_CNF13 ((uint32_t)0x00C00000)
#define GPIO_CRH_CNF13_0 ((uint32_t)0x00400000)
#define GPIO_CRH_CNF13_1 ((uint32_t)0x00800000)

#define GPIO_CRH_CNF14 ((uint32_t)0x0C000000)
#define GPIO_CRH_CNF14_0 ((uint32_t)0x04000000)
#define GPIO_CRH_CNF14_1 ((uint32_t)0x08000000)

#define GPIO_CRH_CNF15 ((uint32_t)0xC0000000)
#define GPIO_CRH_CNF15_0 ((uint32_t)0x40000000)
#define GPIO_CRH_CNF15_1 ((uint32_t)0x80000000)


#define GPIO_IDR_IDR0 ((uint16_t)0x0001)
#define GPIO_IDR_IDR1 ((uint16_t)0x0002)
#define GPIO_IDR_IDR2 ((uint16_t)0x0004)
#define GPIO_IDR_IDR3 ((uint16_t)0x0008)
#define GPIO_IDR_IDR4 ((uint16_t)0x0010)
#define GPIO_IDR_IDR5 ((uint16_t)0x0020)
#define GPIO_IDR_IDR6 ((uint16_t)0x0040)
#define GPIO_IDR_IDR7 ((uint16_t)0x0080)
#define GPIO_IDR_IDR8 ((uint16_t)0x0100)
#define GPIO_IDR_IDR9 ((uint16_t)0x0200)
#define GPIO_IDR_IDR10 ((uint16_t)0x0400)
#define GPIO_IDR_IDR11 ((uint16_t)0x0800)
#define GPIO_IDR_IDR12 ((uint16_t)0x1000)
#define GPIO_IDR_IDR13 ((uint16_t)0x2000)
#define GPIO_IDR_IDR14 ((uint16_t)0x4000)
#define GPIO_IDR_IDR15 ((uint16_t)0x8000)


#define GPIO_ODR_ODR0 ((uint16_t)0x0001)
#define GPIO_ODR_ODR1 ((uint16_t)0x0002)
#define GPIO_ODR_ODR2 ((uint16_t)0x0004)
#define GPIO_ODR_ODR3 ((uint16_t)0x0008)
#define GPIO_ODR_ODR4 ((uint16_t)0x0010)
#define GPIO_ODR_ODR5 ((uint16_t)0x0020)
#define GPIO_ODR_ODR6 ((uint16_t)0x0040)
#define GPIO_ODR_ODR7 ((uint16_t)0x0080)
#define GPIO_ODR_ODR8 ((uint16_t)0x0100)
#define GPIO_ODR_ODR9 ((uint16_t)0x0200)
#define GPIO_ODR_ODR10 ((uint16_t)0x0400)
#define GPIO_ODR_ODR11 ((uint16_t)0x0800)
#define GPIO_ODR_ODR12 ((uint16_t)0x1000)
#define GPIO_ODR_ODR13 ((uint16_t)0x2000)
#define GPIO_ODR_ODR14 ((uint16_t)0x4000)
#define GPIO_ODR_ODR15 ((uint16_t)0x8000)


#define GPIO_BSRR_BS0 ((uint32_t)0x00000001)
#define GPIO_BSRR_BS1 ((uint32_t)0x00000002)
#define GPIO_BSRR_BS2 ((uint32_t)0x00000004)
#define GPIO_BSRR_BS3 ((uint32_t)0x00000008)
#define GPIO_BSRR_BS4 ((uint32_t)0x00000010)
#define GPIO_BSRR_BS5 ((uint32_t)0x00000020)
#define GPIO_BSRR_BS6 ((uint32_t)0x00000040)
#define GPIO_BSRR_BS7 ((uint32_t)0x00000080)
#define GPIO_BSRR_BS8 ((uint32_t)0x00000100)
#define GPIO_BSRR_BS9 ((uint32_t)0x00000200)
#define GPIO_BSRR_BS10 ((uint32_t)0x00000400)
#define GPIO_BSRR_BS11 ((uint32_t)0x00000800)
#define GPIO_BSRR_BS12 ((uint32_t)0x00001000)
#define GPIO_BSRR_BS13 ((uint32_t)0x00002000)
#define GPIO_BSRR_BS14 ((uint32_t)0x00004000)
#define GPIO_BSRR_BS15 ((uint32_t)0x00008000)

#define GPIO_BSRR_BR0 ((uint32_t)0x00010000)
#define GPIO_BSRR_BR1 ((uint32_t)0x00020000)
#define GPIO_BSRR_BR2 ((uint32_t)0x00040000)
#define GPIO_BSRR_BR3 ((uint32_t)0x00080000)
#define GPIO_BSRR_BR4 ((uint32_t)0x00100000)
#define GPIO_BSRR_BR5 ((uint32_t)0x00200000)
#define GPIO_BSRR_BR6 ((uint32_t)0x00400000)
#define GPIO_BSRR_BR7 ((uint32_t)0x00800000)
#define GPIO_BSRR_BR8 ((uint32_t)0x01000000)
#define GPIO_BSRR_BR9 ((uint32_t)0x02000000)
#define GPIO_BSRR_BR10 ((uint32_t)0x04000000)
#define GPIO_BSRR_BR11 ((uint32_t)0x08000000)
#define GPIO_BSRR_BR12 ((uint32_t)0x10000000)
#define GPIO_BSRR_BR13 ((uint32_t)0x20000000)
#define GPIO_BSRR_BR14 ((uint32_t)0x40000000)
#define GPIO_BSRR_BR15 ((uint32_t)0x80000000)


#define GPIO_BRR_BR0 ((uint16_t)0x0001)
#define GPIO_BRR_BR1 ((uint16_t)0x0002)
#define GPIO_BRR_BR2 ((uint16_t)0x0004)
#define GPIO_BRR_BR3 ((uint16_t)0x0008)
#define GPIO_BRR_BR4 ((uint16_t)0x0010)
#define GPIO_BRR_BR5 ((uint16_t)0x0020)
#define GPIO_BRR_BR6 ((uint16_t)0x0040)
#define GPIO_BRR_BR7 ((uint16_t)0x0080)
#define GPIO_BRR_BR8 ((uint16_t)0x0100)
#define GPIO_BRR_BR9 ((uint16_t)0x0200)
#define GPIO_BRR_BR10 ((uint16_t)0x0400)
#define GPIO_BRR_BR11 ((uint16_t)0x0800)
#define GPIO_BRR_BR12 ((uint16_t)0x1000)
#define GPIO_BRR_BR13 ((uint16_t)0x2000)
#define GPIO_BRR_BR14 ((uint16_t)0x4000)
#define GPIO_BRR_BR15 ((uint16_t)0x8000)


#define GPIO_LCKR_LCK0 ((uint32_t)0x00000001)
#define GPIO_LCKR_LCK1 ((uint32_t)0x00000002)
#define GPIO_LCKR_LCK2 ((uint32_t)0x00000004)
#define GPIO_LCKR_LCK3 ((uint32_t)0x00000008)
#define GPIO_LCKR_LCK4 ((uint32_t)0x00000010)
#define GPIO_LCKR_LCK5 ((uint32_t)0x00000020)
#define GPIO_LCKR_LCK6 ((uint32_t)0x00000040)
#define GPIO_LCKR_LCK7 ((uint32_t)0x00000080)
#define GPIO_LCKR_LCK8 ((uint32_t)0x00000100)
#define GPIO_LCKR_LCK9 ((uint32_t)0x00000200)
#define GPIO_LCKR_LCK10 ((uint32_t)0x00000400)
#define GPIO_LCKR_LCK11 ((uint32_t)0x00000800)
#define GPIO_LCKR_LCK12 ((uint32_t)0x00001000)
#define GPIO_LCKR_LCK13 ((uint32_t)0x00002000)
#define GPIO_LCKR_LCK14 ((uint32_t)0x00004000)
#define GPIO_LCKR_LCK15 ((uint32_t)0x00008000)
#define GPIO_LCKR_LCKK ((uint32_t)0x00010000)




#define AFIO_EVCR_PIN ((uint8_t)0x0F)
#define AFIO_EVCR_PIN_0 ((uint8_t)0x01)
#define AFIO_EVCR_PIN_1 ((uint8_t)0x02)
#define AFIO_EVCR_PIN_2 ((uint8_t)0x04)
#define AFIO_EVCR_PIN_3 ((uint8_t)0x08)


#define AFIO_EVCR_PIN_PX0 ((uint8_t)0x00)
#define AFIO_EVCR_PIN_PX1 ((uint8_t)0x01)
#define AFIO_EVCR_PIN_PX2 ((uint8_t)0x02)
#define AFIO_EVCR_PIN_PX3 ((uint8_t)0x03)
#define AFIO_EVCR_PIN_PX4 ((uint8_t)0x04)
#define AFIO_EVCR_PIN_PX5 ((uint8_t)0x05)
#define AFIO_EVCR_PIN_PX6 ((uint8_t)0x06)
#define AFIO_EVCR_PIN_PX7 ((uint8_t)0x07)
#define AFIO_EVCR_PIN_PX8 ((uint8_t)0x08)
#define AFIO_EVCR_PIN_PX9 ((uint8_t)0x09)
#define AFIO_EVCR_PIN_PX10 ((uint8_t)0x0A)
#define AFIO_EVCR_PIN_PX11 ((uint8_t)0x0B)
#define AFIO_EVCR_PIN_PX12 ((uint8_t)0x0C)
#define AFIO_EVCR_PIN_PX13 ((uint8_t)0x0D)
#define AFIO_EVCR_PIN_PX14 ((uint8_t)0x0E)
#define AFIO_EVCR_PIN_PX15 ((uint8_t)0x0F)

#define AFIO_EVCR_PORT ((uint8_t)0x70)
#define AFIO_EVCR_PORT_0 ((uint8_t)0x10)
#define AFIO_EVCR_PORT_1 ((uint8_t)0x20)
#define AFIO_EVCR_PORT_2 ((uint8_t)0x40)


#define AFIO_EVCR_PORT_PA ((uint8_t)0x00)
#define AFIO_EVCR_PORT_PB ((uint8_t)0x10)
#define AFIO_EVCR_PORT_PC ((uint8_t)0x20)
#define AFIO_EVCR_PORT_PD ((uint8_t)0x30)
#define AFIO_EVCR_PORT_PE ((uint8_t)0x40)

#define AFIO_EVCR_EVOE ((uint8_t)0x80)


#define AFIO_MAPR_SPI1_REMAP ((uint32_t)0x00000001)
#define AFIO_MAPR_I2C1_REMAP ((uint32_t)0x00000002)
#define AFIO_MAPR_USART1_REMAP ((uint32_t)0x00000004)
#define AFIO_MAPR_USART2_REMAP ((uint32_t)0x00000008)

#define AFIO_MAPR_USART3_REMAP ((uint32_t)0x00000030)
#define AFIO_MAPR_USART3_REMAP_0 ((uint32_t)0x00000010)
#define AFIO_MAPR_USART3_REMAP_1 ((uint32_t)0x00000020)


#define AFIO_MAPR_USART3_REMAP_NOREMAP ((uint32_t)0x00000000)
#define AFIO_MAPR_USART3_REMAP_PARTIALREMAP ((uint32_t)0x00000010)
#define AFIO_MAPR_USART3_REMAP_FULLREMAP ((uint32_t)0x00000030)

#define AFIO_MAPR_TIM1_REMAP ((uint32_t)0x000000C0)
#define AFIO_MAPR_TIM1_REMAP_0 ((uint32_t)0x00000040)
#define AFIO_MAPR_TIM1_REMAP_1 ((uint32_t)0x00000080)


#define AFIO_MAPR_TIM1_REMAP_NOREMAP ((uint32_t)0x00000000)
#define AFIO_MAPR_TIM1_REMAP_PARTIALREMAP ((uint32_t)0x00000040)
#define AFIO_MAPR_TIM1_REMAP_FULLREMAP ((uint32_t)0x000000C0)

#define AFIO_MAPR_TIM2_REMAP ((uint32_t)0x00000300)
#define AFIO_MAPR_TIM2_REMAP_0 ((uint32_t)0x00000100)
#define AFIO_MAPR_TIM2_REMAP_1 ((uint32_t)0x00000200)


#define AFIO_MAPR_TIM2_REMAP_NOREMAP ((uint32_t)0x00000000)
#define AFIO_MAPR_TIM2_REMAP_PARTIALREMAP1 ((uint32_t)0x00000100)
#define AFIO_MAPR_TIM2_REMAP_PARTIALREMAP2 ((uint32_t)0x00000200)
#define AFIO_MAPR_TIM2_REMAP_FULLREMAP ((uint32_t)0x00000300)

#define AFIO_MAPR_TIM3_REMAP ((uint32_t)0x00000C00)
#define AFIO_MAPR_TIM3_REMAP_0 ((uint32_t)0x00000400)
#define AFIO_MAPR_TIM3_REMAP_1 ((uint32_t)0x00000800)


#define AFIO_MAPR_TIM3_REMAP_NOREMAP ((uint32_t)0x00000000)
#define AFIO_MAPR_TIM3_REMAP_PARTIALREMAP ((uint32_t)0x00000800)
#define AFIO_MAPR_TIM3_REMAP_FULLREMAP ((uint32_t)0x00000C00)

#define AFIO_MAPR_TIM4_REMAP ((uint32_t)0x00001000)

#define AFIO_MAPR_CAN_REMAP ((uint32_t)0x00006000)
#define AFIO_MAPR_CAN_REMAP_0 ((uint32_t)0x00002000)
#define AFIO_MAPR_CAN_REMAP_1 ((uint32_t)0x00004000)


#define AFIO_MAPR_CAN_REMAP_REMAP1 ((uint32_t)0x00000000)
#define AFIO_MAPR_CAN_REMAP_REMAP2 ((uint32_t)0x00004000)
#define AFIO_MAPR_CAN_REMAP_REMAP3 ((uint32_t)0x00006000)

#define AFIO_MAPR_PD01_REMAP ((uint32_t)0x00008000)
#define AFIO_MAPR_TIM5CH4_IREMAP ((uint32_t)0x00010000)
#define AFIO_MAPR_ADC1_ETRGINJ_REMAP ((uint32_t)0x00020000)
#define AFIO_MAPR_ADC1_ETRGREG_REMAP ((uint32_t)0x00040000)
#define AFIO_MAPR_ADC2_ETRGINJ_REMAP ((uint32_t)0x00080000)
#define AFIO_MAPR_ADC2_ETRGREG_REMAP ((uint32_t)0x00100000)


#define AFIO_MAPR_SWJ_CFG ((uint32_t)0x07000000)
#define AFIO_MAPR_SWJ_CFG_0 ((uint32_t)0x01000000)
#define AFIO_MAPR_SWJ_CFG_1 ((uint32_t)0x02000000)
#define AFIO_MAPR_SWJ_CFG_2 ((uint32_t)0x04000000)

#define AFIO_MAPR_SWJ_CFG_RESET ((uint32_t)0x00000000)
#define AFIO_MAPR_SWJ_CFG_NOJNTRST ((uint32_t)0x01000000)
#define AFIO_MAPR_SWJ_CFG_JTAGDISABLE ((uint32_t)0x02000000)
#define AFIO_MAPR_SWJ_CFG_DISABLE ((uint32_t)0x04000000)
# 2687 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
#define AFIO_EXTICR1_EXTI0 ((uint16_t)0x000F)
#define AFIO_EXTICR1_EXTI1 ((uint16_t)0x00F0)
#define AFIO_EXTICR1_EXTI2 ((uint16_t)0x0F00)
#define AFIO_EXTICR1_EXTI3 ((uint16_t)0xF000)


#define AFIO_EXTICR1_EXTI0_PA ((uint16_t)0x0000)
#define AFIO_EXTICR1_EXTI0_PB ((uint16_t)0x0001)
#define AFIO_EXTICR1_EXTI0_PC ((uint16_t)0x0002)
#define AFIO_EXTICR1_EXTI0_PD ((uint16_t)0x0003)
#define AFIO_EXTICR1_EXTI0_PE ((uint16_t)0x0004)
#define AFIO_EXTICR1_EXTI0_PF ((uint16_t)0x0005)
#define AFIO_EXTICR1_EXTI0_PG ((uint16_t)0x0006)


#define AFIO_EXTICR1_EXTI1_PA ((uint16_t)0x0000)
#define AFIO_EXTICR1_EXTI1_PB ((uint16_t)0x0010)
#define AFIO_EXTICR1_EXTI1_PC ((uint16_t)0x0020)
#define AFIO_EXTICR1_EXTI1_PD ((uint16_t)0x0030)
#define AFIO_EXTICR1_EXTI1_PE ((uint16_t)0x0040)
#define AFIO_EXTICR1_EXTI1_PF ((uint16_t)0x0050)
#define AFIO_EXTICR1_EXTI1_PG ((uint16_t)0x0060)


#define AFIO_EXTICR1_EXTI2_PA ((uint16_t)0x0000)
#define AFIO_EXTICR1_EXTI2_PB ((uint16_t)0x0100)
#define AFIO_EXTICR1_EXTI2_PC ((uint16_t)0x0200)
#define AFIO_EXTICR1_EXTI2_PD ((uint16_t)0x0300)
#define AFIO_EXTICR1_EXTI2_PE ((uint16_t)0x0400)
#define AFIO_EXTICR1_EXTI2_PF ((uint16_t)0x0500)
#define AFIO_EXTICR1_EXTI2_PG ((uint16_t)0x0600)


#define AFIO_EXTICR1_EXTI3_PA ((uint16_t)0x0000)
#define AFIO_EXTICR1_EXTI3_PB ((uint16_t)0x1000)
#define AFIO_EXTICR1_EXTI3_PC ((uint16_t)0x2000)
#define AFIO_EXTICR1_EXTI3_PD ((uint16_t)0x3000)
#define AFIO_EXTICR1_EXTI3_PE ((uint16_t)0x4000)
#define AFIO_EXTICR1_EXTI3_PF ((uint16_t)0x5000)
#define AFIO_EXTICR1_EXTI3_PG ((uint16_t)0x6000)


#define AFIO_EXTICR2_EXTI4 ((uint16_t)0x000F)
#define AFIO_EXTICR2_EXTI5 ((uint16_t)0x00F0)
#define AFIO_EXTICR2_EXTI6 ((uint16_t)0x0F00)
#define AFIO_EXTICR2_EXTI7 ((uint16_t)0xF000)


#define AFIO_EXTICR2_EXTI4_PA ((uint16_t)0x0000)
#define AFIO_EXTICR2_EXTI4_PB ((uint16_t)0x0001)
#define AFIO_EXTICR2_EXTI4_PC ((uint16_t)0x0002)
#define AFIO_EXTICR2_EXTI4_PD ((uint16_t)0x0003)
#define AFIO_EXTICR2_EXTI4_PE ((uint16_t)0x0004)
#define AFIO_EXTICR2_EXTI4_PF ((uint16_t)0x0005)
#define AFIO_EXTICR2_EXTI4_PG ((uint16_t)0x0006)


#define AFIO_EXTICR2_EXTI5_PA ((uint16_t)0x0000)
#define AFIO_EXTICR2_EXTI5_PB ((uint16_t)0x0010)
#define AFIO_EXTICR2_EXTI5_PC ((uint16_t)0x0020)
#define AFIO_EXTICR2_EXTI5_PD ((uint16_t)0x0030)
#define AFIO_EXTICR2_EXTI5_PE ((uint16_t)0x0040)
#define AFIO_EXTICR2_EXTI5_PF ((uint16_t)0x0050)
#define AFIO_EXTICR2_EXTI5_PG ((uint16_t)0x0060)


#define AFIO_EXTICR2_EXTI6_PA ((uint16_t)0x0000)
#define AFIO_EXTICR2_EXTI6_PB ((uint16_t)0x0100)
#define AFIO_EXTICR2_EXTI6_PC ((uint16_t)0x0200)
#define AFIO_EXTICR2_EXTI6_PD ((uint16_t)0x0300)
#define AFIO_EXTICR2_EXTI6_PE ((uint16_t)0x0400)
#define AFIO_EXTICR2_EXTI6_PF ((uint16_t)0x0500)
#define AFIO_EXTICR2_EXTI6_PG ((uint16_t)0x0600)


#define AFIO_EXTICR2_EXTI7_PA ((uint16_t)0x0000)
#define AFIO_EXTICR2_EXTI7_PB ((uint16_t)0x1000)
#define AFIO_EXTICR2_EXTI7_PC ((uint16_t)0x2000)
#define AFIO_EXTICR2_EXTI7_PD ((uint16_t)0x3000)
#define AFIO_EXTICR2_EXTI7_PE ((uint16_t)0x4000)
#define AFIO_EXTICR2_EXTI7_PF ((uint16_t)0x5000)
#define AFIO_EXTICR2_EXTI7_PG ((uint16_t)0x6000)


#define AFIO_EXTICR3_EXTI8 ((uint16_t)0x000F)
#define AFIO_EXTICR3_EXTI9 ((uint16_t)0x00F0)
#define AFIO_EXTICR3_EXTI10 ((uint16_t)0x0F00)
#define AFIO_EXTICR3_EXTI11 ((uint16_t)0xF000)


#define AFIO_EXTICR3_EXTI8_PA ((uint16_t)0x0000)
#define AFIO_EXTICR3_EXTI8_PB ((uint16_t)0x0001)
#define AFIO_EXTICR3_EXTI8_PC ((uint16_t)0x0002)
#define AFIO_EXTICR3_EXTI8_PD ((uint16_t)0x0003)
#define AFIO_EXTICR3_EXTI8_PE ((uint16_t)0x0004)
#define AFIO_EXTICR3_EXTI8_PF ((uint16_t)0x0005)
#define AFIO_EXTICR3_EXTI8_PG ((uint16_t)0x0006)


#define AFIO_EXTICR3_EXTI9_PA ((uint16_t)0x0000)
#define AFIO_EXTICR3_EXTI9_PB ((uint16_t)0x0010)
#define AFIO_EXTICR3_EXTI9_PC ((uint16_t)0x0020)
#define AFIO_EXTICR3_EXTI9_PD ((uint16_t)0x0030)
#define AFIO_EXTICR3_EXTI9_PE ((uint16_t)0x0040)
#define AFIO_EXTICR3_EXTI9_PF ((uint16_t)0x0050)
#define AFIO_EXTICR3_EXTI9_PG ((uint16_t)0x0060)


#define AFIO_EXTICR3_EXTI10_PA ((uint16_t)0x0000)
#define AFIO_EXTICR3_EXTI10_PB ((uint16_t)0x0100)
#define AFIO_EXTICR3_EXTI10_PC ((uint16_t)0x0200)
#define AFIO_EXTICR3_EXTI10_PD ((uint16_t)0x0300)
#define AFIO_EXTICR3_EXTI10_PE ((uint16_t)0x0400)
#define AFIO_EXTICR3_EXTI10_PF ((uint16_t)0x0500)
#define AFIO_EXTICR3_EXTI10_PG ((uint16_t)0x0600)


#define AFIO_EXTICR3_EXTI11_PA ((uint16_t)0x0000)
#define AFIO_EXTICR3_EXTI11_PB ((uint16_t)0x1000)
#define AFIO_EXTICR3_EXTI11_PC ((uint16_t)0x2000)
#define AFIO_EXTICR3_EXTI11_PD ((uint16_t)0x3000)
#define AFIO_EXTICR3_EXTI11_PE ((uint16_t)0x4000)
#define AFIO_EXTICR3_EXTI11_PF ((uint16_t)0x5000)
#define AFIO_EXTICR3_EXTI11_PG ((uint16_t)0x6000)


#define AFIO_EXTICR4_EXTI12 ((uint16_t)0x000F)
#define AFIO_EXTICR4_EXTI13 ((uint16_t)0x00F0)
#define AFIO_EXTICR4_EXTI14 ((uint16_t)0x0F00)
#define AFIO_EXTICR4_EXTI15 ((uint16_t)0xF000)


#define AFIO_EXTICR4_EXTI12_PA ((uint16_t)0x0000)
#define AFIO_EXTICR4_EXTI12_PB ((uint16_t)0x0001)
#define AFIO_EXTICR4_EXTI12_PC ((uint16_t)0x0002)
#define AFIO_EXTICR4_EXTI12_PD ((uint16_t)0x0003)
#define AFIO_EXTICR4_EXTI12_PE ((uint16_t)0x0004)
#define AFIO_EXTICR4_EXTI12_PF ((uint16_t)0x0005)
#define AFIO_EXTICR4_EXTI12_PG ((uint16_t)0x0006)


#define AFIO_EXTICR4_EXTI13_PA ((uint16_t)0x0000)
#define AFIO_EXTICR4_EXTI13_PB ((uint16_t)0x0010)
#define AFIO_EXTICR4_EXTI13_PC ((uint16_t)0x0020)
#define AFIO_EXTICR4_EXTI13_PD ((uint16_t)0x0030)
#define AFIO_EXTICR4_EXTI13_PE ((uint16_t)0x0040)
#define AFIO_EXTICR4_EXTI13_PF ((uint16_t)0x0050)
#define AFIO_EXTICR4_EXTI13_PG ((uint16_t)0x0060)


#define AFIO_EXTICR4_EXTI14_PA ((uint16_t)0x0000)
#define AFIO_EXTICR4_EXTI14_PB ((uint16_t)0x0100)
#define AFIO_EXTICR4_EXTI14_PC ((uint16_t)0x0200)
#define AFIO_EXTICR4_EXTI14_PD ((uint16_t)0x0300)
#define AFIO_EXTICR4_EXTI14_PE ((uint16_t)0x0400)
#define AFIO_EXTICR4_EXTI14_PF ((uint16_t)0x0500)
#define AFIO_EXTICR4_EXTI14_PG ((uint16_t)0x0600)


#define AFIO_EXTICR4_EXTI15_PA ((uint16_t)0x0000)
#define AFIO_EXTICR4_EXTI15_PB ((uint16_t)0x1000)
#define AFIO_EXTICR4_EXTI15_PC ((uint16_t)0x2000)
#define AFIO_EXTICR4_EXTI15_PD ((uint16_t)0x3000)
#define AFIO_EXTICR4_EXTI15_PE ((uint16_t)0x4000)
#define AFIO_EXTICR4_EXTI15_PF ((uint16_t)0x5000)
#define AFIO_EXTICR4_EXTI15_PG ((uint16_t)0x6000)
# 2889 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
#define SysTick_CTRL_ENABLE ((uint32_t)0x00000001)
#define SysTick_CTRL_TICKINT ((uint32_t)0x00000002)
#define SysTick_CTRL_CLKSOURCE ((uint32_t)0x00000004)
#define SysTick_CTRL_COUNTFLAG ((uint32_t)0x00010000)


#define SysTick_LOAD_RELOAD ((uint32_t)0x00FFFFFF)


#define SysTick_VAL_CURRENT ((uint32_t)0x00FFFFFF)


#define SysTick_CALIB_TENMS ((uint32_t)0x00FFFFFF)
#define SysTick_CALIB_SKEW ((uint32_t)0x40000000)
#define SysTick_CALIB_NOREF ((uint32_t)0x80000000)
# 2912 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
#define NVIC_ISER_SETENA ((uint32_t)0xFFFFFFFF)
#define NVIC_ISER_SETENA_0 ((uint32_t)0x00000001)
#define NVIC_ISER_SETENA_1 ((uint32_t)0x00000002)
#define NVIC_ISER_SETENA_2 ((uint32_t)0x00000004)
#define NVIC_ISER_SETENA_3 ((uint32_t)0x00000008)
#define NVIC_ISER_SETENA_4 ((uint32_t)0x00000010)
#define NVIC_ISER_SETENA_5 ((uint32_t)0x00000020)
#define NVIC_ISER_SETENA_6 ((uint32_t)0x00000040)
#define NVIC_ISER_SETENA_7 ((uint32_t)0x00000080)
#define NVIC_ISER_SETENA_8 ((uint32_t)0x00000100)
#define NVIC_ISER_SETENA_9 ((uint32_t)0x00000200)
#define NVIC_ISER_SETENA_10 ((uint32_t)0x00000400)
#define NVIC_ISER_SETENA_11 ((uint32_t)0x00000800)
#define NVIC_ISER_SETENA_12 ((uint32_t)0x00001000)
#define NVIC_ISER_SETENA_13 ((uint32_t)0x00002000)
#define NVIC_ISER_SETENA_14 ((uint32_t)0x00004000)
#define NVIC_ISER_SETENA_15 ((uint32_t)0x00008000)
#define NVIC_ISER_SETENA_16 ((uint32_t)0x00010000)
#define NVIC_ISER_SETENA_17 ((uint32_t)0x00020000)
#define NVIC_ISER_SETENA_18 ((uint32_t)0x00040000)
#define NVIC_ISER_SETENA_19 ((uint32_t)0x00080000)
#define NVIC_ISER_SETENA_20 ((uint32_t)0x00100000)
#define NVIC_ISER_SETENA_21 ((uint32_t)0x00200000)
#define NVIC_ISER_SETENA_22 ((uint32_t)0x00400000)
#define NVIC_ISER_SETENA_23 ((uint32_t)0x00800000)
#define NVIC_ISER_SETENA_24 ((uint32_t)0x01000000)
#define NVIC_ISER_SETENA_25 ((uint32_t)0x02000000)
#define NVIC_ISER_SETENA_26 ((uint32_t)0x04000000)
#define NVIC_ISER_SETENA_27 ((uint32_t)0x08000000)
#define NVIC_ISER_SETENA_28 ((uint32_t)0x10000000)
#define NVIC_ISER_SETENA_29 ((uint32_t)0x20000000)
#define NVIC_ISER_SETENA_30 ((uint32_t)0x40000000)
#define NVIC_ISER_SETENA_31 ((uint32_t)0x80000000)


#define NVIC_ICER_CLRENA ((uint32_t)0xFFFFFFFF)
#define NVIC_ICER_CLRENA_0 ((uint32_t)0x00000001)
#define NVIC_ICER_CLRENA_1 ((uint32_t)0x00000002)
#define NVIC_ICER_CLRENA_2 ((uint32_t)0x00000004)
#define NVIC_ICER_CLRENA_3 ((uint32_t)0x00000008)
#define NVIC_ICER_CLRENA_4 ((uint32_t)0x00000010)
#define NVIC_ICER_CLRENA_5 ((uint32_t)0x00000020)
#define NVIC_ICER_CLRENA_6 ((uint32_t)0x00000040)
#define NVIC_ICER_CLRENA_7 ((uint32_t)0x00000080)
#define NVIC_ICER_CLRENA_8 ((uint32_t)0x00000100)
#define NVIC_ICER_CLRENA_9 ((uint32_t)0x00000200)
#define NVIC_ICER_CLRENA_10 ((uint32_t)0x00000400)
#define NVIC_ICER_CLRENA_11 ((uint32_t)0x00000800)
#define NVIC_ICER_CLRENA_12 ((uint32_t)0x00001000)
#define NVIC_ICER_CLRENA_13 ((uint32_t)0x00002000)
#define NVIC_ICER_CLRENA_14 ((uint32_t)0x00004000)
#define NVIC_ICER_CLRENA_15 ((uint32_t)0x00008000)
#define NVIC_ICER_CLRENA_16 ((uint32_t)0x00010000)
#define NVIC_ICER_CLRENA_17 ((uint32_t)0x00020000)
#define NVIC_ICER_CLRENA_18 ((uint32_t)0x00040000)
#define NVIC_ICER_CLRENA_19 ((uint32_t)0x00080000)
#define NVIC_ICER_CLRENA_20 ((uint32_t)0x00100000)
#define NVIC_ICER_CLRENA_21 ((uint32_t)0x00200000)
#define NVIC_ICER_CLRENA_22 ((uint32_t)0x00400000)
#define NVIC_ICER_CLRENA_23 ((uint32_t)0x00800000)
#define NVIC_ICER_CLRENA_24 ((uint32_t)0x01000000)
#define NVIC_ICER_CLRENA_25 ((uint32_t)0x02000000)
#define NVIC_ICER_CLRENA_26 ((uint32_t)0x04000000)
#define NVIC_ICER_CLRENA_27 ((uint32_t)0x08000000)
#define NVIC_ICER_CLRENA_28 ((uint32_t)0x10000000)
#define NVIC_ICER_CLRENA_29 ((uint32_t)0x20000000)
#define NVIC_ICER_CLRENA_30 ((uint32_t)0x40000000)
#define NVIC_ICER_CLRENA_31 ((uint32_t)0x80000000)


#define NVIC_ISPR_SETPEND ((uint32_t)0xFFFFFFFF)
#define NVIC_ISPR_SETPEND_0 ((uint32_t)0x00000001)
#define NVIC_ISPR_SETPEND_1 ((uint32_t)0x00000002)
#define NVIC_ISPR_SETPEND_2 ((uint32_t)0x00000004)
#define NVIC_ISPR_SETPEND_3 ((uint32_t)0x00000008)
#define NVIC_ISPR_SETPEND_4 ((uint32_t)0x00000010)
#define NVIC_ISPR_SETPEND_5 ((uint32_t)0x00000020)
#define NVIC_ISPR_SETPEND_6 ((uint32_t)0x00000040)
#define NVIC_ISPR_SETPEND_7 ((uint32_t)0x00000080)
#define NVIC_ISPR_SETPEND_8 ((uint32_t)0x00000100)
#define NVIC_ISPR_SETPEND_9 ((uint32_t)0x00000200)
#define NVIC_ISPR_SETPEND_10 ((uint32_t)0x00000400)
#define NVIC_ISPR_SETPEND_11 ((uint32_t)0x00000800)
#define NVIC_ISPR_SETPEND_12 ((uint32_t)0x00001000)
#define NVIC_ISPR_SETPEND_13 ((uint32_t)0x00002000)
#define NVIC_ISPR_SETPEND_14 ((uint32_t)0x00004000)
#define NVIC_ISPR_SETPEND_15 ((uint32_t)0x00008000)
#define NVIC_ISPR_SETPEND_16 ((uint32_t)0x00010000)
#define NVIC_ISPR_SETPEND_17 ((uint32_t)0x00020000)
#define NVIC_ISPR_SETPEND_18 ((uint32_t)0x00040000)
#define NVIC_ISPR_SETPEND_19 ((uint32_t)0x00080000)
#define NVIC_ISPR_SETPEND_20 ((uint32_t)0x00100000)
#define NVIC_ISPR_SETPEND_21 ((uint32_t)0x00200000)
#define NVIC_ISPR_SETPEND_22 ((uint32_t)0x00400000)
#define NVIC_ISPR_SETPEND_23 ((uint32_t)0x00800000)
#define NVIC_ISPR_SETPEND_24 ((uint32_t)0x01000000)
#define NVIC_ISPR_SETPEND_25 ((uint32_t)0x02000000)
#define NVIC_ISPR_SETPEND_26 ((uint32_t)0x04000000)
#define NVIC_ISPR_SETPEND_27 ((uint32_t)0x08000000)
#define NVIC_ISPR_SETPEND_28 ((uint32_t)0x10000000)
#define NVIC_ISPR_SETPEND_29 ((uint32_t)0x20000000)
#define NVIC_ISPR_SETPEND_30 ((uint32_t)0x40000000)
#define NVIC_ISPR_SETPEND_31 ((uint32_t)0x80000000)


#define NVIC_ICPR_CLRPEND ((uint32_t)0xFFFFFFFF)
#define NVIC_ICPR_CLRPEND_0 ((uint32_t)0x00000001)
#define NVIC_ICPR_CLRPEND_1 ((uint32_t)0x00000002)
#define NVIC_ICPR_CLRPEND_2 ((uint32_t)0x00000004)
#define NVIC_ICPR_CLRPEND_3 ((uint32_t)0x00000008)
#define NVIC_ICPR_CLRPEND_4 ((uint32_t)0x00000010)
#define NVIC_ICPR_CLRPEND_5 ((uint32_t)0x00000020)
#define NVIC_ICPR_CLRPEND_6 ((uint32_t)0x00000040)
#define NVIC_ICPR_CLRPEND_7 ((uint32_t)0x00000080)
#define NVIC_ICPR_CLRPEND_8 ((uint32_t)0x00000100)
#define NVIC_ICPR_CLRPEND_9 ((uint32_t)0x00000200)
#define NVIC_ICPR_CLRPEND_10 ((uint32_t)0x00000400)
#define NVIC_ICPR_CLRPEND_11 ((uint32_t)0x00000800)
#define NVIC_ICPR_CLRPEND_12 ((uint32_t)0x00001000)
#define NVIC_ICPR_CLRPEND_13 ((uint32_t)0x00002000)
#define NVIC_ICPR_CLRPEND_14 ((uint32_t)0x00004000)
#define NVIC_ICPR_CLRPEND_15 ((uint32_t)0x00008000)
#define NVIC_ICPR_CLRPEND_16 ((uint32_t)0x00010000)
#define NVIC_ICPR_CLRPEND_17 ((uint32_t)0x00020000)
#define NVIC_ICPR_CLRPEND_18 ((uint32_t)0x00040000)
#define NVIC_ICPR_CLRPEND_19 ((uint32_t)0x00080000)
#define NVIC_ICPR_CLRPEND_20 ((uint32_t)0x00100000)
#define NVIC_ICPR_CLRPEND_21 ((uint32_t)0x00200000)
#define NVIC_ICPR_CLRPEND_22 ((uint32_t)0x00400000)
#define NVIC_ICPR_CLRPEND_23 ((uint32_t)0x00800000)
#define NVIC_ICPR_CLRPEND_24 ((uint32_t)0x01000000)
#define NVIC_ICPR_CLRPEND_25 ((uint32_t)0x02000000)
#define NVIC_ICPR_CLRPEND_26 ((uint32_t)0x04000000)
#define NVIC_ICPR_CLRPEND_27 ((uint32_t)0x08000000)
#define NVIC_ICPR_CLRPEND_28 ((uint32_t)0x10000000)
#define NVIC_ICPR_CLRPEND_29 ((uint32_t)0x20000000)
#define NVIC_ICPR_CLRPEND_30 ((uint32_t)0x40000000)
#define NVIC_ICPR_CLRPEND_31 ((uint32_t)0x80000000)


#define NVIC_IABR_ACTIVE ((uint32_t)0xFFFFFFFF)
#define NVIC_IABR_ACTIVE_0 ((uint32_t)0x00000001)
#define NVIC_IABR_ACTIVE_1 ((uint32_t)0x00000002)
#define NVIC_IABR_ACTIVE_2 ((uint32_t)0x00000004)
#define NVIC_IABR_ACTIVE_3 ((uint32_t)0x00000008)
#define NVIC_IABR_ACTIVE_4 ((uint32_t)0x00000010)
#define NVIC_IABR_ACTIVE_5 ((uint32_t)0x00000020)
#define NVIC_IABR_ACTIVE_6 ((uint32_t)0x00000040)
#define NVIC_IABR_ACTIVE_7 ((uint32_t)0x00000080)
#define NVIC_IABR_ACTIVE_8 ((uint32_t)0x00000100)
#define NVIC_IABR_ACTIVE_9 ((uint32_t)0x00000200)
#define NVIC_IABR_ACTIVE_10 ((uint32_t)0x00000400)
#define NVIC_IABR_ACTIVE_11 ((uint32_t)0x00000800)
#define NVIC_IABR_ACTIVE_12 ((uint32_t)0x00001000)
#define NVIC_IABR_ACTIVE_13 ((uint32_t)0x00002000)
#define NVIC_IABR_ACTIVE_14 ((uint32_t)0x00004000)
#define NVIC_IABR_ACTIVE_15 ((uint32_t)0x00008000)
#define NVIC_IABR_ACTIVE_16 ((uint32_t)0x00010000)
#define NVIC_IABR_ACTIVE_17 ((uint32_t)0x00020000)
#define NVIC_IABR_ACTIVE_18 ((uint32_t)0x00040000)
#define NVIC_IABR_ACTIVE_19 ((uint32_t)0x00080000)
#define NVIC_IABR_ACTIVE_20 ((uint32_t)0x00100000)
#define NVIC_IABR_ACTIVE_21 ((uint32_t)0x00200000)
#define NVIC_IABR_ACTIVE_22 ((uint32_t)0x00400000)
#define NVIC_IABR_ACTIVE_23 ((uint32_t)0x00800000)
#define NVIC_IABR_ACTIVE_24 ((uint32_t)0x01000000)
#define NVIC_IABR_ACTIVE_25 ((uint32_t)0x02000000)
#define NVIC_IABR_ACTIVE_26 ((uint32_t)0x04000000)
#define NVIC_IABR_ACTIVE_27 ((uint32_t)0x08000000)
#define NVIC_IABR_ACTIVE_28 ((uint32_t)0x10000000)
#define NVIC_IABR_ACTIVE_29 ((uint32_t)0x20000000)
#define NVIC_IABR_ACTIVE_30 ((uint32_t)0x40000000)
#define NVIC_IABR_ACTIVE_31 ((uint32_t)0x80000000)


#define NVIC_IPR0_PRI_0 ((uint32_t)0x000000FF)
#define NVIC_IPR0_PRI_1 ((uint32_t)0x0000FF00)
#define NVIC_IPR0_PRI_2 ((uint32_t)0x00FF0000)
#define NVIC_IPR0_PRI_3 ((uint32_t)0xFF000000)


#define NVIC_IPR1_PRI_4 ((uint32_t)0x000000FF)
#define NVIC_IPR1_PRI_5 ((uint32_t)0x0000FF00)
#define NVIC_IPR1_PRI_6 ((uint32_t)0x00FF0000)
#define NVIC_IPR1_PRI_7 ((uint32_t)0xFF000000)


#define NVIC_IPR2_PRI_8 ((uint32_t)0x000000FF)
#define NVIC_IPR2_PRI_9 ((uint32_t)0x0000FF00)
#define NVIC_IPR2_PRI_10 ((uint32_t)0x00FF0000)
#define NVIC_IPR2_PRI_11 ((uint32_t)0xFF000000)


#define NVIC_IPR3_PRI_12 ((uint32_t)0x000000FF)
#define NVIC_IPR3_PRI_13 ((uint32_t)0x0000FF00)
#define NVIC_IPR3_PRI_14 ((uint32_t)0x00FF0000)
#define NVIC_IPR3_PRI_15 ((uint32_t)0xFF000000)


#define NVIC_IPR4_PRI_16 ((uint32_t)0x000000FF)
#define NVIC_IPR4_PRI_17 ((uint32_t)0x0000FF00)
#define NVIC_IPR4_PRI_18 ((uint32_t)0x00FF0000)
#define NVIC_IPR4_PRI_19 ((uint32_t)0xFF000000)


#define NVIC_IPR5_PRI_20 ((uint32_t)0x000000FF)
#define NVIC_IPR5_PRI_21 ((uint32_t)0x0000FF00)
#define NVIC_IPR5_PRI_22 ((uint32_t)0x00FF0000)
#define NVIC_IPR5_PRI_23 ((uint32_t)0xFF000000)


#define NVIC_IPR6_PRI_24 ((uint32_t)0x000000FF)
#define NVIC_IPR6_PRI_25 ((uint32_t)0x0000FF00)
#define NVIC_IPR6_PRI_26 ((uint32_t)0x00FF0000)
#define NVIC_IPR6_PRI_27 ((uint32_t)0xFF000000)


#define NVIC_IPR7_PRI_28 ((uint32_t)0x000000FF)
#define NVIC_IPR7_PRI_29 ((uint32_t)0x0000FF00)
#define NVIC_IPR7_PRI_30 ((uint32_t)0x00FF0000)
#define NVIC_IPR7_PRI_31 ((uint32_t)0xFF000000)


#define SCB_CPUID_REVISION ((uint32_t)0x0000000F)
#define SCB_CPUID_PARTNO ((uint32_t)0x0000FFF0)
#define SCB_CPUID_Constant ((uint32_t)0x000F0000)
#define SCB_CPUID_VARIANT ((uint32_t)0x00F00000)
#define SCB_CPUID_IMPLEMENTER ((uint32_t)0xFF000000)


#define SCB_ICSR_VECTACTIVE ((uint32_t)0x000001FF)
#define SCB_ICSR_RETTOBASE ((uint32_t)0x00000800)
#define SCB_ICSR_VECTPENDING ((uint32_t)0x003FF000)
#define SCB_ICSR_ISRPENDING ((uint32_t)0x00400000)
#define SCB_ICSR_ISRPREEMPT ((uint32_t)0x00800000)
#define SCB_ICSR_PENDSTCLR ((uint32_t)0x02000000)
#define SCB_ICSR_PENDSTSET ((uint32_t)0x04000000)
#define SCB_ICSR_PENDSVCLR ((uint32_t)0x08000000)
#define SCB_ICSR_PENDSVSET ((uint32_t)0x10000000)
#define SCB_ICSR_NMIPENDSET ((uint32_t)0x80000000)


#define SCB_VTOR_TBLOFF ((uint32_t)0x1FFFFF80)
#define SCB_VTOR_TBLBASE ((uint32_t)0x20000000)


#define SCB_AIRCR_VECTRESET ((uint32_t)0x00000001)
#define SCB_AIRCR_VECTCLRACTIVE ((uint32_t)0x00000002)
#define SCB_AIRCR_SYSRESETREQ ((uint32_t)0x00000004)

#define SCB_AIRCR_PRIGROUP ((uint32_t)0x00000700)
#define SCB_AIRCR_PRIGROUP_0 ((uint32_t)0x00000100)
#define SCB_AIRCR_PRIGROUP_1 ((uint32_t)0x00000200)
#define SCB_AIRCR_PRIGROUP_2 ((uint32_t)0x00000400)


#define SCB_AIRCR_PRIGROUP0 ((uint32_t)0x00000000)
#define SCB_AIRCR_PRIGROUP1 ((uint32_t)0x00000100)
#define SCB_AIRCR_PRIGROUP2 ((uint32_t)0x00000200)
#define SCB_AIRCR_PRIGROUP3 ((uint32_t)0x00000300)
#define SCB_AIRCR_PRIGROUP4 ((uint32_t)0x00000400)
#define SCB_AIRCR_PRIGROUP5 ((uint32_t)0x00000500)
#define SCB_AIRCR_PRIGROUP6 ((uint32_t)0x00000600)
#define SCB_AIRCR_PRIGROUP7 ((uint32_t)0x00000700)

#define SCB_AIRCR_ENDIANESS ((uint32_t)0x00008000)
#define SCB_AIRCR_VECTKEY ((uint32_t)0xFFFF0000)


#define SCB_SCR_SLEEPONEXIT ((uint8_t)0x02)
#define SCB_SCR_SLEEPDEEP ((uint8_t)0x04)
#define SCB_SCR_SEVONPEND ((uint8_t)0x10)


#define SCB_CCR_NONBASETHRDENA ((uint16_t)0x0001)
#define SCB_CCR_USERSETMPEND ((uint16_t)0x0002)
#define SCB_CCR_UNALIGN_TRP ((uint16_t)0x0008)
#define SCB_CCR_DIV_0_TRP ((uint16_t)0x0010)
#define SCB_CCR_BFHFNMIGN ((uint16_t)0x0100)
#define SCB_CCR_STKALIGN ((uint16_t)0x0200)


#define SCB_SHPR_PRI_N ((uint32_t)0x000000FF)
#define SCB_SHPR_PRI_N1 ((uint32_t)0x0000FF00)
#define SCB_SHPR_PRI_N2 ((uint32_t)0x00FF0000)
#define SCB_SHPR_PRI_N3 ((uint32_t)0xFF000000)


#define SCB_SHCSR_MEMFAULTACT ((uint32_t)0x00000001)
#define SCB_SHCSR_BUSFAULTACT ((uint32_t)0x00000002)
#define SCB_SHCSR_USGFAULTACT ((uint32_t)0x00000008)
#define SCB_SHCSR_SVCALLACT ((uint32_t)0x00000080)
#define SCB_SHCSR_MONITORACT ((uint32_t)0x00000100)
#define SCB_SHCSR_PENDSVACT ((uint32_t)0x00000400)
#define SCB_SHCSR_SYSTICKACT ((uint32_t)0x00000800)
#define SCB_SHCSR_USGFAULTPENDED ((uint32_t)0x00001000)
#define SCB_SHCSR_MEMFAULTPENDED ((uint32_t)0x00002000)
#define SCB_SHCSR_BUSFAULTPENDED ((uint32_t)0x00004000)
#define SCB_SHCSR_SVCALLPENDED ((uint32_t)0x00008000)
#define SCB_SHCSR_MEMFAULTENA ((uint32_t)0x00010000)
#define SCB_SHCSR_BUSFAULTENA ((uint32_t)0x00020000)
#define SCB_SHCSR_USGFAULTENA ((uint32_t)0x00040000)



#define SCB_CFSR_IACCVIOL ((uint32_t)0x00000001)
#define SCB_CFSR_DACCVIOL ((uint32_t)0x00000002)
#define SCB_CFSR_MUNSTKERR ((uint32_t)0x00000008)
#define SCB_CFSR_MSTKERR ((uint32_t)0x00000010)
#define SCB_CFSR_MMARVALID ((uint32_t)0x00000080)

#define SCB_CFSR_IBUSERR ((uint32_t)0x00000100)
#define SCB_CFSR_PRECISERR ((uint32_t)0x00000200)
#define SCB_CFSR_IMPRECISERR ((uint32_t)0x00000400)
#define SCB_CFSR_UNSTKERR ((uint32_t)0x00000800)
#define SCB_CFSR_STKERR ((uint32_t)0x00001000)
#define SCB_CFSR_BFARVALID ((uint32_t)0x00008000)

#define SCB_CFSR_UNDEFINSTR ((uint32_t)0x00010000)
#define SCB_CFSR_INVSTATE ((uint32_t)0x00020000)
#define SCB_CFSR_INVPC ((uint32_t)0x00040000)
#define SCB_CFSR_NOCP ((uint32_t)0x00080000)
#define SCB_CFSR_UNALIGNED ((uint32_t)0x01000000)
#define SCB_CFSR_DIVBYZERO ((uint32_t)0x02000000)


#define SCB_HFSR_VECTTBL ((uint32_t)0x00000002)
#define SCB_HFSR_FORCED ((uint32_t)0x40000000)
#define SCB_HFSR_DEBUGEVT ((uint32_t)0x80000000)


#define SCB_DFSR_HALTED ((uint8_t)0x01)
#define SCB_DFSR_BKPT ((uint8_t)0x02)
#define SCB_DFSR_DWTTRAP ((uint8_t)0x04)
#define SCB_DFSR_VCATCH ((uint8_t)0x08)
#define SCB_DFSR_EXTERNAL ((uint8_t)0x10)


#define SCB_MMFAR_ADDRESS ((uint32_t)0xFFFFFFFF)


#define SCB_BFAR_ADDRESS ((uint32_t)0xFFFFFFFF)


#define SCB_AFSR_IMPDEF ((uint32_t)0xFFFFFFFF)
# 3265 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
#define EXTI_IMR_MR0 ((uint32_t)0x00000001)
#define EXTI_IMR_MR1 ((uint32_t)0x00000002)
#define EXTI_IMR_MR2 ((uint32_t)0x00000004)
#define EXTI_IMR_MR3 ((uint32_t)0x00000008)
#define EXTI_IMR_MR4 ((uint32_t)0x00000010)
#define EXTI_IMR_MR5 ((uint32_t)0x00000020)
#define EXTI_IMR_MR6 ((uint32_t)0x00000040)
#define EXTI_IMR_MR7 ((uint32_t)0x00000080)
#define EXTI_IMR_MR8 ((uint32_t)0x00000100)
#define EXTI_IMR_MR9 ((uint32_t)0x00000200)
#define EXTI_IMR_MR10 ((uint32_t)0x00000400)
#define EXTI_IMR_MR11 ((uint32_t)0x00000800)
#define EXTI_IMR_MR12 ((uint32_t)0x00001000)
#define EXTI_IMR_MR13 ((uint32_t)0x00002000)
#define EXTI_IMR_MR14 ((uint32_t)0x00004000)
#define EXTI_IMR_MR15 ((uint32_t)0x00008000)
#define EXTI_IMR_MR16 ((uint32_t)0x00010000)
#define EXTI_IMR_MR17 ((uint32_t)0x00020000)
#define EXTI_IMR_MR18 ((uint32_t)0x00040000)
#define EXTI_IMR_MR19 ((uint32_t)0x00080000)


#define EXTI_EMR_MR0 ((uint32_t)0x00000001)
#define EXTI_EMR_MR1 ((uint32_t)0x00000002)
#define EXTI_EMR_MR2 ((uint32_t)0x00000004)
#define EXTI_EMR_MR3 ((uint32_t)0x00000008)
#define EXTI_EMR_MR4 ((uint32_t)0x00000010)
#define EXTI_EMR_MR5 ((uint32_t)0x00000020)
#define EXTI_EMR_MR6 ((uint32_t)0x00000040)
#define EXTI_EMR_MR7 ((uint32_t)0x00000080)
#define EXTI_EMR_MR8 ((uint32_t)0x00000100)
#define EXTI_EMR_MR9 ((uint32_t)0x00000200)
#define EXTI_EMR_MR10 ((uint32_t)0x00000400)
#define EXTI_EMR_MR11 ((uint32_t)0x00000800)
#define EXTI_EMR_MR12 ((uint32_t)0x00001000)
#define EXTI_EMR_MR13 ((uint32_t)0x00002000)
#define EXTI_EMR_MR14 ((uint32_t)0x00004000)
#define EXTI_EMR_MR15 ((uint32_t)0x00008000)
#define EXTI_EMR_MR16 ((uint32_t)0x00010000)
#define EXTI_EMR_MR17 ((uint32_t)0x00020000)
#define EXTI_EMR_MR18 ((uint32_t)0x00040000)
#define EXTI_EMR_MR19 ((uint32_t)0x00080000)


#define EXTI_RTSR_TR0 ((uint32_t)0x00000001)
#define EXTI_RTSR_TR1 ((uint32_t)0x00000002)
#define EXTI_RTSR_TR2 ((uint32_t)0x00000004)
#define EXTI_RTSR_TR3 ((uint32_t)0x00000008)
#define EXTI_RTSR_TR4 ((uint32_t)0x00000010)
#define EXTI_RTSR_TR5 ((uint32_t)0x00000020)
#define EXTI_RTSR_TR6 ((uint32_t)0x00000040)
#define EXTI_RTSR_TR7 ((uint32_t)0x00000080)
#define EXTI_RTSR_TR8 ((uint32_t)0x00000100)
#define EXTI_RTSR_TR9 ((uint32_t)0x00000200)
#define EXTI_RTSR_TR10 ((uint32_t)0x00000400)
#define EXTI_RTSR_TR11 ((uint32_t)0x00000800)
#define EXTI_RTSR_TR12 ((uint32_t)0x00001000)
#define EXTI_RTSR_TR13 ((uint32_t)0x00002000)
#define EXTI_RTSR_TR14 ((uint32_t)0x00004000)
#define EXTI_RTSR_TR15 ((uint32_t)0x00008000)
#define EXTI_RTSR_TR16 ((uint32_t)0x00010000)
#define EXTI_RTSR_TR17 ((uint32_t)0x00020000)
#define EXTI_RTSR_TR18 ((uint32_t)0x00040000)
#define EXTI_RTSR_TR19 ((uint32_t)0x00080000)


#define EXTI_FTSR_TR0 ((uint32_t)0x00000001)
#define EXTI_FTSR_TR1 ((uint32_t)0x00000002)
#define EXTI_FTSR_TR2 ((uint32_t)0x00000004)
#define EXTI_FTSR_TR3 ((uint32_t)0x00000008)
#define EXTI_FTSR_TR4 ((uint32_t)0x00000010)
#define EXTI_FTSR_TR5 ((uint32_t)0x00000020)
#define EXTI_FTSR_TR6 ((uint32_t)0x00000040)
#define EXTI_FTSR_TR7 ((uint32_t)0x00000080)
#define EXTI_FTSR_TR8 ((uint32_t)0x00000100)
#define EXTI_FTSR_TR9 ((uint32_t)0x00000200)
#define EXTI_FTSR_TR10 ((uint32_t)0x00000400)
#define EXTI_FTSR_TR11 ((uint32_t)0x00000800)
#define EXTI_FTSR_TR12 ((uint32_t)0x00001000)
#define EXTI_FTSR_TR13 ((uint32_t)0x00002000)
#define EXTI_FTSR_TR14 ((uint32_t)0x00004000)
#define EXTI_FTSR_TR15 ((uint32_t)0x00008000)
#define EXTI_FTSR_TR16 ((uint32_t)0x00010000)
#define EXTI_FTSR_TR17 ((uint32_t)0x00020000)
#define EXTI_FTSR_TR18 ((uint32_t)0x00040000)
#define EXTI_FTSR_TR19 ((uint32_t)0x00080000)


#define EXTI_SWIER_SWIER0 ((uint32_t)0x00000001)
#define EXTI_SWIER_SWIER1 ((uint32_t)0x00000002)
#define EXTI_SWIER_SWIER2 ((uint32_t)0x00000004)
#define EXTI_SWIER_SWIER3 ((uint32_t)0x00000008)
#define EXTI_SWIER_SWIER4 ((uint32_t)0x00000010)
#define EXTI_SWIER_SWIER5 ((uint32_t)0x00000020)
#define EXTI_SWIER_SWIER6 ((uint32_t)0x00000040)
#define EXTI_SWIER_SWIER7 ((uint32_t)0x00000080)
#define EXTI_SWIER_SWIER8 ((uint32_t)0x00000100)
#define EXTI_SWIER_SWIER9 ((uint32_t)0x00000200)
#define EXTI_SWIER_SWIER10 ((uint32_t)0x00000400)
#define EXTI_SWIER_SWIER11 ((uint32_t)0x00000800)
#define EXTI_SWIER_SWIER12 ((uint32_t)0x00001000)
#define EXTI_SWIER_SWIER13 ((uint32_t)0x00002000)
#define EXTI_SWIER_SWIER14 ((uint32_t)0x00004000)
#define EXTI_SWIER_SWIER15 ((uint32_t)0x00008000)
#define EXTI_SWIER_SWIER16 ((uint32_t)0x00010000)
#define EXTI_SWIER_SWIER17 ((uint32_t)0x00020000)
#define EXTI_SWIER_SWIER18 ((uint32_t)0x00040000)
#define EXTI_SWIER_SWIER19 ((uint32_t)0x00080000)


#define EXTI_PR_PR0 ((uint32_t)0x00000001)
#define EXTI_PR_PR1 ((uint32_t)0x00000002)
#define EXTI_PR_PR2 ((uint32_t)0x00000004)
#define EXTI_PR_PR3 ((uint32_t)0x00000008)
#define EXTI_PR_PR4 ((uint32_t)0x00000010)
#define EXTI_PR_PR5 ((uint32_t)0x00000020)
#define EXTI_PR_PR6 ((uint32_t)0x00000040)
#define EXTI_PR_PR7 ((uint32_t)0x00000080)
#define EXTI_PR_PR8 ((uint32_t)0x00000100)
#define EXTI_PR_PR9 ((uint32_t)0x00000200)
#define EXTI_PR_PR10 ((uint32_t)0x00000400)
#define EXTI_PR_PR11 ((uint32_t)0x00000800)
#define EXTI_PR_PR12 ((uint32_t)0x00001000)
#define EXTI_PR_PR13 ((uint32_t)0x00002000)
#define EXTI_PR_PR14 ((uint32_t)0x00004000)
#define EXTI_PR_PR15 ((uint32_t)0x00008000)
#define EXTI_PR_PR16 ((uint32_t)0x00010000)
#define EXTI_PR_PR17 ((uint32_t)0x00020000)
#define EXTI_PR_PR18 ((uint32_t)0x00040000)
#define EXTI_PR_PR19 ((uint32_t)0x00080000)
# 3403 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
#define DMA_ISR_GIF1 ((uint32_t)0x00000001)
#define DMA_ISR_TCIF1 ((uint32_t)0x00000002)
#define DMA_ISR_HTIF1 ((uint32_t)0x00000004)
#define DMA_ISR_TEIF1 ((uint32_t)0x00000008)
#define DMA_ISR_GIF2 ((uint32_t)0x00000010)
#define DMA_ISR_TCIF2 ((uint32_t)0x00000020)
#define DMA_ISR_HTIF2 ((uint32_t)0x00000040)
#define DMA_ISR_TEIF2 ((uint32_t)0x00000080)
#define DMA_ISR_GIF3 ((uint32_t)0x00000100)
#define DMA_ISR_TCIF3 ((uint32_t)0x00000200)
#define DMA_ISR_HTIF3 ((uint32_t)0x00000400)
#define DMA_ISR_TEIF3 ((uint32_t)0x00000800)
#define DMA_ISR_GIF4 ((uint32_t)0x00001000)
#define DMA_ISR_TCIF4 ((uint32_t)0x00002000)
#define DMA_ISR_HTIF4 ((uint32_t)0x00004000)
#define DMA_ISR_TEIF4 ((uint32_t)0x00008000)
#define DMA_ISR_GIF5 ((uint32_t)0x00010000)
#define DMA_ISR_TCIF5 ((uint32_t)0x00020000)
#define DMA_ISR_HTIF5 ((uint32_t)0x00040000)
#define DMA_ISR_TEIF5 ((uint32_t)0x00080000)
#define DMA_ISR_GIF6 ((uint32_t)0x00100000)
#define DMA_ISR_TCIF6 ((uint32_t)0x00200000)
#define DMA_ISR_HTIF6 ((uint32_t)0x00400000)
#define DMA_ISR_TEIF6 ((uint32_t)0x00800000)
#define DMA_ISR_GIF7 ((uint32_t)0x01000000)
#define DMA_ISR_TCIF7 ((uint32_t)0x02000000)
#define DMA_ISR_HTIF7 ((uint32_t)0x04000000)
#define DMA_ISR_TEIF7 ((uint32_t)0x08000000)


#define DMA_IFCR_CGIF1 ((uint32_t)0x00000001)
#define DMA_IFCR_CTCIF1 ((uint32_t)0x00000002)
#define DMA_IFCR_CHTIF1 ((uint32_t)0x00000004)
#define DMA_IFCR_CTEIF1 ((uint32_t)0x00000008)
#define DMA_IFCR_CGIF2 ((uint32_t)0x00000010)
#define DMA_IFCR_CTCIF2 ((uint32_t)0x00000020)
#define DMA_IFCR_CHTIF2 ((uint32_t)0x00000040)
#define DMA_IFCR_CTEIF2 ((uint32_t)0x00000080)
#define DMA_IFCR_CGIF3 ((uint32_t)0x00000100)
#define DMA_IFCR_CTCIF3 ((uint32_t)0x00000200)
#define DMA_IFCR_CHTIF3 ((uint32_t)0x00000400)
#define DMA_IFCR_CTEIF3 ((uint32_t)0x00000800)
#define DMA_IFCR_CGIF4 ((uint32_t)0x00001000)
#define DMA_IFCR_CTCIF4 ((uint32_t)0x00002000)
#define DMA_IFCR_CHTIF4 ((uint32_t)0x00004000)
#define DMA_IFCR_CTEIF4 ((uint32_t)0x00008000)
#define DMA_IFCR_CGIF5 ((uint32_t)0x00010000)
#define DMA_IFCR_CTCIF5 ((uint32_t)0x00020000)
#define DMA_IFCR_CHTIF5 ((uint32_t)0x00040000)
#define DMA_IFCR_CTEIF5 ((uint32_t)0x00080000)
#define DMA_IFCR_CGIF6 ((uint32_t)0x00100000)
#define DMA_IFCR_CTCIF6 ((uint32_t)0x00200000)
#define DMA_IFCR_CHTIF6 ((uint32_t)0x00400000)
#define DMA_IFCR_CTEIF6 ((uint32_t)0x00800000)
#define DMA_IFCR_CGIF7 ((uint32_t)0x01000000)
#define DMA_IFCR_CTCIF7 ((uint32_t)0x02000000)
#define DMA_IFCR_CHTIF7 ((uint32_t)0x04000000)
#define DMA_IFCR_CTEIF7 ((uint32_t)0x08000000)


#define DMA_CCR1_EN ((uint16_t)0x0001)
#define DMA_CCR1_TCIE ((uint16_t)0x0002)
#define DMA_CCR1_HTIE ((uint16_t)0x0004)
#define DMA_CCR1_TEIE ((uint16_t)0x0008)
#define DMA_CCR1_DIR ((uint16_t)0x0010)
#define DMA_CCR1_CIRC ((uint16_t)0x0020)
#define DMA_CCR1_PINC ((uint16_t)0x0040)
#define DMA_CCR1_MINC ((uint16_t)0x0080)

#define DMA_CCR1_PSIZE ((uint16_t)0x0300)
#define DMA_CCR1_PSIZE_0 ((uint16_t)0x0100)
#define DMA_CCR1_PSIZE_1 ((uint16_t)0x0200)

#define DMA_CCR1_MSIZE ((uint16_t)0x0C00)
#define DMA_CCR1_MSIZE_0 ((uint16_t)0x0400)
#define DMA_CCR1_MSIZE_1 ((uint16_t)0x0800)

#define DMA_CCR1_PL ((uint16_t)0x3000)
#define DMA_CCR1_PL_0 ((uint16_t)0x1000)
#define DMA_CCR1_PL_1 ((uint16_t)0x2000)

#define DMA_CCR1_MEM2MEM ((uint16_t)0x4000)


#define DMA_CCR2_EN ((uint16_t)0x0001)
#define DMA_CCR2_TCIE ((uint16_t)0x0002)
#define DMA_CCR2_HTIE ((uint16_t)0x0004)
#define DMA_CCR2_TEIE ((uint16_t)0x0008)
#define DMA_CCR2_DIR ((uint16_t)0x0010)
#define DMA_CCR2_CIRC ((uint16_t)0x0020)
#define DMA_CCR2_PINC ((uint16_t)0x0040)
#define DMA_CCR2_MINC ((uint16_t)0x0080)

#define DMA_CCR2_PSIZE ((uint16_t)0x0300)
#define DMA_CCR2_PSIZE_0 ((uint16_t)0x0100)
#define DMA_CCR2_PSIZE_1 ((uint16_t)0x0200)

#define DMA_CCR2_MSIZE ((uint16_t)0x0C00)
#define DMA_CCR2_MSIZE_0 ((uint16_t)0x0400)
#define DMA_CCR2_MSIZE_1 ((uint16_t)0x0800)

#define DMA_CCR2_PL ((uint16_t)0x3000)
#define DMA_CCR2_PL_0 ((uint16_t)0x1000)
#define DMA_CCR2_PL_1 ((uint16_t)0x2000)

#define DMA_CCR2_MEM2MEM ((uint16_t)0x4000)


#define DMA_CCR3_EN ((uint16_t)0x0001)
#define DMA_CCR3_TCIE ((uint16_t)0x0002)
#define DMA_CCR3_HTIE ((uint16_t)0x0004)
#define DMA_CCR3_TEIE ((uint16_t)0x0008)
#define DMA_CCR3_DIR ((uint16_t)0x0010)
#define DMA_CCR3_CIRC ((uint16_t)0x0020)
#define DMA_CCR3_PINC ((uint16_t)0x0040)
#define DMA_CCR3_MINC ((uint16_t)0x0080)

#define DMA_CCR3_PSIZE ((uint16_t)0x0300)
#define DMA_CCR3_PSIZE_0 ((uint16_t)0x0100)
#define DMA_CCR3_PSIZE_1 ((uint16_t)0x0200)

#define DMA_CCR3_MSIZE ((uint16_t)0x0C00)
#define DMA_CCR3_MSIZE_0 ((uint16_t)0x0400)
#define DMA_CCR3_MSIZE_1 ((uint16_t)0x0800)

#define DMA_CCR3_PL ((uint16_t)0x3000)
#define DMA_CCR3_PL_0 ((uint16_t)0x1000)
#define DMA_CCR3_PL_1 ((uint16_t)0x2000)

#define DMA_CCR3_MEM2MEM ((uint16_t)0x4000)


#define DMA_CCR4_EN ((uint16_t)0x0001)
#define DMA_CCR4_TCIE ((uint16_t)0x0002)
#define DMA_CCR4_HTIE ((uint16_t)0x0004)
#define DMA_CCR4_TEIE ((uint16_t)0x0008)
#define DMA_CCR4_DIR ((uint16_t)0x0010)
#define DMA_CCR4_CIRC ((uint16_t)0x0020)
#define DMA_CCR4_PINC ((uint16_t)0x0040)
#define DMA_CCR4_MINC ((uint16_t)0x0080)

#define DMA_CCR4_PSIZE ((uint16_t)0x0300)
#define DMA_CCR4_PSIZE_0 ((uint16_t)0x0100)
#define DMA_CCR4_PSIZE_1 ((uint16_t)0x0200)

#define DMA_CCR4_MSIZE ((uint16_t)0x0C00)
#define DMA_CCR4_MSIZE_0 ((uint16_t)0x0400)
#define DMA_CCR4_MSIZE_1 ((uint16_t)0x0800)

#define DMA_CCR4_PL ((uint16_t)0x3000)
#define DMA_CCR4_PL_0 ((uint16_t)0x1000)
#define DMA_CCR4_PL_1 ((uint16_t)0x2000)

#define DMA_CCR4_MEM2MEM ((uint16_t)0x4000)


#define DMA_CCR5_EN ((uint16_t)0x0001)
#define DMA_CCR5_TCIE ((uint16_t)0x0002)
#define DMA_CCR5_HTIE ((uint16_t)0x0004)
#define DMA_CCR5_TEIE ((uint16_t)0x0008)
#define DMA_CCR5_DIR ((uint16_t)0x0010)
#define DMA_CCR5_CIRC ((uint16_t)0x0020)
#define DMA_CCR5_PINC ((uint16_t)0x0040)
#define DMA_CCR5_MINC ((uint16_t)0x0080)

#define DMA_CCR5_PSIZE ((uint16_t)0x0300)
#define DMA_CCR5_PSIZE_0 ((uint16_t)0x0100)
#define DMA_CCR5_PSIZE_1 ((uint16_t)0x0200)

#define DMA_CCR5_MSIZE ((uint16_t)0x0C00)
#define DMA_CCR5_MSIZE_0 ((uint16_t)0x0400)
#define DMA_CCR5_MSIZE_1 ((uint16_t)0x0800)

#define DMA_CCR5_PL ((uint16_t)0x3000)
#define DMA_CCR5_PL_0 ((uint16_t)0x1000)
#define DMA_CCR5_PL_1 ((uint16_t)0x2000)

#define DMA_CCR5_MEM2MEM ((uint16_t)0x4000)


#define DMA_CCR6_EN ((uint16_t)0x0001)
#define DMA_CCR6_TCIE ((uint16_t)0x0002)
#define DMA_CCR6_HTIE ((uint16_t)0x0004)
#define DMA_CCR6_TEIE ((uint16_t)0x0008)
#define DMA_CCR6_DIR ((uint16_t)0x0010)
#define DMA_CCR6_CIRC ((uint16_t)0x0020)
#define DMA_CCR6_PINC ((uint16_t)0x0040)
#define DMA_CCR6_MINC ((uint16_t)0x0080)

#define DMA_CCR6_PSIZE ((uint16_t)0x0300)
#define DMA_CCR6_PSIZE_0 ((uint16_t)0x0100)
#define DMA_CCR6_PSIZE_1 ((uint16_t)0x0200)

#define DMA_CCR6_MSIZE ((uint16_t)0x0C00)
#define DMA_CCR6_MSIZE_0 ((uint16_t)0x0400)
#define DMA_CCR6_MSIZE_1 ((uint16_t)0x0800)

#define DMA_CCR6_PL ((uint16_t)0x3000)
#define DMA_CCR6_PL_0 ((uint16_t)0x1000)
#define DMA_CCR6_PL_1 ((uint16_t)0x2000)

#define DMA_CCR6_MEM2MEM ((uint16_t)0x4000)


#define DMA_CCR7_EN ((uint16_t)0x0001)
#define DMA_CCR7_TCIE ((uint16_t)0x0002)
#define DMA_CCR7_HTIE ((uint16_t)0x0004)
#define DMA_CCR7_TEIE ((uint16_t)0x0008)
#define DMA_CCR7_DIR ((uint16_t)0x0010)
#define DMA_CCR7_CIRC ((uint16_t)0x0020)
#define DMA_CCR7_PINC ((uint16_t)0x0040)
#define DMA_CCR7_MINC ((uint16_t)0x0080)

#define DMA_CCR7_PSIZE , ((uint16_t)0x0300)
#define DMA_CCR7_PSIZE_0 ((uint16_t)0x0100)
#define DMA_CCR7_PSIZE_1 ((uint16_t)0x0200)

#define DMA_CCR7_MSIZE ((uint16_t)0x0C00)
#define DMA_CCR7_MSIZE_0 ((uint16_t)0x0400)
#define DMA_CCR7_MSIZE_1 ((uint16_t)0x0800)

#define DMA_CCR7_PL ((uint16_t)0x3000)
#define DMA_CCR7_PL_0 ((uint16_t)0x1000)
#define DMA_CCR7_PL_1 ((uint16_t)0x2000)

#define DMA_CCR7_MEM2MEM ((uint16_t)0x4000)


#define DMA_CNDTR1_NDT ((uint16_t)0xFFFF)


#define DMA_CNDTR2_NDT ((uint16_t)0xFFFF)


#define DMA_CNDTR3_NDT ((uint16_t)0xFFFF)


#define DMA_CNDTR4_NDT ((uint16_t)0xFFFF)


#define DMA_CNDTR5_NDT ((uint16_t)0xFFFF)


#define DMA_CNDTR6_NDT ((uint16_t)0xFFFF)


#define DMA_CNDTR7_NDT ((uint16_t)0xFFFF)


#define DMA_CPAR1_PA ((uint32_t)0xFFFFFFFF)


#define DMA_CPAR2_PA ((uint32_t)0xFFFFFFFF)


#define DMA_CPAR3_PA ((uint32_t)0xFFFFFFFF)



#define DMA_CPAR4_PA ((uint32_t)0xFFFFFFFF)


#define DMA_CPAR5_PA ((uint32_t)0xFFFFFFFF)


#define DMA_CPAR6_PA ((uint32_t)0xFFFFFFFF)



#define DMA_CPAR7_PA ((uint32_t)0xFFFFFFFF)


#define DMA_CMAR1_MA ((uint32_t)0xFFFFFFFF)


#define DMA_CMAR2_MA ((uint32_t)0xFFFFFFFF)


#define DMA_CMAR3_MA ((uint32_t)0xFFFFFFFF)



#define DMA_CMAR4_MA ((uint32_t)0xFFFFFFFF)


#define DMA_CMAR5_MA ((uint32_t)0xFFFFFFFF)


#define DMA_CMAR6_MA ((uint32_t)0xFFFFFFFF)


#define DMA_CMAR7_MA ((uint32_t)0xFFFFFFFF)
# 3703 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
#define ADC_SR_AWD ((uint8_t)0x01)
#define ADC_SR_EOC ((uint8_t)0x02)
#define ADC_SR_JEOC ((uint8_t)0x04)
#define ADC_SR_JSTRT ((uint8_t)0x08)
#define ADC_SR_STRT ((uint8_t)0x10)


#define ADC_CR1_AWDCH ((uint32_t)0x0000001F)
#define ADC_CR1_AWDCH_0 ((uint32_t)0x00000001)
#define ADC_CR1_AWDCH_1 ((uint32_t)0x00000002)
#define ADC_CR1_AWDCH_2 ((uint32_t)0x00000004)
#define ADC_CR1_AWDCH_3 ((uint32_t)0x00000008)
#define ADC_CR1_AWDCH_4 ((uint32_t)0x00000010)

#define ADC_CR1_EOCIE ((uint32_t)0x00000020)
#define ADC_CR1_AWDIE ((uint32_t)0x00000040)
#define ADC_CR1_JEOCIE ((uint32_t)0x00000080)
#define ADC_CR1_SCAN ((uint32_t)0x00000100)
#define ADC_CR1_AWDSGL ((uint32_t)0x00000200)
#define ADC_CR1_JAUTO ((uint32_t)0x00000400)
#define ADC_CR1_DISCEN ((uint32_t)0x00000800)
#define ADC_CR1_JDISCEN ((uint32_t)0x00001000)

#define ADC_CR1_DISCNUM ((uint32_t)0x0000E000)
#define ADC_CR1_DISCNUM_0 ((uint32_t)0x00002000)
#define ADC_CR1_DISCNUM_1 ((uint32_t)0x00004000)
#define ADC_CR1_DISCNUM_2 ((uint32_t)0x00008000)

#define ADC_CR1_DUALMOD ((uint32_t)0x000F0000)
#define ADC_CR1_DUALMOD_0 ((uint32_t)0x00010000)
#define ADC_CR1_DUALMOD_1 ((uint32_t)0x00020000)
#define ADC_CR1_DUALMOD_2 ((uint32_t)0x00040000)
#define ADC_CR1_DUALMOD_3 ((uint32_t)0x00080000)

#define ADC_CR1_JAWDEN ((uint32_t)0x00400000)
#define ADC_CR1_AWDEN ((uint32_t)0x00800000)



#define ADC_CR2_ADON ((uint32_t)0x00000001)
#define ADC_CR2_CONT ((uint32_t)0x00000002)
#define ADC_CR2_CAL ((uint32_t)0x00000004)
#define ADC_CR2_RSTCAL ((uint32_t)0x00000008)
#define ADC_CR2_DMA ((uint32_t)0x00000100)
#define ADC_CR2_ALIGN ((uint32_t)0x00000800)

#define ADC_CR2_JEXTSEL ((uint32_t)0x00007000)
#define ADC_CR2_JEXTSEL_0 ((uint32_t)0x00001000)
#define ADC_CR2_JEXTSEL_1 ((uint32_t)0x00002000)
#define ADC_CR2_JEXTSEL_2 ((uint32_t)0x00004000)

#define ADC_CR2_JEXTTRIG ((uint32_t)0x00008000)

#define ADC_CR2_EXTSEL ((uint32_t)0x000E0000)
#define ADC_CR2_EXTSEL_0 ((uint32_t)0x00020000)
#define ADC_CR2_EXTSEL_1 ((uint32_t)0x00040000)
#define ADC_CR2_EXTSEL_2 ((uint32_t)0x00080000)

#define ADC_CR2_EXTTRIG ((uint32_t)0x00100000)
#define ADC_CR2_JSWSTART ((uint32_t)0x00200000)
#define ADC_CR2_SWSTART ((uint32_t)0x00400000)
#define ADC_CR2_TSVREFE ((uint32_t)0x00800000)


#define ADC_SMPR1_SMP10 ((uint32_t)0x00000007)
#define ADC_SMPR1_SMP10_0 ((uint32_t)0x00000001)
#define ADC_SMPR1_SMP10_1 ((uint32_t)0x00000002)
#define ADC_SMPR1_SMP10_2 ((uint32_t)0x00000004)

#define ADC_SMPR1_SMP11 ((uint32_t)0x00000038)
#define ADC_SMPR1_SMP11_0 ((uint32_t)0x00000008)
#define ADC_SMPR1_SMP11_1 ((uint32_t)0x00000010)
#define ADC_SMPR1_SMP11_2 ((uint32_t)0x00000020)

#define ADC_SMPR1_SMP12 ((uint32_t)0x000001C0)
#define ADC_SMPR1_SMP12_0 ((uint32_t)0x00000040)
#define ADC_SMPR1_SMP12_1 ((uint32_t)0x00000080)
#define ADC_SMPR1_SMP12_2 ((uint32_t)0x00000100)

#define ADC_SMPR1_SMP13 ((uint32_t)0x00000E00)
#define ADC_SMPR1_SMP13_0 ((uint32_t)0x00000200)
#define ADC_SMPR1_SMP13_1 ((uint32_t)0x00000400)
#define ADC_SMPR1_SMP13_2 ((uint32_t)0x00000800)

#define ADC_SMPR1_SMP14 ((uint32_t)0x00007000)
#define ADC_SMPR1_SMP14_0 ((uint32_t)0x00001000)
#define ADC_SMPR1_SMP14_1 ((uint32_t)0x00002000)
#define ADC_SMPR1_SMP14_2 ((uint32_t)0x00004000)

#define ADC_SMPR1_SMP15 ((uint32_t)0x00038000)
#define ADC_SMPR1_SMP15_0 ((uint32_t)0x00008000)
#define ADC_SMPR1_SMP15_1 ((uint32_t)0x00010000)
#define ADC_SMPR1_SMP15_2 ((uint32_t)0x00020000)

#define ADC_SMPR1_SMP16 ((uint32_t)0x001C0000)
#define ADC_SMPR1_SMP16_0 ((uint32_t)0x00040000)
#define ADC_SMPR1_SMP16_1 ((uint32_t)0x00080000)
#define ADC_SMPR1_SMP16_2 ((uint32_t)0x00100000)

#define ADC_SMPR1_SMP17 ((uint32_t)0x00E00000)
#define ADC_SMPR1_SMP17_0 ((uint32_t)0x00200000)
#define ADC_SMPR1_SMP17_1 ((uint32_t)0x00400000)
#define ADC_SMPR1_SMP17_2 ((uint32_t)0x00800000)


#define ADC_SMPR2_SMP0 ((uint32_t)0x00000007)
#define ADC_SMPR2_SMP0_0 ((uint32_t)0x00000001)
#define ADC_SMPR2_SMP0_1 ((uint32_t)0x00000002)
#define ADC_SMPR2_SMP0_2 ((uint32_t)0x00000004)

#define ADC_SMPR2_SMP1 ((uint32_t)0x00000038)
#define ADC_SMPR2_SMP1_0 ((uint32_t)0x00000008)
#define ADC_SMPR2_SMP1_1 ((uint32_t)0x00000010)
#define ADC_SMPR2_SMP1_2 ((uint32_t)0x00000020)

#define ADC_SMPR2_SMP2 ((uint32_t)0x000001C0)
#define ADC_SMPR2_SMP2_0 ((uint32_t)0x00000040)
#define ADC_SMPR2_SMP2_1 ((uint32_t)0x00000080)
#define ADC_SMPR2_SMP2_2 ((uint32_t)0x00000100)

#define ADC_SMPR2_SMP3 ((uint32_t)0x00000E00)
#define ADC_SMPR2_SMP3_0 ((uint32_t)0x00000200)
#define ADC_SMPR2_SMP3_1 ((uint32_t)0x00000400)
#define ADC_SMPR2_SMP3_2 ((uint32_t)0x00000800)

#define ADC_SMPR2_SMP4 ((uint32_t)0x00007000)
#define ADC_SMPR2_SMP4_0 ((uint32_t)0x00001000)
#define ADC_SMPR2_SMP4_1 ((uint32_t)0x00002000)
#define ADC_SMPR2_SMP4_2 ((uint32_t)0x00004000)

#define ADC_SMPR2_SMP5 ((uint32_t)0x00038000)
#define ADC_SMPR2_SMP5_0 ((uint32_t)0x00008000)
#define ADC_SMPR2_SMP5_1 ((uint32_t)0x00010000)
#define ADC_SMPR2_SMP5_2 ((uint32_t)0x00020000)

#define ADC_SMPR2_SMP6 ((uint32_t)0x001C0000)
#define ADC_SMPR2_SMP6_0 ((uint32_t)0x00040000)
#define ADC_SMPR2_SMP6_1 ((uint32_t)0x00080000)
#define ADC_SMPR2_SMP6_2 ((uint32_t)0x00100000)

#define ADC_SMPR2_SMP7 ((uint32_t)0x00E00000)
#define ADC_SMPR2_SMP7_0 ((uint32_t)0x00200000)
#define ADC_SMPR2_SMP7_1 ((uint32_t)0x00400000)
#define ADC_SMPR2_SMP7_2 ((uint32_t)0x00800000)

#define ADC_SMPR2_SMP8 ((uint32_t)0x07000000)
#define ADC_SMPR2_SMP8_0 ((uint32_t)0x01000000)
#define ADC_SMPR2_SMP8_1 ((uint32_t)0x02000000)
#define ADC_SMPR2_SMP8_2 ((uint32_t)0x04000000)

#define ADC_SMPR2_SMP9 ((uint32_t)0x38000000)
#define ADC_SMPR2_SMP9_0 ((uint32_t)0x08000000)
#define ADC_SMPR2_SMP9_1 ((uint32_t)0x10000000)
#define ADC_SMPR2_SMP9_2 ((uint32_t)0x20000000)


#define ADC_JOFR1_JOFFSET1 ((uint16_t)0x0FFF)


#define ADC_JOFR2_JOFFSET2 ((uint16_t)0x0FFF)


#define ADC_JOFR3_JOFFSET3 ((uint16_t)0x0FFF)


#define ADC_JOFR4_JOFFSET4 ((uint16_t)0x0FFF)


#define ADC_HTR_HT ((uint16_t)0x0FFF)


#define ADC_LTR_LT ((uint16_t)0x0FFF)


#define ADC_SQR1_SQ13 ((uint32_t)0x0000001F)
#define ADC_SQR1_SQ13_0 ((uint32_t)0x00000001)
#define ADC_SQR1_SQ13_1 ((uint32_t)0x00000002)
#define ADC_SQR1_SQ13_2 ((uint32_t)0x00000004)
#define ADC_SQR1_SQ13_3 ((uint32_t)0x00000008)
#define ADC_SQR1_SQ13_4 ((uint32_t)0x00000010)

#define ADC_SQR1_SQ14 ((uint32_t)0x000003E0)
#define ADC_SQR1_SQ14_0 ((uint32_t)0x00000020)
#define ADC_SQR1_SQ14_1 ((uint32_t)0x00000040)
#define ADC_SQR1_SQ14_2 ((uint32_t)0x00000080)
#define ADC_SQR1_SQ14_3 ((uint32_t)0x00000100)
#define ADC_SQR1_SQ14_4 ((uint32_t)0x00000200)

#define ADC_SQR1_SQ15 ((uint32_t)0x00007C00)
#define ADC_SQR1_SQ15_0 ((uint32_t)0x00000400)
#define ADC_SQR1_SQ15_1 ((uint32_t)0x00000800)
#define ADC_SQR1_SQ15_2 ((uint32_t)0x00001000)
#define ADC_SQR1_SQ15_3 ((uint32_t)0x00002000)
#define ADC_SQR1_SQ15_4 ((uint32_t)0x00004000)

#define ADC_SQR1_SQ16 ((uint32_t)0x000F8000)
#define ADC_SQR1_SQ16_0 ((uint32_t)0x00008000)
#define ADC_SQR1_SQ16_1 ((uint32_t)0x00010000)
#define ADC_SQR1_SQ16_2 ((uint32_t)0x00020000)
#define ADC_SQR1_SQ16_3 ((uint32_t)0x00040000)
#define ADC_SQR1_SQ16_4 ((uint32_t)0x00080000)

#define ADC_SQR1_L ((uint32_t)0x00F00000)
#define ADC_SQR1_L_0 ((uint32_t)0x00100000)
#define ADC_SQR1_L_1 ((uint32_t)0x00200000)
#define ADC_SQR1_L_2 ((uint32_t)0x00400000)
#define ADC_SQR1_L_3 ((uint32_t)0x00800000)


#define ADC_SQR2_SQ7 ((uint32_t)0x0000001F)
#define ADC_SQR2_SQ7_0 ((uint32_t)0x00000001)
#define ADC_SQR2_SQ7_1 ((uint32_t)0x00000002)
#define ADC_SQR2_SQ7_2 ((uint32_t)0x00000004)
#define ADC_SQR2_SQ7_3 ((uint32_t)0x00000008)
#define ADC_SQR2_SQ7_4 ((uint32_t)0x00000010)

#define ADC_SQR2_SQ8 ((uint32_t)0x000003E0)
#define ADC_SQR2_SQ8_0 ((uint32_t)0x00000020)
#define ADC_SQR2_SQ8_1 ((uint32_t)0x00000040)
#define ADC_SQR2_SQ8_2 ((uint32_t)0x00000080)
#define ADC_SQR2_SQ8_3 ((uint32_t)0x00000100)
#define ADC_SQR2_SQ8_4 ((uint32_t)0x00000200)

#define ADC_SQR2_SQ9 ((uint32_t)0x00007C00)
#define ADC_SQR2_SQ9_0 ((uint32_t)0x00000400)
#define ADC_SQR2_SQ9_1 ((uint32_t)0x00000800)
#define ADC_SQR2_SQ9_2 ((uint32_t)0x00001000)
#define ADC_SQR2_SQ9_3 ((uint32_t)0x00002000)
#define ADC_SQR2_SQ9_4 ((uint32_t)0x00004000)

#define ADC_SQR2_SQ10 ((uint32_t)0x000F8000)
#define ADC_SQR2_SQ10_0 ((uint32_t)0x00008000)
#define ADC_SQR2_SQ10_1 ((uint32_t)0x00010000)
#define ADC_SQR2_SQ10_2 ((uint32_t)0x00020000)
#define ADC_SQR2_SQ10_3 ((uint32_t)0x00040000)
#define ADC_SQR2_SQ10_4 ((uint32_t)0x00080000)

#define ADC_SQR2_SQ11 ((uint32_t)0x01F00000)
#define ADC_SQR2_SQ11_0 ((uint32_t)0x00100000)
#define ADC_SQR2_SQ11_1 ((uint32_t)0x00200000)
#define ADC_SQR2_SQ11_2 ((uint32_t)0x00400000)
#define ADC_SQR2_SQ11_3 ((uint32_t)0x00800000)
#define ADC_SQR2_SQ11_4 ((uint32_t)0x01000000)

#define ADC_SQR2_SQ12 ((uint32_t)0x3E000000)
#define ADC_SQR2_SQ12_0 ((uint32_t)0x02000000)
#define ADC_SQR2_SQ12_1 ((uint32_t)0x04000000)
#define ADC_SQR2_SQ12_2 ((uint32_t)0x08000000)
#define ADC_SQR2_SQ12_3 ((uint32_t)0x10000000)
#define ADC_SQR2_SQ12_4 ((uint32_t)0x20000000)


#define ADC_SQR3_SQ1 ((uint32_t)0x0000001F)
#define ADC_SQR3_SQ1_0 ((uint32_t)0x00000001)
#define ADC_SQR3_SQ1_1 ((uint32_t)0x00000002)
#define ADC_SQR3_SQ1_2 ((uint32_t)0x00000004)
#define ADC_SQR3_SQ1_3 ((uint32_t)0x00000008)
#define ADC_SQR3_SQ1_4 ((uint32_t)0x00000010)

#define ADC_SQR3_SQ2 ((uint32_t)0x000003E0)
#define ADC_SQR3_SQ2_0 ((uint32_t)0x00000020)
#define ADC_SQR3_SQ2_1 ((uint32_t)0x00000040)
#define ADC_SQR3_SQ2_2 ((uint32_t)0x00000080)
#define ADC_SQR3_SQ2_3 ((uint32_t)0x00000100)
#define ADC_SQR3_SQ2_4 ((uint32_t)0x00000200)

#define ADC_SQR3_SQ3 ((uint32_t)0x00007C00)
#define ADC_SQR3_SQ3_0 ((uint32_t)0x00000400)
#define ADC_SQR3_SQ3_1 ((uint32_t)0x00000800)
#define ADC_SQR3_SQ3_2 ((uint32_t)0x00001000)
#define ADC_SQR3_SQ3_3 ((uint32_t)0x00002000)
#define ADC_SQR3_SQ3_4 ((uint32_t)0x00004000)

#define ADC_SQR3_SQ4 ((uint32_t)0x000F8000)
#define ADC_SQR3_SQ4_0 ((uint32_t)0x00008000)
#define ADC_SQR3_SQ4_1 ((uint32_t)0x00010000)
#define ADC_SQR3_SQ4_2 ((uint32_t)0x00020000)
#define ADC_SQR3_SQ4_3 ((uint32_t)0x00040000)
#define ADC_SQR3_SQ4_4 ((uint32_t)0x00080000)

#define ADC_SQR3_SQ5 ((uint32_t)0x01F00000)
#define ADC_SQR3_SQ5_0 ((uint32_t)0x00100000)
#define ADC_SQR3_SQ5_1 ((uint32_t)0x00200000)
#define ADC_SQR3_SQ5_2 ((uint32_t)0x00400000)
#define ADC_SQR3_SQ5_3 ((uint32_t)0x00800000)
#define ADC_SQR3_SQ5_4 ((uint32_t)0x01000000)

#define ADC_SQR3_SQ6 ((uint32_t)0x3E000000)
#define ADC_SQR3_SQ6_0 ((uint32_t)0x02000000)
#define ADC_SQR3_SQ6_1 ((uint32_t)0x04000000)
#define ADC_SQR3_SQ6_2 ((uint32_t)0x08000000)
#define ADC_SQR3_SQ6_3 ((uint32_t)0x10000000)
#define ADC_SQR3_SQ6_4 ((uint32_t)0x20000000)


#define ADC_JSQR_JSQ1 ((uint32_t)0x0000001F)
#define ADC_JSQR_JSQ1_0 ((uint32_t)0x00000001)
#define ADC_JSQR_JSQ1_1 ((uint32_t)0x00000002)
#define ADC_JSQR_JSQ1_2 ((uint32_t)0x00000004)
#define ADC_JSQR_JSQ1_3 ((uint32_t)0x00000008)
#define ADC_JSQR_JSQ1_4 ((uint32_t)0x00000010)

#define ADC_JSQR_JSQ2 ((uint32_t)0x000003E0)
#define ADC_JSQR_JSQ2_0 ((uint32_t)0x00000020)
#define ADC_JSQR_JSQ2_1 ((uint32_t)0x00000040)
#define ADC_JSQR_JSQ2_2 ((uint32_t)0x00000080)
#define ADC_JSQR_JSQ2_3 ((uint32_t)0x00000100)
#define ADC_JSQR_JSQ2_4 ((uint32_t)0x00000200)

#define ADC_JSQR_JSQ3 ((uint32_t)0x00007C00)
#define ADC_JSQR_JSQ3_0 ((uint32_t)0x00000400)
#define ADC_JSQR_JSQ3_1 ((uint32_t)0x00000800)
#define ADC_JSQR_JSQ3_2 ((uint32_t)0x00001000)
#define ADC_JSQR_JSQ3_3 ((uint32_t)0x00002000)
#define ADC_JSQR_JSQ3_4 ((uint32_t)0x00004000)

#define ADC_JSQR_JSQ4 ((uint32_t)0x000F8000)
#define ADC_JSQR_JSQ4_0 ((uint32_t)0x00008000)
#define ADC_JSQR_JSQ4_1 ((uint32_t)0x00010000)
#define ADC_JSQR_JSQ4_2 ((uint32_t)0x00020000)
#define ADC_JSQR_JSQ4_3 ((uint32_t)0x00040000)
#define ADC_JSQR_JSQ4_4 ((uint32_t)0x00080000)

#define ADC_JSQR_JL ((uint32_t)0x00300000)
#define ADC_JSQR_JL_0 ((uint32_t)0x00100000)
#define ADC_JSQR_JL_1 ((uint32_t)0x00200000)


#define ADC_JDR1_JDATA ((uint16_t)0xFFFF)


#define ADC_JDR2_JDATA ((uint16_t)0xFFFF)


#define ADC_JDR3_JDATA ((uint16_t)0xFFFF)


#define ADC_JDR4_JDATA ((uint16_t)0xFFFF)


#define ADC_DR_DATA ((uint32_t)0x0000FFFF)
#define ADC_DR_ADC2DATA ((uint32_t)0xFFFF0000)
# 4053 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
#define DAC_CR_EN1 ((uint32_t)0x00000001)
#define DAC_CR_BOFF1 ((uint32_t)0x00000002)
#define DAC_CR_TEN1 ((uint32_t)0x00000004)

#define DAC_CR_TSEL1 ((uint32_t)0x00000038)
#define DAC_CR_TSEL1_0 ((uint32_t)0x00000008)
#define DAC_CR_TSEL1_1 ((uint32_t)0x00000010)
#define DAC_CR_TSEL1_2 ((uint32_t)0x00000020)

#define DAC_CR_WAVE1 ((uint32_t)0x000000C0)
#define DAC_CR_WAVE1_0 ((uint32_t)0x00000040)
#define DAC_CR_WAVE1_1 ((uint32_t)0x00000080)

#define DAC_CR_MAMP1 ((uint32_t)0x00000F00)
#define DAC_CR_MAMP1_0 ((uint32_t)0x00000100)
#define DAC_CR_MAMP1_1 ((uint32_t)0x00000200)
#define DAC_CR_MAMP1_2 ((uint32_t)0x00000400)
#define DAC_CR_MAMP1_3 ((uint32_t)0x00000800)

#define DAC_CR_DMAEN1 ((uint32_t)0x00001000)
#define DAC_CR_EN2 ((uint32_t)0x00010000)
#define DAC_CR_BOFF2 ((uint32_t)0x00020000)
#define DAC_CR_TEN2 ((uint32_t)0x00040000)

#define DAC_CR_TSEL2 ((uint32_t)0x00380000)
#define DAC_CR_TSEL2_0 ((uint32_t)0x00080000)
#define DAC_CR_TSEL2_1 ((uint32_t)0x00100000)
#define DAC_CR_TSEL2_2 ((uint32_t)0x00200000)

#define DAC_CR_WAVE2 ((uint32_t)0x00C00000)
#define DAC_CR_WAVE2_0 ((uint32_t)0x00400000)
#define DAC_CR_WAVE2_1 ((uint32_t)0x00800000)

#define DAC_CR_MAMP2 ((uint32_t)0x0F000000)
#define DAC_CR_MAMP2_0 ((uint32_t)0x01000000)
#define DAC_CR_MAMP2_1 ((uint32_t)0x02000000)
#define DAC_CR_MAMP2_2 ((uint32_t)0x04000000)
#define DAC_CR_MAMP2_3 ((uint32_t)0x08000000)

#define DAC_CR_DMAEN2 ((uint32_t)0x10000000)


#define DAC_SWTRIGR_SWTRIG1 ((uint8_t)0x01)
#define DAC_SWTRIGR_SWTRIG2 ((uint8_t)0x02)


#define DAC_DHR12R1_DACC1DHR ((uint16_t)0x0FFF)


#define DAC_DHR12L1_DACC1DHR ((uint16_t)0xFFF0)


#define DAC_DHR8R1_DACC1DHR ((uint8_t)0xFF)


#define DAC_DHR12R2_DACC2DHR ((uint16_t)0x0FFF)


#define DAC_DHR12L2_DACC2DHR ((uint16_t)0xFFF0)


#define DAC_DHR8R2_DACC2DHR ((uint8_t)0xFF)


#define DAC_DHR12RD_DACC1DHR ((uint32_t)0x00000FFF)
#define DAC_DHR12RD_DACC2DHR ((uint32_t)0x0FFF0000)


#define DAC_DHR12LD_DACC1DHR ((uint32_t)0x0000FFF0)
#define DAC_DHR12LD_DACC2DHR ((uint32_t)0xFFF00000)


#define DAC_DHR8RD_DACC1DHR ((uint16_t)0x00FF)
#define DAC_DHR8RD_DACC2DHR ((uint16_t)0xFF00)


#define DAC_DOR1_DACC1DOR ((uint16_t)0x0FFF)


#define DAC_DOR2_DACC2DOR ((uint16_t)0x0FFF)


#define DAC_SR_DMAUDR1 ((uint32_t)0x00002000)
#define DAC_SR_DMAUDR2 ((uint32_t)0x20000000)







#define CEC_CFGR_PE ((uint16_t)0x0001)
#define CEC_CFGR_IE ((uint16_t)0x0002)
#define CEC_CFGR_BTEM ((uint16_t)0x0004)
#define CEC_CFGR_BPEM ((uint16_t)0x0008)


#define CEC_OAR_OA ((uint16_t)0x000F)
#define CEC_OAR_OA_0 ((uint16_t)0x0001)
#define CEC_OAR_OA_1 ((uint16_t)0x0002)
#define CEC_OAR_OA_2 ((uint16_t)0x0004)
#define CEC_OAR_OA_3 ((uint16_t)0x0008)


#define CEC_PRES_PRES ((uint16_t)0x3FFF)


#define CEC_ESR_BTE ((uint16_t)0x0001)
#define CEC_ESR_BPE ((uint16_t)0x0002)
#define CEC_ESR_RBTFE ((uint16_t)0x0004)
#define CEC_ESR_SBE ((uint16_t)0x0008)
#define CEC_ESR_ACKE ((uint16_t)0x0010)
#define CEC_ESR_LINE ((uint16_t)0x0020)
#define CEC_ESR_TBTFE ((uint16_t)0x0040)


#define CEC_CSR_TSOM ((uint16_t)0x0001)
#define CEC_CSR_TEOM ((uint16_t)0x0002)
#define CEC_CSR_TERR ((uint16_t)0x0004)
#define CEC_CSR_TBTRF ((uint16_t)0x0008)
#define CEC_CSR_RSOM ((uint16_t)0x0010)
#define CEC_CSR_REOM ((uint16_t)0x0020)
#define CEC_CSR_RERR ((uint16_t)0x0040)
#define CEC_CSR_RBTF ((uint16_t)0x0080)


#define CEC_TXD_TXD ((uint16_t)0x00FF)


#define CEC_RXD_RXD ((uint16_t)0x00FF)
# 4191 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
#define TIM_CR1_CEN ((uint16_t)0x0001)
#define TIM_CR1_UDIS ((uint16_t)0x0002)
#define TIM_CR1_URS ((uint16_t)0x0004)
#define TIM_CR1_OPM ((uint16_t)0x0008)
#define TIM_CR1_DIR ((uint16_t)0x0010)

#define TIM_CR1_CMS ((uint16_t)0x0060)
#define TIM_CR1_CMS_0 ((uint16_t)0x0020)
#define TIM_CR1_CMS_1 ((uint16_t)0x0040)

#define TIM_CR1_ARPE ((uint16_t)0x0080)

#define TIM_CR1_CKD ((uint16_t)0x0300)
#define TIM_CR1_CKD_0 ((uint16_t)0x0100)
#define TIM_CR1_CKD_1 ((uint16_t)0x0200)


#define TIM_CR2_CCPC ((uint16_t)0x0001)
#define TIM_CR2_CCUS ((uint16_t)0x0004)
#define TIM_CR2_CCDS ((uint16_t)0x0008)

#define TIM_CR2_MMS ((uint16_t)0x0070)
#define TIM_CR2_MMS_0 ((uint16_t)0x0010)
#define TIM_CR2_MMS_1 ((uint16_t)0x0020)
#define TIM_CR2_MMS_2 ((uint16_t)0x0040)

#define TIM_CR2_TI1S ((uint16_t)0x0080)
#define TIM_CR2_OIS1 ((uint16_t)0x0100)
#define TIM_CR2_OIS1N ((uint16_t)0x0200)
#define TIM_CR2_OIS2 ((uint16_t)0x0400)
#define TIM_CR2_OIS2N ((uint16_t)0x0800)
#define TIM_CR2_OIS3 ((uint16_t)0x1000)
#define TIM_CR2_OIS3N ((uint16_t)0x2000)
#define TIM_CR2_OIS4 ((uint16_t)0x4000)


#define TIM_SMCR_SMS ((uint16_t)0x0007)
#define TIM_SMCR_SMS_0 ((uint16_t)0x0001)
#define TIM_SMCR_SMS_1 ((uint16_t)0x0002)
#define TIM_SMCR_SMS_2 ((uint16_t)0x0004)

#define TIM_SMCR_TS ((uint16_t)0x0070)
#define TIM_SMCR_TS_0 ((uint16_t)0x0010)
#define TIM_SMCR_TS_1 ((uint16_t)0x0020)
#define TIM_SMCR_TS_2 ((uint16_t)0x0040)

#define TIM_SMCR_MSM ((uint16_t)0x0080)

#define TIM_SMCR_ETF ((uint16_t)0x0F00)
#define TIM_SMCR_ETF_0 ((uint16_t)0x0100)
#define TIM_SMCR_ETF_1 ((uint16_t)0x0200)
#define TIM_SMCR_ETF_2 ((uint16_t)0x0400)
#define TIM_SMCR_ETF_3 ((uint16_t)0x0800)

#define TIM_SMCR_ETPS ((uint16_t)0x3000)
#define TIM_SMCR_ETPS_0 ((uint16_t)0x1000)
#define TIM_SMCR_ETPS_1 ((uint16_t)0x2000)

#define TIM_SMCR_ECE ((uint16_t)0x4000)
#define TIM_SMCR_ETP ((uint16_t)0x8000)


#define TIM_DIER_UIE ((uint16_t)0x0001)
#define TIM_DIER_CC1IE ((uint16_t)0x0002)
#define TIM_DIER_CC2IE ((uint16_t)0x0004)
#define TIM_DIER_CC3IE ((uint16_t)0x0008)
#define TIM_DIER_CC4IE ((uint16_t)0x0010)
#define TIM_DIER_COMIE ((uint16_t)0x0020)
#define TIM_DIER_TIE ((uint16_t)0x0040)
#define TIM_DIER_BIE ((uint16_t)0x0080)
#define TIM_DIER_UDE ((uint16_t)0x0100)
#define TIM_DIER_CC1DE ((uint16_t)0x0200)
#define TIM_DIER_CC2DE ((uint16_t)0x0400)
#define TIM_DIER_CC3DE ((uint16_t)0x0800)
#define TIM_DIER_CC4DE ((uint16_t)0x1000)
#define TIM_DIER_COMDE ((uint16_t)0x2000)
#define TIM_DIER_TDE ((uint16_t)0x4000)


#define TIM_SR_UIF ((uint16_t)0x0001)
#define TIM_SR_CC1IF ((uint16_t)0x0002)
#define TIM_SR_CC2IF ((uint16_t)0x0004)
#define TIM_SR_CC3IF ((uint16_t)0x0008)
#define TIM_SR_CC4IF ((uint16_t)0x0010)
#define TIM_SR_COMIF ((uint16_t)0x0020)
#define TIM_SR_TIF ((uint16_t)0x0040)
#define TIM_SR_BIF ((uint16_t)0x0080)
#define TIM_SR_CC1OF ((uint16_t)0x0200)
#define TIM_SR_CC2OF ((uint16_t)0x0400)
#define TIM_SR_CC3OF ((uint16_t)0x0800)
#define TIM_SR_CC4OF ((uint16_t)0x1000)


#define TIM_EGR_UG ((uint8_t)0x01)
#define TIM_EGR_CC1G ((uint8_t)0x02)
#define TIM_EGR_CC2G ((uint8_t)0x04)
#define TIM_EGR_CC3G ((uint8_t)0x08)
#define TIM_EGR_CC4G ((uint8_t)0x10)
#define TIM_EGR_COMG ((uint8_t)0x20)
#define TIM_EGR_TG ((uint8_t)0x40)
#define TIM_EGR_BG ((uint8_t)0x80)


#define TIM_CCMR1_CC1S ((uint16_t)0x0003)
#define TIM_CCMR1_CC1S_0 ((uint16_t)0x0001)
#define TIM_CCMR1_CC1S_1 ((uint16_t)0x0002)

#define TIM_CCMR1_OC1FE ((uint16_t)0x0004)
#define TIM_CCMR1_OC1PE ((uint16_t)0x0008)

#define TIM_CCMR1_OC1M ((uint16_t)0x0070)
#define TIM_CCMR1_OC1M_0 ((uint16_t)0x0010)
#define TIM_CCMR1_OC1M_1 ((uint16_t)0x0020)
#define TIM_CCMR1_OC1M_2 ((uint16_t)0x0040)

#define TIM_CCMR1_OC1CE ((uint16_t)0x0080)

#define TIM_CCMR1_CC2S ((uint16_t)0x0300)
#define TIM_CCMR1_CC2S_0 ((uint16_t)0x0100)
#define TIM_CCMR1_CC2S_1 ((uint16_t)0x0200)

#define TIM_CCMR1_OC2FE ((uint16_t)0x0400)
#define TIM_CCMR1_OC2PE ((uint16_t)0x0800)

#define TIM_CCMR1_OC2M ((uint16_t)0x7000)
#define TIM_CCMR1_OC2M_0 ((uint16_t)0x1000)
#define TIM_CCMR1_OC2M_1 ((uint16_t)0x2000)
#define TIM_CCMR1_OC2M_2 ((uint16_t)0x4000)

#define TIM_CCMR1_OC2CE ((uint16_t)0x8000)



#define TIM_CCMR1_IC1PSC ((uint16_t)0x000C)
#define TIM_CCMR1_IC1PSC_0 ((uint16_t)0x0004)
#define TIM_CCMR1_IC1PSC_1 ((uint16_t)0x0008)

#define TIM_CCMR1_IC1F ((uint16_t)0x00F0)
#define TIM_CCMR1_IC1F_0 ((uint16_t)0x0010)
#define TIM_CCMR1_IC1F_1 ((uint16_t)0x0020)
#define TIM_CCMR1_IC1F_2 ((uint16_t)0x0040)
#define TIM_CCMR1_IC1F_3 ((uint16_t)0x0080)

#define TIM_CCMR1_IC2PSC ((uint16_t)0x0C00)
#define TIM_CCMR1_IC2PSC_0 ((uint16_t)0x0400)
#define TIM_CCMR1_IC2PSC_1 ((uint16_t)0x0800)

#define TIM_CCMR1_IC2F ((uint16_t)0xF000)
#define TIM_CCMR1_IC2F_0 ((uint16_t)0x1000)
#define TIM_CCMR1_IC2F_1 ((uint16_t)0x2000)
#define TIM_CCMR1_IC2F_2 ((uint16_t)0x4000)
#define TIM_CCMR1_IC2F_3 ((uint16_t)0x8000)


#define TIM_CCMR2_CC3S ((uint16_t)0x0003)
#define TIM_CCMR2_CC3S_0 ((uint16_t)0x0001)
#define TIM_CCMR2_CC3S_1 ((uint16_t)0x0002)

#define TIM_CCMR2_OC3FE ((uint16_t)0x0004)
#define TIM_CCMR2_OC3PE ((uint16_t)0x0008)

#define TIM_CCMR2_OC3M ((uint16_t)0x0070)
#define TIM_CCMR2_OC3M_0 ((uint16_t)0x0010)
#define TIM_CCMR2_OC3M_1 ((uint16_t)0x0020)
#define TIM_CCMR2_OC3M_2 ((uint16_t)0x0040)

#define TIM_CCMR2_OC3CE ((uint16_t)0x0080)

#define TIM_CCMR2_CC4S ((uint16_t)0x0300)
#define TIM_CCMR2_CC4S_0 ((uint16_t)0x0100)
#define TIM_CCMR2_CC4S_1 ((uint16_t)0x0200)

#define TIM_CCMR2_OC4FE ((uint16_t)0x0400)
#define TIM_CCMR2_OC4PE ((uint16_t)0x0800)

#define TIM_CCMR2_OC4M ((uint16_t)0x7000)
#define TIM_CCMR2_OC4M_0 ((uint16_t)0x1000)
#define TIM_CCMR2_OC4M_1 ((uint16_t)0x2000)
#define TIM_CCMR2_OC4M_2 ((uint16_t)0x4000)

#define TIM_CCMR2_OC4CE ((uint16_t)0x8000)



#define TIM_CCMR2_IC3PSC ((uint16_t)0x000C)
#define TIM_CCMR2_IC3PSC_0 ((uint16_t)0x0004)
#define TIM_CCMR2_IC3PSC_1 ((uint16_t)0x0008)

#define TIM_CCMR2_IC3F ((uint16_t)0x00F0)
#define TIM_CCMR2_IC3F_0 ((uint16_t)0x0010)
#define TIM_CCMR2_IC3F_1 ((uint16_t)0x0020)
#define TIM_CCMR2_IC3F_2 ((uint16_t)0x0040)
#define TIM_CCMR2_IC3F_3 ((uint16_t)0x0080)

#define TIM_CCMR2_IC4PSC ((uint16_t)0x0C00)
#define TIM_CCMR2_IC4PSC_0 ((uint16_t)0x0400)
#define TIM_CCMR2_IC4PSC_1 ((uint16_t)0x0800)

#define TIM_CCMR2_IC4F ((uint16_t)0xF000)
#define TIM_CCMR2_IC4F_0 ((uint16_t)0x1000)
#define TIM_CCMR2_IC4F_1 ((uint16_t)0x2000)
#define TIM_CCMR2_IC4F_2 ((uint16_t)0x4000)
#define TIM_CCMR2_IC4F_3 ((uint16_t)0x8000)


#define TIM_CCER_CC1E ((uint16_t)0x0001)
#define TIM_CCER_CC1P ((uint16_t)0x0002)
#define TIM_CCER_CC1NE ((uint16_t)0x0004)
#define TIM_CCER_CC1NP ((uint16_t)0x0008)
#define TIM_CCER_CC2E ((uint16_t)0x0010)
#define TIM_CCER_CC2P ((uint16_t)0x0020)
#define TIM_CCER_CC2NE ((uint16_t)0x0040)
#define TIM_CCER_CC2NP ((uint16_t)0x0080)
#define TIM_CCER_CC3E ((uint16_t)0x0100)
#define TIM_CCER_CC3P ((uint16_t)0x0200)
#define TIM_CCER_CC3NE ((uint16_t)0x0400)
#define TIM_CCER_CC3NP ((uint16_t)0x0800)
#define TIM_CCER_CC4E ((uint16_t)0x1000)
#define TIM_CCER_CC4P ((uint16_t)0x2000)
#define TIM_CCER_CC4NP ((uint16_t)0x8000)


#define TIM_CNT_CNT ((uint16_t)0xFFFF)


#define TIM_PSC_PSC ((uint16_t)0xFFFF)


#define TIM_ARR_ARR ((uint16_t)0xFFFF)


#define TIM_RCR_REP ((uint8_t)0xFF)


#define TIM_CCR1_CCR1 ((uint16_t)0xFFFF)


#define TIM_CCR2_CCR2 ((uint16_t)0xFFFF)


#define TIM_CCR3_CCR3 ((uint16_t)0xFFFF)


#define TIM_CCR4_CCR4 ((uint16_t)0xFFFF)


#define TIM_BDTR_DTG ((uint16_t)0x00FF)
#define TIM_BDTR_DTG_0 ((uint16_t)0x0001)
#define TIM_BDTR_DTG_1 ((uint16_t)0x0002)
#define TIM_BDTR_DTG_2 ((uint16_t)0x0004)
#define TIM_BDTR_DTG_3 ((uint16_t)0x0008)
#define TIM_BDTR_DTG_4 ((uint16_t)0x0010)
#define TIM_BDTR_DTG_5 ((uint16_t)0x0020)
#define TIM_BDTR_DTG_6 ((uint16_t)0x0040)
#define TIM_BDTR_DTG_7 ((uint16_t)0x0080)

#define TIM_BDTR_LOCK ((uint16_t)0x0300)
#define TIM_BDTR_LOCK_0 ((uint16_t)0x0100)
#define TIM_BDTR_LOCK_1 ((uint16_t)0x0200)

#define TIM_BDTR_OSSI ((uint16_t)0x0400)
#define TIM_BDTR_OSSR ((uint16_t)0x0800)
#define TIM_BDTR_BKE ((uint16_t)0x1000)
#define TIM_BDTR_BKP ((uint16_t)0x2000)
#define TIM_BDTR_AOE ((uint16_t)0x4000)
#define TIM_BDTR_MOE ((uint16_t)0x8000)


#define TIM_DCR_DBA ((uint16_t)0x001F)
#define TIM_DCR_DBA_0 ((uint16_t)0x0001)
#define TIM_DCR_DBA_1 ((uint16_t)0x0002)
#define TIM_DCR_DBA_2 ((uint16_t)0x0004)
#define TIM_DCR_DBA_3 ((uint16_t)0x0008)
#define TIM_DCR_DBA_4 ((uint16_t)0x0010)

#define TIM_DCR_DBL ((uint16_t)0x1F00)
#define TIM_DCR_DBL_0 ((uint16_t)0x0100)
#define TIM_DCR_DBL_1 ((uint16_t)0x0200)
#define TIM_DCR_DBL_2 ((uint16_t)0x0400)
#define TIM_DCR_DBL_3 ((uint16_t)0x0800)
#define TIM_DCR_DBL_4 ((uint16_t)0x1000)


#define TIM_DMAR_DMAB ((uint16_t)0xFFFF)
# 4483 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
#define RTC_CRH_SECIE ((uint8_t)0x01)
#define RTC_CRH_ALRIE ((uint8_t)0x02)
#define RTC_CRH_OWIE ((uint8_t)0x04)


#define RTC_CRL_SECF ((uint8_t)0x01)
#define RTC_CRL_ALRF ((uint8_t)0x02)
#define RTC_CRL_OWF ((uint8_t)0x04)
#define RTC_CRL_RSF ((uint8_t)0x08)
#define RTC_CRL_CNF ((uint8_t)0x10)
#define RTC_CRL_RTOFF ((uint8_t)0x20)


#define RTC_PRLH_PRL ((uint16_t)0x000F)


#define RTC_PRLL_PRL ((uint16_t)0xFFFF)


#define RTC_DIVH_RTC_DIV ((uint16_t)0x000F)


#define RTC_DIVL_RTC_DIV ((uint16_t)0xFFFF)


#define RTC_CNTH_RTC_CNT ((uint16_t)0xFFFF)


#define RTC_CNTL_RTC_CNT ((uint16_t)0xFFFF)


#define RTC_ALRH_RTC_ALR ((uint16_t)0xFFFF)


#define RTC_ALRL_RTC_ALR ((uint16_t)0xFFFF)
# 4526 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
#define IWDG_KR_KEY ((uint16_t)0xFFFF)


#define IWDG_PR_PR ((uint8_t)0x07)
#define IWDG_PR_PR_0 ((uint8_t)0x01)
#define IWDG_PR_PR_1 ((uint8_t)0x02)
#define IWDG_PR_PR_2 ((uint8_t)0x04)


#define IWDG_RLR_RL ((uint16_t)0x0FFF)


#define IWDG_SR_PVU ((uint8_t)0x01)
#define IWDG_SR_RVU ((uint8_t)0x02)
# 4548 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
#define WWDG_CR_T ((uint8_t)0x7F)
#define WWDG_CR_T0 ((uint8_t)0x01)
#define WWDG_CR_T1 ((uint8_t)0x02)
#define WWDG_CR_T2 ((uint8_t)0x04)
#define WWDG_CR_T3 ((uint8_t)0x08)
#define WWDG_CR_T4 ((uint8_t)0x10)
#define WWDG_CR_T5 ((uint8_t)0x20)
#define WWDG_CR_T6 ((uint8_t)0x40)

#define WWDG_CR_WDGA ((uint8_t)0x80)


#define WWDG_CFR_W ((uint16_t)0x007F)
#define WWDG_CFR_W0 ((uint16_t)0x0001)
#define WWDG_CFR_W1 ((uint16_t)0x0002)
#define WWDG_CFR_W2 ((uint16_t)0x0004)
#define WWDG_CFR_W3 ((uint16_t)0x0008)
#define WWDG_CFR_W4 ((uint16_t)0x0010)
#define WWDG_CFR_W5 ((uint16_t)0x0020)
#define WWDG_CFR_W6 ((uint16_t)0x0040)

#define WWDG_CFR_WDGTB ((uint16_t)0x0180)
#define WWDG_CFR_WDGTB0 ((uint16_t)0x0080)
#define WWDG_CFR_WDGTB1 ((uint16_t)0x0100)

#define WWDG_CFR_EWI ((uint16_t)0x0200)


#define WWDG_SR_EWIF ((uint8_t)0x01)
# 4585 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
#define FSMC_BCR1_MBKEN ((uint32_t)0x00000001)
#define FSMC_BCR1_MUXEN ((uint32_t)0x00000002)

#define FSMC_BCR1_MTYP ((uint32_t)0x0000000C)
#define FSMC_BCR1_MTYP_0 ((uint32_t)0x00000004)
#define FSMC_BCR1_MTYP_1 ((uint32_t)0x00000008)

#define FSMC_BCR1_MWID ((uint32_t)0x00000030)
#define FSMC_BCR1_MWID_0 ((uint32_t)0x00000010)
#define FSMC_BCR1_MWID_1 ((uint32_t)0x00000020)

#define FSMC_BCR1_FACCEN ((uint32_t)0x00000040)
#define FSMC_BCR1_BURSTEN ((uint32_t)0x00000100)
#define FSMC_BCR1_WAITPOL ((uint32_t)0x00000200)
#define FSMC_BCR1_WRAPMOD ((uint32_t)0x00000400)
#define FSMC_BCR1_WAITCFG ((uint32_t)0x00000800)
#define FSMC_BCR1_WREN ((uint32_t)0x00001000)
#define FSMC_BCR1_WAITEN ((uint32_t)0x00002000)
#define FSMC_BCR1_EXTMOD ((uint32_t)0x00004000)
#define FSMC_BCR1_ASYNCWAIT ((uint32_t)0x00008000)
#define FSMC_BCR1_CBURSTRW ((uint32_t)0x00080000)


#define FSMC_BCR2_MBKEN ((uint32_t)0x00000001)
#define FSMC_BCR2_MUXEN ((uint32_t)0x00000002)

#define FSMC_BCR2_MTYP ((uint32_t)0x0000000C)
#define FSMC_BCR2_MTYP_0 ((uint32_t)0x00000004)
#define FSMC_BCR2_MTYP_1 ((uint32_t)0x00000008)

#define FSMC_BCR2_MWID ((uint32_t)0x00000030)
#define FSMC_BCR2_MWID_0 ((uint32_t)0x00000010)
#define FSMC_BCR2_MWID_1 ((uint32_t)0x00000020)

#define FSMC_BCR2_FACCEN ((uint32_t)0x00000040)
#define FSMC_BCR2_BURSTEN ((uint32_t)0x00000100)
#define FSMC_BCR2_WAITPOL ((uint32_t)0x00000200)
#define FSMC_BCR2_WRAPMOD ((uint32_t)0x00000400)
#define FSMC_BCR2_WAITCFG ((uint32_t)0x00000800)
#define FSMC_BCR2_WREN ((uint32_t)0x00001000)
#define FSMC_BCR2_WAITEN ((uint32_t)0x00002000)
#define FSMC_BCR2_EXTMOD ((uint32_t)0x00004000)
#define FSMC_BCR2_ASYNCWAIT ((uint32_t)0x00008000)
#define FSMC_BCR2_CBURSTRW ((uint32_t)0x00080000)


#define FSMC_BCR3_MBKEN ((uint32_t)0x00000001)
#define FSMC_BCR3_MUXEN ((uint32_t)0x00000002)

#define FSMC_BCR3_MTYP ((uint32_t)0x0000000C)
#define FSMC_BCR3_MTYP_0 ((uint32_t)0x00000004)
#define FSMC_BCR3_MTYP_1 ((uint32_t)0x00000008)

#define FSMC_BCR3_MWID ((uint32_t)0x00000030)
#define FSMC_BCR3_MWID_0 ((uint32_t)0x00000010)
#define FSMC_BCR3_MWID_1 ((uint32_t)0x00000020)

#define FSMC_BCR3_FACCEN ((uint32_t)0x00000040)
#define FSMC_BCR3_BURSTEN ((uint32_t)0x00000100)
#define FSMC_BCR3_WAITPOL ((uint32_t)0x00000200)
#define FSMC_BCR3_WRAPMOD ((uint32_t)0x00000400)
#define FSMC_BCR3_WAITCFG ((uint32_t)0x00000800)
#define FSMC_BCR3_WREN ((uint32_t)0x00001000)
#define FSMC_BCR3_WAITEN ((uint32_t)0x00002000)
#define FSMC_BCR3_EXTMOD ((uint32_t)0x00004000)
#define FSMC_BCR3_ASYNCWAIT ((uint32_t)0x00008000)
#define FSMC_BCR3_CBURSTRW ((uint32_t)0x00080000)


#define FSMC_BCR4_MBKEN ((uint32_t)0x00000001)
#define FSMC_BCR4_MUXEN ((uint32_t)0x00000002)

#define FSMC_BCR4_MTYP ((uint32_t)0x0000000C)
#define FSMC_BCR4_MTYP_0 ((uint32_t)0x00000004)
#define FSMC_BCR4_MTYP_1 ((uint32_t)0x00000008)

#define FSMC_BCR4_MWID ((uint32_t)0x00000030)
#define FSMC_BCR4_MWID_0 ((uint32_t)0x00000010)
#define FSMC_BCR4_MWID_1 ((uint32_t)0x00000020)

#define FSMC_BCR4_FACCEN ((uint32_t)0x00000040)
#define FSMC_BCR4_BURSTEN ((uint32_t)0x00000100)
#define FSMC_BCR4_WAITPOL ((uint32_t)0x00000200)
#define FSMC_BCR4_WRAPMOD ((uint32_t)0x00000400)
#define FSMC_BCR4_WAITCFG ((uint32_t)0x00000800)
#define FSMC_BCR4_WREN ((uint32_t)0x00001000)
#define FSMC_BCR4_WAITEN ((uint32_t)0x00002000)
#define FSMC_BCR4_EXTMOD ((uint32_t)0x00004000)
#define FSMC_BCR4_ASYNCWAIT ((uint32_t)0x00008000)
#define FSMC_BCR4_CBURSTRW ((uint32_t)0x00080000)


#define FSMC_BTR1_ADDSET ((uint32_t)0x0000000F)
#define FSMC_BTR1_ADDSET_0 ((uint32_t)0x00000001)
#define FSMC_BTR1_ADDSET_1 ((uint32_t)0x00000002)
#define FSMC_BTR1_ADDSET_2 ((uint32_t)0x00000004)
#define FSMC_BTR1_ADDSET_3 ((uint32_t)0x00000008)

#define FSMC_BTR1_ADDHLD ((uint32_t)0x000000F0)
#define FSMC_BTR1_ADDHLD_0 ((uint32_t)0x00000010)
#define FSMC_BTR1_ADDHLD_1 ((uint32_t)0x00000020)
#define FSMC_BTR1_ADDHLD_2 ((uint32_t)0x00000040)
#define FSMC_BTR1_ADDHLD_3 ((uint32_t)0x00000080)

#define FSMC_BTR1_DATAST ((uint32_t)0x0000FF00)
#define FSMC_BTR1_DATAST_0 ((uint32_t)0x00000100)
#define FSMC_BTR1_DATAST_1 ((uint32_t)0x00000200)
#define FSMC_BTR1_DATAST_2 ((uint32_t)0x00000400)
#define FSMC_BTR1_DATAST_3 ((uint32_t)0x00000800)

#define FSMC_BTR1_BUSTURN ((uint32_t)0x000F0000)
#define FSMC_BTR1_BUSTURN_0 ((uint32_t)0x00010000)
#define FSMC_BTR1_BUSTURN_1 ((uint32_t)0x00020000)
#define FSMC_BTR1_BUSTURN_2 ((uint32_t)0x00040000)
#define FSMC_BTR1_BUSTURN_3 ((uint32_t)0x00080000)

#define FSMC_BTR1_CLKDIV ((uint32_t)0x00F00000)
#define FSMC_BTR1_CLKDIV_0 ((uint32_t)0x00100000)
#define FSMC_BTR1_CLKDIV_1 ((uint32_t)0x00200000)
#define FSMC_BTR1_CLKDIV_2 ((uint32_t)0x00400000)
#define FSMC_BTR1_CLKDIV_3 ((uint32_t)0x00800000)

#define FSMC_BTR1_DATLAT ((uint32_t)0x0F000000)
#define FSMC_BTR1_DATLAT_0 ((uint32_t)0x01000000)
#define FSMC_BTR1_DATLAT_1 ((uint32_t)0x02000000)
#define FSMC_BTR1_DATLAT_2 ((uint32_t)0x04000000)
#define FSMC_BTR1_DATLAT_3 ((uint32_t)0x08000000)

#define FSMC_BTR1_ACCMOD ((uint32_t)0x30000000)
#define FSMC_BTR1_ACCMOD_0 ((uint32_t)0x10000000)
#define FSMC_BTR1_ACCMOD_1 ((uint32_t)0x20000000)


#define FSMC_BTR2_ADDSET ((uint32_t)0x0000000F)
#define FSMC_BTR2_ADDSET_0 ((uint32_t)0x00000001)
#define FSMC_BTR2_ADDSET_1 ((uint32_t)0x00000002)
#define FSMC_BTR2_ADDSET_2 ((uint32_t)0x00000004)
#define FSMC_BTR2_ADDSET_3 ((uint32_t)0x00000008)

#define FSMC_BTR2_ADDHLD ((uint32_t)0x000000F0)
#define FSMC_BTR2_ADDHLD_0 ((uint32_t)0x00000010)
#define FSMC_BTR2_ADDHLD_1 ((uint32_t)0x00000020)
#define FSMC_BTR2_ADDHLD_2 ((uint32_t)0x00000040)
#define FSMC_BTR2_ADDHLD_3 ((uint32_t)0x00000080)

#define FSMC_BTR2_DATAST ((uint32_t)0x0000FF00)
#define FSMC_BTR2_DATAST_0 ((uint32_t)0x00000100)
#define FSMC_BTR2_DATAST_1 ((uint32_t)0x00000200)
#define FSMC_BTR2_DATAST_2 ((uint32_t)0x00000400)
#define FSMC_BTR2_DATAST_3 ((uint32_t)0x00000800)

#define FSMC_BTR2_BUSTURN ((uint32_t)0x000F0000)
#define FSMC_BTR2_BUSTURN_0 ((uint32_t)0x00010000)
#define FSMC_BTR2_BUSTURN_1 ((uint32_t)0x00020000)
#define FSMC_BTR2_BUSTURN_2 ((uint32_t)0x00040000)
#define FSMC_BTR2_BUSTURN_3 ((uint32_t)0x00080000)

#define FSMC_BTR2_CLKDIV ((uint32_t)0x00F00000)
#define FSMC_BTR2_CLKDIV_0 ((uint32_t)0x00100000)
#define FSMC_BTR2_CLKDIV_1 ((uint32_t)0x00200000)
#define FSMC_BTR2_CLKDIV_2 ((uint32_t)0x00400000)
#define FSMC_BTR2_CLKDIV_3 ((uint32_t)0x00800000)

#define FSMC_BTR2_DATLAT ((uint32_t)0x0F000000)
#define FSMC_BTR2_DATLAT_0 ((uint32_t)0x01000000)
#define FSMC_BTR2_DATLAT_1 ((uint32_t)0x02000000)
#define FSMC_BTR2_DATLAT_2 ((uint32_t)0x04000000)
#define FSMC_BTR2_DATLAT_3 ((uint32_t)0x08000000)

#define FSMC_BTR2_ACCMOD ((uint32_t)0x30000000)
#define FSMC_BTR2_ACCMOD_0 ((uint32_t)0x10000000)
#define FSMC_BTR2_ACCMOD_1 ((uint32_t)0x20000000)


#define FSMC_BTR3_ADDSET ((uint32_t)0x0000000F)
#define FSMC_BTR3_ADDSET_0 ((uint32_t)0x00000001)
#define FSMC_BTR3_ADDSET_1 ((uint32_t)0x00000002)
#define FSMC_BTR3_ADDSET_2 ((uint32_t)0x00000004)
#define FSMC_BTR3_ADDSET_3 ((uint32_t)0x00000008)

#define FSMC_BTR3_ADDHLD ((uint32_t)0x000000F0)
#define FSMC_BTR3_ADDHLD_0 ((uint32_t)0x00000010)
#define FSMC_BTR3_ADDHLD_1 ((uint32_t)0x00000020)
#define FSMC_BTR3_ADDHLD_2 ((uint32_t)0x00000040)
#define FSMC_BTR3_ADDHLD_3 ((uint32_t)0x00000080)

#define FSMC_BTR3_DATAST ((uint32_t)0x0000FF00)
#define FSMC_BTR3_DATAST_0 ((uint32_t)0x00000100)
#define FSMC_BTR3_DATAST_1 ((uint32_t)0x00000200)
#define FSMC_BTR3_DATAST_2 ((uint32_t)0x00000400)
#define FSMC_BTR3_DATAST_3 ((uint32_t)0x00000800)

#define FSMC_BTR3_BUSTURN ((uint32_t)0x000F0000)
#define FSMC_BTR3_BUSTURN_0 ((uint32_t)0x00010000)
#define FSMC_BTR3_BUSTURN_1 ((uint32_t)0x00020000)
#define FSMC_BTR3_BUSTURN_2 ((uint32_t)0x00040000)
#define FSMC_BTR3_BUSTURN_3 ((uint32_t)0x00080000)

#define FSMC_BTR3_CLKDIV ((uint32_t)0x00F00000)
#define FSMC_BTR3_CLKDIV_0 ((uint32_t)0x00100000)
#define FSMC_BTR3_CLKDIV_1 ((uint32_t)0x00200000)
#define FSMC_BTR3_CLKDIV_2 ((uint32_t)0x00400000)
#define FSMC_BTR3_CLKDIV_3 ((uint32_t)0x00800000)

#define FSMC_BTR3_DATLAT ((uint32_t)0x0F000000)
#define FSMC_BTR3_DATLAT_0 ((uint32_t)0x01000000)
#define FSMC_BTR3_DATLAT_1 ((uint32_t)0x02000000)
#define FSMC_BTR3_DATLAT_2 ((uint32_t)0x04000000)
#define FSMC_BTR3_DATLAT_3 ((uint32_t)0x08000000)

#define FSMC_BTR3_ACCMOD ((uint32_t)0x30000000)
#define FSMC_BTR3_ACCMOD_0 ((uint32_t)0x10000000)
#define FSMC_BTR3_ACCMOD_1 ((uint32_t)0x20000000)


#define FSMC_BTR4_ADDSET ((uint32_t)0x0000000F)
#define FSMC_BTR4_ADDSET_0 ((uint32_t)0x00000001)
#define FSMC_BTR4_ADDSET_1 ((uint32_t)0x00000002)
#define FSMC_BTR4_ADDSET_2 ((uint32_t)0x00000004)
#define FSMC_BTR4_ADDSET_3 ((uint32_t)0x00000008)

#define FSMC_BTR4_ADDHLD ((uint32_t)0x000000F0)
#define FSMC_BTR4_ADDHLD_0 ((uint32_t)0x00000010)
#define FSMC_BTR4_ADDHLD_1 ((uint32_t)0x00000020)
#define FSMC_BTR4_ADDHLD_2 ((uint32_t)0x00000040)
#define FSMC_BTR4_ADDHLD_3 ((uint32_t)0x00000080)

#define FSMC_BTR4_DATAST ((uint32_t)0x0000FF00)
#define FSMC_BTR4_DATAST_0 ((uint32_t)0x00000100)
#define FSMC_BTR4_DATAST_1 ((uint32_t)0x00000200)
#define FSMC_BTR4_DATAST_2 ((uint32_t)0x00000400)
#define FSMC_BTR4_DATAST_3 ((uint32_t)0x00000800)

#define FSMC_BTR4_BUSTURN ((uint32_t)0x000F0000)
#define FSMC_BTR4_BUSTURN_0 ((uint32_t)0x00010000)
#define FSMC_BTR4_BUSTURN_1 ((uint32_t)0x00020000)
#define FSMC_BTR4_BUSTURN_2 ((uint32_t)0x00040000)
#define FSMC_BTR4_BUSTURN_3 ((uint32_t)0x00080000)

#define FSMC_BTR4_CLKDIV ((uint32_t)0x00F00000)
#define FSMC_BTR4_CLKDIV_0 ((uint32_t)0x00100000)
#define FSMC_BTR4_CLKDIV_1 ((uint32_t)0x00200000)
#define FSMC_BTR4_CLKDIV_2 ((uint32_t)0x00400000)
#define FSMC_BTR4_CLKDIV_3 ((uint32_t)0x00800000)

#define FSMC_BTR4_DATLAT ((uint32_t)0x0F000000)
#define FSMC_BTR4_DATLAT_0 ((uint32_t)0x01000000)
#define FSMC_BTR4_DATLAT_1 ((uint32_t)0x02000000)
#define FSMC_BTR4_DATLAT_2 ((uint32_t)0x04000000)
#define FSMC_BTR4_DATLAT_3 ((uint32_t)0x08000000)

#define FSMC_BTR4_ACCMOD ((uint32_t)0x30000000)
#define FSMC_BTR4_ACCMOD_0 ((uint32_t)0x10000000)
#define FSMC_BTR4_ACCMOD_1 ((uint32_t)0x20000000)


#define FSMC_BWTR1_ADDSET ((uint32_t)0x0000000F)
#define FSMC_BWTR1_ADDSET_0 ((uint32_t)0x00000001)
#define FSMC_BWTR1_ADDSET_1 ((uint32_t)0x00000002)
#define FSMC_BWTR1_ADDSET_2 ((uint32_t)0x00000004)
#define FSMC_BWTR1_ADDSET_3 ((uint32_t)0x00000008)

#define FSMC_BWTR1_ADDHLD ((uint32_t)0x000000F0)
#define FSMC_BWTR1_ADDHLD_0 ((uint32_t)0x00000010)
#define FSMC_BWTR1_ADDHLD_1 ((uint32_t)0x00000020)
#define FSMC_BWTR1_ADDHLD_2 ((uint32_t)0x00000040)
#define FSMC_BWTR1_ADDHLD_3 ((uint32_t)0x00000080)

#define FSMC_BWTR1_DATAST ((uint32_t)0x0000FF00)
#define FSMC_BWTR1_DATAST_0 ((uint32_t)0x00000100)
#define FSMC_BWTR1_DATAST_1 ((uint32_t)0x00000200)
#define FSMC_BWTR1_DATAST_2 ((uint32_t)0x00000400)
#define FSMC_BWTR1_DATAST_3 ((uint32_t)0x00000800)

#define FSMC_BWTR1_CLKDIV ((uint32_t)0x00F00000)
#define FSMC_BWTR1_CLKDIV_0 ((uint32_t)0x00100000)
#define FSMC_BWTR1_CLKDIV_1 ((uint32_t)0x00200000)
#define FSMC_BWTR1_CLKDIV_2 ((uint32_t)0x00400000)
#define FSMC_BWTR1_CLKDIV_3 ((uint32_t)0x00800000)

#define FSMC_BWTR1_DATLAT ((uint32_t)0x0F000000)
#define FSMC_BWTR1_DATLAT_0 ((uint32_t)0x01000000)
#define FSMC_BWTR1_DATLAT_1 ((uint32_t)0x02000000)
#define FSMC_BWTR1_DATLAT_2 ((uint32_t)0x04000000)
#define FSMC_BWTR1_DATLAT_3 ((uint32_t)0x08000000)

#define FSMC_BWTR1_ACCMOD ((uint32_t)0x30000000)
#define FSMC_BWTR1_ACCMOD_0 ((uint32_t)0x10000000)
#define FSMC_BWTR1_ACCMOD_1 ((uint32_t)0x20000000)


#define FSMC_BWTR2_ADDSET ((uint32_t)0x0000000F)
#define FSMC_BWTR2_ADDSET_0 ((uint32_t)0x00000001)
#define FSMC_BWTR2_ADDSET_1 ((uint32_t)0x00000002)
#define FSMC_BWTR2_ADDSET_2 ((uint32_t)0x00000004)
#define FSMC_BWTR2_ADDSET_3 ((uint32_t)0x00000008)

#define FSMC_BWTR2_ADDHLD ((uint32_t)0x000000F0)
#define FSMC_BWTR2_ADDHLD_0 ((uint32_t)0x00000010)
#define FSMC_BWTR2_ADDHLD_1 ((uint32_t)0x00000020)
#define FSMC_BWTR2_ADDHLD_2 ((uint32_t)0x00000040)
#define FSMC_BWTR2_ADDHLD_3 ((uint32_t)0x00000080)

#define FSMC_BWTR2_DATAST ((uint32_t)0x0000FF00)
#define FSMC_BWTR2_DATAST_0 ((uint32_t)0x00000100)
#define FSMC_BWTR2_DATAST_1 ((uint32_t)0x00000200)
#define FSMC_BWTR2_DATAST_2 ((uint32_t)0x00000400)
#define FSMC_BWTR2_DATAST_3 ((uint32_t)0x00000800)

#define FSMC_BWTR2_CLKDIV ((uint32_t)0x00F00000)
#define FSMC_BWTR2_CLKDIV_0 ((uint32_t)0x00100000)
#define FSMC_BWTR2_CLKDIV_1 ((uint32_t)0x00200000)
#define FSMC_BWTR2_CLKDIV_2 ((uint32_t)0x00400000)
#define FSMC_BWTR2_CLKDIV_3 ((uint32_t)0x00800000)

#define FSMC_BWTR2_DATLAT ((uint32_t)0x0F000000)
#define FSMC_BWTR2_DATLAT_0 ((uint32_t)0x01000000)
#define FSMC_BWTR2_DATLAT_1 ((uint32_t)0x02000000)
#define FSMC_BWTR2_DATLAT_2 ((uint32_t)0x04000000)
#define FSMC_BWTR2_DATLAT_3 ((uint32_t)0x08000000)

#define FSMC_BWTR2_ACCMOD ((uint32_t)0x30000000)
#define FSMC_BWTR2_ACCMOD_0 ((uint32_t)0x10000000)
#define FSMC_BWTR2_ACCMOD_1 ((uint32_t)0x20000000)


#define FSMC_BWTR3_ADDSET ((uint32_t)0x0000000F)
#define FSMC_BWTR3_ADDSET_0 ((uint32_t)0x00000001)
#define FSMC_BWTR3_ADDSET_1 ((uint32_t)0x00000002)
#define FSMC_BWTR3_ADDSET_2 ((uint32_t)0x00000004)
#define FSMC_BWTR3_ADDSET_3 ((uint32_t)0x00000008)

#define FSMC_BWTR3_ADDHLD ((uint32_t)0x000000F0)
#define FSMC_BWTR3_ADDHLD_0 ((uint32_t)0x00000010)
#define FSMC_BWTR3_ADDHLD_1 ((uint32_t)0x00000020)
#define FSMC_BWTR3_ADDHLD_2 ((uint32_t)0x00000040)
#define FSMC_BWTR3_ADDHLD_3 ((uint32_t)0x00000080)

#define FSMC_BWTR3_DATAST ((uint32_t)0x0000FF00)
#define FSMC_BWTR3_DATAST_0 ((uint32_t)0x00000100)
#define FSMC_BWTR3_DATAST_1 ((uint32_t)0x00000200)
#define FSMC_BWTR3_DATAST_2 ((uint32_t)0x00000400)
#define FSMC_BWTR3_DATAST_3 ((uint32_t)0x00000800)

#define FSMC_BWTR3_CLKDIV ((uint32_t)0x00F00000)
#define FSMC_BWTR3_CLKDIV_0 ((uint32_t)0x00100000)
#define FSMC_BWTR3_CLKDIV_1 ((uint32_t)0x00200000)
#define FSMC_BWTR3_CLKDIV_2 ((uint32_t)0x00400000)
#define FSMC_BWTR3_CLKDIV_3 ((uint32_t)0x00800000)

#define FSMC_BWTR3_DATLAT ((uint32_t)0x0F000000)
#define FSMC_BWTR3_DATLAT_0 ((uint32_t)0x01000000)
#define FSMC_BWTR3_DATLAT_1 ((uint32_t)0x02000000)
#define FSMC_BWTR3_DATLAT_2 ((uint32_t)0x04000000)
#define FSMC_BWTR3_DATLAT_3 ((uint32_t)0x08000000)

#define FSMC_BWTR3_ACCMOD ((uint32_t)0x30000000)
#define FSMC_BWTR3_ACCMOD_0 ((uint32_t)0x10000000)
#define FSMC_BWTR3_ACCMOD_1 ((uint32_t)0x20000000)


#define FSMC_BWTR4_ADDSET ((uint32_t)0x0000000F)
#define FSMC_BWTR4_ADDSET_0 ((uint32_t)0x00000001)
#define FSMC_BWTR4_ADDSET_1 ((uint32_t)0x00000002)
#define FSMC_BWTR4_ADDSET_2 ((uint32_t)0x00000004)
#define FSMC_BWTR4_ADDSET_3 ((uint32_t)0x00000008)

#define FSMC_BWTR4_ADDHLD ((uint32_t)0x000000F0)
#define FSMC_BWTR4_ADDHLD_0 ((uint32_t)0x00000010)
#define FSMC_BWTR4_ADDHLD_1 ((uint32_t)0x00000020)
#define FSMC_BWTR4_ADDHLD_2 ((uint32_t)0x00000040)
#define FSMC_BWTR4_ADDHLD_3 ((uint32_t)0x00000080)

#define FSMC_BWTR4_DATAST ((uint32_t)0x0000FF00)
#define FSMC_BWTR4_DATAST_0 ((uint32_t)0x00000100)
#define FSMC_BWTR4_DATAST_1 ((uint32_t)0x00000200)
#define FSMC_BWTR4_DATAST_2 ((uint32_t)0x00000400)
#define FSMC_BWTR4_DATAST_3 ((uint32_t)0x00000800)

#define FSMC_BWTR4_CLKDIV ((uint32_t)0x00F00000)
#define FSMC_BWTR4_CLKDIV_0 ((uint32_t)0x00100000)
#define FSMC_BWTR4_CLKDIV_1 ((uint32_t)0x00200000)
#define FSMC_BWTR4_CLKDIV_2 ((uint32_t)0x00400000)
#define FSMC_BWTR4_CLKDIV_3 ((uint32_t)0x00800000)

#define FSMC_BWTR4_DATLAT ((uint32_t)0x0F000000)
#define FSMC_BWTR4_DATLAT_0 ((uint32_t)0x01000000)
#define FSMC_BWTR4_DATLAT_1 ((uint32_t)0x02000000)
#define FSMC_BWTR4_DATLAT_2 ((uint32_t)0x04000000)
#define FSMC_BWTR4_DATLAT_3 ((uint32_t)0x08000000)

#define FSMC_BWTR4_ACCMOD ((uint32_t)0x30000000)
#define FSMC_BWTR4_ACCMOD_0 ((uint32_t)0x10000000)
#define FSMC_BWTR4_ACCMOD_1 ((uint32_t)0x20000000)


#define FSMC_PCR2_PWAITEN ((uint32_t)0x00000002)
#define FSMC_PCR2_PBKEN ((uint32_t)0x00000004)
#define FSMC_PCR2_PTYP ((uint32_t)0x00000008)

#define FSMC_PCR2_PWID ((uint32_t)0x00000030)
#define FSMC_PCR2_PWID_0 ((uint32_t)0x00000010)
#define FSMC_PCR2_PWID_1 ((uint32_t)0x00000020)

#define FSMC_PCR2_ECCEN ((uint32_t)0x00000040)

#define FSMC_PCR2_TCLR ((uint32_t)0x00001E00)
#define FSMC_PCR2_TCLR_0 ((uint32_t)0x00000200)
#define FSMC_PCR2_TCLR_1 ((uint32_t)0x00000400)
#define FSMC_PCR2_TCLR_2 ((uint32_t)0x00000800)
#define FSMC_PCR2_TCLR_3 ((uint32_t)0x00001000)

#define FSMC_PCR2_TAR ((uint32_t)0x0001E000)
#define FSMC_PCR2_TAR_0 ((uint32_t)0x00002000)
#define FSMC_PCR2_TAR_1 ((uint32_t)0x00004000)
#define FSMC_PCR2_TAR_2 ((uint32_t)0x00008000)
#define FSMC_PCR2_TAR_3 ((uint32_t)0x00010000)

#define FSMC_PCR2_ECCPS ((uint32_t)0x000E0000)
#define FSMC_PCR2_ECCPS_0 ((uint32_t)0x00020000)
#define FSMC_PCR2_ECCPS_1 ((uint32_t)0x00040000)
#define FSMC_PCR2_ECCPS_2 ((uint32_t)0x00080000)


#define FSMC_PCR3_PWAITEN ((uint32_t)0x00000002)
#define FSMC_PCR3_PBKEN ((uint32_t)0x00000004)
#define FSMC_PCR3_PTYP ((uint32_t)0x00000008)

#define FSMC_PCR3_PWID ((uint32_t)0x00000030)
#define FSMC_PCR3_PWID_0 ((uint32_t)0x00000010)
#define FSMC_PCR3_PWID_1 ((uint32_t)0x00000020)

#define FSMC_PCR3_ECCEN ((uint32_t)0x00000040)

#define FSMC_PCR3_TCLR ((uint32_t)0x00001E00)
#define FSMC_PCR3_TCLR_0 ((uint32_t)0x00000200)
#define FSMC_PCR3_TCLR_1 ((uint32_t)0x00000400)
#define FSMC_PCR3_TCLR_2 ((uint32_t)0x00000800)
#define FSMC_PCR3_TCLR_3 ((uint32_t)0x00001000)

#define FSMC_PCR3_TAR ((uint32_t)0x0001E000)
#define FSMC_PCR3_TAR_0 ((uint32_t)0x00002000)
#define FSMC_PCR3_TAR_1 ((uint32_t)0x00004000)
#define FSMC_PCR3_TAR_2 ((uint32_t)0x00008000)
#define FSMC_PCR3_TAR_3 ((uint32_t)0x00010000)

#define FSMC_PCR3_ECCPS ((uint32_t)0x000E0000)
#define FSMC_PCR3_ECCPS_0 ((uint32_t)0x00020000)
#define FSMC_PCR3_ECCPS_1 ((uint32_t)0x00040000)
#define FSMC_PCR3_ECCPS_2 ((uint32_t)0x00080000)


#define FSMC_PCR4_PWAITEN ((uint32_t)0x00000002)
#define FSMC_PCR4_PBKEN ((uint32_t)0x00000004)
#define FSMC_PCR4_PTYP ((uint32_t)0x00000008)

#define FSMC_PCR4_PWID ((uint32_t)0x00000030)
#define FSMC_PCR4_PWID_0 ((uint32_t)0x00000010)
#define FSMC_PCR4_PWID_1 ((uint32_t)0x00000020)

#define FSMC_PCR4_ECCEN ((uint32_t)0x00000040)

#define FSMC_PCR4_TCLR ((uint32_t)0x00001E00)
#define FSMC_PCR4_TCLR_0 ((uint32_t)0x00000200)
#define FSMC_PCR4_TCLR_1 ((uint32_t)0x00000400)
#define FSMC_PCR4_TCLR_2 ((uint32_t)0x00000800)
#define FSMC_PCR4_TCLR_3 ((uint32_t)0x00001000)

#define FSMC_PCR4_TAR ((uint32_t)0x0001E000)
#define FSMC_PCR4_TAR_0 ((uint32_t)0x00002000)
#define FSMC_PCR4_TAR_1 ((uint32_t)0x00004000)
#define FSMC_PCR4_TAR_2 ((uint32_t)0x00008000)
#define FSMC_PCR4_TAR_3 ((uint32_t)0x00010000)

#define FSMC_PCR4_ECCPS ((uint32_t)0x000E0000)
#define FSMC_PCR4_ECCPS_0 ((uint32_t)0x00020000)
#define FSMC_PCR4_ECCPS_1 ((uint32_t)0x00040000)
#define FSMC_PCR4_ECCPS_2 ((uint32_t)0x00080000)


#define FSMC_SR2_IRS ((uint8_t)0x01)
#define FSMC_SR2_ILS ((uint8_t)0x02)
#define FSMC_SR2_IFS ((uint8_t)0x04)
#define FSMC_SR2_IREN ((uint8_t)0x08)
#define FSMC_SR2_ILEN ((uint8_t)0x10)
#define FSMC_SR2_IFEN ((uint8_t)0x20)
#define FSMC_SR2_FEMPT ((uint8_t)0x40)


#define FSMC_SR3_IRS ((uint8_t)0x01)
#define FSMC_SR3_ILS ((uint8_t)0x02)
#define FSMC_SR3_IFS ((uint8_t)0x04)
#define FSMC_SR3_IREN ((uint8_t)0x08)
#define FSMC_SR3_ILEN ((uint8_t)0x10)
#define FSMC_SR3_IFEN ((uint8_t)0x20)
#define FSMC_SR3_FEMPT ((uint8_t)0x40)


#define FSMC_SR4_IRS ((uint8_t)0x01)
#define FSMC_SR4_ILS ((uint8_t)0x02)
#define FSMC_SR4_IFS ((uint8_t)0x04)
#define FSMC_SR4_IREN ((uint8_t)0x08)
#define FSMC_SR4_ILEN ((uint8_t)0x10)
#define FSMC_SR4_IFEN ((uint8_t)0x20)
#define FSMC_SR4_FEMPT ((uint8_t)0x40)


#define FSMC_PMEM2_MEMSET2 ((uint32_t)0x000000FF)
#define FSMC_PMEM2_MEMSET2_0 ((uint32_t)0x00000001)
#define FSMC_PMEM2_MEMSET2_1 ((uint32_t)0x00000002)
#define FSMC_PMEM2_MEMSET2_2 ((uint32_t)0x00000004)
#define FSMC_PMEM2_MEMSET2_3 ((uint32_t)0x00000008)
#define FSMC_PMEM2_MEMSET2_4 ((uint32_t)0x00000010)
#define FSMC_PMEM2_MEMSET2_5 ((uint32_t)0x00000020)
#define FSMC_PMEM2_MEMSET2_6 ((uint32_t)0x00000040)
#define FSMC_PMEM2_MEMSET2_7 ((uint32_t)0x00000080)

#define FSMC_PMEM2_MEMWAIT2 ((uint32_t)0x0000FF00)
#define FSMC_PMEM2_MEMWAIT2_0 ((uint32_t)0x00000100)
#define FSMC_PMEM2_MEMWAIT2_1 ((uint32_t)0x00000200)
#define FSMC_PMEM2_MEMWAIT2_2 ((uint32_t)0x00000400)
#define FSMC_PMEM2_MEMWAIT2_3 ((uint32_t)0x00000800)
#define FSMC_PMEM2_MEMWAIT2_4 ((uint32_t)0x00001000)
#define FSMC_PMEM2_MEMWAIT2_5 ((uint32_t)0x00002000)
#define FSMC_PMEM2_MEMWAIT2_6 ((uint32_t)0x00004000)
#define FSMC_PMEM2_MEMWAIT2_7 ((uint32_t)0x00008000)

#define FSMC_PMEM2_MEMHOLD2 ((uint32_t)0x00FF0000)
#define FSMC_PMEM2_MEMHOLD2_0 ((uint32_t)0x00010000)
#define FSMC_PMEM2_MEMHOLD2_1 ((uint32_t)0x00020000)
#define FSMC_PMEM2_MEMHOLD2_2 ((uint32_t)0x00040000)
#define FSMC_PMEM2_MEMHOLD2_3 ((uint32_t)0x00080000)
#define FSMC_PMEM2_MEMHOLD2_4 ((uint32_t)0x00100000)
#define FSMC_PMEM2_MEMHOLD2_5 ((uint32_t)0x00200000)
#define FSMC_PMEM2_MEMHOLD2_6 ((uint32_t)0x00400000)
#define FSMC_PMEM2_MEMHOLD2_7 ((uint32_t)0x00800000)

#define FSMC_PMEM2_MEMHIZ2 ((uint32_t)0xFF000000)
#define FSMC_PMEM2_MEMHIZ2_0 ((uint32_t)0x01000000)
#define FSMC_PMEM2_MEMHIZ2_1 ((uint32_t)0x02000000)
#define FSMC_PMEM2_MEMHIZ2_2 ((uint32_t)0x04000000)
#define FSMC_PMEM2_MEMHIZ2_3 ((uint32_t)0x08000000)
#define FSMC_PMEM2_MEMHIZ2_4 ((uint32_t)0x10000000)
#define FSMC_PMEM2_MEMHIZ2_5 ((uint32_t)0x20000000)
#define FSMC_PMEM2_MEMHIZ2_6 ((uint32_t)0x40000000)
#define FSMC_PMEM2_MEMHIZ2_7 ((uint32_t)0x80000000)


#define FSMC_PMEM3_MEMSET3 ((uint32_t)0x000000FF)
#define FSMC_PMEM3_MEMSET3_0 ((uint32_t)0x00000001)
#define FSMC_PMEM3_MEMSET3_1 ((uint32_t)0x00000002)
#define FSMC_PMEM3_MEMSET3_2 ((uint32_t)0x00000004)
#define FSMC_PMEM3_MEMSET3_3 ((uint32_t)0x00000008)
#define FSMC_PMEM3_MEMSET3_4 ((uint32_t)0x00000010)
#define FSMC_PMEM3_MEMSET3_5 ((uint32_t)0x00000020)
#define FSMC_PMEM3_MEMSET3_6 ((uint32_t)0x00000040)
#define FSMC_PMEM3_MEMSET3_7 ((uint32_t)0x00000080)

#define FSMC_PMEM3_MEMWAIT3 ((uint32_t)0x0000FF00)
#define FSMC_PMEM3_MEMWAIT3_0 ((uint32_t)0x00000100)
#define FSMC_PMEM3_MEMWAIT3_1 ((uint32_t)0x00000200)
#define FSMC_PMEM3_MEMWAIT3_2 ((uint32_t)0x00000400)
#define FSMC_PMEM3_MEMWAIT3_3 ((uint32_t)0x00000800)
#define FSMC_PMEM3_MEMWAIT3_4 ((uint32_t)0x00001000)
#define FSMC_PMEM3_MEMWAIT3_5 ((uint32_t)0x00002000)
#define FSMC_PMEM3_MEMWAIT3_6 ((uint32_t)0x00004000)
#define FSMC_PMEM3_MEMWAIT3_7 ((uint32_t)0x00008000)

#define FSMC_PMEM3_MEMHOLD3 ((uint32_t)0x00FF0000)
#define FSMC_PMEM3_MEMHOLD3_0 ((uint32_t)0x00010000)
#define FSMC_PMEM3_MEMHOLD3_1 ((uint32_t)0x00020000)
#define FSMC_PMEM3_MEMHOLD3_2 ((uint32_t)0x00040000)
#define FSMC_PMEM3_MEMHOLD3_3 ((uint32_t)0x00080000)
#define FSMC_PMEM3_MEMHOLD3_4 ((uint32_t)0x00100000)
#define FSMC_PMEM3_MEMHOLD3_5 ((uint32_t)0x00200000)
#define FSMC_PMEM3_MEMHOLD3_6 ((uint32_t)0x00400000)
#define FSMC_PMEM3_MEMHOLD3_7 ((uint32_t)0x00800000)

#define FSMC_PMEM3_MEMHIZ3 ((uint32_t)0xFF000000)
#define FSMC_PMEM3_MEMHIZ3_0 ((uint32_t)0x01000000)
#define FSMC_PMEM3_MEMHIZ3_1 ((uint32_t)0x02000000)
#define FSMC_PMEM3_MEMHIZ3_2 ((uint32_t)0x04000000)
#define FSMC_PMEM3_MEMHIZ3_3 ((uint32_t)0x08000000)
#define FSMC_PMEM3_MEMHIZ3_4 ((uint32_t)0x10000000)
#define FSMC_PMEM3_MEMHIZ3_5 ((uint32_t)0x20000000)
#define FSMC_PMEM3_MEMHIZ3_6 ((uint32_t)0x40000000)
#define FSMC_PMEM3_MEMHIZ3_7 ((uint32_t)0x80000000)


#define FSMC_PMEM4_MEMSET4 ((uint32_t)0x000000FF)
#define FSMC_PMEM4_MEMSET4_0 ((uint32_t)0x00000001)
#define FSMC_PMEM4_MEMSET4_1 ((uint32_t)0x00000002)
#define FSMC_PMEM4_MEMSET4_2 ((uint32_t)0x00000004)
#define FSMC_PMEM4_MEMSET4_3 ((uint32_t)0x00000008)
#define FSMC_PMEM4_MEMSET4_4 ((uint32_t)0x00000010)
#define FSMC_PMEM4_MEMSET4_5 ((uint32_t)0x00000020)
#define FSMC_PMEM4_MEMSET4_6 ((uint32_t)0x00000040)
#define FSMC_PMEM4_MEMSET4_7 ((uint32_t)0x00000080)

#define FSMC_PMEM4_MEMWAIT4 ((uint32_t)0x0000FF00)
#define FSMC_PMEM4_MEMWAIT4_0 ((uint32_t)0x00000100)
#define FSMC_PMEM4_MEMWAIT4_1 ((uint32_t)0x00000200)
#define FSMC_PMEM4_MEMWAIT4_2 ((uint32_t)0x00000400)
#define FSMC_PMEM4_MEMWAIT4_3 ((uint32_t)0x00000800)
#define FSMC_PMEM4_MEMWAIT4_4 ((uint32_t)0x00001000)
#define FSMC_PMEM4_MEMWAIT4_5 ((uint32_t)0x00002000)
#define FSMC_PMEM4_MEMWAIT4_6 ((uint32_t)0x00004000)
#define FSMC_PMEM4_MEMWAIT4_7 ((uint32_t)0x00008000)

#define FSMC_PMEM4_MEMHOLD4 ((uint32_t)0x00FF0000)
#define FSMC_PMEM4_MEMHOLD4_0 ((uint32_t)0x00010000)
#define FSMC_PMEM4_MEMHOLD4_1 ((uint32_t)0x00020000)
#define FSMC_PMEM4_MEMHOLD4_2 ((uint32_t)0x00040000)
#define FSMC_PMEM4_MEMHOLD4_3 ((uint32_t)0x00080000)
#define FSMC_PMEM4_MEMHOLD4_4 ((uint32_t)0x00100000)
#define FSMC_PMEM4_MEMHOLD4_5 ((uint32_t)0x00200000)
#define FSMC_PMEM4_MEMHOLD4_6 ((uint32_t)0x00400000)
#define FSMC_PMEM4_MEMHOLD4_7 ((uint32_t)0x00800000)

#define FSMC_PMEM4_MEMHIZ4 ((uint32_t)0xFF000000)
#define FSMC_PMEM4_MEMHIZ4_0 ((uint32_t)0x01000000)
#define FSMC_PMEM4_MEMHIZ4_1 ((uint32_t)0x02000000)
#define FSMC_PMEM4_MEMHIZ4_2 ((uint32_t)0x04000000)
#define FSMC_PMEM4_MEMHIZ4_3 ((uint32_t)0x08000000)
#define FSMC_PMEM4_MEMHIZ4_4 ((uint32_t)0x10000000)
#define FSMC_PMEM4_MEMHIZ4_5 ((uint32_t)0x20000000)
#define FSMC_PMEM4_MEMHIZ4_6 ((uint32_t)0x40000000)
#define FSMC_PMEM4_MEMHIZ4_7 ((uint32_t)0x80000000)


#define FSMC_PATT2_ATTSET2 ((uint32_t)0x000000FF)
#define FSMC_PATT2_ATTSET2_0 ((uint32_t)0x00000001)
#define FSMC_PATT2_ATTSET2_1 ((uint32_t)0x00000002)
#define FSMC_PATT2_ATTSET2_2 ((uint32_t)0x00000004)
#define FSMC_PATT2_ATTSET2_3 ((uint32_t)0x00000008)
#define FSMC_PATT2_ATTSET2_4 ((uint32_t)0x00000010)
#define FSMC_PATT2_ATTSET2_5 ((uint32_t)0x00000020)
#define FSMC_PATT2_ATTSET2_6 ((uint32_t)0x00000040)
#define FSMC_PATT2_ATTSET2_7 ((uint32_t)0x00000080)

#define FSMC_PATT2_ATTWAIT2 ((uint32_t)0x0000FF00)
#define FSMC_PATT2_ATTWAIT2_0 ((uint32_t)0x00000100)
#define FSMC_PATT2_ATTWAIT2_1 ((uint32_t)0x00000200)
#define FSMC_PATT2_ATTWAIT2_2 ((uint32_t)0x00000400)
#define FSMC_PATT2_ATTWAIT2_3 ((uint32_t)0x00000800)
#define FSMC_PATT2_ATTWAIT2_4 ((uint32_t)0x00001000)
#define FSMC_PATT2_ATTWAIT2_5 ((uint32_t)0x00002000)
#define FSMC_PATT2_ATTWAIT2_6 ((uint32_t)0x00004000)
#define FSMC_PATT2_ATTWAIT2_7 ((uint32_t)0x00008000)

#define FSMC_PATT2_ATTHOLD2 ((uint32_t)0x00FF0000)
#define FSMC_PATT2_ATTHOLD2_0 ((uint32_t)0x00010000)
#define FSMC_PATT2_ATTHOLD2_1 ((uint32_t)0x00020000)
#define FSMC_PATT2_ATTHOLD2_2 ((uint32_t)0x00040000)
#define FSMC_PATT2_ATTHOLD2_3 ((uint32_t)0x00080000)
#define FSMC_PATT2_ATTHOLD2_4 ((uint32_t)0x00100000)
#define FSMC_PATT2_ATTHOLD2_5 ((uint32_t)0x00200000)
#define FSMC_PATT2_ATTHOLD2_6 ((uint32_t)0x00400000)
#define FSMC_PATT2_ATTHOLD2_7 ((uint32_t)0x00800000)

#define FSMC_PATT2_ATTHIZ2 ((uint32_t)0xFF000000)
#define FSMC_PATT2_ATTHIZ2_0 ((uint32_t)0x01000000)
#define FSMC_PATT2_ATTHIZ2_1 ((uint32_t)0x02000000)
#define FSMC_PATT2_ATTHIZ2_2 ((uint32_t)0x04000000)
#define FSMC_PATT2_ATTHIZ2_3 ((uint32_t)0x08000000)
#define FSMC_PATT2_ATTHIZ2_4 ((uint32_t)0x10000000)
#define FSMC_PATT2_ATTHIZ2_5 ((uint32_t)0x20000000)
#define FSMC_PATT2_ATTHIZ2_6 ((uint32_t)0x40000000)
#define FSMC_PATT2_ATTHIZ2_7 ((uint32_t)0x80000000)


#define FSMC_PATT3_ATTSET3 ((uint32_t)0x000000FF)
#define FSMC_PATT3_ATTSET3_0 ((uint32_t)0x00000001)
#define FSMC_PATT3_ATTSET3_1 ((uint32_t)0x00000002)
#define FSMC_PATT3_ATTSET3_2 ((uint32_t)0x00000004)
#define FSMC_PATT3_ATTSET3_3 ((uint32_t)0x00000008)
#define FSMC_PATT3_ATTSET3_4 ((uint32_t)0x00000010)
#define FSMC_PATT3_ATTSET3_5 ((uint32_t)0x00000020)
#define FSMC_PATT3_ATTSET3_6 ((uint32_t)0x00000040)
#define FSMC_PATT3_ATTSET3_7 ((uint32_t)0x00000080)

#define FSMC_PATT3_ATTWAIT3 ((uint32_t)0x0000FF00)
#define FSMC_PATT3_ATTWAIT3_0 ((uint32_t)0x00000100)
#define FSMC_PATT3_ATTWAIT3_1 ((uint32_t)0x00000200)
#define FSMC_PATT3_ATTWAIT3_2 ((uint32_t)0x00000400)
#define FSMC_PATT3_ATTWAIT3_3 ((uint32_t)0x00000800)
#define FSMC_PATT3_ATTWAIT3_4 ((uint32_t)0x00001000)
#define FSMC_PATT3_ATTWAIT3_5 ((uint32_t)0x00002000)
#define FSMC_PATT3_ATTWAIT3_6 ((uint32_t)0x00004000)
#define FSMC_PATT3_ATTWAIT3_7 ((uint32_t)0x00008000)

#define FSMC_PATT3_ATTHOLD3 ((uint32_t)0x00FF0000)
#define FSMC_PATT3_ATTHOLD3_0 ((uint32_t)0x00010000)
#define FSMC_PATT3_ATTHOLD3_1 ((uint32_t)0x00020000)
#define FSMC_PATT3_ATTHOLD3_2 ((uint32_t)0x00040000)
#define FSMC_PATT3_ATTHOLD3_3 ((uint32_t)0x00080000)
#define FSMC_PATT3_ATTHOLD3_4 ((uint32_t)0x00100000)
#define FSMC_PATT3_ATTHOLD3_5 ((uint32_t)0x00200000)
#define FSMC_PATT3_ATTHOLD3_6 ((uint32_t)0x00400000)
#define FSMC_PATT3_ATTHOLD3_7 ((uint32_t)0x00800000)

#define FSMC_PATT3_ATTHIZ3 ((uint32_t)0xFF000000)
#define FSMC_PATT3_ATTHIZ3_0 ((uint32_t)0x01000000)
#define FSMC_PATT3_ATTHIZ3_1 ((uint32_t)0x02000000)
#define FSMC_PATT3_ATTHIZ3_2 ((uint32_t)0x04000000)
#define FSMC_PATT3_ATTHIZ3_3 ((uint32_t)0x08000000)
#define FSMC_PATT3_ATTHIZ3_4 ((uint32_t)0x10000000)
#define FSMC_PATT3_ATTHIZ3_5 ((uint32_t)0x20000000)
#define FSMC_PATT3_ATTHIZ3_6 ((uint32_t)0x40000000)
#define FSMC_PATT3_ATTHIZ3_7 ((uint32_t)0x80000000)


#define FSMC_PATT4_ATTSET4 ((uint32_t)0x000000FF)
#define FSMC_PATT4_ATTSET4_0 ((uint32_t)0x00000001)
#define FSMC_PATT4_ATTSET4_1 ((uint32_t)0x00000002)
#define FSMC_PATT4_ATTSET4_2 ((uint32_t)0x00000004)
#define FSMC_PATT4_ATTSET4_3 ((uint32_t)0x00000008)
#define FSMC_PATT4_ATTSET4_4 ((uint32_t)0x00000010)
#define FSMC_PATT4_ATTSET4_5 ((uint32_t)0x00000020)
#define FSMC_PATT4_ATTSET4_6 ((uint32_t)0x00000040)
#define FSMC_PATT4_ATTSET4_7 ((uint32_t)0x00000080)

#define FSMC_PATT4_ATTWAIT4 ((uint32_t)0x0000FF00)
#define FSMC_PATT4_ATTWAIT4_0 ((uint32_t)0x00000100)
#define FSMC_PATT4_ATTWAIT4_1 ((uint32_t)0x00000200)
#define FSMC_PATT4_ATTWAIT4_2 ((uint32_t)0x00000400)
#define FSMC_PATT4_ATTWAIT4_3 ((uint32_t)0x00000800)
#define FSMC_PATT4_ATTWAIT4_4 ((uint32_t)0x00001000)
#define FSMC_PATT4_ATTWAIT4_5 ((uint32_t)0x00002000)
#define FSMC_PATT4_ATTWAIT4_6 ((uint32_t)0x00004000)
#define FSMC_PATT4_ATTWAIT4_7 ((uint32_t)0x00008000)

#define FSMC_PATT4_ATTHOLD4 ((uint32_t)0x00FF0000)
#define FSMC_PATT4_ATTHOLD4_0 ((uint32_t)0x00010000)
#define FSMC_PATT4_ATTHOLD4_1 ((uint32_t)0x00020000)
#define FSMC_PATT4_ATTHOLD4_2 ((uint32_t)0x00040000)
#define FSMC_PATT4_ATTHOLD4_3 ((uint32_t)0x00080000)
#define FSMC_PATT4_ATTHOLD4_4 ((uint32_t)0x00100000)
#define FSMC_PATT4_ATTHOLD4_5 ((uint32_t)0x00200000)
#define FSMC_PATT4_ATTHOLD4_6 ((uint32_t)0x00400000)
#define FSMC_PATT4_ATTHOLD4_7 ((uint32_t)0x00800000)

#define FSMC_PATT4_ATTHIZ4 ((uint32_t)0xFF000000)
#define FSMC_PATT4_ATTHIZ4_0 ((uint32_t)0x01000000)
#define FSMC_PATT4_ATTHIZ4_1 ((uint32_t)0x02000000)
#define FSMC_PATT4_ATTHIZ4_2 ((uint32_t)0x04000000)
#define FSMC_PATT4_ATTHIZ4_3 ((uint32_t)0x08000000)
#define FSMC_PATT4_ATTHIZ4_4 ((uint32_t)0x10000000)
#define FSMC_PATT4_ATTHIZ4_5 ((uint32_t)0x20000000)
#define FSMC_PATT4_ATTHIZ4_6 ((uint32_t)0x40000000)
#define FSMC_PATT4_ATTHIZ4_7 ((uint32_t)0x80000000)


#define FSMC_PIO4_IOSET4 ((uint32_t)0x000000FF)
#define FSMC_PIO4_IOSET4_0 ((uint32_t)0x00000001)
#define FSMC_PIO4_IOSET4_1 ((uint32_t)0x00000002)
#define FSMC_PIO4_IOSET4_2 ((uint32_t)0x00000004)
#define FSMC_PIO4_IOSET4_3 ((uint32_t)0x00000008)
#define FSMC_PIO4_IOSET4_4 ((uint32_t)0x00000010)
#define FSMC_PIO4_IOSET4_5 ((uint32_t)0x00000020)
#define FSMC_PIO4_IOSET4_6 ((uint32_t)0x00000040)
#define FSMC_PIO4_IOSET4_7 ((uint32_t)0x00000080)

#define FSMC_PIO4_IOWAIT4 ((uint32_t)0x0000FF00)
#define FSMC_PIO4_IOWAIT4_0 ((uint32_t)0x00000100)
#define FSMC_PIO4_IOWAIT4_1 ((uint32_t)0x00000200)
#define FSMC_PIO4_IOWAIT4_2 ((uint32_t)0x00000400)
#define FSMC_PIO4_IOWAIT4_3 ((uint32_t)0x00000800)
#define FSMC_PIO4_IOWAIT4_4 ((uint32_t)0x00001000)
#define FSMC_PIO4_IOWAIT4_5 ((uint32_t)0x00002000)
#define FSMC_PIO4_IOWAIT4_6 ((uint32_t)0x00004000)
#define FSMC_PIO4_IOWAIT4_7 ((uint32_t)0x00008000)

#define FSMC_PIO4_IOHOLD4 ((uint32_t)0x00FF0000)
#define FSMC_PIO4_IOHOLD4_0 ((uint32_t)0x00010000)
#define FSMC_PIO4_IOHOLD4_1 ((uint32_t)0x00020000)
#define FSMC_PIO4_IOHOLD4_2 ((uint32_t)0x00040000)
#define FSMC_PIO4_IOHOLD4_3 ((uint32_t)0x00080000)
#define FSMC_PIO4_IOHOLD4_4 ((uint32_t)0x00100000)
#define FSMC_PIO4_IOHOLD4_5 ((uint32_t)0x00200000)
#define FSMC_PIO4_IOHOLD4_6 ((uint32_t)0x00400000)
#define FSMC_PIO4_IOHOLD4_7 ((uint32_t)0x00800000)

#define FSMC_PIO4_IOHIZ4 ((uint32_t)0xFF000000)
#define FSMC_PIO4_IOHIZ4_0 ((uint32_t)0x01000000)
#define FSMC_PIO4_IOHIZ4_1 ((uint32_t)0x02000000)
#define FSMC_PIO4_IOHIZ4_2 ((uint32_t)0x04000000)
#define FSMC_PIO4_IOHIZ4_3 ((uint32_t)0x08000000)
#define FSMC_PIO4_IOHIZ4_4 ((uint32_t)0x10000000)
#define FSMC_PIO4_IOHIZ4_5 ((uint32_t)0x20000000)
#define FSMC_PIO4_IOHIZ4_6 ((uint32_t)0x40000000)
#define FSMC_PIO4_IOHIZ4_7 ((uint32_t)0x80000000)


#define FSMC_ECCR2_ECC2 ((uint32_t)0xFFFFFFFF)


#define FSMC_ECCR3_ECC3 ((uint32_t)0xFFFFFFFF)
# 5391 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
#define SDIO_POWER_PWRCTRL ((uint8_t)0x03)
#define SDIO_POWER_PWRCTRL_0 ((uint8_t)0x01)
#define SDIO_POWER_PWRCTRL_1 ((uint8_t)0x02)


#define SDIO_CLKCR_CLKDIV ((uint16_t)0x00FF)
#define SDIO_CLKCR_CLKEN ((uint16_t)0x0100)
#define SDIO_CLKCR_PWRSAV ((uint16_t)0x0200)
#define SDIO_CLKCR_BYPASS ((uint16_t)0x0400)

#define SDIO_CLKCR_WIDBUS ((uint16_t)0x1800)
#define SDIO_CLKCR_WIDBUS_0 ((uint16_t)0x0800)
#define SDIO_CLKCR_WIDBUS_1 ((uint16_t)0x1000)

#define SDIO_CLKCR_NEGEDGE ((uint16_t)0x2000)
#define SDIO_CLKCR_HWFC_EN ((uint16_t)0x4000)


#define SDIO_ARG_CMDARG ((uint32_t)0xFFFFFFFF)


#define SDIO_CMD_CMDINDEX ((uint16_t)0x003F)

#define SDIO_CMD_WAITRESP ((uint16_t)0x00C0)
#define SDIO_CMD_WAITRESP_0 ((uint16_t)0x0040)
#define SDIO_CMD_WAITRESP_1 ((uint16_t)0x0080)

#define SDIO_CMD_WAITINT ((uint16_t)0x0100)
#define SDIO_CMD_WAITPEND ((uint16_t)0x0200)
#define SDIO_CMD_CPSMEN ((uint16_t)0x0400)
#define SDIO_CMD_SDIOSUSPEND ((uint16_t)0x0800)
#define SDIO_CMD_ENCMDCOMPL ((uint16_t)0x1000)
#define SDIO_CMD_NIEN ((uint16_t)0x2000)
#define SDIO_CMD_CEATACMD ((uint16_t)0x4000)


#define SDIO_RESPCMD_RESPCMD ((uint8_t)0x3F)


#define SDIO_RESP0_CARDSTATUS0 ((uint32_t)0xFFFFFFFF)


#define SDIO_RESP1_CARDSTATUS1 ((uint32_t)0xFFFFFFFF)


#define SDIO_RESP2_CARDSTATUS2 ((uint32_t)0xFFFFFFFF)


#define SDIO_RESP3_CARDSTATUS3 ((uint32_t)0xFFFFFFFF)


#define SDIO_RESP4_CARDSTATUS4 ((uint32_t)0xFFFFFFFF)


#define SDIO_DTIMER_DATATIME ((uint32_t)0xFFFFFFFF)


#define SDIO_DLEN_DATALENGTH ((uint32_t)0x01FFFFFF)


#define SDIO_DCTRL_DTEN ((uint16_t)0x0001)
#define SDIO_DCTRL_DTDIR ((uint16_t)0x0002)
#define SDIO_DCTRL_DTMODE ((uint16_t)0x0004)
#define SDIO_DCTRL_DMAEN ((uint16_t)0x0008)

#define SDIO_DCTRL_DBLOCKSIZE ((uint16_t)0x00F0)
#define SDIO_DCTRL_DBLOCKSIZE_0 ((uint16_t)0x0010)
#define SDIO_DCTRL_DBLOCKSIZE_1 ((uint16_t)0x0020)
#define SDIO_DCTRL_DBLOCKSIZE_2 ((uint16_t)0x0040)
#define SDIO_DCTRL_DBLOCKSIZE_3 ((uint16_t)0x0080)

#define SDIO_DCTRL_RWSTART ((uint16_t)0x0100)
#define SDIO_DCTRL_RWSTOP ((uint16_t)0x0200)
#define SDIO_DCTRL_RWMOD ((uint16_t)0x0400)
#define SDIO_DCTRL_SDIOEN ((uint16_t)0x0800)


#define SDIO_DCOUNT_DATACOUNT ((uint32_t)0x01FFFFFF)


#define SDIO_STA_CCRCFAIL ((uint32_t)0x00000001)
#define SDIO_STA_DCRCFAIL ((uint32_t)0x00000002)
#define SDIO_STA_CTIMEOUT ((uint32_t)0x00000004)
#define SDIO_STA_DTIMEOUT ((uint32_t)0x00000008)
#define SDIO_STA_TXUNDERR ((uint32_t)0x00000010)
#define SDIO_STA_RXOVERR ((uint32_t)0x00000020)
#define SDIO_STA_CMDREND ((uint32_t)0x00000040)
#define SDIO_STA_CMDSENT ((uint32_t)0x00000080)
#define SDIO_STA_DATAEND ((uint32_t)0x00000100)
#define SDIO_STA_STBITERR ((uint32_t)0x00000200)
#define SDIO_STA_DBCKEND ((uint32_t)0x00000400)
#define SDIO_STA_CMDACT ((uint32_t)0x00000800)
#define SDIO_STA_TXACT ((uint32_t)0x00001000)
#define SDIO_STA_RXACT ((uint32_t)0x00002000)
#define SDIO_STA_TXFIFOHE ((uint32_t)0x00004000)
#define SDIO_STA_RXFIFOHF ((uint32_t)0x00008000)
#define SDIO_STA_TXFIFOF ((uint32_t)0x00010000)
#define SDIO_STA_RXFIFOF ((uint32_t)0x00020000)
#define SDIO_STA_TXFIFOE ((uint32_t)0x00040000)
#define SDIO_STA_RXFIFOE ((uint32_t)0x00080000)
#define SDIO_STA_TXDAVL ((uint32_t)0x00100000)
#define SDIO_STA_RXDAVL ((uint32_t)0x00200000)
#define SDIO_STA_SDIOIT ((uint32_t)0x00400000)
#define SDIO_STA_CEATAEND ((uint32_t)0x00800000)


#define SDIO_ICR_CCRCFAILC ((uint32_t)0x00000001)
#define SDIO_ICR_DCRCFAILC ((uint32_t)0x00000002)
#define SDIO_ICR_CTIMEOUTC ((uint32_t)0x00000004)
#define SDIO_ICR_DTIMEOUTC ((uint32_t)0x00000008)
#define SDIO_ICR_TXUNDERRC ((uint32_t)0x00000010)
#define SDIO_ICR_RXOVERRC ((uint32_t)0x00000020)
#define SDIO_ICR_CMDRENDC ((uint32_t)0x00000040)
#define SDIO_ICR_CMDSENTC ((uint32_t)0x00000080)
#define SDIO_ICR_DATAENDC ((uint32_t)0x00000100)
#define SDIO_ICR_STBITERRC ((uint32_t)0x00000200)
#define SDIO_ICR_DBCKENDC ((uint32_t)0x00000400)
#define SDIO_ICR_SDIOITC ((uint32_t)0x00400000)
#define SDIO_ICR_CEATAENDC ((uint32_t)0x00800000)


#define SDIO_MASK_CCRCFAILIE ((uint32_t)0x00000001)
#define SDIO_MASK_DCRCFAILIE ((uint32_t)0x00000002)
#define SDIO_MASK_CTIMEOUTIE ((uint32_t)0x00000004)
#define SDIO_MASK_DTIMEOUTIE ((uint32_t)0x00000008)
#define SDIO_MASK_TXUNDERRIE ((uint32_t)0x00000010)
#define SDIO_MASK_RXOVERRIE ((uint32_t)0x00000020)
#define SDIO_MASK_CMDRENDIE ((uint32_t)0x00000040)
#define SDIO_MASK_CMDSENTIE ((uint32_t)0x00000080)
#define SDIO_MASK_DATAENDIE ((uint32_t)0x00000100)
#define SDIO_MASK_STBITERRIE ((uint32_t)0x00000200)
#define SDIO_MASK_DBCKENDIE ((uint32_t)0x00000400)
#define SDIO_MASK_CMDACTIE ((uint32_t)0x00000800)
#define SDIO_MASK_TXACTIE ((uint32_t)0x00001000)
#define SDIO_MASK_RXACTIE ((uint32_t)0x00002000)
#define SDIO_MASK_TXFIFOHEIE ((uint32_t)0x00004000)
#define SDIO_MASK_RXFIFOHFIE ((uint32_t)0x00008000)
#define SDIO_MASK_TXFIFOFIE ((uint32_t)0x00010000)
#define SDIO_MASK_RXFIFOFIE ((uint32_t)0x00020000)
#define SDIO_MASK_TXFIFOEIE ((uint32_t)0x00040000)
#define SDIO_MASK_RXFIFOEIE ((uint32_t)0x00080000)
#define SDIO_MASK_TXDAVLIE ((uint32_t)0x00100000)
#define SDIO_MASK_RXDAVLIE ((uint32_t)0x00200000)
#define SDIO_MASK_SDIOITIE ((uint32_t)0x00400000)
#define SDIO_MASK_CEATAENDIE ((uint32_t)0x00800000)


#define SDIO_FIFOCNT_FIFOCOUNT ((uint32_t)0x00FFFFFF)


#define SDIO_FIFO_FIFODATA ((uint32_t)0xFFFFFFFF)
# 5551 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
#define USB_EP0R_EA ((uint16_t)0x000F)

#define USB_EP0R_STAT_TX ((uint16_t)0x0030)
#define USB_EP0R_STAT_TX_0 ((uint16_t)0x0010)
#define USB_EP0R_STAT_TX_1 ((uint16_t)0x0020)

#define USB_EP0R_DTOG_TX ((uint16_t)0x0040)
#define USB_EP0R_CTR_TX ((uint16_t)0x0080)
#define USB_EP0R_EP_KIND ((uint16_t)0x0100)

#define USB_EP0R_EP_TYPE ((uint16_t)0x0600)
#define USB_EP0R_EP_TYPE_0 ((uint16_t)0x0200)
#define USB_EP0R_EP_TYPE_1 ((uint16_t)0x0400)

#define USB_EP0R_SETUP ((uint16_t)0x0800)

#define USB_EP0R_STAT_RX ((uint16_t)0x3000)
#define USB_EP0R_STAT_RX_0 ((uint16_t)0x1000)
#define USB_EP0R_STAT_RX_1 ((uint16_t)0x2000)

#define USB_EP0R_DTOG_RX ((uint16_t)0x4000)
#define USB_EP0R_CTR_RX ((uint16_t)0x8000)


#define USB_EP1R_EA ((uint16_t)0x000F)

#define USB_EP1R_STAT_TX ((uint16_t)0x0030)
#define USB_EP1R_STAT_TX_0 ((uint16_t)0x0010)
#define USB_EP1R_STAT_TX_1 ((uint16_t)0x0020)

#define USB_EP1R_DTOG_TX ((uint16_t)0x0040)
#define USB_EP1R_CTR_TX ((uint16_t)0x0080)
#define USB_EP1R_EP_KIND ((uint16_t)0x0100)

#define USB_EP1R_EP_TYPE ((uint16_t)0x0600)
#define USB_EP1R_EP_TYPE_0 ((uint16_t)0x0200)
#define USB_EP1R_EP_TYPE_1 ((uint16_t)0x0400)

#define USB_EP1R_SETUP ((uint16_t)0x0800)

#define USB_EP1R_STAT_RX ((uint16_t)0x3000)
#define USB_EP1R_STAT_RX_0 ((uint16_t)0x1000)
#define USB_EP1R_STAT_RX_1 ((uint16_t)0x2000)

#define USB_EP1R_DTOG_RX ((uint16_t)0x4000)
#define USB_EP1R_CTR_RX ((uint16_t)0x8000)


#define USB_EP2R_EA ((uint16_t)0x000F)

#define USB_EP2R_STAT_TX ((uint16_t)0x0030)
#define USB_EP2R_STAT_TX_0 ((uint16_t)0x0010)
#define USB_EP2R_STAT_TX_1 ((uint16_t)0x0020)

#define USB_EP2R_DTOG_TX ((uint16_t)0x0040)
#define USB_EP2R_CTR_TX ((uint16_t)0x0080)
#define USB_EP2R_EP_KIND ((uint16_t)0x0100)

#define USB_EP2R_EP_TYPE ((uint16_t)0x0600)
#define USB_EP2R_EP_TYPE_0 ((uint16_t)0x0200)
#define USB_EP2R_EP_TYPE_1 ((uint16_t)0x0400)

#define USB_EP2R_SETUP ((uint16_t)0x0800)

#define USB_EP2R_STAT_RX ((uint16_t)0x3000)
#define USB_EP2R_STAT_RX_0 ((uint16_t)0x1000)
#define USB_EP2R_STAT_RX_1 ((uint16_t)0x2000)

#define USB_EP2R_DTOG_RX ((uint16_t)0x4000)
#define USB_EP2R_CTR_RX ((uint16_t)0x8000)


#define USB_EP3R_EA ((uint16_t)0x000F)

#define USB_EP3R_STAT_TX ((uint16_t)0x0030)
#define USB_EP3R_STAT_TX_0 ((uint16_t)0x0010)
#define USB_EP3R_STAT_TX_1 ((uint16_t)0x0020)

#define USB_EP3R_DTOG_TX ((uint16_t)0x0040)
#define USB_EP3R_CTR_TX ((uint16_t)0x0080)
#define USB_EP3R_EP_KIND ((uint16_t)0x0100)

#define USB_EP3R_EP_TYPE ((uint16_t)0x0600)
#define USB_EP3R_EP_TYPE_0 ((uint16_t)0x0200)
#define USB_EP3R_EP_TYPE_1 ((uint16_t)0x0400)

#define USB_EP3R_SETUP ((uint16_t)0x0800)

#define USB_EP3R_STAT_RX ((uint16_t)0x3000)
#define USB_EP3R_STAT_RX_0 ((uint16_t)0x1000)
#define USB_EP3R_STAT_RX_1 ((uint16_t)0x2000)

#define USB_EP3R_DTOG_RX ((uint16_t)0x4000)
#define USB_EP3R_CTR_RX ((uint16_t)0x8000)


#define USB_EP4R_EA ((uint16_t)0x000F)

#define USB_EP4R_STAT_TX ((uint16_t)0x0030)
#define USB_EP4R_STAT_TX_0 ((uint16_t)0x0010)
#define USB_EP4R_STAT_TX_1 ((uint16_t)0x0020)

#define USB_EP4R_DTOG_TX ((uint16_t)0x0040)
#define USB_EP4R_CTR_TX ((uint16_t)0x0080)
#define USB_EP4R_EP_KIND ((uint16_t)0x0100)

#define USB_EP4R_EP_TYPE ((uint16_t)0x0600)
#define USB_EP4R_EP_TYPE_0 ((uint16_t)0x0200)
#define USB_EP4R_EP_TYPE_1 ((uint16_t)0x0400)

#define USB_EP4R_SETUP ((uint16_t)0x0800)

#define USB_EP4R_STAT_RX ((uint16_t)0x3000)
#define USB_EP4R_STAT_RX_0 ((uint16_t)0x1000)
#define USB_EP4R_STAT_RX_1 ((uint16_t)0x2000)

#define USB_EP4R_DTOG_RX ((uint16_t)0x4000)
#define USB_EP4R_CTR_RX ((uint16_t)0x8000)


#define USB_EP5R_EA ((uint16_t)0x000F)

#define USB_EP5R_STAT_TX ((uint16_t)0x0030)
#define USB_EP5R_STAT_TX_0 ((uint16_t)0x0010)
#define USB_EP5R_STAT_TX_1 ((uint16_t)0x0020)

#define USB_EP5R_DTOG_TX ((uint16_t)0x0040)
#define USB_EP5R_CTR_TX ((uint16_t)0x0080)
#define USB_EP5R_EP_KIND ((uint16_t)0x0100)

#define USB_EP5R_EP_TYPE ((uint16_t)0x0600)
#define USB_EP5R_EP_TYPE_0 ((uint16_t)0x0200)
#define USB_EP5R_EP_TYPE_1 ((uint16_t)0x0400)

#define USB_EP5R_SETUP ((uint16_t)0x0800)

#define USB_EP5R_STAT_RX ((uint16_t)0x3000)
#define USB_EP5R_STAT_RX_0 ((uint16_t)0x1000)
#define USB_EP5R_STAT_RX_1 ((uint16_t)0x2000)

#define USB_EP5R_DTOG_RX ((uint16_t)0x4000)
#define USB_EP5R_CTR_RX ((uint16_t)0x8000)


#define USB_EP6R_EA ((uint16_t)0x000F)

#define USB_EP6R_STAT_TX ((uint16_t)0x0030)
#define USB_EP6R_STAT_TX_0 ((uint16_t)0x0010)
#define USB_EP6R_STAT_TX_1 ((uint16_t)0x0020)

#define USB_EP6R_DTOG_TX ((uint16_t)0x0040)
#define USB_EP6R_CTR_TX ((uint16_t)0x0080)
#define USB_EP6R_EP_KIND ((uint16_t)0x0100)

#define USB_EP6R_EP_TYPE ((uint16_t)0x0600)
#define USB_EP6R_EP_TYPE_0 ((uint16_t)0x0200)
#define USB_EP6R_EP_TYPE_1 ((uint16_t)0x0400)

#define USB_EP6R_SETUP ((uint16_t)0x0800)

#define USB_EP6R_STAT_RX ((uint16_t)0x3000)
#define USB_EP6R_STAT_RX_0 ((uint16_t)0x1000)
#define USB_EP6R_STAT_RX_1 ((uint16_t)0x2000)

#define USB_EP6R_DTOG_RX ((uint16_t)0x4000)
#define USB_EP6R_CTR_RX ((uint16_t)0x8000)


#define USB_EP7R_EA ((uint16_t)0x000F)

#define USB_EP7R_STAT_TX ((uint16_t)0x0030)
#define USB_EP7R_STAT_TX_0 ((uint16_t)0x0010)
#define USB_EP7R_STAT_TX_1 ((uint16_t)0x0020)

#define USB_EP7R_DTOG_TX ((uint16_t)0x0040)
#define USB_EP7R_CTR_TX ((uint16_t)0x0080)
#define USB_EP7R_EP_KIND ((uint16_t)0x0100)

#define USB_EP7R_EP_TYPE ((uint16_t)0x0600)
#define USB_EP7R_EP_TYPE_0 ((uint16_t)0x0200)
#define USB_EP7R_EP_TYPE_1 ((uint16_t)0x0400)

#define USB_EP7R_SETUP ((uint16_t)0x0800)

#define USB_EP7R_STAT_RX ((uint16_t)0x3000)
#define USB_EP7R_STAT_RX_0 ((uint16_t)0x1000)
#define USB_EP7R_STAT_RX_1 ((uint16_t)0x2000)

#define USB_EP7R_DTOG_RX ((uint16_t)0x4000)
#define USB_EP7R_CTR_RX ((uint16_t)0x8000)



#define USB_CNTR_FRES ((uint16_t)0x0001)
#define USB_CNTR_PDWN ((uint16_t)0x0002)
#define USB_CNTR_LP_MODE ((uint16_t)0x0004)
#define USB_CNTR_FSUSP ((uint16_t)0x0008)
#define USB_CNTR_RESUME ((uint16_t)0x0010)
#define USB_CNTR_ESOFM ((uint16_t)0x0100)
#define USB_CNTR_SOFM ((uint16_t)0x0200)
#define USB_CNTR_RESETM ((uint16_t)0x0400)
#define USB_CNTR_SUSPM ((uint16_t)0x0800)
#define USB_CNTR_WKUPM ((uint16_t)0x1000)
#define USB_CNTR_ERRM ((uint16_t)0x2000)
#define USB_CNTR_PMAOVRM ((uint16_t)0x4000)
#define USB_CNTR_CTRM ((uint16_t)0x8000)


#define USB_ISTR_EP_ID ((uint16_t)0x000F)
#define USB_ISTR_DIR ((uint16_t)0x0010)
#define USB_ISTR_ESOF ((uint16_t)0x0100)
#define USB_ISTR_SOF ((uint16_t)0x0200)
#define USB_ISTR_RESET ((uint16_t)0x0400)
#define USB_ISTR_SUSP ((uint16_t)0x0800)
#define USB_ISTR_WKUP ((uint16_t)0x1000)
#define USB_ISTR_ERR ((uint16_t)0x2000)
#define USB_ISTR_PMAOVR ((uint16_t)0x4000)
#define USB_ISTR_CTR ((uint16_t)0x8000)


#define USB_FNR_FN ((uint16_t)0x07FF)
#define USB_FNR_LSOF ((uint16_t)0x1800)
#define USB_FNR_LCK ((uint16_t)0x2000)
#define USB_FNR_RXDM ((uint16_t)0x4000)
#define USB_FNR_RXDP ((uint16_t)0x8000)


#define USB_DADDR_ADD ((uint8_t)0x7F)
#define USB_DADDR_ADD0 ((uint8_t)0x01)
#define USB_DADDR_ADD1 ((uint8_t)0x02)
#define USB_DADDR_ADD2 ((uint8_t)0x04)
#define USB_DADDR_ADD3 ((uint8_t)0x08)
#define USB_DADDR_ADD4 ((uint8_t)0x10)
#define USB_DADDR_ADD5 ((uint8_t)0x20)
#define USB_DADDR_ADD6 ((uint8_t)0x40)

#define USB_DADDR_EF ((uint8_t)0x80)


#define USB_BTABLE_BTABLE ((uint16_t)0xFFF8)



#define USB_ADDR0_TX_ADDR0_TX ((uint16_t)0xFFFE)


#define USB_ADDR1_TX_ADDR1_TX ((uint16_t)0xFFFE)


#define USB_ADDR2_TX_ADDR2_TX ((uint16_t)0xFFFE)


#define USB_ADDR3_TX_ADDR3_TX ((uint16_t)0xFFFE)


#define USB_ADDR4_TX_ADDR4_TX ((uint16_t)0xFFFE)


#define USB_ADDR5_TX_ADDR5_TX ((uint16_t)0xFFFE)


#define USB_ADDR6_TX_ADDR6_TX ((uint16_t)0xFFFE)


#define USB_ADDR7_TX_ADDR7_TX ((uint16_t)0xFFFE)




#define USB_COUNT0_TX_COUNT0_TX ((uint16_t)0x03FF)


#define USB_COUNT1_TX_COUNT1_TX ((uint16_t)0x03FF)


#define USB_COUNT2_TX_COUNT2_TX ((uint16_t)0x03FF)


#define USB_COUNT3_TX_COUNT3_TX ((uint16_t)0x03FF)


#define USB_COUNT4_TX_COUNT4_TX ((uint16_t)0x03FF)


#define USB_COUNT5_TX_COUNT5_TX ((uint16_t)0x03FF)


#define USB_COUNT6_TX_COUNT6_TX ((uint16_t)0x03FF)


#define USB_COUNT7_TX_COUNT7_TX ((uint16_t)0x03FF)




#define USB_COUNT0_TX_0_COUNT0_TX_0 ((uint32_t)0x000003FF)


#define USB_COUNT0_TX_1_COUNT0_TX_1 ((uint32_t)0x03FF0000)


#define USB_COUNT1_TX_0_COUNT1_TX_0 ((uint32_t)0x000003FF)


#define USB_COUNT1_TX_1_COUNT1_TX_1 ((uint32_t)0x03FF0000)


#define USB_COUNT2_TX_0_COUNT2_TX_0 ((uint32_t)0x000003FF)


#define USB_COUNT2_TX_1_COUNT2_TX_1 ((uint32_t)0x03FF0000)


#define USB_COUNT3_TX_0_COUNT3_TX_0 ((uint16_t)0x000003FF)


#define USB_COUNT3_TX_1_COUNT3_TX_1 ((uint16_t)0x03FF0000)


#define USB_COUNT4_TX_0_COUNT4_TX_0 ((uint32_t)0x000003FF)


#define USB_COUNT4_TX_1_COUNT4_TX_1 ((uint32_t)0x03FF0000)


#define USB_COUNT5_TX_0_COUNT5_TX_0 ((uint32_t)0x000003FF)


#define USB_COUNT5_TX_1_COUNT5_TX_1 ((uint32_t)0x03FF0000)


#define USB_COUNT6_TX_0_COUNT6_TX_0 ((uint32_t)0x000003FF)


#define USB_COUNT6_TX_1_COUNT6_TX_1 ((uint32_t)0x03FF0000)


#define USB_COUNT7_TX_0_COUNT7_TX_0 ((uint32_t)0x000003FF)


#define USB_COUNT7_TX_1_COUNT7_TX_1 ((uint32_t)0x03FF0000)




#define USB_ADDR0_RX_ADDR0_RX ((uint16_t)0xFFFE)


#define USB_ADDR1_RX_ADDR1_RX ((uint16_t)0xFFFE)


#define USB_ADDR2_RX_ADDR2_RX ((uint16_t)0xFFFE)


#define USB_ADDR3_RX_ADDR3_RX ((uint16_t)0xFFFE)


#define USB_ADDR4_RX_ADDR4_RX ((uint16_t)0xFFFE)


#define USB_ADDR5_RX_ADDR5_RX ((uint16_t)0xFFFE)


#define USB_ADDR6_RX_ADDR6_RX ((uint16_t)0xFFFE)


#define USB_ADDR7_RX_ADDR7_RX ((uint16_t)0xFFFE)




#define USB_COUNT0_RX_COUNT0_RX ((uint16_t)0x03FF)

#define USB_COUNT0_RX_NUM_BLOCK ((uint16_t)0x7C00)
#define USB_COUNT0_RX_NUM_BLOCK_0 ((uint16_t)0x0400)
#define USB_COUNT0_RX_NUM_BLOCK_1 ((uint16_t)0x0800)
#define USB_COUNT0_RX_NUM_BLOCK_2 ((uint16_t)0x1000)
#define USB_COUNT0_RX_NUM_BLOCK_3 ((uint16_t)0x2000)
#define USB_COUNT0_RX_NUM_BLOCK_4 ((uint16_t)0x4000)

#define USB_COUNT0_RX_BLSIZE ((uint16_t)0x8000)


#define USB_COUNT1_RX_COUNT1_RX ((uint16_t)0x03FF)

#define USB_COUNT1_RX_NUM_BLOCK ((uint16_t)0x7C00)
#define USB_COUNT1_RX_NUM_BLOCK_0 ((uint16_t)0x0400)
#define USB_COUNT1_RX_NUM_BLOCK_1 ((uint16_t)0x0800)
#define USB_COUNT1_RX_NUM_BLOCK_2 ((uint16_t)0x1000)
#define USB_COUNT1_RX_NUM_BLOCK_3 ((uint16_t)0x2000)
#define USB_COUNT1_RX_NUM_BLOCK_4 ((uint16_t)0x4000)

#define USB_COUNT1_RX_BLSIZE ((uint16_t)0x8000)


#define USB_COUNT2_RX_COUNT2_RX ((uint16_t)0x03FF)

#define USB_COUNT2_RX_NUM_BLOCK ((uint16_t)0x7C00)
#define USB_COUNT2_RX_NUM_BLOCK_0 ((uint16_t)0x0400)
#define USB_COUNT2_RX_NUM_BLOCK_1 ((uint16_t)0x0800)
#define USB_COUNT2_RX_NUM_BLOCK_2 ((uint16_t)0x1000)
#define USB_COUNT2_RX_NUM_BLOCK_3 ((uint16_t)0x2000)
#define USB_COUNT2_RX_NUM_BLOCK_4 ((uint16_t)0x4000)

#define USB_COUNT2_RX_BLSIZE ((uint16_t)0x8000)


#define USB_COUNT3_RX_COUNT3_RX ((uint16_t)0x03FF)

#define USB_COUNT3_RX_NUM_BLOCK ((uint16_t)0x7C00)
#define USB_COUNT3_RX_NUM_BLOCK_0 ((uint16_t)0x0400)
#define USB_COUNT3_RX_NUM_BLOCK_1 ((uint16_t)0x0800)
#define USB_COUNT3_RX_NUM_BLOCK_2 ((uint16_t)0x1000)
#define USB_COUNT3_RX_NUM_BLOCK_3 ((uint16_t)0x2000)
#define USB_COUNT3_RX_NUM_BLOCK_4 ((uint16_t)0x4000)

#define USB_COUNT3_RX_BLSIZE ((uint16_t)0x8000)


#define USB_COUNT4_RX_COUNT4_RX ((uint16_t)0x03FF)

#define USB_COUNT4_RX_NUM_BLOCK ((uint16_t)0x7C00)
#define USB_COUNT4_RX_NUM_BLOCK_0 ((uint16_t)0x0400)
#define USB_COUNT4_RX_NUM_BLOCK_1 ((uint16_t)0x0800)
#define USB_COUNT4_RX_NUM_BLOCK_2 ((uint16_t)0x1000)
#define USB_COUNT4_RX_NUM_BLOCK_3 ((uint16_t)0x2000)
#define USB_COUNT4_RX_NUM_BLOCK_4 ((uint16_t)0x4000)

#define USB_COUNT4_RX_BLSIZE ((uint16_t)0x8000)


#define USB_COUNT5_RX_COUNT5_RX ((uint16_t)0x03FF)

#define USB_COUNT5_RX_NUM_BLOCK ((uint16_t)0x7C00)
#define USB_COUNT5_RX_NUM_BLOCK_0 ((uint16_t)0x0400)
#define USB_COUNT5_RX_NUM_BLOCK_1 ((uint16_t)0x0800)
#define USB_COUNT5_RX_NUM_BLOCK_2 ((uint16_t)0x1000)
#define USB_COUNT5_RX_NUM_BLOCK_3 ((uint16_t)0x2000)
#define USB_COUNT5_RX_NUM_BLOCK_4 ((uint16_t)0x4000)

#define USB_COUNT5_RX_BLSIZE ((uint16_t)0x8000)


#define USB_COUNT6_RX_COUNT6_RX ((uint16_t)0x03FF)

#define USB_COUNT6_RX_NUM_BLOCK ((uint16_t)0x7C00)
#define USB_COUNT6_RX_NUM_BLOCK_0 ((uint16_t)0x0400)
#define USB_COUNT6_RX_NUM_BLOCK_1 ((uint16_t)0x0800)
#define USB_COUNT6_RX_NUM_BLOCK_2 ((uint16_t)0x1000)
#define USB_COUNT6_RX_NUM_BLOCK_3 ((uint16_t)0x2000)
#define USB_COUNT6_RX_NUM_BLOCK_4 ((uint16_t)0x4000)

#define USB_COUNT6_RX_BLSIZE ((uint16_t)0x8000)


#define USB_COUNT7_RX_COUNT7_RX ((uint16_t)0x03FF)

#define USB_COUNT7_RX_NUM_BLOCK ((uint16_t)0x7C00)
#define USB_COUNT7_RX_NUM_BLOCK_0 ((uint16_t)0x0400)
#define USB_COUNT7_RX_NUM_BLOCK_1 ((uint16_t)0x0800)
#define USB_COUNT7_RX_NUM_BLOCK_2 ((uint16_t)0x1000)
#define USB_COUNT7_RX_NUM_BLOCK_3 ((uint16_t)0x2000)
#define USB_COUNT7_RX_NUM_BLOCK_4 ((uint16_t)0x4000)

#define USB_COUNT7_RX_BLSIZE ((uint16_t)0x8000)




#define USB_COUNT0_RX_0_COUNT0_RX_0 ((uint32_t)0x000003FF)

#define USB_COUNT0_RX_0_NUM_BLOCK_0 ((uint32_t)0x00007C00)
#define USB_COUNT0_RX_0_NUM_BLOCK_0_0 ((uint32_t)0x00000400)
#define USB_COUNT0_RX_0_NUM_BLOCK_0_1 ((uint32_t)0x00000800)
#define USB_COUNT0_RX_0_NUM_BLOCK_0_2 ((uint32_t)0x00001000)
#define USB_COUNT0_RX_0_NUM_BLOCK_0_3 ((uint32_t)0x00002000)
#define USB_COUNT0_RX_0_NUM_BLOCK_0_4 ((uint32_t)0x00004000)

#define USB_COUNT0_RX_0_BLSIZE_0 ((uint32_t)0x00008000)


#define USB_COUNT0_RX_1_COUNT0_RX_1 ((uint32_t)0x03FF0000)

#define USB_COUNT0_RX_1_NUM_BLOCK_1 ((uint32_t)0x7C000000)
#define USB_COUNT0_RX_1_NUM_BLOCK_1_0 ((uint32_t)0x04000000)
#define USB_COUNT0_RX_1_NUM_BLOCK_1_1 ((uint32_t)0x08000000)
#define USB_COUNT0_RX_1_NUM_BLOCK_1_2 ((uint32_t)0x10000000)
#define USB_COUNT0_RX_1_NUM_BLOCK_1_3 ((uint32_t)0x20000000)
#define USB_COUNT0_RX_1_NUM_BLOCK_1_4 ((uint32_t)0x40000000)

#define USB_COUNT0_RX_1_BLSIZE_1 ((uint32_t)0x80000000)


#define USB_COUNT1_RX_0_COUNT1_RX_0 ((uint32_t)0x000003FF)

#define USB_COUNT1_RX_0_NUM_BLOCK_0 ((uint32_t)0x00007C00)
#define USB_COUNT1_RX_0_NUM_BLOCK_0_0 ((uint32_t)0x00000400)
#define USB_COUNT1_RX_0_NUM_BLOCK_0_1 ((uint32_t)0x00000800)
#define USB_COUNT1_RX_0_NUM_BLOCK_0_2 ((uint32_t)0x00001000)
#define USB_COUNT1_RX_0_NUM_BLOCK_0_3 ((uint32_t)0x00002000)
#define USB_COUNT1_RX_0_NUM_BLOCK_0_4 ((uint32_t)0x00004000)

#define USB_COUNT1_RX_0_BLSIZE_0 ((uint32_t)0x00008000)


#define USB_COUNT1_RX_1_COUNT1_RX_1 ((uint32_t)0x03FF0000)

#define USB_COUNT1_RX_1_NUM_BLOCK_1 ((uint32_t)0x7C000000)
#define USB_COUNT1_RX_1_NUM_BLOCK_1_0 ((uint32_t)0x04000000)
#define USB_COUNT1_RX_1_NUM_BLOCK_1_1 ((uint32_t)0x08000000)
#define USB_COUNT1_RX_1_NUM_BLOCK_1_2 ((uint32_t)0x10000000)
#define USB_COUNT1_RX_1_NUM_BLOCK_1_3 ((uint32_t)0x20000000)
#define USB_COUNT1_RX_1_NUM_BLOCK_1_4 ((uint32_t)0x40000000)

#define USB_COUNT1_RX_1_BLSIZE_1 ((uint32_t)0x80000000)


#define USB_COUNT2_RX_0_COUNT2_RX_0 ((uint32_t)0x000003FF)

#define USB_COUNT2_RX_0_NUM_BLOCK_0 ((uint32_t)0x00007C00)
#define USB_COUNT2_RX_0_NUM_BLOCK_0_0 ((uint32_t)0x00000400)
#define USB_COUNT2_RX_0_NUM_BLOCK_0_1 ((uint32_t)0x00000800)
#define USB_COUNT2_RX_0_NUM_BLOCK_0_2 ((uint32_t)0x00001000)
#define USB_COUNT2_RX_0_NUM_BLOCK_0_3 ((uint32_t)0x00002000)
#define USB_COUNT2_RX_0_NUM_BLOCK_0_4 ((uint32_t)0x00004000)

#define USB_COUNT2_RX_0_BLSIZE_0 ((uint32_t)0x00008000)


#define USB_COUNT2_RX_1_COUNT2_RX_1 ((uint32_t)0x03FF0000)

#define USB_COUNT2_RX_1_NUM_BLOCK_1 ((uint32_t)0x7C000000)
#define USB_COUNT2_RX_1_NUM_BLOCK_1_0 ((uint32_t)0x04000000)
#define USB_COUNT2_RX_1_NUM_BLOCK_1_1 ((uint32_t)0x08000000)
#define USB_COUNT2_RX_1_NUM_BLOCK_1_2 ((uint32_t)0x10000000)
#define USB_COUNT2_RX_1_NUM_BLOCK_1_3 ((uint32_t)0x20000000)
#define USB_COUNT2_RX_1_NUM_BLOCK_1_4 ((uint32_t)0x40000000)

#define USB_COUNT2_RX_1_BLSIZE_1 ((uint32_t)0x80000000)


#define USB_COUNT3_RX_0_COUNT3_RX_0 ((uint32_t)0x000003FF)

#define USB_COUNT3_RX_0_NUM_BLOCK_0 ((uint32_t)0x00007C00)
#define USB_COUNT3_RX_0_NUM_BLOCK_0_0 ((uint32_t)0x00000400)
#define USB_COUNT3_RX_0_NUM_BLOCK_0_1 ((uint32_t)0x00000800)
#define USB_COUNT3_RX_0_NUM_BLOCK_0_2 ((uint32_t)0x00001000)
#define USB_COUNT3_RX_0_NUM_BLOCK_0_3 ((uint32_t)0x00002000)
#define USB_COUNT3_RX_0_NUM_BLOCK_0_4 ((uint32_t)0x00004000)

#define USB_COUNT3_RX_0_BLSIZE_0 ((uint32_t)0x00008000)


#define USB_COUNT3_RX_1_COUNT3_RX_1 ((uint32_t)0x03FF0000)

#define USB_COUNT3_RX_1_NUM_BLOCK_1 ((uint32_t)0x7C000000)
#define USB_COUNT3_RX_1_NUM_BLOCK_1_0 ((uint32_t)0x04000000)
#define USB_COUNT3_RX_1_NUM_BLOCK_1_1 ((uint32_t)0x08000000)
#define USB_COUNT3_RX_1_NUM_BLOCK_1_2 ((uint32_t)0x10000000)
#define USB_COUNT3_RX_1_NUM_BLOCK_1_3 ((uint32_t)0x20000000)
#define USB_COUNT3_RX_1_NUM_BLOCK_1_4 ((uint32_t)0x40000000)

#define USB_COUNT3_RX_1_BLSIZE_1 ((uint32_t)0x80000000)


#define USB_COUNT4_RX_0_COUNT4_RX_0 ((uint32_t)0x000003FF)

#define USB_COUNT4_RX_0_NUM_BLOCK_0 ((uint32_t)0x00007C00)
#define USB_COUNT4_RX_0_NUM_BLOCK_0_0 ((uint32_t)0x00000400)
#define USB_COUNT4_RX_0_NUM_BLOCK_0_1 ((uint32_t)0x00000800)
#define USB_COUNT4_RX_0_NUM_BLOCK_0_2 ((uint32_t)0x00001000)
#define USB_COUNT4_RX_0_NUM_BLOCK_0_3 ((uint32_t)0x00002000)
#define USB_COUNT4_RX_0_NUM_BLOCK_0_4 ((uint32_t)0x00004000)

#define USB_COUNT4_RX_0_BLSIZE_0 ((uint32_t)0x00008000)


#define USB_COUNT4_RX_1_COUNT4_RX_1 ((uint32_t)0x03FF0000)

#define USB_COUNT4_RX_1_NUM_BLOCK_1 ((uint32_t)0x7C000000)
#define USB_COUNT4_RX_1_NUM_BLOCK_1_0 ((uint32_t)0x04000000)
#define USB_COUNT4_RX_1_NUM_BLOCK_1_1 ((uint32_t)0x08000000)
#define USB_COUNT4_RX_1_NUM_BLOCK_1_2 ((uint32_t)0x10000000)
#define USB_COUNT4_RX_1_NUM_BLOCK_1_3 ((uint32_t)0x20000000)
#define USB_COUNT4_RX_1_NUM_BLOCK_1_4 ((uint32_t)0x40000000)

#define USB_COUNT4_RX_1_BLSIZE_1 ((uint32_t)0x80000000)


#define USB_COUNT5_RX_0_COUNT5_RX_0 ((uint32_t)0x000003FF)

#define USB_COUNT5_RX_0_NUM_BLOCK_0 ((uint32_t)0x00007C00)
#define USB_COUNT5_RX_0_NUM_BLOCK_0_0 ((uint32_t)0x00000400)
#define USB_COUNT5_RX_0_NUM_BLOCK_0_1 ((uint32_t)0x00000800)
#define USB_COUNT5_RX_0_NUM_BLOCK_0_2 ((uint32_t)0x00001000)
#define USB_COUNT5_RX_0_NUM_BLOCK_0_3 ((uint32_t)0x00002000)
#define USB_COUNT5_RX_0_NUM_BLOCK_0_4 ((uint32_t)0x00004000)

#define USB_COUNT5_RX_0_BLSIZE_0 ((uint32_t)0x00008000)


#define USB_COUNT5_RX_1_COUNT5_RX_1 ((uint32_t)0x03FF0000)

#define USB_COUNT5_RX_1_NUM_BLOCK_1 ((uint32_t)0x7C000000)
#define USB_COUNT5_RX_1_NUM_BLOCK_1_0 ((uint32_t)0x04000000)
#define USB_COUNT5_RX_1_NUM_BLOCK_1_1 ((uint32_t)0x08000000)
#define USB_COUNT5_RX_1_NUM_BLOCK_1_2 ((uint32_t)0x10000000)
#define USB_COUNT5_RX_1_NUM_BLOCK_1_3 ((uint32_t)0x20000000)
#define USB_COUNT5_RX_1_NUM_BLOCK_1_4 ((uint32_t)0x40000000)

#define USB_COUNT5_RX_1_BLSIZE_1 ((uint32_t)0x80000000)


#define USB_COUNT6_RX_0_COUNT6_RX_0 ((uint32_t)0x000003FF)

#define USB_COUNT6_RX_0_NUM_BLOCK_0 ((uint32_t)0x00007C00)
#define USB_COUNT6_RX_0_NUM_BLOCK_0_0 ((uint32_t)0x00000400)
#define USB_COUNT6_RX_0_NUM_BLOCK_0_1 ((uint32_t)0x00000800)
#define USB_COUNT6_RX_0_NUM_BLOCK_0_2 ((uint32_t)0x00001000)
#define USB_COUNT6_RX_0_NUM_BLOCK_0_3 ((uint32_t)0x00002000)
#define USB_COUNT6_RX_0_NUM_BLOCK_0_4 ((uint32_t)0x00004000)

#define USB_COUNT6_RX_0_BLSIZE_0 ((uint32_t)0x00008000)


#define USB_COUNT6_RX_1_COUNT6_RX_1 ((uint32_t)0x03FF0000)

#define USB_COUNT6_RX_1_NUM_BLOCK_1 ((uint32_t)0x7C000000)
#define USB_COUNT6_RX_1_NUM_BLOCK_1_0 ((uint32_t)0x04000000)
#define USB_COUNT6_RX_1_NUM_BLOCK_1_1 ((uint32_t)0x08000000)
#define USB_COUNT6_RX_1_NUM_BLOCK_1_2 ((uint32_t)0x10000000)
#define USB_COUNT6_RX_1_NUM_BLOCK_1_3 ((uint32_t)0x20000000)
#define USB_COUNT6_RX_1_NUM_BLOCK_1_4 ((uint32_t)0x40000000)

#define USB_COUNT6_RX_1_BLSIZE_1 ((uint32_t)0x80000000)


#define USB_COUNT7_RX_0_COUNT7_RX_0 ((uint32_t)0x000003FF)

#define USB_COUNT7_RX_0_NUM_BLOCK_0 ((uint32_t)0x00007C00)
#define USB_COUNT7_RX_0_NUM_BLOCK_0_0 ((uint32_t)0x00000400)
#define USB_COUNT7_RX_0_NUM_BLOCK_0_1 ((uint32_t)0x00000800)
#define USB_COUNT7_RX_0_NUM_BLOCK_0_2 ((uint32_t)0x00001000)
#define USB_COUNT7_RX_0_NUM_BLOCK_0_3 ((uint32_t)0x00002000)
#define USB_COUNT7_RX_0_NUM_BLOCK_0_4 ((uint32_t)0x00004000)

#define USB_COUNT7_RX_0_BLSIZE_0 ((uint32_t)0x00008000)


#define USB_COUNT7_RX_1_COUNT7_RX_1 ((uint32_t)0x03FF0000)

#define USB_COUNT7_RX_1_NUM_BLOCK_1 ((uint32_t)0x7C000000)
#define USB_COUNT7_RX_1_NUM_BLOCK_1_0 ((uint32_t)0x04000000)
#define USB_COUNT7_RX_1_NUM_BLOCK_1_1 ((uint32_t)0x08000000)
#define USB_COUNT7_RX_1_NUM_BLOCK_1_2 ((uint32_t)0x10000000)
#define USB_COUNT7_RX_1_NUM_BLOCK_1_3 ((uint32_t)0x20000000)
#define USB_COUNT7_RX_1_NUM_BLOCK_1_4 ((uint32_t)0x40000000)

#define USB_COUNT7_RX_1_BLSIZE_1 ((uint32_t)0x80000000)
# 6219 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
#define CAN_MCR_INRQ ((uint16_t)0x0001)
#define CAN_MCR_SLEEP ((uint16_t)0x0002)
#define CAN_MCR_TXFP ((uint16_t)0x0004)
#define CAN_MCR_RFLM ((uint16_t)0x0008)
#define CAN_MCR_NART ((uint16_t)0x0010)
#define CAN_MCR_AWUM ((uint16_t)0x0020)
#define CAN_MCR_ABOM ((uint16_t)0x0040)
#define CAN_MCR_TTCM ((uint16_t)0x0080)
#define CAN_MCR_RESET ((uint16_t)0x8000)


#define CAN_MSR_INAK ((uint16_t)0x0001)
#define CAN_MSR_SLAK ((uint16_t)0x0002)
#define CAN_MSR_ERRI ((uint16_t)0x0004)
#define CAN_MSR_WKUI ((uint16_t)0x0008)
#define CAN_MSR_SLAKI ((uint16_t)0x0010)
#define CAN_MSR_TXM ((uint16_t)0x0100)
#define CAN_MSR_RXM ((uint16_t)0x0200)
#define CAN_MSR_SAMP ((uint16_t)0x0400)
#define CAN_MSR_RX ((uint16_t)0x0800)


#define CAN_TSR_RQCP0 ((uint32_t)0x00000001)
#define CAN_TSR_TXOK0 ((uint32_t)0x00000002)
#define CAN_TSR_ALST0 ((uint32_t)0x00000004)
#define CAN_TSR_TERR0 ((uint32_t)0x00000008)
#define CAN_TSR_ABRQ0 ((uint32_t)0x00000080)
#define CAN_TSR_RQCP1 ((uint32_t)0x00000100)
#define CAN_TSR_TXOK1 ((uint32_t)0x00000200)
#define CAN_TSR_ALST1 ((uint32_t)0x00000400)
#define CAN_TSR_TERR1 ((uint32_t)0x00000800)
#define CAN_TSR_ABRQ1 ((uint32_t)0x00008000)
#define CAN_TSR_RQCP2 ((uint32_t)0x00010000)
#define CAN_TSR_TXOK2 ((uint32_t)0x00020000)
#define CAN_TSR_ALST2 ((uint32_t)0x00040000)
#define CAN_TSR_TERR2 ((uint32_t)0x00080000)
#define CAN_TSR_ABRQ2 ((uint32_t)0x00800000)
#define CAN_TSR_CODE ((uint32_t)0x03000000)

#define CAN_TSR_TME ((uint32_t)0x1C000000)
#define CAN_TSR_TME0 ((uint32_t)0x04000000)
#define CAN_TSR_TME1 ((uint32_t)0x08000000)
#define CAN_TSR_TME2 ((uint32_t)0x10000000)

#define CAN_TSR_LOW ((uint32_t)0xE0000000)
#define CAN_TSR_LOW0 ((uint32_t)0x20000000)
#define CAN_TSR_LOW1 ((uint32_t)0x40000000)
#define CAN_TSR_LOW2 ((uint32_t)0x80000000)


#define CAN_RF0R_FMP0 ((uint8_t)0x03)
#define CAN_RF0R_FULL0 ((uint8_t)0x08)
#define CAN_RF0R_FOVR0 ((uint8_t)0x10)
#define CAN_RF0R_RFOM0 ((uint8_t)0x20)


#define CAN_RF1R_FMP1 ((uint8_t)0x03)
#define CAN_RF1R_FULL1 ((uint8_t)0x08)
#define CAN_RF1R_FOVR1 ((uint8_t)0x10)
#define CAN_RF1R_RFOM1 ((uint8_t)0x20)


#define CAN_IER_TMEIE ((uint32_t)0x00000001)
#define CAN_IER_FMPIE0 ((uint32_t)0x00000002)
#define CAN_IER_FFIE0 ((uint32_t)0x00000004)
#define CAN_IER_FOVIE0 ((uint32_t)0x00000008)
#define CAN_IER_FMPIE1 ((uint32_t)0x00000010)
#define CAN_IER_FFIE1 ((uint32_t)0x00000020)
#define CAN_IER_FOVIE1 ((uint32_t)0x00000040)
#define CAN_IER_EWGIE ((uint32_t)0x00000100)
#define CAN_IER_EPVIE ((uint32_t)0x00000200)
#define CAN_IER_BOFIE ((uint32_t)0x00000400)
#define CAN_IER_LECIE ((uint32_t)0x00000800)
#define CAN_IER_ERRIE ((uint32_t)0x00008000)
#define CAN_IER_WKUIE ((uint32_t)0x00010000)
#define CAN_IER_SLKIE ((uint32_t)0x00020000)


#define CAN_ESR_EWGF ((uint32_t)0x00000001)
#define CAN_ESR_EPVF ((uint32_t)0x00000002)
#define CAN_ESR_BOFF ((uint32_t)0x00000004)

#define CAN_ESR_LEC ((uint32_t)0x00000070)
#define CAN_ESR_LEC_0 ((uint32_t)0x00000010)
#define CAN_ESR_LEC_1 ((uint32_t)0x00000020)
#define CAN_ESR_LEC_2 ((uint32_t)0x00000040)

#define CAN_ESR_TEC ((uint32_t)0x00FF0000)
#define CAN_ESR_REC ((uint32_t)0xFF000000)


#define CAN_BTR_BRP ((uint32_t)0x000003FF)
#define CAN_BTR_TS1 ((uint32_t)0x000F0000)
#define CAN_BTR_TS2 ((uint32_t)0x00700000)
#define CAN_BTR_SJW ((uint32_t)0x03000000)
#define CAN_BTR_LBKM ((uint32_t)0x40000000)
#define CAN_BTR_SILM ((uint32_t)0x80000000)



#define CAN_TI0R_TXRQ ((uint32_t)0x00000001)
#define CAN_TI0R_RTR ((uint32_t)0x00000002)
#define CAN_TI0R_IDE ((uint32_t)0x00000004)
#define CAN_TI0R_EXID ((uint32_t)0x001FFFF8)
#define CAN_TI0R_STID ((uint32_t)0xFFE00000)


#define CAN_TDT0R_DLC ((uint32_t)0x0000000F)
#define CAN_TDT0R_TGT ((uint32_t)0x00000100)
#define CAN_TDT0R_TIME ((uint32_t)0xFFFF0000)


#define CAN_TDL0R_DATA0 ((uint32_t)0x000000FF)
#define CAN_TDL0R_DATA1 ((uint32_t)0x0000FF00)
#define CAN_TDL0R_DATA2 ((uint32_t)0x00FF0000)
#define CAN_TDL0R_DATA3 ((uint32_t)0xFF000000)


#define CAN_TDH0R_DATA4 ((uint32_t)0x000000FF)
#define CAN_TDH0R_DATA5 ((uint32_t)0x0000FF00)
#define CAN_TDH0R_DATA6 ((uint32_t)0x00FF0000)
#define CAN_TDH0R_DATA7 ((uint32_t)0xFF000000)


#define CAN_TI1R_TXRQ ((uint32_t)0x00000001)
#define CAN_TI1R_RTR ((uint32_t)0x00000002)
#define CAN_TI1R_IDE ((uint32_t)0x00000004)
#define CAN_TI1R_EXID ((uint32_t)0x001FFFF8)
#define CAN_TI1R_STID ((uint32_t)0xFFE00000)


#define CAN_TDT1R_DLC ((uint32_t)0x0000000F)
#define CAN_TDT1R_TGT ((uint32_t)0x00000100)
#define CAN_TDT1R_TIME ((uint32_t)0xFFFF0000)


#define CAN_TDL1R_DATA0 ((uint32_t)0x000000FF)
#define CAN_TDL1R_DATA1 ((uint32_t)0x0000FF00)
#define CAN_TDL1R_DATA2 ((uint32_t)0x00FF0000)
#define CAN_TDL1R_DATA3 ((uint32_t)0xFF000000)


#define CAN_TDH1R_DATA4 ((uint32_t)0x000000FF)
#define CAN_TDH1R_DATA5 ((uint32_t)0x0000FF00)
#define CAN_TDH1R_DATA6 ((uint32_t)0x00FF0000)
#define CAN_TDH1R_DATA7 ((uint32_t)0xFF000000)


#define CAN_TI2R_TXRQ ((uint32_t)0x00000001)
#define CAN_TI2R_RTR ((uint32_t)0x00000002)
#define CAN_TI2R_IDE ((uint32_t)0x00000004)
#define CAN_TI2R_EXID ((uint32_t)0x001FFFF8)
#define CAN_TI2R_STID ((uint32_t)0xFFE00000)


#define CAN_TDT2R_DLC ((uint32_t)0x0000000F)
#define CAN_TDT2R_TGT ((uint32_t)0x00000100)
#define CAN_TDT2R_TIME ((uint32_t)0xFFFF0000)


#define CAN_TDL2R_DATA0 ((uint32_t)0x000000FF)
#define CAN_TDL2R_DATA1 ((uint32_t)0x0000FF00)
#define CAN_TDL2R_DATA2 ((uint32_t)0x00FF0000)
#define CAN_TDL2R_DATA3 ((uint32_t)0xFF000000)


#define CAN_TDH2R_DATA4 ((uint32_t)0x000000FF)
#define CAN_TDH2R_DATA5 ((uint32_t)0x0000FF00)
#define CAN_TDH2R_DATA6 ((uint32_t)0x00FF0000)
#define CAN_TDH2R_DATA7 ((uint32_t)0xFF000000)


#define CAN_RI0R_RTR ((uint32_t)0x00000002)
#define CAN_RI0R_IDE ((uint32_t)0x00000004)
#define CAN_RI0R_EXID ((uint32_t)0x001FFFF8)
#define CAN_RI0R_STID ((uint32_t)0xFFE00000)


#define CAN_RDT0R_DLC ((uint32_t)0x0000000F)
#define CAN_RDT0R_FMI ((uint32_t)0x0000FF00)
#define CAN_RDT0R_TIME ((uint32_t)0xFFFF0000)


#define CAN_RDL0R_DATA0 ((uint32_t)0x000000FF)
#define CAN_RDL0R_DATA1 ((uint32_t)0x0000FF00)
#define CAN_RDL0R_DATA2 ((uint32_t)0x00FF0000)
#define CAN_RDL0R_DATA3 ((uint32_t)0xFF000000)


#define CAN_RDH0R_DATA4 ((uint32_t)0x000000FF)
#define CAN_RDH0R_DATA5 ((uint32_t)0x0000FF00)
#define CAN_RDH0R_DATA6 ((uint32_t)0x00FF0000)
#define CAN_RDH0R_DATA7 ((uint32_t)0xFF000000)


#define CAN_RI1R_RTR ((uint32_t)0x00000002)
#define CAN_RI1R_IDE ((uint32_t)0x00000004)
#define CAN_RI1R_EXID ((uint32_t)0x001FFFF8)
#define CAN_RI1R_STID ((uint32_t)0xFFE00000)


#define CAN_RDT1R_DLC ((uint32_t)0x0000000F)
#define CAN_RDT1R_FMI ((uint32_t)0x0000FF00)
#define CAN_RDT1R_TIME ((uint32_t)0xFFFF0000)


#define CAN_RDL1R_DATA0 ((uint32_t)0x000000FF)
#define CAN_RDL1R_DATA1 ((uint32_t)0x0000FF00)
#define CAN_RDL1R_DATA2 ((uint32_t)0x00FF0000)
#define CAN_RDL1R_DATA3 ((uint32_t)0xFF000000)


#define CAN_RDH1R_DATA4 ((uint32_t)0x000000FF)
#define CAN_RDH1R_DATA5 ((uint32_t)0x0000FF00)
#define CAN_RDH1R_DATA6 ((uint32_t)0x00FF0000)
#define CAN_RDH1R_DATA7 ((uint32_t)0xFF000000)



#define CAN_FMR_FINIT ((uint8_t)0x01)


#define CAN_FM1R_FBM ((uint16_t)0x3FFF)
#define CAN_FM1R_FBM0 ((uint16_t)0x0001)
#define CAN_FM1R_FBM1 ((uint16_t)0x0002)
#define CAN_FM1R_FBM2 ((uint16_t)0x0004)
#define CAN_FM1R_FBM3 ((uint16_t)0x0008)
#define CAN_FM1R_FBM4 ((uint16_t)0x0010)
#define CAN_FM1R_FBM5 ((uint16_t)0x0020)
#define CAN_FM1R_FBM6 ((uint16_t)0x0040)
#define CAN_FM1R_FBM7 ((uint16_t)0x0080)
#define CAN_FM1R_FBM8 ((uint16_t)0x0100)
#define CAN_FM1R_FBM9 ((uint16_t)0x0200)
#define CAN_FM1R_FBM10 ((uint16_t)0x0400)
#define CAN_FM1R_FBM11 ((uint16_t)0x0800)
#define CAN_FM1R_FBM12 ((uint16_t)0x1000)
#define CAN_FM1R_FBM13 ((uint16_t)0x2000)


#define CAN_FS1R_FSC ((uint16_t)0x3FFF)
#define CAN_FS1R_FSC0 ((uint16_t)0x0001)
#define CAN_FS1R_FSC1 ((uint16_t)0x0002)
#define CAN_FS1R_FSC2 ((uint16_t)0x0004)
#define CAN_FS1R_FSC3 ((uint16_t)0x0008)
#define CAN_FS1R_FSC4 ((uint16_t)0x0010)
#define CAN_FS1R_FSC5 ((uint16_t)0x0020)
#define CAN_FS1R_FSC6 ((uint16_t)0x0040)
#define CAN_FS1R_FSC7 ((uint16_t)0x0080)
#define CAN_FS1R_FSC8 ((uint16_t)0x0100)
#define CAN_FS1R_FSC9 ((uint16_t)0x0200)
#define CAN_FS1R_FSC10 ((uint16_t)0x0400)
#define CAN_FS1R_FSC11 ((uint16_t)0x0800)
#define CAN_FS1R_FSC12 ((uint16_t)0x1000)
#define CAN_FS1R_FSC13 ((uint16_t)0x2000)


#define CAN_FFA1R_FFA ((uint16_t)0x3FFF)
#define CAN_FFA1R_FFA0 ((uint16_t)0x0001)
#define CAN_FFA1R_FFA1 ((uint16_t)0x0002)
#define CAN_FFA1R_FFA2 ((uint16_t)0x0004)
#define CAN_FFA1R_FFA3 ((uint16_t)0x0008)
#define CAN_FFA1R_FFA4 ((uint16_t)0x0010)
#define CAN_FFA1R_FFA5 ((uint16_t)0x0020)
#define CAN_FFA1R_FFA6 ((uint16_t)0x0040)
#define CAN_FFA1R_FFA7 ((uint16_t)0x0080)
#define CAN_FFA1R_FFA8 ((uint16_t)0x0100)
#define CAN_FFA1R_FFA9 ((uint16_t)0x0200)
#define CAN_FFA1R_FFA10 ((uint16_t)0x0400)
#define CAN_FFA1R_FFA11 ((uint16_t)0x0800)
#define CAN_FFA1R_FFA12 ((uint16_t)0x1000)
#define CAN_FFA1R_FFA13 ((uint16_t)0x2000)


#define CAN_FA1R_FACT ((uint16_t)0x3FFF)
#define CAN_FA1R_FACT0 ((uint16_t)0x0001)
#define CAN_FA1R_FACT1 ((uint16_t)0x0002)
#define CAN_FA1R_FACT2 ((uint16_t)0x0004)
#define CAN_FA1R_FACT3 ((uint16_t)0x0008)
#define CAN_FA1R_FACT4 ((uint16_t)0x0010)
#define CAN_FA1R_FACT5 ((uint16_t)0x0020)
#define CAN_FA1R_FACT6 ((uint16_t)0x0040)
#define CAN_FA1R_FACT7 ((uint16_t)0x0080)
#define CAN_FA1R_FACT8 ((uint16_t)0x0100)
#define CAN_FA1R_FACT9 ((uint16_t)0x0200)
#define CAN_FA1R_FACT10 ((uint16_t)0x0400)
#define CAN_FA1R_FACT11 ((uint16_t)0x0800)
#define CAN_FA1R_FACT12 ((uint16_t)0x1000)
#define CAN_FA1R_FACT13 ((uint16_t)0x2000)


#define CAN_F0R1_FB0 ((uint32_t)0x00000001)
#define CAN_F0R1_FB1 ((uint32_t)0x00000002)
#define CAN_F0R1_FB2 ((uint32_t)0x00000004)
#define CAN_F0R1_FB3 ((uint32_t)0x00000008)
#define CAN_F0R1_FB4 ((uint32_t)0x00000010)
#define CAN_F0R1_FB5 ((uint32_t)0x00000020)
#define CAN_F0R1_FB6 ((uint32_t)0x00000040)
#define CAN_F0R1_FB7 ((uint32_t)0x00000080)
#define CAN_F0R1_FB8 ((uint32_t)0x00000100)
#define CAN_F0R1_FB9 ((uint32_t)0x00000200)
#define CAN_F0R1_FB10 ((uint32_t)0x00000400)
#define CAN_F0R1_FB11 ((uint32_t)0x00000800)
#define CAN_F0R1_FB12 ((uint32_t)0x00001000)
#define CAN_F0R1_FB13 ((uint32_t)0x00002000)
#define CAN_F0R1_FB14 ((uint32_t)0x00004000)
#define CAN_F0R1_FB15 ((uint32_t)0x00008000)
#define CAN_F0R1_FB16 ((uint32_t)0x00010000)
#define CAN_F0R1_FB17 ((uint32_t)0x00020000)
#define CAN_F0R1_FB18 ((uint32_t)0x00040000)
#define CAN_F0R1_FB19 ((uint32_t)0x00080000)
#define CAN_F0R1_FB20 ((uint32_t)0x00100000)
#define CAN_F0R1_FB21 ((uint32_t)0x00200000)
#define CAN_F0R1_FB22 ((uint32_t)0x00400000)
#define CAN_F0R1_FB23 ((uint32_t)0x00800000)
#define CAN_F0R1_FB24 ((uint32_t)0x01000000)
#define CAN_F0R1_FB25 ((uint32_t)0x02000000)
#define CAN_F0R1_FB26 ((uint32_t)0x04000000)
#define CAN_F0R1_FB27 ((uint32_t)0x08000000)
#define CAN_F0R1_FB28 ((uint32_t)0x10000000)
#define CAN_F0R1_FB29 ((uint32_t)0x20000000)
#define CAN_F0R1_FB30 ((uint32_t)0x40000000)
#define CAN_F0R1_FB31 ((uint32_t)0x80000000)


#define CAN_F1R1_FB0 ((uint32_t)0x00000001)
#define CAN_F1R1_FB1 ((uint32_t)0x00000002)
#define CAN_F1R1_FB2 ((uint32_t)0x00000004)
#define CAN_F1R1_FB3 ((uint32_t)0x00000008)
#define CAN_F1R1_FB4 ((uint32_t)0x00000010)
#define CAN_F1R1_FB5 ((uint32_t)0x00000020)
#define CAN_F1R1_FB6 ((uint32_t)0x00000040)
#define CAN_F1R1_FB7 ((uint32_t)0x00000080)
#define CAN_F1R1_FB8 ((uint32_t)0x00000100)
#define CAN_F1R1_FB9 ((uint32_t)0x00000200)
#define CAN_F1R1_FB10 ((uint32_t)0x00000400)
#define CAN_F1R1_FB11 ((uint32_t)0x00000800)
#define CAN_F1R1_FB12 ((uint32_t)0x00001000)
#define CAN_F1R1_FB13 ((uint32_t)0x00002000)
#define CAN_F1R1_FB14 ((uint32_t)0x00004000)
#define CAN_F1R1_FB15 ((uint32_t)0x00008000)
#define CAN_F1R1_FB16 ((uint32_t)0x00010000)
#define CAN_F1R1_FB17 ((uint32_t)0x00020000)
#define CAN_F1R1_FB18 ((uint32_t)0x00040000)
#define CAN_F1R1_FB19 ((uint32_t)0x00080000)
#define CAN_F1R1_FB20 ((uint32_t)0x00100000)
#define CAN_F1R1_FB21 ((uint32_t)0x00200000)
#define CAN_F1R1_FB22 ((uint32_t)0x00400000)
#define CAN_F1R1_FB23 ((uint32_t)0x00800000)
#define CAN_F1R1_FB24 ((uint32_t)0x01000000)
#define CAN_F1R1_FB25 ((uint32_t)0x02000000)
#define CAN_F1R1_FB26 ((uint32_t)0x04000000)
#define CAN_F1R1_FB27 ((uint32_t)0x08000000)
#define CAN_F1R1_FB28 ((uint32_t)0x10000000)
#define CAN_F1R1_FB29 ((uint32_t)0x20000000)
#define CAN_F1R1_FB30 ((uint32_t)0x40000000)
#define CAN_F1R1_FB31 ((uint32_t)0x80000000)


#define CAN_F2R1_FB0 ((uint32_t)0x00000001)
#define CAN_F2R1_FB1 ((uint32_t)0x00000002)
#define CAN_F2R1_FB2 ((uint32_t)0x00000004)
#define CAN_F2R1_FB3 ((uint32_t)0x00000008)
#define CAN_F2R1_FB4 ((uint32_t)0x00000010)
#define CAN_F2R1_FB5 ((uint32_t)0x00000020)
#define CAN_F2R1_FB6 ((uint32_t)0x00000040)
#define CAN_F2R1_FB7 ((uint32_t)0x00000080)
#define CAN_F2R1_FB8 ((uint32_t)0x00000100)
#define CAN_F2R1_FB9 ((uint32_t)0x00000200)
#define CAN_F2R1_FB10 ((uint32_t)0x00000400)
#define CAN_F2R1_FB11 ((uint32_t)0x00000800)
#define CAN_F2R1_FB12 ((uint32_t)0x00001000)
#define CAN_F2R1_FB13 ((uint32_t)0x00002000)
#define CAN_F2R1_FB14 ((uint32_t)0x00004000)
#define CAN_F2R1_FB15 ((uint32_t)0x00008000)
#define CAN_F2R1_FB16 ((uint32_t)0x00010000)
#define CAN_F2R1_FB17 ((uint32_t)0x00020000)
#define CAN_F2R1_FB18 ((uint32_t)0x00040000)
#define CAN_F2R1_FB19 ((uint32_t)0x00080000)
#define CAN_F2R1_FB20 ((uint32_t)0x00100000)
#define CAN_F2R1_FB21 ((uint32_t)0x00200000)
#define CAN_F2R1_FB22 ((uint32_t)0x00400000)
#define CAN_F2R1_FB23 ((uint32_t)0x00800000)
#define CAN_F2R1_FB24 ((uint32_t)0x01000000)
#define CAN_F2R1_FB25 ((uint32_t)0x02000000)
#define CAN_F2R1_FB26 ((uint32_t)0x04000000)
#define CAN_F2R1_FB27 ((uint32_t)0x08000000)
#define CAN_F2R1_FB28 ((uint32_t)0x10000000)
#define CAN_F2R1_FB29 ((uint32_t)0x20000000)
#define CAN_F2R1_FB30 ((uint32_t)0x40000000)
#define CAN_F2R1_FB31 ((uint32_t)0x80000000)


#define CAN_F3R1_FB0 ((uint32_t)0x00000001)
#define CAN_F3R1_FB1 ((uint32_t)0x00000002)
#define CAN_F3R1_FB2 ((uint32_t)0x00000004)
#define CAN_F3R1_FB3 ((uint32_t)0x00000008)
#define CAN_F3R1_FB4 ((uint32_t)0x00000010)
#define CAN_F3R1_FB5 ((uint32_t)0x00000020)
#define CAN_F3R1_FB6 ((uint32_t)0x00000040)
#define CAN_F3R1_FB7 ((uint32_t)0x00000080)
#define CAN_F3R1_FB8 ((uint32_t)0x00000100)
#define CAN_F3R1_FB9 ((uint32_t)0x00000200)
#define CAN_F3R1_FB10 ((uint32_t)0x00000400)
#define CAN_F3R1_FB11 ((uint32_t)0x00000800)
#define CAN_F3R1_FB12 ((uint32_t)0x00001000)
#define CAN_F3R1_FB13 ((uint32_t)0x00002000)
#define CAN_F3R1_FB14 ((uint32_t)0x00004000)
#define CAN_F3R1_FB15 ((uint32_t)0x00008000)
#define CAN_F3R1_FB16 ((uint32_t)0x00010000)
#define CAN_F3R1_FB17 ((uint32_t)0x00020000)
#define CAN_F3R1_FB18 ((uint32_t)0x00040000)
#define CAN_F3R1_FB19 ((uint32_t)0x00080000)
#define CAN_F3R1_FB20 ((uint32_t)0x00100000)
#define CAN_F3R1_FB21 ((uint32_t)0x00200000)
#define CAN_F3R1_FB22 ((uint32_t)0x00400000)
#define CAN_F3R1_FB23 ((uint32_t)0x00800000)
#define CAN_F3R1_FB24 ((uint32_t)0x01000000)
#define CAN_F3R1_FB25 ((uint32_t)0x02000000)
#define CAN_F3R1_FB26 ((uint32_t)0x04000000)
#define CAN_F3R1_FB27 ((uint32_t)0x08000000)
#define CAN_F3R1_FB28 ((uint32_t)0x10000000)
#define CAN_F3R1_FB29 ((uint32_t)0x20000000)
#define CAN_F3R1_FB30 ((uint32_t)0x40000000)
#define CAN_F3R1_FB31 ((uint32_t)0x80000000)


#define CAN_F4R1_FB0 ((uint32_t)0x00000001)
#define CAN_F4R1_FB1 ((uint32_t)0x00000002)
#define CAN_F4R1_FB2 ((uint32_t)0x00000004)
#define CAN_F4R1_FB3 ((uint32_t)0x00000008)
#define CAN_F4R1_FB4 ((uint32_t)0x00000010)
#define CAN_F4R1_FB5 ((uint32_t)0x00000020)
#define CAN_F4R1_FB6 ((uint32_t)0x00000040)
#define CAN_F4R1_FB7 ((uint32_t)0x00000080)
#define CAN_F4R1_FB8 ((uint32_t)0x00000100)
#define CAN_F4R1_FB9 ((uint32_t)0x00000200)
#define CAN_F4R1_FB10 ((uint32_t)0x00000400)
#define CAN_F4R1_FB11 ((uint32_t)0x00000800)
#define CAN_F4R1_FB12 ((uint32_t)0x00001000)
#define CAN_F4R1_FB13 ((uint32_t)0x00002000)
#define CAN_F4R1_FB14 ((uint32_t)0x00004000)
#define CAN_F4R1_FB15 ((uint32_t)0x00008000)
#define CAN_F4R1_FB16 ((uint32_t)0x00010000)
#define CAN_F4R1_FB17 ((uint32_t)0x00020000)
#define CAN_F4R1_FB18 ((uint32_t)0x00040000)
#define CAN_F4R1_FB19 ((uint32_t)0x00080000)
#define CAN_F4R1_FB20 ((uint32_t)0x00100000)
#define CAN_F4R1_FB21 ((uint32_t)0x00200000)
#define CAN_F4R1_FB22 ((uint32_t)0x00400000)
#define CAN_F4R1_FB23 ((uint32_t)0x00800000)
#define CAN_F4R1_FB24 ((uint32_t)0x01000000)
#define CAN_F4R1_FB25 ((uint32_t)0x02000000)
#define CAN_F4R1_FB26 ((uint32_t)0x04000000)
#define CAN_F4R1_FB27 ((uint32_t)0x08000000)
#define CAN_F4R1_FB28 ((uint32_t)0x10000000)
#define CAN_F4R1_FB29 ((uint32_t)0x20000000)
#define CAN_F4R1_FB30 ((uint32_t)0x40000000)
#define CAN_F4R1_FB31 ((uint32_t)0x80000000)


#define CAN_F5R1_FB0 ((uint32_t)0x00000001)
#define CAN_F5R1_FB1 ((uint32_t)0x00000002)
#define CAN_F5R1_FB2 ((uint32_t)0x00000004)
#define CAN_F5R1_FB3 ((uint32_t)0x00000008)
#define CAN_F5R1_FB4 ((uint32_t)0x00000010)
#define CAN_F5R1_FB5 ((uint32_t)0x00000020)
#define CAN_F5R1_FB6 ((uint32_t)0x00000040)
#define CAN_F5R1_FB7 ((uint32_t)0x00000080)
#define CAN_F5R1_FB8 ((uint32_t)0x00000100)
#define CAN_F5R1_FB9 ((uint32_t)0x00000200)
#define CAN_F5R1_FB10 ((uint32_t)0x00000400)
#define CAN_F5R1_FB11 ((uint32_t)0x00000800)
#define CAN_F5R1_FB12 ((uint32_t)0x00001000)
#define CAN_F5R1_FB13 ((uint32_t)0x00002000)
#define CAN_F5R1_FB14 ((uint32_t)0x00004000)
#define CAN_F5R1_FB15 ((uint32_t)0x00008000)
#define CAN_F5R1_FB16 ((uint32_t)0x00010000)
#define CAN_F5R1_FB17 ((uint32_t)0x00020000)
#define CAN_F5R1_FB18 ((uint32_t)0x00040000)
#define CAN_F5R1_FB19 ((uint32_t)0x00080000)
#define CAN_F5R1_FB20 ((uint32_t)0x00100000)
#define CAN_F5R1_FB21 ((uint32_t)0x00200000)
#define CAN_F5R1_FB22 ((uint32_t)0x00400000)
#define CAN_F5R1_FB23 ((uint32_t)0x00800000)
#define CAN_F5R1_FB24 ((uint32_t)0x01000000)
#define CAN_F5R1_FB25 ((uint32_t)0x02000000)
#define CAN_F5R1_FB26 ((uint32_t)0x04000000)
#define CAN_F5R1_FB27 ((uint32_t)0x08000000)
#define CAN_F5R1_FB28 ((uint32_t)0x10000000)
#define CAN_F5R1_FB29 ((uint32_t)0x20000000)
#define CAN_F5R1_FB30 ((uint32_t)0x40000000)
#define CAN_F5R1_FB31 ((uint32_t)0x80000000)


#define CAN_F6R1_FB0 ((uint32_t)0x00000001)
#define CAN_F6R1_FB1 ((uint32_t)0x00000002)
#define CAN_F6R1_FB2 ((uint32_t)0x00000004)
#define CAN_F6R1_FB3 ((uint32_t)0x00000008)
#define CAN_F6R1_FB4 ((uint32_t)0x00000010)
#define CAN_F6R1_FB5 ((uint32_t)0x00000020)
#define CAN_F6R1_FB6 ((uint32_t)0x00000040)
#define CAN_F6R1_FB7 ((uint32_t)0x00000080)
#define CAN_F6R1_FB8 ((uint32_t)0x00000100)
#define CAN_F6R1_FB9 ((uint32_t)0x00000200)
#define CAN_F6R1_FB10 ((uint32_t)0x00000400)
#define CAN_F6R1_FB11 ((uint32_t)0x00000800)
#define CAN_F6R1_FB12 ((uint32_t)0x00001000)
#define CAN_F6R1_FB13 ((uint32_t)0x00002000)
#define CAN_F6R1_FB14 ((uint32_t)0x00004000)
#define CAN_F6R1_FB15 ((uint32_t)0x00008000)
#define CAN_F6R1_FB16 ((uint32_t)0x00010000)
#define CAN_F6R1_FB17 ((uint32_t)0x00020000)
#define CAN_F6R1_FB18 ((uint32_t)0x00040000)
#define CAN_F6R1_FB19 ((uint32_t)0x00080000)
#define CAN_F6R1_FB20 ((uint32_t)0x00100000)
#define CAN_F6R1_FB21 ((uint32_t)0x00200000)
#define CAN_F6R1_FB22 ((uint32_t)0x00400000)
#define CAN_F6R1_FB23 ((uint32_t)0x00800000)
#define CAN_F6R1_FB24 ((uint32_t)0x01000000)
#define CAN_F6R1_FB25 ((uint32_t)0x02000000)
#define CAN_F6R1_FB26 ((uint32_t)0x04000000)
#define CAN_F6R1_FB27 ((uint32_t)0x08000000)
#define CAN_F6R1_FB28 ((uint32_t)0x10000000)
#define CAN_F6R1_FB29 ((uint32_t)0x20000000)
#define CAN_F6R1_FB30 ((uint32_t)0x40000000)
#define CAN_F6R1_FB31 ((uint32_t)0x80000000)


#define CAN_F7R1_FB0 ((uint32_t)0x00000001)
#define CAN_F7R1_FB1 ((uint32_t)0x00000002)
#define CAN_F7R1_FB2 ((uint32_t)0x00000004)
#define CAN_F7R1_FB3 ((uint32_t)0x00000008)
#define CAN_F7R1_FB4 ((uint32_t)0x00000010)
#define CAN_F7R1_FB5 ((uint32_t)0x00000020)
#define CAN_F7R1_FB6 ((uint32_t)0x00000040)
#define CAN_F7R1_FB7 ((uint32_t)0x00000080)
#define CAN_F7R1_FB8 ((uint32_t)0x00000100)
#define CAN_F7R1_FB9 ((uint32_t)0x00000200)
#define CAN_F7R1_FB10 ((uint32_t)0x00000400)
#define CAN_F7R1_FB11 ((uint32_t)0x00000800)
#define CAN_F7R1_FB12 ((uint32_t)0x00001000)
#define CAN_F7R1_FB13 ((uint32_t)0x00002000)
#define CAN_F7R1_FB14 ((uint32_t)0x00004000)
#define CAN_F7R1_FB15 ((uint32_t)0x00008000)
#define CAN_F7R1_FB16 ((uint32_t)0x00010000)
#define CAN_F7R1_FB17 ((uint32_t)0x00020000)
#define CAN_F7R1_FB18 ((uint32_t)0x00040000)
#define CAN_F7R1_FB19 ((uint32_t)0x00080000)
#define CAN_F7R1_FB20 ((uint32_t)0x00100000)
#define CAN_F7R1_FB21 ((uint32_t)0x00200000)
#define CAN_F7R1_FB22 ((uint32_t)0x00400000)
#define CAN_F7R1_FB23 ((uint32_t)0x00800000)
#define CAN_F7R1_FB24 ((uint32_t)0x01000000)
#define CAN_F7R1_FB25 ((uint32_t)0x02000000)
#define CAN_F7R1_FB26 ((uint32_t)0x04000000)
#define CAN_F7R1_FB27 ((uint32_t)0x08000000)
#define CAN_F7R1_FB28 ((uint32_t)0x10000000)
#define CAN_F7R1_FB29 ((uint32_t)0x20000000)
#define CAN_F7R1_FB30 ((uint32_t)0x40000000)
#define CAN_F7R1_FB31 ((uint32_t)0x80000000)


#define CAN_F8R1_FB0 ((uint32_t)0x00000001)
#define CAN_F8R1_FB1 ((uint32_t)0x00000002)
#define CAN_F8R1_FB2 ((uint32_t)0x00000004)
#define CAN_F8R1_FB3 ((uint32_t)0x00000008)
#define CAN_F8R1_FB4 ((uint32_t)0x00000010)
#define CAN_F8R1_FB5 ((uint32_t)0x00000020)
#define CAN_F8R1_FB6 ((uint32_t)0x00000040)
#define CAN_F8R1_FB7 ((uint32_t)0x00000080)
#define CAN_F8R1_FB8 ((uint32_t)0x00000100)
#define CAN_F8R1_FB9 ((uint32_t)0x00000200)
#define CAN_F8R1_FB10 ((uint32_t)0x00000400)
#define CAN_F8R1_FB11 ((uint32_t)0x00000800)
#define CAN_F8R1_FB12 ((uint32_t)0x00001000)
#define CAN_F8R1_FB13 ((uint32_t)0x00002000)
#define CAN_F8R1_FB14 ((uint32_t)0x00004000)
#define CAN_F8R1_FB15 ((uint32_t)0x00008000)
#define CAN_F8R1_FB16 ((uint32_t)0x00010000)
#define CAN_F8R1_FB17 ((uint32_t)0x00020000)
#define CAN_F8R1_FB18 ((uint32_t)0x00040000)
#define CAN_F8R1_FB19 ((uint32_t)0x00080000)
#define CAN_F8R1_FB20 ((uint32_t)0x00100000)
#define CAN_F8R1_FB21 ((uint32_t)0x00200000)
#define CAN_F8R1_FB22 ((uint32_t)0x00400000)
#define CAN_F8R1_FB23 ((uint32_t)0x00800000)
#define CAN_F8R1_FB24 ((uint32_t)0x01000000)
#define CAN_F8R1_FB25 ((uint32_t)0x02000000)
#define CAN_F8R1_FB26 ((uint32_t)0x04000000)
#define CAN_F8R1_FB27 ((uint32_t)0x08000000)
#define CAN_F8R1_FB28 ((uint32_t)0x10000000)
#define CAN_F8R1_FB29 ((uint32_t)0x20000000)
#define CAN_F8R1_FB30 ((uint32_t)0x40000000)
#define CAN_F8R1_FB31 ((uint32_t)0x80000000)


#define CAN_F9R1_FB0 ((uint32_t)0x00000001)
#define CAN_F9R1_FB1 ((uint32_t)0x00000002)
#define CAN_F9R1_FB2 ((uint32_t)0x00000004)
#define CAN_F9R1_FB3 ((uint32_t)0x00000008)
#define CAN_F9R1_FB4 ((uint32_t)0x00000010)
#define CAN_F9R1_FB5 ((uint32_t)0x00000020)
#define CAN_F9R1_FB6 ((uint32_t)0x00000040)
#define CAN_F9R1_FB7 ((uint32_t)0x00000080)
#define CAN_F9R1_FB8 ((uint32_t)0x00000100)
#define CAN_F9R1_FB9 ((uint32_t)0x00000200)
#define CAN_F9R1_FB10 ((uint32_t)0x00000400)
#define CAN_F9R1_FB11 ((uint32_t)0x00000800)
#define CAN_F9R1_FB12 ((uint32_t)0x00001000)
#define CAN_F9R1_FB13 ((uint32_t)0x00002000)
#define CAN_F9R1_FB14 ((uint32_t)0x00004000)
#define CAN_F9R1_FB15 ((uint32_t)0x00008000)
#define CAN_F9R1_FB16 ((uint32_t)0x00010000)
#define CAN_F9R1_FB17 ((uint32_t)0x00020000)
#define CAN_F9R1_FB18 ((uint32_t)0x00040000)
#define CAN_F9R1_FB19 ((uint32_t)0x00080000)
#define CAN_F9R1_FB20 ((uint32_t)0x00100000)
#define CAN_F9R1_FB21 ((uint32_t)0x00200000)
#define CAN_F9R1_FB22 ((uint32_t)0x00400000)
#define CAN_F9R1_FB23 ((uint32_t)0x00800000)
#define CAN_F9R1_FB24 ((uint32_t)0x01000000)
#define CAN_F9R1_FB25 ((uint32_t)0x02000000)
#define CAN_F9R1_FB26 ((uint32_t)0x04000000)
#define CAN_F9R1_FB27 ((uint32_t)0x08000000)
#define CAN_F9R1_FB28 ((uint32_t)0x10000000)
#define CAN_F9R1_FB29 ((uint32_t)0x20000000)
#define CAN_F9R1_FB30 ((uint32_t)0x40000000)
#define CAN_F9R1_FB31 ((uint32_t)0x80000000)


#define CAN_F10R1_FB0 ((uint32_t)0x00000001)
#define CAN_F10R1_FB1 ((uint32_t)0x00000002)
#define CAN_F10R1_FB2 ((uint32_t)0x00000004)
#define CAN_F10R1_FB3 ((uint32_t)0x00000008)
#define CAN_F10R1_FB4 ((uint32_t)0x00000010)
#define CAN_F10R1_FB5 ((uint32_t)0x00000020)
#define CAN_F10R1_FB6 ((uint32_t)0x00000040)
#define CAN_F10R1_FB7 ((uint32_t)0x00000080)
#define CAN_F10R1_FB8 ((uint32_t)0x00000100)
#define CAN_F10R1_FB9 ((uint32_t)0x00000200)
#define CAN_F10R1_FB10 ((uint32_t)0x00000400)
#define CAN_F10R1_FB11 ((uint32_t)0x00000800)
#define CAN_F10R1_FB12 ((uint32_t)0x00001000)
#define CAN_F10R1_FB13 ((uint32_t)0x00002000)
#define CAN_F10R1_FB14 ((uint32_t)0x00004000)
#define CAN_F10R1_FB15 ((uint32_t)0x00008000)
#define CAN_F10R1_FB16 ((uint32_t)0x00010000)
#define CAN_F10R1_FB17 ((uint32_t)0x00020000)
#define CAN_F10R1_FB18 ((uint32_t)0x00040000)
#define CAN_F10R1_FB19 ((uint32_t)0x00080000)
#define CAN_F10R1_FB20 ((uint32_t)0x00100000)
#define CAN_F10R1_FB21 ((uint32_t)0x00200000)
#define CAN_F10R1_FB22 ((uint32_t)0x00400000)
#define CAN_F10R1_FB23 ((uint32_t)0x00800000)
#define CAN_F10R1_FB24 ((uint32_t)0x01000000)
#define CAN_F10R1_FB25 ((uint32_t)0x02000000)
#define CAN_F10R1_FB26 ((uint32_t)0x04000000)
#define CAN_F10R1_FB27 ((uint32_t)0x08000000)
#define CAN_F10R1_FB28 ((uint32_t)0x10000000)
#define CAN_F10R1_FB29 ((uint32_t)0x20000000)
#define CAN_F10R1_FB30 ((uint32_t)0x40000000)
#define CAN_F10R1_FB31 ((uint32_t)0x80000000)


#define CAN_F11R1_FB0 ((uint32_t)0x00000001)
#define CAN_F11R1_FB1 ((uint32_t)0x00000002)
#define CAN_F11R1_FB2 ((uint32_t)0x00000004)
#define CAN_F11R1_FB3 ((uint32_t)0x00000008)
#define CAN_F11R1_FB4 ((uint32_t)0x00000010)
#define CAN_F11R1_FB5 ((uint32_t)0x00000020)
#define CAN_F11R1_FB6 ((uint32_t)0x00000040)
#define CAN_F11R1_FB7 ((uint32_t)0x00000080)
#define CAN_F11R1_FB8 ((uint32_t)0x00000100)
#define CAN_F11R1_FB9 ((uint32_t)0x00000200)
#define CAN_F11R1_FB10 ((uint32_t)0x00000400)
#define CAN_F11R1_FB11 ((uint32_t)0x00000800)
#define CAN_F11R1_FB12 ((uint32_t)0x00001000)
#define CAN_F11R1_FB13 ((uint32_t)0x00002000)
#define CAN_F11R1_FB14 ((uint32_t)0x00004000)
#define CAN_F11R1_FB15 ((uint32_t)0x00008000)
#define CAN_F11R1_FB16 ((uint32_t)0x00010000)
#define CAN_F11R1_FB17 ((uint32_t)0x00020000)
#define CAN_F11R1_FB18 ((uint32_t)0x00040000)
#define CAN_F11R1_FB19 ((uint32_t)0x00080000)
#define CAN_F11R1_FB20 ((uint32_t)0x00100000)
#define CAN_F11R1_FB21 ((uint32_t)0x00200000)
#define CAN_F11R1_FB22 ((uint32_t)0x00400000)
#define CAN_F11R1_FB23 ((uint32_t)0x00800000)
#define CAN_F11R1_FB24 ((uint32_t)0x01000000)
#define CAN_F11R1_FB25 ((uint32_t)0x02000000)
#define CAN_F11R1_FB26 ((uint32_t)0x04000000)
#define CAN_F11R1_FB27 ((uint32_t)0x08000000)
#define CAN_F11R1_FB28 ((uint32_t)0x10000000)
#define CAN_F11R1_FB29 ((uint32_t)0x20000000)
#define CAN_F11R1_FB30 ((uint32_t)0x40000000)
#define CAN_F11R1_FB31 ((uint32_t)0x80000000)


#define CAN_F12R1_FB0 ((uint32_t)0x00000001)
#define CAN_F12R1_FB1 ((uint32_t)0x00000002)
#define CAN_F12R1_FB2 ((uint32_t)0x00000004)
#define CAN_F12R1_FB3 ((uint32_t)0x00000008)
#define CAN_F12R1_FB4 ((uint32_t)0x00000010)
#define CAN_F12R1_FB5 ((uint32_t)0x00000020)
#define CAN_F12R1_FB6 ((uint32_t)0x00000040)
#define CAN_F12R1_FB7 ((uint32_t)0x00000080)
#define CAN_F12R1_FB8 ((uint32_t)0x00000100)
#define CAN_F12R1_FB9 ((uint32_t)0x00000200)
#define CAN_F12R1_FB10 ((uint32_t)0x00000400)
#define CAN_F12R1_FB11 ((uint32_t)0x00000800)
#define CAN_F12R1_FB12 ((uint32_t)0x00001000)
#define CAN_F12R1_FB13 ((uint32_t)0x00002000)
#define CAN_F12R1_FB14 ((uint32_t)0x00004000)
#define CAN_F12R1_FB15 ((uint32_t)0x00008000)
#define CAN_F12R1_FB16 ((uint32_t)0x00010000)
#define CAN_F12R1_FB17 ((uint32_t)0x00020000)
#define CAN_F12R1_FB18 ((uint32_t)0x00040000)
#define CAN_F12R1_FB19 ((uint32_t)0x00080000)
#define CAN_F12R1_FB20 ((uint32_t)0x00100000)
#define CAN_F12R1_FB21 ((uint32_t)0x00200000)
#define CAN_F12R1_FB22 ((uint32_t)0x00400000)
#define CAN_F12R1_FB23 ((uint32_t)0x00800000)
#define CAN_F12R1_FB24 ((uint32_t)0x01000000)
#define CAN_F12R1_FB25 ((uint32_t)0x02000000)
#define CAN_F12R1_FB26 ((uint32_t)0x04000000)
#define CAN_F12R1_FB27 ((uint32_t)0x08000000)
#define CAN_F12R1_FB28 ((uint32_t)0x10000000)
#define CAN_F12R1_FB29 ((uint32_t)0x20000000)
#define CAN_F12R1_FB30 ((uint32_t)0x40000000)
#define CAN_F12R1_FB31 ((uint32_t)0x80000000)


#define CAN_F13R1_FB0 ((uint32_t)0x00000001)
#define CAN_F13R1_FB1 ((uint32_t)0x00000002)
#define CAN_F13R1_FB2 ((uint32_t)0x00000004)
#define CAN_F13R1_FB3 ((uint32_t)0x00000008)
#define CAN_F13R1_FB4 ((uint32_t)0x00000010)
#define CAN_F13R1_FB5 ((uint32_t)0x00000020)
#define CAN_F13R1_FB6 ((uint32_t)0x00000040)
#define CAN_F13R1_FB7 ((uint32_t)0x00000080)
#define CAN_F13R1_FB8 ((uint32_t)0x00000100)
#define CAN_F13R1_FB9 ((uint32_t)0x00000200)
#define CAN_F13R1_FB10 ((uint32_t)0x00000400)
#define CAN_F13R1_FB11 ((uint32_t)0x00000800)
#define CAN_F13R1_FB12 ((uint32_t)0x00001000)
#define CAN_F13R1_FB13 ((uint32_t)0x00002000)
#define CAN_F13R1_FB14 ((uint32_t)0x00004000)
#define CAN_F13R1_FB15 ((uint32_t)0x00008000)
#define CAN_F13R1_FB16 ((uint32_t)0x00010000)
#define CAN_F13R1_FB17 ((uint32_t)0x00020000)
#define CAN_F13R1_FB18 ((uint32_t)0x00040000)
#define CAN_F13R1_FB19 ((uint32_t)0x00080000)
#define CAN_F13R1_FB20 ((uint32_t)0x00100000)
#define CAN_F13R1_FB21 ((uint32_t)0x00200000)
#define CAN_F13R1_FB22 ((uint32_t)0x00400000)
#define CAN_F13R1_FB23 ((uint32_t)0x00800000)
#define CAN_F13R1_FB24 ((uint32_t)0x01000000)
#define CAN_F13R1_FB25 ((uint32_t)0x02000000)
#define CAN_F13R1_FB26 ((uint32_t)0x04000000)
#define CAN_F13R1_FB27 ((uint32_t)0x08000000)
#define CAN_F13R1_FB28 ((uint32_t)0x10000000)
#define CAN_F13R1_FB29 ((uint32_t)0x20000000)
#define CAN_F13R1_FB30 ((uint32_t)0x40000000)
#define CAN_F13R1_FB31 ((uint32_t)0x80000000)


#define CAN_F0R2_FB0 ((uint32_t)0x00000001)
#define CAN_F0R2_FB1 ((uint32_t)0x00000002)
#define CAN_F0R2_FB2 ((uint32_t)0x00000004)
#define CAN_F0R2_FB3 ((uint32_t)0x00000008)
#define CAN_F0R2_FB4 ((uint32_t)0x00000010)
#define CAN_F0R2_FB5 ((uint32_t)0x00000020)
#define CAN_F0R2_FB6 ((uint32_t)0x00000040)
#define CAN_F0R2_FB7 ((uint32_t)0x00000080)
#define CAN_F0R2_FB8 ((uint32_t)0x00000100)
#define CAN_F0R2_FB9 ((uint32_t)0x00000200)
#define CAN_F0R2_FB10 ((uint32_t)0x00000400)
#define CAN_F0R2_FB11 ((uint32_t)0x00000800)
#define CAN_F0R2_FB12 ((uint32_t)0x00001000)
#define CAN_F0R2_FB13 ((uint32_t)0x00002000)
#define CAN_F0R2_FB14 ((uint32_t)0x00004000)
#define CAN_F0R2_FB15 ((uint32_t)0x00008000)
#define CAN_F0R2_FB16 ((uint32_t)0x00010000)
#define CAN_F0R2_FB17 ((uint32_t)0x00020000)
#define CAN_F0R2_FB18 ((uint32_t)0x00040000)
#define CAN_F0R2_FB19 ((uint32_t)0x00080000)
#define CAN_F0R2_FB20 ((uint32_t)0x00100000)
#define CAN_F0R2_FB21 ((uint32_t)0x00200000)
#define CAN_F0R2_FB22 ((uint32_t)0x00400000)
#define CAN_F0R2_FB23 ((uint32_t)0x00800000)
#define CAN_F0R2_FB24 ((uint32_t)0x01000000)
#define CAN_F0R2_FB25 ((uint32_t)0x02000000)
#define CAN_F0R2_FB26 ((uint32_t)0x04000000)
#define CAN_F0R2_FB27 ((uint32_t)0x08000000)
#define CAN_F0R2_FB28 ((uint32_t)0x10000000)
#define CAN_F0R2_FB29 ((uint32_t)0x20000000)
#define CAN_F0R2_FB30 ((uint32_t)0x40000000)
#define CAN_F0R2_FB31 ((uint32_t)0x80000000)


#define CAN_F1R2_FB0 ((uint32_t)0x00000001)
#define CAN_F1R2_FB1 ((uint32_t)0x00000002)
#define CAN_F1R2_FB2 ((uint32_t)0x00000004)
#define CAN_F1R2_FB3 ((uint32_t)0x00000008)
#define CAN_F1R2_FB4 ((uint32_t)0x00000010)
#define CAN_F1R2_FB5 ((uint32_t)0x00000020)
#define CAN_F1R2_FB6 ((uint32_t)0x00000040)
#define CAN_F1R2_FB7 ((uint32_t)0x00000080)
#define CAN_F1R2_FB8 ((uint32_t)0x00000100)
#define CAN_F1R2_FB9 ((uint32_t)0x00000200)
#define CAN_F1R2_FB10 ((uint32_t)0x00000400)
#define CAN_F1R2_FB11 ((uint32_t)0x00000800)
#define CAN_F1R2_FB12 ((uint32_t)0x00001000)
#define CAN_F1R2_FB13 ((uint32_t)0x00002000)
#define CAN_F1R2_FB14 ((uint32_t)0x00004000)
#define CAN_F1R2_FB15 ((uint32_t)0x00008000)
#define CAN_F1R2_FB16 ((uint32_t)0x00010000)
#define CAN_F1R2_FB17 ((uint32_t)0x00020000)
#define CAN_F1R2_FB18 ((uint32_t)0x00040000)
#define CAN_F1R2_FB19 ((uint32_t)0x00080000)
#define CAN_F1R2_FB20 ((uint32_t)0x00100000)
#define CAN_F1R2_FB21 ((uint32_t)0x00200000)
#define CAN_F1R2_FB22 ((uint32_t)0x00400000)
#define CAN_F1R2_FB23 ((uint32_t)0x00800000)
#define CAN_F1R2_FB24 ((uint32_t)0x01000000)
#define CAN_F1R2_FB25 ((uint32_t)0x02000000)
#define CAN_F1R2_FB26 ((uint32_t)0x04000000)
#define CAN_F1R2_FB27 ((uint32_t)0x08000000)
#define CAN_F1R2_FB28 ((uint32_t)0x10000000)
#define CAN_F1R2_FB29 ((uint32_t)0x20000000)
#define CAN_F1R2_FB30 ((uint32_t)0x40000000)
#define CAN_F1R2_FB31 ((uint32_t)0x80000000)


#define CAN_F2R2_FB0 ((uint32_t)0x00000001)
#define CAN_F2R2_FB1 ((uint32_t)0x00000002)
#define CAN_F2R2_FB2 ((uint32_t)0x00000004)
#define CAN_F2R2_FB3 ((uint32_t)0x00000008)
#define CAN_F2R2_FB4 ((uint32_t)0x00000010)
#define CAN_F2R2_FB5 ((uint32_t)0x00000020)
#define CAN_F2R2_FB6 ((uint32_t)0x00000040)
#define CAN_F2R2_FB7 ((uint32_t)0x00000080)
#define CAN_F2R2_FB8 ((uint32_t)0x00000100)
#define CAN_F2R2_FB9 ((uint32_t)0x00000200)
#define CAN_F2R2_FB10 ((uint32_t)0x00000400)
#define CAN_F2R2_FB11 ((uint32_t)0x00000800)
#define CAN_F2R2_FB12 ((uint32_t)0x00001000)
#define CAN_F2R2_FB13 ((uint32_t)0x00002000)
#define CAN_F2R2_FB14 ((uint32_t)0x00004000)
#define CAN_F2R2_FB15 ((uint32_t)0x00008000)
#define CAN_F2R2_FB16 ((uint32_t)0x00010000)
#define CAN_F2R2_FB17 ((uint32_t)0x00020000)
#define CAN_F2R2_FB18 ((uint32_t)0x00040000)
#define CAN_F2R2_FB19 ((uint32_t)0x00080000)
#define CAN_F2R2_FB20 ((uint32_t)0x00100000)
#define CAN_F2R2_FB21 ((uint32_t)0x00200000)
#define CAN_F2R2_FB22 ((uint32_t)0x00400000)
#define CAN_F2R2_FB23 ((uint32_t)0x00800000)
#define CAN_F2R2_FB24 ((uint32_t)0x01000000)
#define CAN_F2R2_FB25 ((uint32_t)0x02000000)
#define CAN_F2R2_FB26 ((uint32_t)0x04000000)
#define CAN_F2R2_FB27 ((uint32_t)0x08000000)
#define CAN_F2R2_FB28 ((uint32_t)0x10000000)
#define CAN_F2R2_FB29 ((uint32_t)0x20000000)
#define CAN_F2R2_FB30 ((uint32_t)0x40000000)
#define CAN_F2R2_FB31 ((uint32_t)0x80000000)


#define CAN_F3R2_FB0 ((uint32_t)0x00000001)
#define CAN_F3R2_FB1 ((uint32_t)0x00000002)
#define CAN_F3R2_FB2 ((uint32_t)0x00000004)
#define CAN_F3R2_FB3 ((uint32_t)0x00000008)
#define CAN_F3R2_FB4 ((uint32_t)0x00000010)
#define CAN_F3R2_FB5 ((uint32_t)0x00000020)
#define CAN_F3R2_FB6 ((uint32_t)0x00000040)
#define CAN_F3R2_FB7 ((uint32_t)0x00000080)
#define CAN_F3R2_FB8 ((uint32_t)0x00000100)
#define CAN_F3R2_FB9 ((uint32_t)0x00000200)
#define CAN_F3R2_FB10 ((uint32_t)0x00000400)
#define CAN_F3R2_FB11 ((uint32_t)0x00000800)
#define CAN_F3R2_FB12 ((uint32_t)0x00001000)
#define CAN_F3R2_FB13 ((uint32_t)0x00002000)
#define CAN_F3R2_FB14 ((uint32_t)0x00004000)
#define CAN_F3R2_FB15 ((uint32_t)0x00008000)
#define CAN_F3R2_FB16 ((uint32_t)0x00010000)
#define CAN_F3R2_FB17 ((uint32_t)0x00020000)
#define CAN_F3R2_FB18 ((uint32_t)0x00040000)
#define CAN_F3R2_FB19 ((uint32_t)0x00080000)
#define CAN_F3R2_FB20 ((uint32_t)0x00100000)
#define CAN_F3R2_FB21 ((uint32_t)0x00200000)
#define CAN_F3R2_FB22 ((uint32_t)0x00400000)
#define CAN_F3R2_FB23 ((uint32_t)0x00800000)
#define CAN_F3R2_FB24 ((uint32_t)0x01000000)
#define CAN_F3R2_FB25 ((uint32_t)0x02000000)
#define CAN_F3R2_FB26 ((uint32_t)0x04000000)
#define CAN_F3R2_FB27 ((uint32_t)0x08000000)
#define CAN_F3R2_FB28 ((uint32_t)0x10000000)
#define CAN_F3R2_FB29 ((uint32_t)0x20000000)
#define CAN_F3R2_FB30 ((uint32_t)0x40000000)
#define CAN_F3R2_FB31 ((uint32_t)0x80000000)


#define CAN_F4R2_FB0 ((uint32_t)0x00000001)
#define CAN_F4R2_FB1 ((uint32_t)0x00000002)
#define CAN_F4R2_FB2 ((uint32_t)0x00000004)
#define CAN_F4R2_FB3 ((uint32_t)0x00000008)
#define CAN_F4R2_FB4 ((uint32_t)0x00000010)
#define CAN_F4R2_FB5 ((uint32_t)0x00000020)
#define CAN_F4R2_FB6 ((uint32_t)0x00000040)
#define CAN_F4R2_FB7 ((uint32_t)0x00000080)
#define CAN_F4R2_FB8 ((uint32_t)0x00000100)
#define CAN_F4R2_FB9 ((uint32_t)0x00000200)
#define CAN_F4R2_FB10 ((uint32_t)0x00000400)
#define CAN_F4R2_FB11 ((uint32_t)0x00000800)
#define CAN_F4R2_FB12 ((uint32_t)0x00001000)
#define CAN_F4R2_FB13 ((uint32_t)0x00002000)
#define CAN_F4R2_FB14 ((uint32_t)0x00004000)
#define CAN_F4R2_FB15 ((uint32_t)0x00008000)
#define CAN_F4R2_FB16 ((uint32_t)0x00010000)
#define CAN_F4R2_FB17 ((uint32_t)0x00020000)
#define CAN_F4R2_FB18 ((uint32_t)0x00040000)
#define CAN_F4R2_FB19 ((uint32_t)0x00080000)
#define CAN_F4R2_FB20 ((uint32_t)0x00100000)
#define CAN_F4R2_FB21 ((uint32_t)0x00200000)
#define CAN_F4R2_FB22 ((uint32_t)0x00400000)
#define CAN_F4R2_FB23 ((uint32_t)0x00800000)
#define CAN_F4R2_FB24 ((uint32_t)0x01000000)
#define CAN_F4R2_FB25 ((uint32_t)0x02000000)
#define CAN_F4R2_FB26 ((uint32_t)0x04000000)
#define CAN_F4R2_FB27 ((uint32_t)0x08000000)
#define CAN_F4R2_FB28 ((uint32_t)0x10000000)
#define CAN_F4R2_FB29 ((uint32_t)0x20000000)
#define CAN_F4R2_FB30 ((uint32_t)0x40000000)
#define CAN_F4R2_FB31 ((uint32_t)0x80000000)


#define CAN_F5R2_FB0 ((uint32_t)0x00000001)
#define CAN_F5R2_FB1 ((uint32_t)0x00000002)
#define CAN_F5R2_FB2 ((uint32_t)0x00000004)
#define CAN_F5R2_FB3 ((uint32_t)0x00000008)
#define CAN_F5R2_FB4 ((uint32_t)0x00000010)
#define CAN_F5R2_FB5 ((uint32_t)0x00000020)
#define CAN_F5R2_FB6 ((uint32_t)0x00000040)
#define CAN_F5R2_FB7 ((uint32_t)0x00000080)
#define CAN_F5R2_FB8 ((uint32_t)0x00000100)
#define CAN_F5R2_FB9 ((uint32_t)0x00000200)
#define CAN_F5R2_FB10 ((uint32_t)0x00000400)
#define CAN_F5R2_FB11 ((uint32_t)0x00000800)
#define CAN_F5R2_FB12 ((uint32_t)0x00001000)
#define CAN_F5R2_FB13 ((uint32_t)0x00002000)
#define CAN_F5R2_FB14 ((uint32_t)0x00004000)
#define CAN_F5R2_FB15 ((uint32_t)0x00008000)
#define CAN_F5R2_FB16 ((uint32_t)0x00010000)
#define CAN_F5R2_FB17 ((uint32_t)0x00020000)
#define CAN_F5R2_FB18 ((uint32_t)0x00040000)
#define CAN_F5R2_FB19 ((uint32_t)0x00080000)
#define CAN_F5R2_FB20 ((uint32_t)0x00100000)
#define CAN_F5R2_FB21 ((uint32_t)0x00200000)
#define CAN_F5R2_FB22 ((uint32_t)0x00400000)
#define CAN_F5R2_FB23 ((uint32_t)0x00800000)
#define CAN_F5R2_FB24 ((uint32_t)0x01000000)
#define CAN_F5R2_FB25 ((uint32_t)0x02000000)
#define CAN_F5R2_FB26 ((uint32_t)0x04000000)
#define CAN_F5R2_FB27 ((uint32_t)0x08000000)
#define CAN_F5R2_FB28 ((uint32_t)0x10000000)
#define CAN_F5R2_FB29 ((uint32_t)0x20000000)
#define CAN_F5R2_FB30 ((uint32_t)0x40000000)
#define CAN_F5R2_FB31 ((uint32_t)0x80000000)


#define CAN_F6R2_FB0 ((uint32_t)0x00000001)
#define CAN_F6R2_FB1 ((uint32_t)0x00000002)
#define CAN_F6R2_FB2 ((uint32_t)0x00000004)
#define CAN_F6R2_FB3 ((uint32_t)0x00000008)
#define CAN_F6R2_FB4 ((uint32_t)0x00000010)
#define CAN_F6R2_FB5 ((uint32_t)0x00000020)
#define CAN_F6R2_FB6 ((uint32_t)0x00000040)
#define CAN_F6R2_FB7 ((uint32_t)0x00000080)
#define CAN_F6R2_FB8 ((uint32_t)0x00000100)
#define CAN_F6R2_FB9 ((uint32_t)0x00000200)
#define CAN_F6R2_FB10 ((uint32_t)0x00000400)
#define CAN_F6R2_FB11 ((uint32_t)0x00000800)
#define CAN_F6R2_FB12 ((uint32_t)0x00001000)
#define CAN_F6R2_FB13 ((uint32_t)0x00002000)
#define CAN_F6R2_FB14 ((uint32_t)0x00004000)
#define CAN_F6R2_FB15 ((uint32_t)0x00008000)
#define CAN_F6R2_FB16 ((uint32_t)0x00010000)
#define CAN_F6R2_FB17 ((uint32_t)0x00020000)
#define CAN_F6R2_FB18 ((uint32_t)0x00040000)
#define CAN_F6R2_FB19 ((uint32_t)0x00080000)
#define CAN_F6R2_FB20 ((uint32_t)0x00100000)
#define CAN_F6R2_FB21 ((uint32_t)0x00200000)
#define CAN_F6R2_FB22 ((uint32_t)0x00400000)
#define CAN_F6R2_FB23 ((uint32_t)0x00800000)
#define CAN_F6R2_FB24 ((uint32_t)0x01000000)
#define CAN_F6R2_FB25 ((uint32_t)0x02000000)
#define CAN_F6R2_FB26 ((uint32_t)0x04000000)
#define CAN_F6R2_FB27 ((uint32_t)0x08000000)
#define CAN_F6R2_FB28 ((uint32_t)0x10000000)
#define CAN_F6R2_FB29 ((uint32_t)0x20000000)
#define CAN_F6R2_FB30 ((uint32_t)0x40000000)
#define CAN_F6R2_FB31 ((uint32_t)0x80000000)


#define CAN_F7R2_FB0 ((uint32_t)0x00000001)
#define CAN_F7R2_FB1 ((uint32_t)0x00000002)
#define CAN_F7R2_FB2 ((uint32_t)0x00000004)
#define CAN_F7R2_FB3 ((uint32_t)0x00000008)
#define CAN_F7R2_FB4 ((uint32_t)0x00000010)
#define CAN_F7R2_FB5 ((uint32_t)0x00000020)
#define CAN_F7R2_FB6 ((uint32_t)0x00000040)
#define CAN_F7R2_FB7 ((uint32_t)0x00000080)
#define CAN_F7R2_FB8 ((uint32_t)0x00000100)
#define CAN_F7R2_FB9 ((uint32_t)0x00000200)
#define CAN_F7R2_FB10 ((uint32_t)0x00000400)
#define CAN_F7R2_FB11 ((uint32_t)0x00000800)
#define CAN_F7R2_FB12 ((uint32_t)0x00001000)
#define CAN_F7R2_FB13 ((uint32_t)0x00002000)
#define CAN_F7R2_FB14 ((uint32_t)0x00004000)
#define CAN_F7R2_FB15 ((uint32_t)0x00008000)
#define CAN_F7R2_FB16 ((uint32_t)0x00010000)
#define CAN_F7R2_FB17 ((uint32_t)0x00020000)
#define CAN_F7R2_FB18 ((uint32_t)0x00040000)
#define CAN_F7R2_FB19 ((uint32_t)0x00080000)
#define CAN_F7R2_FB20 ((uint32_t)0x00100000)
#define CAN_F7R2_FB21 ((uint32_t)0x00200000)
#define CAN_F7R2_FB22 ((uint32_t)0x00400000)
#define CAN_F7R2_FB23 ((uint32_t)0x00800000)
#define CAN_F7R2_FB24 ((uint32_t)0x01000000)
#define CAN_F7R2_FB25 ((uint32_t)0x02000000)
#define CAN_F7R2_FB26 ((uint32_t)0x04000000)
#define CAN_F7R2_FB27 ((uint32_t)0x08000000)
#define CAN_F7R2_FB28 ((uint32_t)0x10000000)
#define CAN_F7R2_FB29 ((uint32_t)0x20000000)
#define CAN_F7R2_FB30 ((uint32_t)0x40000000)
#define CAN_F7R2_FB31 ((uint32_t)0x80000000)


#define CAN_F8R2_FB0 ((uint32_t)0x00000001)
#define CAN_F8R2_FB1 ((uint32_t)0x00000002)
#define CAN_F8R2_FB2 ((uint32_t)0x00000004)
#define CAN_F8R2_FB3 ((uint32_t)0x00000008)
#define CAN_F8R2_FB4 ((uint32_t)0x00000010)
#define CAN_F8R2_FB5 ((uint32_t)0x00000020)
#define CAN_F8R2_FB6 ((uint32_t)0x00000040)
#define CAN_F8R2_FB7 ((uint32_t)0x00000080)
#define CAN_F8R2_FB8 ((uint32_t)0x00000100)
#define CAN_F8R2_FB9 ((uint32_t)0x00000200)
#define CAN_F8R2_FB10 ((uint32_t)0x00000400)
#define CAN_F8R2_FB11 ((uint32_t)0x00000800)
#define CAN_F8R2_FB12 ((uint32_t)0x00001000)
#define CAN_F8R2_FB13 ((uint32_t)0x00002000)
#define CAN_F8R2_FB14 ((uint32_t)0x00004000)
#define CAN_F8R2_FB15 ((uint32_t)0x00008000)
#define CAN_F8R2_FB16 ((uint32_t)0x00010000)
#define CAN_F8R2_FB17 ((uint32_t)0x00020000)
#define CAN_F8R2_FB18 ((uint32_t)0x00040000)
#define CAN_F8R2_FB19 ((uint32_t)0x00080000)
#define CAN_F8R2_FB20 ((uint32_t)0x00100000)
#define CAN_F8R2_FB21 ((uint32_t)0x00200000)
#define CAN_F8R2_FB22 ((uint32_t)0x00400000)
#define CAN_F8R2_FB23 ((uint32_t)0x00800000)
#define CAN_F8R2_FB24 ((uint32_t)0x01000000)
#define CAN_F8R2_FB25 ((uint32_t)0x02000000)
#define CAN_F8R2_FB26 ((uint32_t)0x04000000)
#define CAN_F8R2_FB27 ((uint32_t)0x08000000)
#define CAN_F8R2_FB28 ((uint32_t)0x10000000)
#define CAN_F8R2_FB29 ((uint32_t)0x20000000)
#define CAN_F8R2_FB30 ((uint32_t)0x40000000)
#define CAN_F8R2_FB31 ((uint32_t)0x80000000)


#define CAN_F9R2_FB0 ((uint32_t)0x00000001)
#define CAN_F9R2_FB1 ((uint32_t)0x00000002)
#define CAN_F9R2_FB2 ((uint32_t)0x00000004)
#define CAN_F9R2_FB3 ((uint32_t)0x00000008)
#define CAN_F9R2_FB4 ((uint32_t)0x00000010)
#define CAN_F9R2_FB5 ((uint32_t)0x00000020)
#define CAN_F9R2_FB6 ((uint32_t)0x00000040)
#define CAN_F9R2_FB7 ((uint32_t)0x00000080)
#define CAN_F9R2_FB8 ((uint32_t)0x00000100)
#define CAN_F9R2_FB9 ((uint32_t)0x00000200)
#define CAN_F9R2_FB10 ((uint32_t)0x00000400)
#define CAN_F9R2_FB11 ((uint32_t)0x00000800)
#define CAN_F9R2_FB12 ((uint32_t)0x00001000)
#define CAN_F9R2_FB13 ((uint32_t)0x00002000)
#define CAN_F9R2_FB14 ((uint32_t)0x00004000)
#define CAN_F9R2_FB15 ((uint32_t)0x00008000)
#define CAN_F9R2_FB16 ((uint32_t)0x00010000)
#define CAN_F9R2_FB17 ((uint32_t)0x00020000)
#define CAN_F9R2_FB18 ((uint32_t)0x00040000)
#define CAN_F9R2_FB19 ((uint32_t)0x00080000)
#define CAN_F9R2_FB20 ((uint32_t)0x00100000)
#define CAN_F9R2_FB21 ((uint32_t)0x00200000)
#define CAN_F9R2_FB22 ((uint32_t)0x00400000)
#define CAN_F9R2_FB23 ((uint32_t)0x00800000)
#define CAN_F9R2_FB24 ((uint32_t)0x01000000)
#define CAN_F9R2_FB25 ((uint32_t)0x02000000)
#define CAN_F9R2_FB26 ((uint32_t)0x04000000)
#define CAN_F9R2_FB27 ((uint32_t)0x08000000)
#define CAN_F9R2_FB28 ((uint32_t)0x10000000)
#define CAN_F9R2_FB29 ((uint32_t)0x20000000)
#define CAN_F9R2_FB30 ((uint32_t)0x40000000)
#define CAN_F9R2_FB31 ((uint32_t)0x80000000)


#define CAN_F10R2_FB0 ((uint32_t)0x00000001)
#define CAN_F10R2_FB1 ((uint32_t)0x00000002)
#define CAN_F10R2_FB2 ((uint32_t)0x00000004)
#define CAN_F10R2_FB3 ((uint32_t)0x00000008)
#define CAN_F10R2_FB4 ((uint32_t)0x00000010)
#define CAN_F10R2_FB5 ((uint32_t)0x00000020)
#define CAN_F10R2_FB6 ((uint32_t)0x00000040)
#define CAN_F10R2_FB7 ((uint32_t)0x00000080)
#define CAN_F10R2_FB8 ((uint32_t)0x00000100)
#define CAN_F10R2_FB9 ((uint32_t)0x00000200)
#define CAN_F10R2_FB10 ((uint32_t)0x00000400)
#define CAN_F10R2_FB11 ((uint32_t)0x00000800)
#define CAN_F10R2_FB12 ((uint32_t)0x00001000)
#define CAN_F10R2_FB13 ((uint32_t)0x00002000)
#define CAN_F10R2_FB14 ((uint32_t)0x00004000)
#define CAN_F10R2_FB15 ((uint32_t)0x00008000)
#define CAN_F10R2_FB16 ((uint32_t)0x00010000)
#define CAN_F10R2_FB17 ((uint32_t)0x00020000)
#define CAN_F10R2_FB18 ((uint32_t)0x00040000)
#define CAN_F10R2_FB19 ((uint32_t)0x00080000)
#define CAN_F10R2_FB20 ((uint32_t)0x00100000)
#define CAN_F10R2_FB21 ((uint32_t)0x00200000)
#define CAN_F10R2_FB22 ((uint32_t)0x00400000)
#define CAN_F10R2_FB23 ((uint32_t)0x00800000)
#define CAN_F10R2_FB24 ((uint32_t)0x01000000)
#define CAN_F10R2_FB25 ((uint32_t)0x02000000)
#define CAN_F10R2_FB26 ((uint32_t)0x04000000)
#define CAN_F10R2_FB27 ((uint32_t)0x08000000)
#define CAN_F10R2_FB28 ((uint32_t)0x10000000)
#define CAN_F10R2_FB29 ((uint32_t)0x20000000)
#define CAN_F10R2_FB30 ((uint32_t)0x40000000)
#define CAN_F10R2_FB31 ((uint32_t)0x80000000)


#define CAN_F11R2_FB0 ((uint32_t)0x00000001)
#define CAN_F11R2_FB1 ((uint32_t)0x00000002)
#define CAN_F11R2_FB2 ((uint32_t)0x00000004)
#define CAN_F11R2_FB3 ((uint32_t)0x00000008)
#define CAN_F11R2_FB4 ((uint32_t)0x00000010)
#define CAN_F11R2_FB5 ((uint32_t)0x00000020)
#define CAN_F11R2_FB6 ((uint32_t)0x00000040)
#define CAN_F11R2_FB7 ((uint32_t)0x00000080)
#define CAN_F11R2_FB8 ((uint32_t)0x00000100)
#define CAN_F11R2_FB9 ((uint32_t)0x00000200)
#define CAN_F11R2_FB10 ((uint32_t)0x00000400)
#define CAN_F11R2_FB11 ((uint32_t)0x00000800)
#define CAN_F11R2_FB12 ((uint32_t)0x00001000)
#define CAN_F11R2_FB13 ((uint32_t)0x00002000)
#define CAN_F11R2_FB14 ((uint32_t)0x00004000)
#define CAN_F11R2_FB15 ((uint32_t)0x00008000)
#define CAN_F11R2_FB16 ((uint32_t)0x00010000)
#define CAN_F11R2_FB17 ((uint32_t)0x00020000)
#define CAN_F11R2_FB18 ((uint32_t)0x00040000)
#define CAN_F11R2_FB19 ((uint32_t)0x00080000)
#define CAN_F11R2_FB20 ((uint32_t)0x00100000)
#define CAN_F11R2_FB21 ((uint32_t)0x00200000)
#define CAN_F11R2_FB22 ((uint32_t)0x00400000)
#define CAN_F11R2_FB23 ((uint32_t)0x00800000)
#define CAN_F11R2_FB24 ((uint32_t)0x01000000)
#define CAN_F11R2_FB25 ((uint32_t)0x02000000)
#define CAN_F11R2_FB26 ((uint32_t)0x04000000)
#define CAN_F11R2_FB27 ((uint32_t)0x08000000)
#define CAN_F11R2_FB28 ((uint32_t)0x10000000)
#define CAN_F11R2_FB29 ((uint32_t)0x20000000)
#define CAN_F11R2_FB30 ((uint32_t)0x40000000)
#define CAN_F11R2_FB31 ((uint32_t)0x80000000)


#define CAN_F12R2_FB0 ((uint32_t)0x00000001)
#define CAN_F12R2_FB1 ((uint32_t)0x00000002)
#define CAN_F12R2_FB2 ((uint32_t)0x00000004)
#define CAN_F12R2_FB3 ((uint32_t)0x00000008)
#define CAN_F12R2_FB4 ((uint32_t)0x00000010)
#define CAN_F12R2_FB5 ((uint32_t)0x00000020)
#define CAN_F12R2_FB6 ((uint32_t)0x00000040)
#define CAN_F12R2_FB7 ((uint32_t)0x00000080)
#define CAN_F12R2_FB8 ((uint32_t)0x00000100)
#define CAN_F12R2_FB9 ((uint32_t)0x00000200)
#define CAN_F12R2_FB10 ((uint32_t)0x00000400)
#define CAN_F12R2_FB11 ((uint32_t)0x00000800)
#define CAN_F12R2_FB12 ((uint32_t)0x00001000)
#define CAN_F12R2_FB13 ((uint32_t)0x00002000)
#define CAN_F12R2_FB14 ((uint32_t)0x00004000)
#define CAN_F12R2_FB15 ((uint32_t)0x00008000)
#define CAN_F12R2_FB16 ((uint32_t)0x00010000)
#define CAN_F12R2_FB17 ((uint32_t)0x00020000)
#define CAN_F12R2_FB18 ((uint32_t)0x00040000)
#define CAN_F12R2_FB19 ((uint32_t)0x00080000)
#define CAN_F12R2_FB20 ((uint32_t)0x00100000)
#define CAN_F12R2_FB21 ((uint32_t)0x00200000)
#define CAN_F12R2_FB22 ((uint32_t)0x00400000)
#define CAN_F12R2_FB23 ((uint32_t)0x00800000)
#define CAN_F12R2_FB24 ((uint32_t)0x01000000)
#define CAN_F12R2_FB25 ((uint32_t)0x02000000)
#define CAN_F12R2_FB26 ((uint32_t)0x04000000)
#define CAN_F12R2_FB27 ((uint32_t)0x08000000)
#define CAN_F12R2_FB28 ((uint32_t)0x10000000)
#define CAN_F12R2_FB29 ((uint32_t)0x20000000)
#define CAN_F12R2_FB30 ((uint32_t)0x40000000)
#define CAN_F12R2_FB31 ((uint32_t)0x80000000)


#define CAN_F13R2_FB0 ((uint32_t)0x00000001)
#define CAN_F13R2_FB1 ((uint32_t)0x00000002)
#define CAN_F13R2_FB2 ((uint32_t)0x00000004)
#define CAN_F13R2_FB3 ((uint32_t)0x00000008)
#define CAN_F13R2_FB4 ((uint32_t)0x00000010)
#define CAN_F13R2_FB5 ((uint32_t)0x00000020)
#define CAN_F13R2_FB6 ((uint32_t)0x00000040)
#define CAN_F13R2_FB7 ((uint32_t)0x00000080)
#define CAN_F13R2_FB8 ((uint32_t)0x00000100)
#define CAN_F13R2_FB9 ((uint32_t)0x00000200)
#define CAN_F13R2_FB10 ((uint32_t)0x00000400)
#define CAN_F13R2_FB11 ((uint32_t)0x00000800)
#define CAN_F13R2_FB12 ((uint32_t)0x00001000)
#define CAN_F13R2_FB13 ((uint32_t)0x00002000)
#define CAN_F13R2_FB14 ((uint32_t)0x00004000)
#define CAN_F13R2_FB15 ((uint32_t)0x00008000)
#define CAN_F13R2_FB16 ((uint32_t)0x00010000)
#define CAN_F13R2_FB17 ((uint32_t)0x00020000)
#define CAN_F13R2_FB18 ((uint32_t)0x00040000)
#define CAN_F13R2_FB19 ((uint32_t)0x00080000)
#define CAN_F13R2_FB20 ((uint32_t)0x00100000)
#define CAN_F13R2_FB21 ((uint32_t)0x00200000)
#define CAN_F13R2_FB22 ((uint32_t)0x00400000)
#define CAN_F13R2_FB23 ((uint32_t)0x00800000)
#define CAN_F13R2_FB24 ((uint32_t)0x01000000)
#define CAN_F13R2_FB25 ((uint32_t)0x02000000)
#define CAN_F13R2_FB26 ((uint32_t)0x04000000)
#define CAN_F13R2_FB27 ((uint32_t)0x08000000)
#define CAN_F13R2_FB28 ((uint32_t)0x10000000)
#define CAN_F13R2_FB29 ((uint32_t)0x20000000)
#define CAN_F13R2_FB30 ((uint32_t)0x40000000)
#define CAN_F13R2_FB31 ((uint32_t)0x80000000)
# 7467 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
#define SPI_CR1_CPHA ((uint16_t)0x0001)
#define SPI_CR1_CPOL ((uint16_t)0x0002)
#define SPI_CR1_MSTR ((uint16_t)0x0004)

#define SPI_CR1_BR ((uint16_t)0x0038)
#define SPI_CR1_BR_0 ((uint16_t)0x0008)
#define SPI_CR1_BR_1 ((uint16_t)0x0010)
#define SPI_CR1_BR_2 ((uint16_t)0x0020)

#define SPI_CR1_SPE ((uint16_t)0x0040)
#define SPI_CR1_LSBFIRST ((uint16_t)0x0080)
#define SPI_CR1_SSI ((uint16_t)0x0100)
#define SPI_CR1_SSM ((uint16_t)0x0200)
#define SPI_CR1_RXONLY ((uint16_t)0x0400)
#define SPI_CR1_DFF ((uint16_t)0x0800)
#define SPI_CR1_CRCNEXT ((uint16_t)0x1000)
#define SPI_CR1_CRCEN ((uint16_t)0x2000)
#define SPI_CR1_BIDIOE ((uint16_t)0x4000)
#define SPI_CR1_BIDIMODE ((uint16_t)0x8000)


#define SPI_CR2_RXDMAEN ((uint8_t)0x01)
#define SPI_CR2_TXDMAEN ((uint8_t)0x02)
#define SPI_CR2_SSOE ((uint8_t)0x04)
#define SPI_CR2_ERRIE ((uint8_t)0x20)
#define SPI_CR2_RXNEIE ((uint8_t)0x40)
#define SPI_CR2_TXEIE ((uint8_t)0x80)


#define SPI_SR_RXNE ((uint8_t)0x01)
#define SPI_SR_TXE ((uint8_t)0x02)
#define SPI_SR_CHSIDE ((uint8_t)0x04)
#define SPI_SR_UDR ((uint8_t)0x08)
#define SPI_SR_CRCERR ((uint8_t)0x10)
#define SPI_SR_MODF ((uint8_t)0x20)
#define SPI_SR_OVR ((uint8_t)0x40)
#define SPI_SR_BSY ((uint8_t)0x80)


#define SPI_DR_DR ((uint16_t)0xFFFF)


#define SPI_CRCPR_CRCPOLY ((uint16_t)0xFFFF)


#define SPI_RXCRCR_RXCRC ((uint16_t)0xFFFF)


#define SPI_TXCRCR_TXCRC ((uint16_t)0xFFFF)


#define SPI_I2SCFGR_CHLEN ((uint16_t)0x0001)

#define SPI_I2SCFGR_DATLEN ((uint16_t)0x0006)
#define SPI_I2SCFGR_DATLEN_0 ((uint16_t)0x0002)
#define SPI_I2SCFGR_DATLEN_1 ((uint16_t)0x0004)

#define SPI_I2SCFGR_CKPOL ((uint16_t)0x0008)

#define SPI_I2SCFGR_I2SSTD ((uint16_t)0x0030)
#define SPI_I2SCFGR_I2SSTD_0 ((uint16_t)0x0010)
#define SPI_I2SCFGR_I2SSTD_1 ((uint16_t)0x0020)

#define SPI_I2SCFGR_PCMSYNC ((uint16_t)0x0080)

#define SPI_I2SCFGR_I2SCFG ((uint16_t)0x0300)
#define SPI_I2SCFGR_I2SCFG_0 ((uint16_t)0x0100)
#define SPI_I2SCFGR_I2SCFG_1 ((uint16_t)0x0200)

#define SPI_I2SCFGR_I2SE ((uint16_t)0x0400)
#define SPI_I2SCFGR_I2SMOD ((uint16_t)0x0800)


#define SPI_I2SPR_I2SDIV ((uint16_t)0x00FF)
#define SPI_I2SPR_ODD ((uint16_t)0x0100)
#define SPI_I2SPR_MCKOE ((uint16_t)0x0200)
# 7551 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
#define I2C_CR1_PE ((uint16_t)0x0001)
#define I2C_CR1_SMBUS ((uint16_t)0x0002)
#define I2C_CR1_SMBTYPE ((uint16_t)0x0008)
#define I2C_CR1_ENARP ((uint16_t)0x0010)
#define I2C_CR1_ENPEC ((uint16_t)0x0020)
#define I2C_CR1_ENGC ((uint16_t)0x0040)
#define I2C_CR1_NOSTRETCH ((uint16_t)0x0080)
#define I2C_CR1_START ((uint16_t)0x0100)
#define I2C_CR1_STOP ((uint16_t)0x0200)
#define I2C_CR1_ACK ((uint16_t)0x0400)
#define I2C_CR1_POS ((uint16_t)0x0800)
#define I2C_CR1_PEC ((uint16_t)0x1000)
#define I2C_CR1_ALERT ((uint16_t)0x2000)
#define I2C_CR1_SWRST ((uint16_t)0x8000)


#define I2C_CR2_FREQ ((uint16_t)0x003F)
#define I2C_CR2_FREQ_0 ((uint16_t)0x0001)
#define I2C_CR2_FREQ_1 ((uint16_t)0x0002)
#define I2C_CR2_FREQ_2 ((uint16_t)0x0004)
#define I2C_CR2_FREQ_3 ((uint16_t)0x0008)
#define I2C_CR2_FREQ_4 ((uint16_t)0x0010)
#define I2C_CR2_FREQ_5 ((uint16_t)0x0020)

#define I2C_CR2_ITERREN ((uint16_t)0x0100)
#define I2C_CR2_ITEVTEN ((uint16_t)0x0200)
#define I2C_CR2_ITBUFEN ((uint16_t)0x0400)
#define I2C_CR2_DMAEN ((uint16_t)0x0800)
#define I2C_CR2_LAST ((uint16_t)0x1000)


#define I2C_OAR1_ADD1_7 ((uint16_t)0x00FE)
#define I2C_OAR1_ADD8_9 ((uint16_t)0x0300)

#define I2C_OAR1_ADD0 ((uint16_t)0x0001)
#define I2C_OAR1_ADD1 ((uint16_t)0x0002)
#define I2C_OAR1_ADD2 ((uint16_t)0x0004)
#define I2C_OAR1_ADD3 ((uint16_t)0x0008)
#define I2C_OAR1_ADD4 ((uint16_t)0x0010)
#define I2C_OAR1_ADD5 ((uint16_t)0x0020)
#define I2C_OAR1_ADD6 ((uint16_t)0x0040)
#define I2C_OAR1_ADD7 ((uint16_t)0x0080)
#define I2C_OAR1_ADD8 ((uint16_t)0x0100)
#define I2C_OAR1_ADD9 ((uint16_t)0x0200)

#define I2C_OAR1_ADDMODE ((uint16_t)0x8000)


#define I2C_OAR2_ENDUAL ((uint8_t)0x01)
#define I2C_OAR2_ADD2 ((uint8_t)0xFE)


#define I2C_DR_DR ((uint8_t)0xFF)


#define I2C_SR1_SB ((uint16_t)0x0001)
#define I2C_SR1_ADDR ((uint16_t)0x0002)
#define I2C_SR1_BTF ((uint16_t)0x0004)
#define I2C_SR1_ADD10 ((uint16_t)0x0008)
#define I2C_SR1_STOPF ((uint16_t)0x0010)
#define I2C_SR1_RXNE ((uint16_t)0x0040)
#define I2C_SR1_TXE ((uint16_t)0x0080)
#define I2C_SR1_BERR ((uint16_t)0x0100)
#define I2C_SR1_ARLO ((uint16_t)0x0200)
#define I2C_SR1_AF ((uint16_t)0x0400)
#define I2C_SR1_OVR ((uint16_t)0x0800)
#define I2C_SR1_PECERR ((uint16_t)0x1000)
#define I2C_SR1_TIMEOUT ((uint16_t)0x4000)
#define I2C_SR1_SMBALERT ((uint16_t)0x8000)


#define I2C_SR2_MSL ((uint16_t)0x0001)
#define I2C_SR2_BUSY ((uint16_t)0x0002)
#define I2C_SR2_TRA ((uint16_t)0x0004)
#define I2C_SR2_GENCALL ((uint16_t)0x0010)
#define I2C_SR2_SMBDEFAULT ((uint16_t)0x0020)
#define I2C_SR2_SMBHOST ((uint16_t)0x0040)
#define I2C_SR2_DUALF ((uint16_t)0x0080)
#define I2C_SR2_PEC ((uint16_t)0xFF00)


#define I2C_CCR_CCR ((uint16_t)0x0FFF)
#define I2C_CCR_DUTY ((uint16_t)0x4000)
#define I2C_CCR_FS ((uint16_t)0x8000)


#define I2C_TRISE_TRISE ((uint8_t)0x3F)
# 7646 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
#define USART_SR_PE ((uint16_t)0x0001)
#define USART_SR_FE ((uint16_t)0x0002)
#define USART_SR_NE ((uint16_t)0x0004)
#define USART_SR_ORE ((uint16_t)0x0008)
#define USART_SR_IDLE ((uint16_t)0x0010)
#define USART_SR_RXNE ((uint16_t)0x0020)
#define USART_SR_TC ((uint16_t)0x0040)
#define USART_SR_TXE ((uint16_t)0x0080)
#define USART_SR_LBD ((uint16_t)0x0100)
#define USART_SR_CTS ((uint16_t)0x0200)


#define USART_DR_DR ((uint16_t)0x01FF)


#define USART_BRR_DIV_Fraction ((uint16_t)0x000F)
#define USART_BRR_DIV_Mantissa ((uint16_t)0xFFF0)


#define USART_CR1_SBK ((uint16_t)0x0001)
#define USART_CR1_RWU ((uint16_t)0x0002)
#define USART_CR1_RE ((uint16_t)0x0004)
#define USART_CR1_TE ((uint16_t)0x0008)
#define USART_CR1_IDLEIE ((uint16_t)0x0010)
#define USART_CR1_RXNEIE ((uint16_t)0x0020)
#define USART_CR1_TCIE ((uint16_t)0x0040)
#define USART_CR1_TXEIE ((uint16_t)0x0080)
#define USART_CR1_PEIE ((uint16_t)0x0100)
#define USART_CR1_PS ((uint16_t)0x0200)
#define USART_CR1_PCE ((uint16_t)0x0400)
#define USART_CR1_WAKE ((uint16_t)0x0800)
#define USART_CR1_M ((uint16_t)0x1000)
#define USART_CR1_UE ((uint16_t)0x2000)
#define USART_CR1_OVER8 ((uint16_t)0x8000)


#define USART_CR2_ADD ((uint16_t)0x000F)
#define USART_CR2_LBDL ((uint16_t)0x0020)
#define USART_CR2_LBDIE ((uint16_t)0x0040)
#define USART_CR2_LBCL ((uint16_t)0x0100)
#define USART_CR2_CPHA ((uint16_t)0x0200)
#define USART_CR2_CPOL ((uint16_t)0x0400)
#define USART_CR2_CLKEN ((uint16_t)0x0800)

#define USART_CR2_STOP ((uint16_t)0x3000)
#define USART_CR2_STOP_0 ((uint16_t)0x1000)
#define USART_CR2_STOP_1 ((uint16_t)0x2000)

#define USART_CR2_LINEN ((uint16_t)0x4000)


#define USART_CR3_EIE ((uint16_t)0x0001)
#define USART_CR3_IREN ((uint16_t)0x0002)
#define USART_CR3_IRLP ((uint16_t)0x0004)
#define USART_CR3_HDSEL ((uint16_t)0x0008)
#define USART_CR3_NACK ((uint16_t)0x0010)
#define USART_CR3_SCEN ((uint16_t)0x0020)
#define USART_CR3_DMAR ((uint16_t)0x0040)
#define USART_CR3_DMAT ((uint16_t)0x0080)
#define USART_CR3_RTSE ((uint16_t)0x0100)
#define USART_CR3_CTSE ((uint16_t)0x0200)
#define USART_CR3_CTSIE ((uint16_t)0x0400)
#define USART_CR3_ONEBIT ((uint16_t)0x0800)


#define USART_GTPR_PSC ((uint16_t)0x00FF)
#define USART_GTPR_PSC_0 ((uint16_t)0x0001)
#define USART_GTPR_PSC_1 ((uint16_t)0x0002)
#define USART_GTPR_PSC_2 ((uint16_t)0x0004)
#define USART_GTPR_PSC_3 ((uint16_t)0x0008)
#define USART_GTPR_PSC_4 ((uint16_t)0x0010)
#define USART_GTPR_PSC_5 ((uint16_t)0x0020)
#define USART_GTPR_PSC_6 ((uint16_t)0x0040)
#define USART_GTPR_PSC_7 ((uint16_t)0x0080)

#define USART_GTPR_GT ((uint16_t)0xFF00)
# 7730 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
#define DBGMCU_IDCODE_DEV_ID ((uint32_t)0x00000FFF)

#define DBGMCU_IDCODE_REV_ID ((uint32_t)0xFFFF0000)
#define DBGMCU_IDCODE_REV_ID_0 ((uint32_t)0x00010000)
#define DBGMCU_IDCODE_REV_ID_1 ((uint32_t)0x00020000)
#define DBGMCU_IDCODE_REV_ID_2 ((uint32_t)0x00040000)
#define DBGMCU_IDCODE_REV_ID_3 ((uint32_t)0x00080000)
#define DBGMCU_IDCODE_REV_ID_4 ((uint32_t)0x00100000)
#define DBGMCU_IDCODE_REV_ID_5 ((uint32_t)0x00200000)
#define DBGMCU_IDCODE_REV_ID_6 ((uint32_t)0x00400000)
#define DBGMCU_IDCODE_REV_ID_7 ((uint32_t)0x00800000)
#define DBGMCU_IDCODE_REV_ID_8 ((uint32_t)0x01000000)
#define DBGMCU_IDCODE_REV_ID_9 ((uint32_t)0x02000000)
#define DBGMCU_IDCODE_REV_ID_10 ((uint32_t)0x04000000)
#define DBGMCU_IDCODE_REV_ID_11 ((uint32_t)0x08000000)
#define DBGMCU_IDCODE_REV_ID_12 ((uint32_t)0x10000000)
#define DBGMCU_IDCODE_REV_ID_13 ((uint32_t)0x20000000)
#define DBGMCU_IDCODE_REV_ID_14 ((uint32_t)0x40000000)
#define DBGMCU_IDCODE_REV_ID_15 ((uint32_t)0x80000000)


#define DBGMCU_CR_DBG_SLEEP ((uint32_t)0x00000001)
#define DBGMCU_CR_DBG_STOP ((uint32_t)0x00000002)
#define DBGMCU_CR_DBG_STANDBY ((uint32_t)0x00000004)
#define DBGMCU_CR_TRACE_IOEN ((uint32_t)0x00000020)

#define DBGMCU_CR_TRACE_MODE ((uint32_t)0x000000C0)
#define DBGMCU_CR_TRACE_MODE_0 ((uint32_t)0x00000040)
#define DBGMCU_CR_TRACE_MODE_1 ((uint32_t)0x00000080)

#define DBGMCU_CR_DBG_IWDG_STOP ((uint32_t)0x00000100)
#define DBGMCU_CR_DBG_WWDG_STOP ((uint32_t)0x00000200)
#define DBGMCU_CR_DBG_TIM1_STOP ((uint32_t)0x00000400)
#define DBGMCU_CR_DBG_TIM2_STOP ((uint32_t)0x00000800)
#define DBGMCU_CR_DBG_TIM3_STOP ((uint32_t)0x00001000)
#define DBGMCU_CR_DBG_TIM4_STOP ((uint32_t)0x00002000)
#define DBGMCU_CR_DBG_CAN1_STOP ((uint32_t)0x00004000)
#define DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT ((uint32_t)0x00008000)
#define DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT ((uint32_t)0x00010000)
#define DBGMCU_CR_DBG_TIM8_STOP ((uint32_t)0x00020000)
#define DBGMCU_CR_DBG_TIM5_STOP ((uint32_t)0x00040000)
#define DBGMCU_CR_DBG_TIM6_STOP ((uint32_t)0x00080000)
#define DBGMCU_CR_DBG_TIM7_STOP ((uint32_t)0x00100000)
#define DBGMCU_CR_DBG_CAN2_STOP ((uint32_t)0x00200000)
#define DBGMCU_CR_DBG_TIM15_STOP ((uint32_t)0x00400000)
#define DBGMCU_CR_DBG_TIM16_STOP ((uint32_t)0x00800000)
#define DBGMCU_CR_DBG_TIM17_STOP ((uint32_t)0x01000000)
#define DBGMCU_CR_DBG_TIM12_STOP ((uint32_t)0x02000000)
#define DBGMCU_CR_DBG_TIM13_STOP ((uint32_t)0x04000000)
#define DBGMCU_CR_DBG_TIM14_STOP ((uint32_t)0x08000000)
#define DBGMCU_CR_DBG_TIM9_STOP ((uint32_t)0x10000000)
#define DBGMCU_CR_DBG_TIM10_STOP ((uint32_t)0x20000000)
#define DBGMCU_CR_DBG_TIM11_STOP ((uint32_t)0x40000000)
# 7791 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
#define FLASH_ACR_LATENCY ((uint8_t)0x03)
#define FLASH_ACR_LATENCY_0 ((uint8_t)0x00)
#define FLASH_ACR_LATENCY_1 ((uint8_t)0x01)
#define FLASH_ACR_LATENCY_2 ((uint8_t)0x02)

#define FLASH_ACR_HLFCYA ((uint8_t)0x08)
#define FLASH_ACR_PRFTBE ((uint8_t)0x10)
#define FLASH_ACR_PRFTBS ((uint8_t)0x20)


#define FLASH_KEYR_FKEYR ((uint32_t)0xFFFFFFFF)


#define FLASH_OPTKEYR_OPTKEYR ((uint32_t)0xFFFFFFFF)


#define FLASH_SR_BSY ((uint8_t)0x01)
#define FLASH_SR_PGERR ((uint8_t)0x04)
#define FLASH_SR_WRPRTERR ((uint8_t)0x10)
#define FLASH_SR_EOP ((uint8_t)0x20)


#define FLASH_CR_PG ((uint16_t)0x0001)
#define FLASH_CR_PER ((uint16_t)0x0002)
#define FLASH_CR_MER ((uint16_t)0x0004)
#define FLASH_CR_OPTPG ((uint16_t)0x0010)
#define FLASH_CR_OPTER ((uint16_t)0x0020)
#define FLASH_CR_STRT ((uint16_t)0x0040)
#define FLASH_CR_LOCK ((uint16_t)0x0080)
#define FLASH_CR_OPTWRE ((uint16_t)0x0200)
#define FLASH_CR_ERRIE ((uint16_t)0x0400)
#define FLASH_CR_EOPIE ((uint16_t)0x1000)


#define FLASH_AR_FAR ((uint32_t)0xFFFFFFFF)


#define FLASH_OBR_OPTERR ((uint16_t)0x0001)
#define FLASH_OBR_RDPRT ((uint16_t)0x0002)

#define FLASH_OBR_USER ((uint16_t)0x03FC)
#define FLASH_OBR_WDG_SW ((uint16_t)0x0004)
#define FLASH_OBR_nRST_STOP ((uint16_t)0x0008)
#define FLASH_OBR_nRST_STDBY ((uint16_t)0x0010)
#define FLASH_OBR_BFB2 ((uint16_t)0x0020)


#define FLASH_WRPR_WRP ((uint32_t)0xFFFFFFFF)




#define FLASH_RDP_RDP ((uint32_t)0x000000FF)
#define FLASH_RDP_nRDP ((uint32_t)0x0000FF00)


#define FLASH_USER_USER ((uint32_t)0x00FF0000)
#define FLASH_USER_nUSER ((uint32_t)0xFF000000)


#define FLASH_Data0_Data0 ((uint32_t)0x000000FF)
#define FLASH_Data0_nData0 ((uint32_t)0x0000FF00)


#define FLASH_Data1_Data1 ((uint32_t)0x00FF0000)
#define FLASH_Data1_nData1 ((uint32_t)0xFF000000)


#define FLASH_WRP0_WRP0 ((uint32_t)0x000000FF)
#define FLASH_WRP0_nWRP0 ((uint32_t)0x0000FF00)


#define FLASH_WRP1_WRP1 ((uint32_t)0x00FF0000)
#define FLASH_WRP1_nWRP1 ((uint32_t)0xFF000000)


#define FLASH_WRP2_WRP2 ((uint32_t)0x000000FF)
#define FLASH_WRP2_nWRP2 ((uint32_t)0x0000FF00)


#define FLASH_WRP3_WRP3 ((uint32_t)0x00FF0000)
#define FLASH_WRP3_nWRP3 ((uint32_t)0xFF000000)
# 8297 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
# 1 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x_conf.h" 1
# 8298 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h" 2






#define SET_BIT(REG,BIT) ((REG) |= (BIT))

#define CLEAR_BIT(REG,BIT) ((REG) &= ~(BIT))

#define READ_BIT(REG,BIT) ((REG) & (BIT))

#define CLEAR_REG(REG) ((REG) = (0x0))

#define WRITE_REG(REG,VAL) ((REG) = (VAL))

#define READ_REG(REG) ((REG))

#define MODIFY_REG(REG,CLEARMASK,SETMASK) WRITE_REG((REG), (((READ_REG(REG)) & (~(CLEARMASK))) | (SETMASK)))
# 33 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_adc.h" 2
# 50 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_adc.h"
typedef struct
{
  uint32_t ADC_Mode;



  FunctionalState ADC_ScanConvMode;



  FunctionalState ADC_ContinuousConvMode;



  uint32_t ADC_ExternalTrigConv;



  uint32_t ADC_DataAlign;


  uint8_t ADC_NbrOfChannel;


}ADC_InitTypeDef;
# 83 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_adc.h"
#define IS_ADC_ALL_PERIPH(PERIPH) (((PERIPH) == ADC1) || ((PERIPH) == ADC2) || ((PERIPH) == ADC3))



#define IS_ADC_DMA_PERIPH(PERIPH) (((PERIPH) == ADC1) || ((PERIPH) == ADC3))






#define ADC_Mode_Independent ((uint32_t)0x00000000)
#define ADC_Mode_RegInjecSimult ((uint32_t)0x00010000)
#define ADC_Mode_RegSimult_AlterTrig ((uint32_t)0x00020000)
#define ADC_Mode_InjecSimult_FastInterl ((uint32_t)0x00030000)
#define ADC_Mode_InjecSimult_SlowInterl ((uint32_t)0x00040000)
#define ADC_Mode_InjecSimult ((uint32_t)0x00050000)
#define ADC_Mode_RegSimult ((uint32_t)0x00060000)
#define ADC_Mode_FastInterl ((uint32_t)0x00070000)
#define ADC_Mode_SlowInterl ((uint32_t)0x00080000)
#define ADC_Mode_AlterTrig ((uint32_t)0x00090000)

#define IS_ADC_MODE(MODE) (((MODE) == ADC_Mode_Independent) || ((MODE) == ADC_Mode_RegInjecSimult) || ((MODE) == ADC_Mode_RegSimult_AlterTrig) || ((MODE) == ADC_Mode_InjecSimult_FastInterl) || ((MODE) == ADC_Mode_InjecSimult_SlowInterl) || ((MODE) == ADC_Mode_InjecSimult) || ((MODE) == ADC_Mode_RegSimult) || ((MODE) == ADC_Mode_FastInterl) || ((MODE) == ADC_Mode_SlowInterl) || ((MODE) == ADC_Mode_AlterTrig))
# 123 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_adc.h"
#define ADC_ExternalTrigConv_T1_CC1 ((uint32_t)0x00000000)
#define ADC_ExternalTrigConv_T1_CC2 ((uint32_t)0x00020000)
#define ADC_ExternalTrigConv_T2_CC2 ((uint32_t)0x00060000)
#define ADC_ExternalTrigConv_T3_TRGO ((uint32_t)0x00080000)
#define ADC_ExternalTrigConv_T4_CC4 ((uint32_t)0x000A0000)
#define ADC_ExternalTrigConv_Ext_IT11_TIM8_TRGO ((uint32_t)0x000C0000)

#define ADC_ExternalTrigConv_T1_CC3 ((uint32_t)0x00040000)
#define ADC_ExternalTrigConv_None ((uint32_t)0x000E0000)

#define ADC_ExternalTrigConv_T3_CC1 ((uint32_t)0x00000000)
#define ADC_ExternalTrigConv_T2_CC3 ((uint32_t)0x00020000)
#define ADC_ExternalTrigConv_T8_CC1 ((uint32_t)0x00060000)
#define ADC_ExternalTrigConv_T8_TRGO ((uint32_t)0x00080000)
#define ADC_ExternalTrigConv_T5_CC1 ((uint32_t)0x000A0000)
#define ADC_ExternalTrigConv_T5_CC3 ((uint32_t)0x000C0000)

#define IS_ADC_EXT_TRIG(REGTRIG) (((REGTRIG) == ADC_ExternalTrigConv_T1_CC1) || ((REGTRIG) == ADC_ExternalTrigConv_T1_CC2) || ((REGTRIG) == ADC_ExternalTrigConv_T1_CC3) || ((REGTRIG) == ADC_ExternalTrigConv_T2_CC2) || ((REGTRIG) == ADC_ExternalTrigConv_T3_TRGO) || ((REGTRIG) == ADC_ExternalTrigConv_T4_CC4) || ((REGTRIG) == ADC_ExternalTrigConv_Ext_IT11_TIM8_TRGO) || ((REGTRIG) == ADC_ExternalTrigConv_None) || ((REGTRIG) == ADC_ExternalTrigConv_T3_CC1) || ((REGTRIG) == ADC_ExternalTrigConv_T2_CC3) || ((REGTRIG) == ADC_ExternalTrigConv_T8_CC1) || ((REGTRIG) == ADC_ExternalTrigConv_T8_TRGO) || ((REGTRIG) == ADC_ExternalTrigConv_T5_CC1) || ((REGTRIG) == ADC_ExternalTrigConv_T5_CC3))
# 162 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_adc.h"
#define ADC_DataAlign_Right ((uint32_t)0x00000000)
#define ADC_DataAlign_Left ((uint32_t)0x00000800)
#define IS_ADC_DATA_ALIGN(ALIGN) (((ALIGN) == ADC_DataAlign_Right) || ((ALIGN) == ADC_DataAlign_Left))
# 174 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_adc.h"
#define ADC_Channel_0 ((uint8_t)0x00)
#define ADC_Channel_1 ((uint8_t)0x01)
#define ADC_Channel_2 ((uint8_t)0x02)
#define ADC_Channel_3 ((uint8_t)0x03)
#define ADC_Channel_4 ((uint8_t)0x04)
#define ADC_Channel_5 ((uint8_t)0x05)
#define ADC_Channel_6 ((uint8_t)0x06)
#define ADC_Channel_7 ((uint8_t)0x07)
#define ADC_Channel_8 ((uint8_t)0x08)
#define ADC_Channel_9 ((uint8_t)0x09)
#define ADC_Channel_10 ((uint8_t)0x0A)
#define ADC_Channel_11 ((uint8_t)0x0B)
#define ADC_Channel_12 ((uint8_t)0x0C)
#define ADC_Channel_13 ((uint8_t)0x0D)
#define ADC_Channel_14 ((uint8_t)0x0E)
#define ADC_Channel_15 ((uint8_t)0x0F)
#define ADC_Channel_16 ((uint8_t)0x10)
#define ADC_Channel_17 ((uint8_t)0x11)

#define ADC_Channel_TempSensor ((uint8_t)ADC_Channel_16)
#define ADC_Channel_Vrefint ((uint8_t)ADC_Channel_17)

#define IS_ADC_CHANNEL(CHANNEL) (((CHANNEL) == ADC_Channel_0) || ((CHANNEL) == ADC_Channel_1) || ((CHANNEL) == ADC_Channel_2) || ((CHANNEL) == ADC_Channel_3) || ((CHANNEL) == ADC_Channel_4) || ((CHANNEL) == ADC_Channel_5) || ((CHANNEL) == ADC_Channel_6) || ((CHANNEL) == ADC_Channel_7) || ((CHANNEL) == ADC_Channel_8) || ((CHANNEL) == ADC_Channel_9) || ((CHANNEL) == ADC_Channel_10) || ((CHANNEL) == ADC_Channel_11) || ((CHANNEL) == ADC_Channel_12) || ((CHANNEL) == ADC_Channel_13) || ((CHANNEL) == ADC_Channel_14) || ((CHANNEL) == ADC_Channel_15) || ((CHANNEL) == ADC_Channel_16) || ((CHANNEL) == ADC_Channel_17))
# 213 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_adc.h"
#define ADC_SampleTime_1Cycles5 ((uint8_t)0x00)
#define ADC_SampleTime_7Cycles5 ((uint8_t)0x01)
#define ADC_SampleTime_13Cycles5 ((uint8_t)0x02)
#define ADC_SampleTime_28Cycles5 ((uint8_t)0x03)
#define ADC_SampleTime_41Cycles5 ((uint8_t)0x04)
#define ADC_SampleTime_55Cycles5 ((uint8_t)0x05)
#define ADC_SampleTime_71Cycles5 ((uint8_t)0x06)
#define ADC_SampleTime_239Cycles5 ((uint8_t)0x07)
#define IS_ADC_SAMPLE_TIME(TIME) (((TIME) == ADC_SampleTime_1Cycles5) || ((TIME) == ADC_SampleTime_7Cycles5) || ((TIME) == ADC_SampleTime_13Cycles5) || ((TIME) == ADC_SampleTime_28Cycles5) || ((TIME) == ADC_SampleTime_41Cycles5) || ((TIME) == ADC_SampleTime_55Cycles5) || ((TIME) == ADC_SampleTime_71Cycles5) || ((TIME) == ADC_SampleTime_239Cycles5))
# 237 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_adc.h"
#define ADC_ExternalTrigInjecConv_T2_TRGO ((uint32_t)0x00002000)
#define ADC_ExternalTrigInjecConv_T2_CC1 ((uint32_t)0x00003000)
#define ADC_ExternalTrigInjecConv_T3_CC4 ((uint32_t)0x00004000)
#define ADC_ExternalTrigInjecConv_T4_TRGO ((uint32_t)0x00005000)
#define ADC_ExternalTrigInjecConv_Ext_IT15_TIM8_CC4 ((uint32_t)0x00006000)

#define ADC_ExternalTrigInjecConv_T1_TRGO ((uint32_t)0x00000000)
#define ADC_ExternalTrigInjecConv_T1_CC4 ((uint32_t)0x00001000)
#define ADC_ExternalTrigInjecConv_None ((uint32_t)0x00007000)

#define ADC_ExternalTrigInjecConv_T4_CC3 ((uint32_t)0x00002000)
#define ADC_ExternalTrigInjecConv_T8_CC2 ((uint32_t)0x00003000)
#define ADC_ExternalTrigInjecConv_T8_CC4 ((uint32_t)0x00004000)
#define ADC_ExternalTrigInjecConv_T5_TRGO ((uint32_t)0x00005000)
#define ADC_ExternalTrigInjecConv_T5_CC4 ((uint32_t)0x00006000)

#define IS_ADC_EXT_INJEC_TRIG(INJTRIG) (((INJTRIG) == ADC_ExternalTrigInjecConv_T1_TRGO) || ((INJTRIG) == ADC_ExternalTrigInjecConv_T1_CC4) || ((INJTRIG) == ADC_ExternalTrigInjecConv_T2_TRGO) || ((INJTRIG) == ADC_ExternalTrigInjecConv_T2_CC1) || ((INJTRIG) == ADC_ExternalTrigInjecConv_T3_CC4) || ((INJTRIG) == ADC_ExternalTrigInjecConv_T4_TRGO) || ((INJTRIG) == ADC_ExternalTrigInjecConv_Ext_IT15_TIM8_CC4) || ((INJTRIG) == ADC_ExternalTrigInjecConv_None) || ((INJTRIG) == ADC_ExternalTrigInjecConv_T4_CC3) || ((INJTRIG) == ADC_ExternalTrigInjecConv_T8_CC2) || ((INJTRIG) == ADC_ExternalTrigInjecConv_T8_CC4) || ((INJTRIG) == ADC_ExternalTrigInjecConv_T5_TRGO) || ((INJTRIG) == ADC_ExternalTrigInjecConv_T5_CC4))
# 274 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_adc.h"
#define ADC_InjectedChannel_1 ((uint8_t)0x14)
#define ADC_InjectedChannel_2 ((uint8_t)0x18)
#define ADC_InjectedChannel_3 ((uint8_t)0x1C)
#define ADC_InjectedChannel_4 ((uint8_t)0x20)
#define IS_ADC_INJECTED_CHANNEL(CHANNEL) (((CHANNEL) == ADC_InjectedChannel_1) || ((CHANNEL) == ADC_InjectedChannel_2) || ((CHANNEL) == ADC_InjectedChannel_3) || ((CHANNEL) == ADC_InjectedChannel_4))
# 290 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_adc.h"
#define ADC_AnalogWatchdog_SingleRegEnable ((uint32_t)0x00800200)
#define ADC_AnalogWatchdog_SingleInjecEnable ((uint32_t)0x00400200)
#define ADC_AnalogWatchdog_SingleRegOrInjecEnable ((uint32_t)0x00C00200)
#define ADC_AnalogWatchdog_AllRegEnable ((uint32_t)0x00800000)
#define ADC_AnalogWatchdog_AllInjecEnable ((uint32_t)0x00400000)
#define ADC_AnalogWatchdog_AllRegAllInjecEnable ((uint32_t)0x00C00000)
#define ADC_AnalogWatchdog_None ((uint32_t)0x00000000)

#define IS_ADC_ANALOG_WATCHDOG(WATCHDOG) (((WATCHDOG) == ADC_AnalogWatchdog_SingleRegEnable) || ((WATCHDOG) == ADC_AnalogWatchdog_SingleInjecEnable) || ((WATCHDOG) == ADC_AnalogWatchdog_SingleRegOrInjecEnable) || ((WATCHDOG) == ADC_AnalogWatchdog_AllRegEnable) || ((WATCHDOG) == ADC_AnalogWatchdog_AllInjecEnable) || ((WATCHDOG) == ADC_AnalogWatchdog_AllRegAllInjecEnable) || ((WATCHDOG) == ADC_AnalogWatchdog_None))
# 313 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_adc.h"
#define ADC_IT_EOC ((uint16_t)0x0220)
#define ADC_IT_AWD ((uint16_t)0x0140)
#define ADC_IT_JEOC ((uint16_t)0x0480)

#define IS_ADC_IT(IT) ((((IT) & (uint16_t)0xF81F) == 0x00) && ((IT) != 0x00))

#define IS_ADC_GET_IT(IT) (((IT) == ADC_IT_EOC) || ((IT) == ADC_IT_AWD) || ((IT) == ADC_IT_JEOC))
# 329 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_adc.h"
#define ADC_FLAG_AWD ((uint8_t)0x01)
#define ADC_FLAG_EOC ((uint8_t)0x02)
#define ADC_FLAG_JEOC ((uint8_t)0x04)
#define ADC_FLAG_JSTRT ((uint8_t)0x08)
#define ADC_FLAG_STRT ((uint8_t)0x10)
#define IS_ADC_CLEAR_FLAG(FLAG) ((((FLAG) & (uint8_t)0xE0) == 0x00) && ((FLAG) != 0x00))
#define IS_ADC_GET_FLAG(FLAG) (((FLAG) == ADC_FLAG_AWD) || ((FLAG) == ADC_FLAG_EOC) || ((FLAG) == ADC_FLAG_JEOC) || ((FLAG)== ADC_FLAG_JSTRT) || ((FLAG) == ADC_FLAG_STRT))
# 346 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_adc.h"
#define IS_ADC_THRESHOLD(THRESHOLD) ((THRESHOLD) <= 0xFFF)
# 356 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_adc.h"
#define IS_ADC_OFFSET(OFFSET) ((OFFSET) <= 0xFFF)
# 366 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_adc.h"
#define IS_ADC_INJECTED_LENGTH(LENGTH) (((LENGTH) >= 0x1) && ((LENGTH) <= 0x4))
# 376 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_adc.h"
#define IS_ADC_INJECTED_RANK(RANK) (((RANK) >= 0x1) && ((RANK) <= 0x4))
# 387 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_adc.h"
#define IS_ADC_REGULAR_LENGTH(LENGTH) (((LENGTH) >= 0x1) && ((LENGTH) <= 0x10))
# 396 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_adc.h"
#define IS_ADC_REGULAR_RANK(RANK) (((RANK) >= 0x1) && ((RANK) <= 0x10))
# 406 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_adc.h"
#define IS_ADC_REGULAR_DISC_NUMBER(NUMBER) (((NUMBER) >= 0x1) && ((NUMBER) <= 0x8))
# 428 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_adc.h"
void ADC_DeInit(ADC_TypeDef* ADCx);
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct);
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct);
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState);
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState);
void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState);
void ADC_ResetCalibration(ADC_TypeDef* ADCx);
FlagStatus ADC_GetResetCalibrationStatus(ADC_TypeDef* ADCx);
void ADC_StartCalibration(ADC_TypeDef* ADCx);
FlagStatus ADC_GetCalibrationStatus(ADC_TypeDef* ADCx);
void ADC_SoftwareStartConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState);
FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx);
void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number);
void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState);
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime);
void ADC_ExternalTrigConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState);
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx);
uint32_t ADC_GetDualModeConversionValue(void);
void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState);
void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState);
void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv);
void ADC_ExternalTrigInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState);
void ADC_SoftwareStartInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState);
FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx);
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime);
void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length);
void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset);
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel);
void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog);
void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold, uint16_t LowThreshold);
void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel);
void ADC_TempSensorVrefintCmd(FunctionalState NewState);
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG);
void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG);
ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT);
void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT);
# 29 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x_conf.h" 2
# 1 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_bkp.h" 1
# 25 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_bkp.h"
#define __STM32F10x_BKP_H 
# 58 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_bkp.h"
#define BKP_TamperPinLevel_High ((uint16_t)0x0000)
#define BKP_TamperPinLevel_Low ((uint16_t)0x0001)
#define IS_BKP_TAMPER_PIN_LEVEL(LEVEL) (((LEVEL) == BKP_TamperPinLevel_High) || ((LEVEL) == BKP_TamperPinLevel_Low))
# 70 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_bkp.h"
#define BKP_RTCOutputSource_None ((uint16_t)0x0000)
#define BKP_RTCOutputSource_CalibClock ((uint16_t)0x0080)
#define BKP_RTCOutputSource_Alarm ((uint16_t)0x0100)
#define BKP_RTCOutputSource_Second ((uint16_t)0x0300)
#define IS_BKP_RTC_OUTPUT_SOURCE(SOURCE) (((SOURCE) == BKP_RTCOutputSource_None) || ((SOURCE) == BKP_RTCOutputSource_CalibClock) || ((SOURCE) == BKP_RTCOutputSource_Alarm) || ((SOURCE) == BKP_RTCOutputSource_Second))
# 86 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_bkp.h"
#define BKP_DR1 ((uint16_t)0x0004)
#define BKP_DR2 ((uint16_t)0x0008)
#define BKP_DR3 ((uint16_t)0x000C)
#define BKP_DR4 ((uint16_t)0x0010)
#define BKP_DR5 ((uint16_t)0x0014)
#define BKP_DR6 ((uint16_t)0x0018)
#define BKP_DR7 ((uint16_t)0x001C)
#define BKP_DR8 ((uint16_t)0x0020)
#define BKP_DR9 ((uint16_t)0x0024)
#define BKP_DR10 ((uint16_t)0x0028)
#define BKP_DR11 ((uint16_t)0x0040)
#define BKP_DR12 ((uint16_t)0x0044)
#define BKP_DR13 ((uint16_t)0x0048)
#define BKP_DR14 ((uint16_t)0x004C)
#define BKP_DR15 ((uint16_t)0x0050)
#define BKP_DR16 ((uint16_t)0x0054)
#define BKP_DR17 ((uint16_t)0x0058)
#define BKP_DR18 ((uint16_t)0x005C)
#define BKP_DR19 ((uint16_t)0x0060)
#define BKP_DR20 ((uint16_t)0x0064)
#define BKP_DR21 ((uint16_t)0x0068)
#define BKP_DR22 ((uint16_t)0x006C)
#define BKP_DR23 ((uint16_t)0x0070)
#define BKP_DR24 ((uint16_t)0x0074)
#define BKP_DR25 ((uint16_t)0x0078)
#define BKP_DR26 ((uint16_t)0x007C)
#define BKP_DR27 ((uint16_t)0x0080)
#define BKP_DR28 ((uint16_t)0x0084)
#define BKP_DR29 ((uint16_t)0x0088)
#define BKP_DR30 ((uint16_t)0x008C)
#define BKP_DR31 ((uint16_t)0x0090)
#define BKP_DR32 ((uint16_t)0x0094)
#define BKP_DR33 ((uint16_t)0x0098)
#define BKP_DR34 ((uint16_t)0x009C)
#define BKP_DR35 ((uint16_t)0x00A0)
#define BKP_DR36 ((uint16_t)0x00A4)
#define BKP_DR37 ((uint16_t)0x00A8)
#define BKP_DR38 ((uint16_t)0x00AC)
#define BKP_DR39 ((uint16_t)0x00B0)
#define BKP_DR40 ((uint16_t)0x00B4)
#define BKP_DR41 ((uint16_t)0x00B8)
#define BKP_DR42 ((uint16_t)0x00BC)

#define IS_BKP_DR(DR) (((DR) == BKP_DR1) || ((DR) == BKP_DR2) || ((DR) == BKP_DR3) || ((DR) == BKP_DR4) || ((DR) == BKP_DR5) || ((DR) == BKP_DR6) || ((DR) == BKP_DR7) || ((DR) == BKP_DR8) || ((DR) == BKP_DR9) || ((DR) == BKP_DR10) || ((DR) == BKP_DR11) || ((DR) == BKP_DR12) || ((DR) == BKP_DR13) || ((DR) == BKP_DR14) || ((DR) == BKP_DR15) || ((DR) == BKP_DR16) || ((DR) == BKP_DR17) || ((DR) == BKP_DR18) || ((DR) == BKP_DR19) || ((DR) == BKP_DR20) || ((DR) == BKP_DR21) || ((DR) == BKP_DR22) || ((DR) == BKP_DR23) || ((DR) == BKP_DR24) || ((DR) == BKP_DR25) || ((DR) == BKP_DR26) || ((DR) == BKP_DR27) || ((DR) == BKP_DR28) || ((DR) == BKP_DR29) || ((DR) == BKP_DR30) || ((DR) == BKP_DR31) || ((DR) == BKP_DR32) || ((DR) == BKP_DR33) || ((DR) == BKP_DR34) || ((DR) == BKP_DR35) || ((DR) == BKP_DR36) || ((DR) == BKP_DR37) || ((DR) == BKP_DR38) || ((DR) == BKP_DR39) || ((DR) == BKP_DR40) || ((DR) == BKP_DR41) || ((DR) == BKP_DR42))
# 144 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_bkp.h"
#define IS_BKP_CALIBRATION_VALUE(VALUE) ((VALUE) <= 0x7F)
# 165 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_bkp.h"
void BKP_DeInit(void);
void BKP_TamperPinLevelConfig(uint16_t BKP_TamperPinLevel);
void BKP_TamperPinCmd(FunctionalState NewState);
void BKP_ITConfig(FunctionalState NewState);
void BKP_RTCOutputConfig(uint16_t BKP_RTCOutputSource);
void BKP_SetRTCCalibrationValue(uint8_t CalibrationValue);
void BKP_WriteBackupRegister(uint16_t BKP_DR, uint16_t Data);
uint16_t BKP_ReadBackupRegister(uint16_t BKP_DR);
FlagStatus BKP_GetFlagStatus(void);
void BKP_ClearFlag(void);
ITStatus BKP_GetITStatus(void);
void BKP_ClearITPendingBit(void);
# 30 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x_conf.h" 2



# 1 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dac.h" 1
# 25 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dac.h"
#define __STM32F10x_DAC_H 
# 50 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dac.h"
typedef struct
{
  uint32_t DAC_Trigger;


  uint32_t DAC_WaveGeneration;



  uint32_t DAC_LFSRUnmask_TriangleAmplitude;



  uint32_t DAC_OutputBuffer;

}DAC_InitTypeDef;
# 79 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dac.h"
#define DAC_Trigger_None ((uint32_t)0x00000000)

#define DAC_Trigger_T6_TRGO ((uint32_t)0x00000004)
#define DAC_Trigger_T8_TRGO ((uint32_t)0x0000000C)

#define DAC_Trigger_T3_TRGO ((uint32_t)0x0000000C)

#define DAC_Trigger_T7_TRGO ((uint32_t)0x00000014)
#define DAC_Trigger_T5_TRGO ((uint32_t)0x0000001C)
#define DAC_Trigger_T15_TRGO ((uint32_t)0x0000001C)

#define DAC_Trigger_T2_TRGO ((uint32_t)0x00000024)
#define DAC_Trigger_T4_TRGO ((uint32_t)0x0000002C)
#define DAC_Trigger_Ext_IT9 ((uint32_t)0x00000034)
#define DAC_Trigger_Software ((uint32_t)0x0000003C)

#define IS_DAC_TRIGGER(TRIGGER) (((TRIGGER) == DAC_Trigger_None) || ((TRIGGER) == DAC_Trigger_T6_TRGO) || ((TRIGGER) == DAC_Trigger_T8_TRGO) || ((TRIGGER) == DAC_Trigger_T7_TRGO) || ((TRIGGER) == DAC_Trigger_T5_TRGO) || ((TRIGGER) == DAC_Trigger_T2_TRGO) || ((TRIGGER) == DAC_Trigger_T4_TRGO) || ((TRIGGER) == DAC_Trigger_Ext_IT9) || ((TRIGGER) == DAC_Trigger_Software))
# 113 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dac.h"
#define DAC_WaveGeneration_None ((uint32_t)0x00000000)
#define DAC_WaveGeneration_Noise ((uint32_t)0x00000040)
#define DAC_WaveGeneration_Triangle ((uint32_t)0x00000080)
#define IS_DAC_GENERATE_WAVE(WAVE) (((WAVE) == DAC_WaveGeneration_None) || ((WAVE) == DAC_WaveGeneration_Noise) || ((WAVE) == DAC_WaveGeneration_Triangle))
# 127 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dac.h"
#define DAC_LFSRUnmask_Bit0 ((uint32_t)0x00000000)
#define DAC_LFSRUnmask_Bits1_0 ((uint32_t)0x00000100)
#define DAC_LFSRUnmask_Bits2_0 ((uint32_t)0x00000200)
#define DAC_LFSRUnmask_Bits3_0 ((uint32_t)0x00000300)
#define DAC_LFSRUnmask_Bits4_0 ((uint32_t)0x00000400)
#define DAC_LFSRUnmask_Bits5_0 ((uint32_t)0x00000500)
#define DAC_LFSRUnmask_Bits6_0 ((uint32_t)0x00000600)
#define DAC_LFSRUnmask_Bits7_0 ((uint32_t)0x00000700)
#define DAC_LFSRUnmask_Bits8_0 ((uint32_t)0x00000800)
#define DAC_LFSRUnmask_Bits9_0 ((uint32_t)0x00000900)
#define DAC_LFSRUnmask_Bits10_0 ((uint32_t)0x00000A00)
#define DAC_LFSRUnmask_Bits11_0 ((uint32_t)0x00000B00)
#define DAC_TriangleAmplitude_1 ((uint32_t)0x00000000)
#define DAC_TriangleAmplitude_3 ((uint32_t)0x00000100)
#define DAC_TriangleAmplitude_7 ((uint32_t)0x00000200)
#define DAC_TriangleAmplitude_15 ((uint32_t)0x00000300)
#define DAC_TriangleAmplitude_31 ((uint32_t)0x00000400)
#define DAC_TriangleAmplitude_63 ((uint32_t)0x00000500)
#define DAC_TriangleAmplitude_127 ((uint32_t)0x00000600)
#define DAC_TriangleAmplitude_255 ((uint32_t)0x00000700)
#define DAC_TriangleAmplitude_511 ((uint32_t)0x00000800)
#define DAC_TriangleAmplitude_1023 ((uint32_t)0x00000900)
#define DAC_TriangleAmplitude_2047 ((uint32_t)0x00000A00)
#define DAC_TriangleAmplitude_4095 ((uint32_t)0x00000B00)

#define IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(VALUE) (((VALUE) == DAC_LFSRUnmask_Bit0) || ((VALUE) == DAC_LFSRUnmask_Bits1_0) || ((VALUE) == DAC_LFSRUnmask_Bits2_0) || ((VALUE) == DAC_LFSRUnmask_Bits3_0) || ((VALUE) == DAC_LFSRUnmask_Bits4_0) || ((VALUE) == DAC_LFSRUnmask_Bits5_0) || ((VALUE) == DAC_LFSRUnmask_Bits6_0) || ((VALUE) == DAC_LFSRUnmask_Bits7_0) || ((VALUE) == DAC_LFSRUnmask_Bits8_0) || ((VALUE) == DAC_LFSRUnmask_Bits9_0) || ((VALUE) == DAC_LFSRUnmask_Bits10_0) || ((VALUE) == DAC_LFSRUnmask_Bits11_0) || ((VALUE) == DAC_TriangleAmplitude_1) || ((VALUE) == DAC_TriangleAmplitude_3) || ((VALUE) == DAC_TriangleAmplitude_7) || ((VALUE) == DAC_TriangleAmplitude_15) || ((VALUE) == DAC_TriangleAmplitude_31) || ((VALUE) == DAC_TriangleAmplitude_63) || ((VALUE) == DAC_TriangleAmplitude_127) || ((VALUE) == DAC_TriangleAmplitude_255) || ((VALUE) == DAC_TriangleAmplitude_511) || ((VALUE) == DAC_TriangleAmplitude_1023) || ((VALUE) == DAC_TriangleAmplitude_2047) || ((VALUE) == DAC_TriangleAmplitude_4095))
# 184 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dac.h"
#define DAC_OutputBuffer_Enable ((uint32_t)0x00000000)
#define DAC_OutputBuffer_Disable ((uint32_t)0x00000002)
#define IS_DAC_OUTPUT_BUFFER_STATE(STATE) (((STATE) == DAC_OutputBuffer_Enable) || ((STATE) == DAC_OutputBuffer_Disable))
# 196 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dac.h"
#define DAC_Channel_1 ((uint32_t)0x00000000)
#define DAC_Channel_2 ((uint32_t)0x00000010)
#define IS_DAC_CHANNEL(CHANNEL) (((CHANNEL) == DAC_Channel_1) || ((CHANNEL) == DAC_Channel_2))
# 208 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dac.h"
#define DAC_Align_12b_R ((uint32_t)0x00000000)
#define DAC_Align_12b_L ((uint32_t)0x00000004)
#define DAC_Align_8b_R ((uint32_t)0x00000008)
#define IS_DAC_ALIGN(ALIGN) (((ALIGN) == DAC_Align_12b_R) || ((ALIGN) == DAC_Align_12b_L) || ((ALIGN) == DAC_Align_8b_R))
# 222 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dac.h"
#define DAC_Wave_Noise ((uint32_t)0x00000040)
#define DAC_Wave_Triangle ((uint32_t)0x00000080)
#define IS_DAC_WAVE(WAVE) (((WAVE) == DAC_Wave_Noise) || ((WAVE) == DAC_Wave_Triangle))
# 234 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dac.h"
#define IS_DAC_DATA(DATA) ((DATA) <= 0xFFF0)
# 278 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dac.h"
void DAC_DeInit(void);
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct);
void DAC_StructInit(DAC_InitTypeDef* DAC_InitStruct);
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState);



void DAC_DMACmd(uint32_t DAC_Channel, FunctionalState NewState);
void DAC_SoftwareTriggerCmd(uint32_t DAC_Channel, FunctionalState NewState);
void DAC_DualSoftwareTriggerCmd(FunctionalState NewState);
void DAC_WaveGenerationCmd(uint32_t DAC_Channel, uint32_t DAC_Wave, FunctionalState NewState);
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data);
void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data);
void DAC_SetDualChannelData(uint32_t DAC_Align, uint16_t Data2, uint16_t Data1);
uint16_t DAC_GetDataOutputValue(uint32_t DAC_Channel);
# 34 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x_conf.h" 2
# 1 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dbgmcu.h" 1
# 25 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dbgmcu.h"
#define __STM32F10x_DBGMCU_H 
# 54 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dbgmcu.h"
#define DBGMCU_SLEEP ((uint32_t)0x00000001)
#define DBGMCU_STOP ((uint32_t)0x00000002)
#define DBGMCU_STANDBY ((uint32_t)0x00000004)
#define DBGMCU_IWDG_STOP ((uint32_t)0x00000100)
#define DBGMCU_WWDG_STOP ((uint32_t)0x00000200)
#define DBGMCU_TIM1_STOP ((uint32_t)0x00000400)
#define DBGMCU_TIM2_STOP ((uint32_t)0x00000800)
#define DBGMCU_TIM3_STOP ((uint32_t)0x00001000)
#define DBGMCU_TIM4_STOP ((uint32_t)0x00002000)
#define DBGMCU_CAN1_STOP ((uint32_t)0x00004000)
#define DBGMCU_I2C1_SMBUS_TIMEOUT ((uint32_t)0x00008000)
#define DBGMCU_I2C2_SMBUS_TIMEOUT ((uint32_t)0x00010000)
#define DBGMCU_TIM8_STOP ((uint32_t)0x00020000)
#define DBGMCU_TIM5_STOP ((uint32_t)0x00040000)
#define DBGMCU_TIM6_STOP ((uint32_t)0x00080000)
#define DBGMCU_TIM7_STOP ((uint32_t)0x00100000)
#define DBGMCU_CAN2_STOP ((uint32_t)0x00200000)
#define DBGMCU_TIM15_STOP ((uint32_t)0x00400000)
#define DBGMCU_TIM16_STOP ((uint32_t)0x00800000)
#define DBGMCU_TIM17_STOP ((uint32_t)0x01000000)
#define DBGMCU_TIM12_STOP ((uint32_t)0x02000000)
#define DBGMCU_TIM13_STOP ((uint32_t)0x04000000)
#define DBGMCU_TIM14_STOP ((uint32_t)0x08000000)
#define DBGMCU_TIM9_STOP ((uint32_t)0x10000000)
#define DBGMCU_TIM10_STOP ((uint32_t)0x20000000)
#define DBGMCU_TIM11_STOP ((uint32_t)0x40000000)

#define IS_DBGMCU_PERIPH(PERIPH) ((((PERIPH) & 0x800000F8) == 0x00) && ((PERIPH) != 0x00))
# 98 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dbgmcu.h"
uint32_t DBGMCU_GetREVID(void);
uint32_t DBGMCU_GetDEVID(void);
void DBGMCU_Config(uint32_t DBGMCU_Periph, FunctionalState NewState);
# 35 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x_conf.h" 2
# 1 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dma.h" 1
# 25 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dma.h"
#define __STM32F10x_DMA_H 
# 50 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dma.h"
typedef struct
{
  uint32_t DMA_PeripheralBaseAddr;

  uint32_t DMA_MemoryBaseAddr;

  uint32_t DMA_DIR;


  uint32_t DMA_BufferSize;



  uint32_t DMA_PeripheralInc;


  uint32_t DMA_MemoryInc;


  uint32_t DMA_PeripheralDataSize;


  uint32_t DMA_MemoryDataSize;


  uint32_t DMA_Mode;




  uint32_t DMA_Priority;


  uint32_t DMA_M2M;

}DMA_InitTypeDef;
# 95 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dma.h"
#define IS_DMA_ALL_PERIPH(PERIPH) (((PERIPH) == DMA1_Channel1) || ((PERIPH) == DMA1_Channel2) || ((PERIPH) == DMA1_Channel3) || ((PERIPH) == DMA1_Channel4) || ((PERIPH) == DMA1_Channel5) || ((PERIPH) == DMA1_Channel6) || ((PERIPH) == DMA1_Channel7) || ((PERIPH) == DMA2_Channel1) || ((PERIPH) == DMA2_Channel2) || ((PERIPH) == DMA2_Channel3) || ((PERIPH) == DMA2_Channel4) || ((PERIPH) == DMA2_Channel5))
# 112 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dma.h"
#define DMA_DIR_PeripheralDST ((uint32_t)0x00000010)
#define DMA_DIR_PeripheralSRC ((uint32_t)0x00000000)
#define IS_DMA_DIR(DIR) (((DIR) == DMA_DIR_PeripheralDST) || ((DIR) == DMA_DIR_PeripheralSRC))
# 124 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dma.h"
#define DMA_PeripheralInc_Enable ((uint32_t)0x00000040)
#define DMA_PeripheralInc_Disable ((uint32_t)0x00000000)
#define IS_DMA_PERIPHERAL_INC_STATE(STATE) (((STATE) == DMA_PeripheralInc_Enable) || ((STATE) == DMA_PeripheralInc_Disable))
# 136 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dma.h"
#define DMA_MemoryInc_Enable ((uint32_t)0x00000080)
#define DMA_MemoryInc_Disable ((uint32_t)0x00000000)
#define IS_DMA_MEMORY_INC_STATE(STATE) (((STATE) == DMA_MemoryInc_Enable) || ((STATE) == DMA_MemoryInc_Disable))
# 148 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dma.h"
#define DMA_PeripheralDataSize_Byte ((uint32_t)0x00000000)
#define DMA_PeripheralDataSize_HalfWord ((uint32_t)0x00000100)
#define DMA_PeripheralDataSize_Word ((uint32_t)0x00000200)
#define IS_DMA_PERIPHERAL_DATA_SIZE(SIZE) (((SIZE) == DMA_PeripheralDataSize_Byte) || ((SIZE) == DMA_PeripheralDataSize_HalfWord) || ((SIZE) == DMA_PeripheralDataSize_Word))
# 162 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dma.h"
#define DMA_MemoryDataSize_Byte ((uint32_t)0x00000000)
#define DMA_MemoryDataSize_HalfWord ((uint32_t)0x00000400)
#define DMA_MemoryDataSize_Word ((uint32_t)0x00000800)
#define IS_DMA_MEMORY_DATA_SIZE(SIZE) (((SIZE) == DMA_MemoryDataSize_Byte) || ((SIZE) == DMA_MemoryDataSize_HalfWord) || ((SIZE) == DMA_MemoryDataSize_Word))
# 176 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dma.h"
#define DMA_Mode_Circular ((uint32_t)0x00000020)
#define DMA_Mode_Normal ((uint32_t)0x00000000)
#define IS_DMA_MODE(MODE) (((MODE) == DMA_Mode_Circular) || ((MODE) == DMA_Mode_Normal))
# 187 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dma.h"
#define DMA_Priority_VeryHigh ((uint32_t)0x00003000)
#define DMA_Priority_High ((uint32_t)0x00002000)
#define DMA_Priority_Medium ((uint32_t)0x00001000)
#define DMA_Priority_Low ((uint32_t)0x00000000)
#define IS_DMA_PRIORITY(PRIORITY) (((PRIORITY) == DMA_Priority_VeryHigh) || ((PRIORITY) == DMA_Priority_High) || ((PRIORITY) == DMA_Priority_Medium) || ((PRIORITY) == DMA_Priority_Low))
# 203 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dma.h"
#define DMA_M2M_Enable ((uint32_t)0x00004000)
#define DMA_M2M_Disable ((uint32_t)0x00000000)
#define IS_DMA_M2M_STATE(STATE) (((STATE) == DMA_M2M_Enable) || ((STATE) == DMA_M2M_Disable))
# 215 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dma.h"
#define DMA_IT_TC ((uint32_t)0x00000002)
#define DMA_IT_HT ((uint32_t)0x00000004)
#define DMA_IT_TE ((uint32_t)0x00000008)
#define IS_DMA_CONFIG_IT(IT) ((((IT) & 0xFFFFFFF1) == 0x00) && ((IT) != 0x00))

#define DMA1_IT_GL1 ((uint32_t)0x00000001)
#define DMA1_IT_TC1 ((uint32_t)0x00000002)
#define DMA1_IT_HT1 ((uint32_t)0x00000004)
#define DMA1_IT_TE1 ((uint32_t)0x00000008)
#define DMA1_IT_GL2 ((uint32_t)0x00000010)
#define DMA1_IT_TC2 ((uint32_t)0x00000020)
#define DMA1_IT_HT2 ((uint32_t)0x00000040)
#define DMA1_IT_TE2 ((uint32_t)0x00000080)
#define DMA1_IT_GL3 ((uint32_t)0x00000100)
#define DMA1_IT_TC3 ((uint32_t)0x00000200)
#define DMA1_IT_HT3 ((uint32_t)0x00000400)
#define DMA1_IT_TE3 ((uint32_t)0x00000800)
#define DMA1_IT_GL4 ((uint32_t)0x00001000)
#define DMA1_IT_TC4 ((uint32_t)0x00002000)
#define DMA1_IT_HT4 ((uint32_t)0x00004000)
#define DMA1_IT_TE4 ((uint32_t)0x00008000)
#define DMA1_IT_GL5 ((uint32_t)0x00010000)
#define DMA1_IT_TC5 ((uint32_t)0x00020000)
#define DMA1_IT_HT5 ((uint32_t)0x00040000)
#define DMA1_IT_TE5 ((uint32_t)0x00080000)
#define DMA1_IT_GL6 ((uint32_t)0x00100000)
#define DMA1_IT_TC6 ((uint32_t)0x00200000)
#define DMA1_IT_HT6 ((uint32_t)0x00400000)
#define DMA1_IT_TE6 ((uint32_t)0x00800000)
#define DMA1_IT_GL7 ((uint32_t)0x01000000)
#define DMA1_IT_TC7 ((uint32_t)0x02000000)
#define DMA1_IT_HT7 ((uint32_t)0x04000000)
#define DMA1_IT_TE7 ((uint32_t)0x08000000)

#define DMA2_IT_GL1 ((uint32_t)0x10000001)
#define DMA2_IT_TC1 ((uint32_t)0x10000002)
#define DMA2_IT_HT1 ((uint32_t)0x10000004)
#define DMA2_IT_TE1 ((uint32_t)0x10000008)
#define DMA2_IT_GL2 ((uint32_t)0x10000010)
#define DMA2_IT_TC2 ((uint32_t)0x10000020)
#define DMA2_IT_HT2 ((uint32_t)0x10000040)
#define DMA2_IT_TE2 ((uint32_t)0x10000080)
#define DMA2_IT_GL3 ((uint32_t)0x10000100)
#define DMA2_IT_TC3 ((uint32_t)0x10000200)
#define DMA2_IT_HT3 ((uint32_t)0x10000400)
#define DMA2_IT_TE3 ((uint32_t)0x10000800)
#define DMA2_IT_GL4 ((uint32_t)0x10001000)
#define DMA2_IT_TC4 ((uint32_t)0x10002000)
#define DMA2_IT_HT4 ((uint32_t)0x10004000)
#define DMA2_IT_TE4 ((uint32_t)0x10008000)
#define DMA2_IT_GL5 ((uint32_t)0x10010000)
#define DMA2_IT_TC5 ((uint32_t)0x10020000)
#define DMA2_IT_HT5 ((uint32_t)0x10040000)
#define DMA2_IT_TE5 ((uint32_t)0x10080000)

#define IS_DMA_CLEAR_IT(IT) (((((IT) & 0xF0000000) == 0x00) || (((IT) & 0xEFF00000) == 0x00)) && ((IT) != 0x00))

#define IS_DMA_GET_IT(IT) (((IT) == DMA1_IT_GL1) || ((IT) == DMA1_IT_TC1) || ((IT) == DMA1_IT_HT1) || ((IT) == DMA1_IT_TE1) || ((IT) == DMA1_IT_GL2) || ((IT) == DMA1_IT_TC2) || ((IT) == DMA1_IT_HT2) || ((IT) == DMA1_IT_TE2) || ((IT) == DMA1_IT_GL3) || ((IT) == DMA1_IT_TC3) || ((IT) == DMA1_IT_HT3) || ((IT) == DMA1_IT_TE3) || ((IT) == DMA1_IT_GL4) || ((IT) == DMA1_IT_TC4) || ((IT) == DMA1_IT_HT4) || ((IT) == DMA1_IT_TE4) || ((IT) == DMA1_IT_GL5) || ((IT) == DMA1_IT_TC5) || ((IT) == DMA1_IT_HT5) || ((IT) == DMA1_IT_TE5) || ((IT) == DMA1_IT_GL6) || ((IT) == DMA1_IT_TC6) || ((IT) == DMA1_IT_HT6) || ((IT) == DMA1_IT_TE6) || ((IT) == DMA1_IT_GL7) || ((IT) == DMA1_IT_TC7) || ((IT) == DMA1_IT_HT7) || ((IT) == DMA1_IT_TE7) || ((IT) == DMA2_IT_GL1) || ((IT) == DMA2_IT_TC1) || ((IT) == DMA2_IT_HT1) || ((IT) == DMA2_IT_TE1) || ((IT) == DMA2_IT_GL2) || ((IT) == DMA2_IT_TC2) || ((IT) == DMA2_IT_HT2) || ((IT) == DMA2_IT_TE2) || ((IT) == DMA2_IT_GL3) || ((IT) == DMA2_IT_TC3) || ((IT) == DMA2_IT_HT3) || ((IT) == DMA2_IT_TE3) || ((IT) == DMA2_IT_GL4) || ((IT) == DMA2_IT_TC4) || ((IT) == DMA2_IT_HT4) || ((IT) == DMA2_IT_TE4) || ((IT) == DMA2_IT_GL5) || ((IT) == DMA2_IT_TC5) || ((IT) == DMA2_IT_HT5) || ((IT) == DMA2_IT_TE5))
# 304 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dma.h"
#define DMA1_FLAG_GL1 ((uint32_t)0x00000001)
#define DMA1_FLAG_TC1 ((uint32_t)0x00000002)
#define DMA1_FLAG_HT1 ((uint32_t)0x00000004)
#define DMA1_FLAG_TE1 ((uint32_t)0x00000008)
#define DMA1_FLAG_GL2 ((uint32_t)0x00000010)
#define DMA1_FLAG_TC2 ((uint32_t)0x00000020)
#define DMA1_FLAG_HT2 ((uint32_t)0x00000040)
#define DMA1_FLAG_TE2 ((uint32_t)0x00000080)
#define DMA1_FLAG_GL3 ((uint32_t)0x00000100)
#define DMA1_FLAG_TC3 ((uint32_t)0x00000200)
#define DMA1_FLAG_HT3 ((uint32_t)0x00000400)
#define DMA1_FLAG_TE3 ((uint32_t)0x00000800)
#define DMA1_FLAG_GL4 ((uint32_t)0x00001000)
#define DMA1_FLAG_TC4 ((uint32_t)0x00002000)
#define DMA1_FLAG_HT4 ((uint32_t)0x00004000)
#define DMA1_FLAG_TE4 ((uint32_t)0x00008000)
#define DMA1_FLAG_GL5 ((uint32_t)0x00010000)
#define DMA1_FLAG_TC5 ((uint32_t)0x00020000)
#define DMA1_FLAG_HT5 ((uint32_t)0x00040000)
#define DMA1_FLAG_TE5 ((uint32_t)0x00080000)
#define DMA1_FLAG_GL6 ((uint32_t)0x00100000)
#define DMA1_FLAG_TC6 ((uint32_t)0x00200000)
#define DMA1_FLAG_HT6 ((uint32_t)0x00400000)
#define DMA1_FLAG_TE6 ((uint32_t)0x00800000)
#define DMA1_FLAG_GL7 ((uint32_t)0x01000000)
#define DMA1_FLAG_TC7 ((uint32_t)0x02000000)
#define DMA1_FLAG_HT7 ((uint32_t)0x04000000)
#define DMA1_FLAG_TE7 ((uint32_t)0x08000000)

#define DMA2_FLAG_GL1 ((uint32_t)0x10000001)
#define DMA2_FLAG_TC1 ((uint32_t)0x10000002)
#define DMA2_FLAG_HT1 ((uint32_t)0x10000004)
#define DMA2_FLAG_TE1 ((uint32_t)0x10000008)
#define DMA2_FLAG_GL2 ((uint32_t)0x10000010)
#define DMA2_FLAG_TC2 ((uint32_t)0x10000020)
#define DMA2_FLAG_HT2 ((uint32_t)0x10000040)
#define DMA2_FLAG_TE2 ((uint32_t)0x10000080)
#define DMA2_FLAG_GL3 ((uint32_t)0x10000100)
#define DMA2_FLAG_TC3 ((uint32_t)0x10000200)
#define DMA2_FLAG_HT3 ((uint32_t)0x10000400)
#define DMA2_FLAG_TE3 ((uint32_t)0x10000800)
#define DMA2_FLAG_GL4 ((uint32_t)0x10001000)
#define DMA2_FLAG_TC4 ((uint32_t)0x10002000)
#define DMA2_FLAG_HT4 ((uint32_t)0x10004000)
#define DMA2_FLAG_TE4 ((uint32_t)0x10008000)
#define DMA2_FLAG_GL5 ((uint32_t)0x10010000)
#define DMA2_FLAG_TC5 ((uint32_t)0x10020000)
#define DMA2_FLAG_HT5 ((uint32_t)0x10040000)
#define DMA2_FLAG_TE5 ((uint32_t)0x10080000)

#define IS_DMA_CLEAR_FLAG(FLAG) (((((FLAG) & 0xF0000000) == 0x00) || (((FLAG) & 0xEFF00000) == 0x00)) && ((FLAG) != 0x00))

#define IS_DMA_GET_FLAG(FLAG) (((FLAG) == DMA1_FLAG_GL1) || ((FLAG) == DMA1_FLAG_TC1) || ((FLAG) == DMA1_FLAG_HT1) || ((FLAG) == DMA1_FLAG_TE1) || ((FLAG) == DMA1_FLAG_GL2) || ((FLAG) == DMA1_FLAG_TC2) || ((FLAG) == DMA1_FLAG_HT2) || ((FLAG) == DMA1_FLAG_TE2) || ((FLAG) == DMA1_FLAG_GL3) || ((FLAG) == DMA1_FLAG_TC3) || ((FLAG) == DMA1_FLAG_HT3) || ((FLAG) == DMA1_FLAG_TE3) || ((FLAG) == DMA1_FLAG_GL4) || ((FLAG) == DMA1_FLAG_TC4) || ((FLAG) == DMA1_FLAG_HT4) || ((FLAG) == DMA1_FLAG_TE4) || ((FLAG) == DMA1_FLAG_GL5) || ((FLAG) == DMA1_FLAG_TC5) || ((FLAG) == DMA1_FLAG_HT5) || ((FLAG) == DMA1_FLAG_TE5) || ((FLAG) == DMA1_FLAG_GL6) || ((FLAG) == DMA1_FLAG_TC6) || ((FLAG) == DMA1_FLAG_HT6) || ((FLAG) == DMA1_FLAG_TE6) || ((FLAG) == DMA1_FLAG_GL7) || ((FLAG) == DMA1_FLAG_TC7) || ((FLAG) == DMA1_FLAG_HT7) || ((FLAG) == DMA1_FLAG_TE7) || ((FLAG) == DMA2_FLAG_GL1) || ((FLAG) == DMA2_FLAG_TC1) || ((FLAG) == DMA2_FLAG_HT1) || ((FLAG) == DMA2_FLAG_TE1) || ((FLAG) == DMA2_FLAG_GL2) || ((FLAG) == DMA2_FLAG_TC2) || ((FLAG) == DMA2_FLAG_HT2) || ((FLAG) == DMA2_FLAG_TE2) || ((FLAG) == DMA2_FLAG_GL3) || ((FLAG) == DMA2_FLAG_TC3) || ((FLAG) == DMA2_FLAG_HT3) || ((FLAG) == DMA2_FLAG_TE3) || ((FLAG) == DMA2_FLAG_GL4) || ((FLAG) == DMA2_FLAG_TC4) || ((FLAG) == DMA2_FLAG_HT4) || ((FLAG) == DMA2_FLAG_TE4) || ((FLAG) == DMA2_FLAG_GL5) || ((FLAG) == DMA2_FLAG_TC5) || ((FLAG) == DMA2_FLAG_HT5) || ((FLAG) == DMA2_FLAG_TE5))
# 388 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dma.h"
#define IS_DMA_BUFFER_SIZE(SIZE) (((SIZE) >= 0x1) && ((SIZE) < 0x10000))
# 410 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_dma.h"
void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx);
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct);
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct);
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState);
void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState);
void DMA_SetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx, uint16_t DataNumber);
uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx);
FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG);
void DMA_ClearFlag(uint32_t DMAy_FLAG);
ITStatus DMA_GetITStatus(uint32_t DMAy_IT);
void DMA_ClearITPendingBit(uint32_t DMAy_IT);
# 36 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x_conf.h" 2
# 1 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_exti.h" 1
# 25 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_exti.h"
#define __STM32F10x_EXTI_H 
# 50 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_exti.h"
typedef enum
{
  EXTI_Mode_Interrupt = 0x00,
  EXTI_Mode_Event = 0x04
}EXTIMode_TypeDef;

#define IS_EXTI_MODE(MODE) (((MODE) == EXTI_Mode_Interrupt) || ((MODE) == EXTI_Mode_Event))





typedef enum
{
  EXTI_Trigger_Rising = 0x08,
  EXTI_Trigger_Falling = 0x0C,
  EXTI_Trigger_Rising_Falling = 0x10
}EXTITrigger_TypeDef;

#define IS_EXTI_TRIGGER(TRIGGER) (((TRIGGER) == EXTI_Trigger_Rising) || ((TRIGGER) == EXTI_Trigger_Falling) || ((TRIGGER) == EXTI_Trigger_Rising_Falling))






typedef struct
{
  uint32_t EXTI_Line;


  EXTIMode_TypeDef EXTI_Mode;


  EXTITrigger_TypeDef EXTI_Trigger;


  FunctionalState EXTI_LineCmd;

}EXTI_InitTypeDef;
# 103 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_exti.h"
#define EXTI_Line0 ((uint32_t)0x00001)
#define EXTI_Line1 ((uint32_t)0x00002)
#define EXTI_Line2 ((uint32_t)0x00004)
#define EXTI_Line3 ((uint32_t)0x00008)
#define EXTI_Line4 ((uint32_t)0x00010)
#define EXTI_Line5 ((uint32_t)0x00020)
#define EXTI_Line6 ((uint32_t)0x00040)
#define EXTI_Line7 ((uint32_t)0x00080)
#define EXTI_Line8 ((uint32_t)0x00100)
#define EXTI_Line9 ((uint32_t)0x00200)
#define EXTI_Line10 ((uint32_t)0x00400)
#define EXTI_Line11 ((uint32_t)0x00800)
#define EXTI_Line12 ((uint32_t)0x01000)
#define EXTI_Line13 ((uint32_t)0x02000)
#define EXTI_Line14 ((uint32_t)0x04000)
#define EXTI_Line15 ((uint32_t)0x08000)
#define EXTI_Line16 ((uint32_t)0x10000)
#define EXTI_Line17 ((uint32_t)0x20000)
#define EXTI_Line18 ((uint32_t)0x40000)

#define EXTI_Line19 ((uint32_t)0x80000)

#define IS_EXTI_LINE(LINE) ((((LINE) & (uint32_t)0xFFF00000) == 0x00) && ((LINE) != (uint16_t)0x00))
#define IS_GET_EXTI_LINE(LINE) (((LINE) == EXTI_Line0) || ((LINE) == EXTI_Line1) || ((LINE) == EXTI_Line2) || ((LINE) == EXTI_Line3) || ((LINE) == EXTI_Line4) || ((LINE) == EXTI_Line5) || ((LINE) == EXTI_Line6) || ((LINE) == EXTI_Line7) || ((LINE) == EXTI_Line8) || ((LINE) == EXTI_Line9) || ((LINE) == EXTI_Line10) || ((LINE) == EXTI_Line11) || ((LINE) == EXTI_Line12) || ((LINE) == EXTI_Line13) || ((LINE) == EXTI_Line14) || ((LINE) == EXTI_Line15) || ((LINE) == EXTI_Line16) || ((LINE) == EXTI_Line17) || ((LINE) == EXTI_Line18) || ((LINE) == EXTI_Line19))
# 158 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_exti.h"
void EXTI_DeInit(void);
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct);
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct);
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line);
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line);
void EXTI_ClearFlag(uint32_t EXTI_Line);
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line);
void EXTI_ClearITPendingBit(uint32_t EXTI_Line);
# 37 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x_conf.h" 2
# 1 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_flash.h" 1
# 25 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_flash.h"
#define __STM32F10x_FLASH_H 
# 50 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_flash.h"
typedef enum
{
  FLASH_BUSY = 1,
  FLASH_ERROR_PG,
  FLASH_ERROR_WRP,
  FLASH_COMPLETE,
  FLASH_TIMEOUT
}FLASH_Status;
# 71 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_flash.h"
#define FLASH_Latency_0 ((uint32_t)0x00000000)
#define FLASH_Latency_1 ((uint32_t)0x00000001)
#define FLASH_Latency_2 ((uint32_t)0x00000002)
#define IS_FLASH_LATENCY(LATENCY) (((LATENCY) == FLASH_Latency_0) || ((LATENCY) == FLASH_Latency_1) || ((LATENCY) == FLASH_Latency_2))
# 85 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_flash.h"
#define FLASH_HalfCycleAccess_Enable ((uint32_t)0x00000008)
#define FLASH_HalfCycleAccess_Disable ((uint32_t)0x00000000)
#define IS_FLASH_HALFCYCLEACCESS_STATE(STATE) (((STATE) == FLASH_HalfCycleAccess_Enable) || ((STATE) == FLASH_HalfCycleAccess_Disable))
# 97 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_flash.h"
#define FLASH_PrefetchBuffer_Enable ((uint32_t)0x00000010)
#define FLASH_PrefetchBuffer_Disable ((uint32_t)0x00000000)
#define IS_FLASH_PREFETCHBUFFER_STATE(STATE) (((STATE) == FLASH_PrefetchBuffer_Enable) || ((STATE) == FLASH_PrefetchBuffer_Disable))
# 110 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_flash.h"
#define FLASH_WRProt_Pages0to3 ((uint32_t)0x00000001)
#define FLASH_WRProt_Pages4to7 ((uint32_t)0x00000002)
#define FLASH_WRProt_Pages8to11 ((uint32_t)0x00000004)
#define FLASH_WRProt_Pages12to15 ((uint32_t)0x00000008)
#define FLASH_WRProt_Pages16to19 ((uint32_t)0x00000010)
#define FLASH_WRProt_Pages20to23 ((uint32_t)0x00000020)
#define FLASH_WRProt_Pages24to27 ((uint32_t)0x00000040)
#define FLASH_WRProt_Pages28to31 ((uint32_t)0x00000080)


#define FLASH_WRProt_Pages32to35 ((uint32_t)0x00000100)
#define FLASH_WRProt_Pages36to39 ((uint32_t)0x00000200)
#define FLASH_WRProt_Pages40to43 ((uint32_t)0x00000400)
#define FLASH_WRProt_Pages44to47 ((uint32_t)0x00000800)
#define FLASH_WRProt_Pages48to51 ((uint32_t)0x00001000)
#define FLASH_WRProt_Pages52to55 ((uint32_t)0x00002000)
#define FLASH_WRProt_Pages56to59 ((uint32_t)0x00004000)
#define FLASH_WRProt_Pages60to63 ((uint32_t)0x00008000)
#define FLASH_WRProt_Pages64to67 ((uint32_t)0x00010000)
#define FLASH_WRProt_Pages68to71 ((uint32_t)0x00020000)
#define FLASH_WRProt_Pages72to75 ((uint32_t)0x00040000)
#define FLASH_WRProt_Pages76to79 ((uint32_t)0x00080000)
#define FLASH_WRProt_Pages80to83 ((uint32_t)0x00100000)
#define FLASH_WRProt_Pages84to87 ((uint32_t)0x00200000)
#define FLASH_WRProt_Pages88to91 ((uint32_t)0x00400000)
#define FLASH_WRProt_Pages92to95 ((uint32_t)0x00800000)
#define FLASH_WRProt_Pages96to99 ((uint32_t)0x01000000)
#define FLASH_WRProt_Pages100to103 ((uint32_t)0x02000000)
#define FLASH_WRProt_Pages104to107 ((uint32_t)0x04000000)
#define FLASH_WRProt_Pages108to111 ((uint32_t)0x08000000)
#define FLASH_WRProt_Pages112to115 ((uint32_t)0x10000000)
#define FLASH_WRProt_Pages116to119 ((uint32_t)0x20000000)
#define FLASH_WRProt_Pages120to123 ((uint32_t)0x40000000)
#define FLASH_WRProt_Pages124to127 ((uint32_t)0x80000000)


#define FLASH_WRProt_Pages0to1 ((uint32_t)0x00000001)

#define FLASH_WRProt_Pages2to3 ((uint32_t)0x00000002)

#define FLASH_WRProt_Pages4to5 ((uint32_t)0x00000004)

#define FLASH_WRProt_Pages6to7 ((uint32_t)0x00000008)

#define FLASH_WRProt_Pages8to9 ((uint32_t)0x00000010)

#define FLASH_WRProt_Pages10to11 ((uint32_t)0x00000020)

#define FLASH_WRProt_Pages12to13 ((uint32_t)0x00000040)

#define FLASH_WRProt_Pages14to15 ((uint32_t)0x00000080)

#define FLASH_WRProt_Pages16to17 ((uint32_t)0x00000100)

#define FLASH_WRProt_Pages18to19 ((uint32_t)0x00000200)

#define FLASH_WRProt_Pages20to21 ((uint32_t)0x00000400)

#define FLASH_WRProt_Pages22to23 ((uint32_t)0x00000800)

#define FLASH_WRProt_Pages24to25 ((uint32_t)0x00001000)

#define FLASH_WRProt_Pages26to27 ((uint32_t)0x00002000)

#define FLASH_WRProt_Pages28to29 ((uint32_t)0x00004000)

#define FLASH_WRProt_Pages30to31 ((uint32_t)0x00008000)

#define FLASH_WRProt_Pages32to33 ((uint32_t)0x00010000)

#define FLASH_WRProt_Pages34to35 ((uint32_t)0x00020000)

#define FLASH_WRProt_Pages36to37 ((uint32_t)0x00040000)

#define FLASH_WRProt_Pages38to39 ((uint32_t)0x00080000)

#define FLASH_WRProt_Pages40to41 ((uint32_t)0x00100000)

#define FLASH_WRProt_Pages42to43 ((uint32_t)0x00200000)

#define FLASH_WRProt_Pages44to45 ((uint32_t)0x00400000)

#define FLASH_WRProt_Pages46to47 ((uint32_t)0x00800000)

#define FLASH_WRProt_Pages48to49 ((uint32_t)0x01000000)

#define FLASH_WRProt_Pages50to51 ((uint32_t)0x02000000)

#define FLASH_WRProt_Pages52to53 ((uint32_t)0x04000000)

#define FLASH_WRProt_Pages54to55 ((uint32_t)0x08000000)

#define FLASH_WRProt_Pages56to57 ((uint32_t)0x10000000)

#define FLASH_WRProt_Pages58to59 ((uint32_t)0x20000000)

#define FLASH_WRProt_Pages60to61 ((uint32_t)0x40000000)

#define FLASH_WRProt_Pages62to127 ((uint32_t)0x80000000)
#define FLASH_WRProt_Pages62to255 ((uint32_t)0x80000000)
#define FLASH_WRProt_Pages62to511 ((uint32_t)0x80000000)

#define FLASH_WRProt_AllPages ((uint32_t)0xFFFFFFFF)

#define IS_FLASH_WRPROT_PAGE(PAGE) (((PAGE) != 0x00000000))

#define IS_FLASH_ADDRESS(ADDRESS) (((ADDRESS) >= 0x08000000) && ((ADDRESS) < 0x080FFFFF))

#define IS_OB_DATA_ADDRESS(ADDRESS) (((ADDRESS) == 0x1FFFF804) || ((ADDRESS) == 0x1FFFF806))
# 228 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_flash.h"
#define OB_IWDG_SW ((uint16_t)0x0001)
#define OB_IWDG_HW ((uint16_t)0x0000)
#define IS_OB_IWDG_SOURCE(SOURCE) (((SOURCE) == OB_IWDG_SW) || ((SOURCE) == OB_IWDG_HW))
# 240 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_flash.h"
#define OB_STOP_NoRST ((uint16_t)0x0002)
#define OB_STOP_RST ((uint16_t)0x0000)
#define IS_OB_STOP_SOURCE(SOURCE) (((SOURCE) == OB_STOP_NoRST) || ((SOURCE) == OB_STOP_RST))
# 252 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_flash.h"
#define OB_STDBY_NoRST ((uint16_t)0x0004)
#define OB_STDBY_RST ((uint16_t)0x0000)
#define IS_OB_STDBY_SOURCE(SOURCE) (((SOURCE) == OB_STDBY_NoRST) || ((SOURCE) == OB_STDBY_RST))
# 287 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_flash.h"
#define FLASH_IT_ERROR ((uint32_t)0x00000400)
#define FLASH_IT_EOP ((uint32_t)0x00001000)
#define FLASH_IT_BANK1_ERROR FLASH_IT_ERROR
#define FLASH_IT_BANK1_EOP FLASH_IT_EOP

#define IS_FLASH_IT(IT) ((((IT) & (uint32_t)0xFFFFEBFF) == 0x00000000) && (((IT) != 0x00000000)))
# 328 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_flash.h"
#define FLASH_FLAG_BSY ((uint32_t)0x00000001)
#define FLASH_FLAG_EOP ((uint32_t)0x00000020)
#define FLASH_FLAG_PGERR ((uint32_t)0x00000004)
#define FLASH_FLAG_WRPRTERR ((uint32_t)0x00000010)
#define FLASH_FLAG_OPTERR ((uint32_t)0x00000001)

#define FLASH_FLAG_BANK1_BSY FLASH_FLAG_BSY
#define FLASH_FLAG_BANK1_EOP FLASH_FLAG_EOP
#define FLASH_FLAG_BANK1_PGERR FLASH_FLAG_PGERR
#define FLASH_FLAG_BANK1_WRPRTERR FLASH_FLAG_WRPRTERR

#define IS_FLASH_CLEAR_FLAG(FLAG) ((((FLAG) & (uint32_t)0xFFFFFFCA) == 0x00000000) && ((FLAG) != 0x00000000))
#define IS_FLASH_GET_FLAG(FLAG) (((FLAG) == FLASH_FLAG_BSY) || ((FLAG) == FLASH_FLAG_EOP) || ((FLAG) == FLASH_FLAG_PGERR) || ((FLAG) == FLASH_FLAG_WRPRTERR) || ((FLAG) == FLASH_FLAG_BANK1_BSY) || ((FLAG) == FLASH_FLAG_BANK1_EOP) || ((FLAG) == FLASH_FLAG_BANK1_PGERR) || ((FLAG) == FLASH_FLAG_BANK1_WRPRTERR) || ((FLAG) == FLASH_FLAG_OPTERR))
# 368 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_flash.h"
void FLASH_SetLatency(uint32_t FLASH_Latency);
void FLASH_HalfCycleAccessCmd(uint32_t FLASH_HalfCycleAccess);
void FLASH_PrefetchBufferCmd(uint32_t FLASH_PrefetchBuffer);
void FLASH_Unlock(void);
void FLASH_Lock(void);
FLASH_Status FLASH_ErasePage(uint32_t Page_Address);
FLASH_Status FLASH_EraseAllPages(void);
FLASH_Status FLASH_EraseOptionBytes(void);
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data);
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data);
FLASH_Status FLASH_ProgramOptionByteData(uint32_t Address, uint8_t Data);
FLASH_Status FLASH_EnableWriteProtection(uint32_t FLASH_Pages);
FLASH_Status FLASH_ReadOutProtection(FunctionalState NewState);
FLASH_Status FLASH_UserOptionByteConfig(uint16_t OB_IWDG, uint16_t OB_STOP, uint16_t OB_STDBY);
uint32_t FLASH_GetUserOptionByte(void);
uint32_t FLASH_GetWriteProtectionOptionByte(void);
FlagStatus FLASH_GetReadOutProtectionStatus(void);
FlagStatus FLASH_GetPrefetchBufferStatus(void);
void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState);
FlagStatus FLASH_GetFlagStatus(uint32_t FLASH_FLAG);
void FLASH_ClearFlag(uint32_t FLASH_FLAG);
FLASH_Status FLASH_GetStatus(void);
FLASH_Status FLASH_WaitForLastOperation(uint32_t Timeout);


void FLASH_UnlockBank1(void);
void FLASH_LockBank1(void);
FLASH_Status FLASH_EraseAllBank1Pages(void);
FLASH_Status FLASH_GetBank1Status(void);
FLASH_Status FLASH_WaitForLastBank1Operation(uint32_t Timeout);
# 38 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x_conf.h" 2
# 1 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_fsmc.h" 1
# 25 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_fsmc.h"
#define __STM32F10x_FSMC_H 
# 50 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_fsmc.h"
typedef struct
{
  uint32_t FSMC_AddressSetupTime;




  uint32_t FSMC_AddressHoldTime;




  uint32_t FSMC_DataSetupTime;




  uint32_t FSMC_BusTurnAroundDuration;




  uint32_t FSMC_CLKDivision;



  uint32_t FSMC_DataLatency;







  uint32_t FSMC_AccessMode;

}FSMC_NORSRAMTimingInitTypeDef;





typedef struct
{
  uint32_t FSMC_Bank;


  uint32_t FSMC_DataAddressMux;



  uint32_t FSMC_MemoryType;



  uint32_t FSMC_MemoryDataWidth;


  uint32_t FSMC_BurstAccessMode;



  uint32_t FSMC_AsynchronousWait;



  uint32_t FSMC_WaitSignalPolarity;



  uint32_t FSMC_WrapMode;



  uint32_t FSMC_WaitSignalActive;




  uint32_t FSMC_WriteOperation;


  uint32_t FSMC_WaitSignal;



  uint32_t FSMC_ExtendedMode;


  uint32_t FSMC_WriteBurst;


  FSMC_NORSRAMTimingInitTypeDef* FSMC_ReadWriteTimingStruct;

  FSMC_NORSRAMTimingInitTypeDef* FSMC_WriteTimingStruct;
}FSMC_NORSRAMInitTypeDef;





typedef struct
{
  uint32_t FSMC_SetupTime;





  uint32_t FSMC_WaitSetupTime;





  uint32_t FSMC_HoldSetupTime;






  uint32_t FSMC_HiZSetupTime;




}FSMC_NAND_PCCARDTimingInitTypeDef;





typedef struct
{
  uint32_t FSMC_Bank;


  uint32_t FSMC_Waitfeature;


  uint32_t FSMC_MemoryDataWidth;


  uint32_t FSMC_ECC;


  uint32_t FSMC_ECCPageSize;


  uint32_t FSMC_TCLRSetupTime;



  uint32_t FSMC_TARSetupTime;



  FSMC_NAND_PCCARDTimingInitTypeDef* FSMC_CommonSpaceTimingStruct;

  FSMC_NAND_PCCARDTimingInitTypeDef* FSMC_AttributeSpaceTimingStruct;
}FSMC_NANDInitTypeDef;





typedef struct
{
  uint32_t FSMC_Waitfeature;


  uint32_t FSMC_TCLRSetupTime;



  uint32_t FSMC_TARSetupTime;




  FSMC_NAND_PCCARDTimingInitTypeDef* FSMC_CommonSpaceTimingStruct;

  FSMC_NAND_PCCARDTimingInitTypeDef* FSMC_AttributeSpaceTimingStruct;

  FSMC_NAND_PCCARDTimingInitTypeDef* FSMC_IOSpaceTimingStruct;
}FSMC_PCCARDInitTypeDef;
# 249 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_fsmc.h"
#define FSMC_Bank1_NORSRAM1 ((uint32_t)0x00000000)
#define FSMC_Bank1_NORSRAM2 ((uint32_t)0x00000002)
#define FSMC_Bank1_NORSRAM3 ((uint32_t)0x00000004)
#define FSMC_Bank1_NORSRAM4 ((uint32_t)0x00000006)







#define FSMC_Bank2_NAND ((uint32_t)0x00000010)
#define FSMC_Bank3_NAND ((uint32_t)0x00000100)







#define FSMC_Bank4_PCCARD ((uint32_t)0x00001000)




#define IS_FSMC_NORSRAM_BANK(BANK) (((BANK) == FSMC_Bank1_NORSRAM1) || ((BANK) == FSMC_Bank1_NORSRAM2) || ((BANK) == FSMC_Bank1_NORSRAM3) || ((BANK) == FSMC_Bank1_NORSRAM4))




#define IS_FSMC_NAND_BANK(BANK) (((BANK) == FSMC_Bank2_NAND) || ((BANK) == FSMC_Bank3_NAND))


#define IS_FSMC_GETFLAG_BANK(BANK) (((BANK) == FSMC_Bank2_NAND) || ((BANK) == FSMC_Bank3_NAND) || ((BANK) == FSMC_Bank4_PCCARD))



#define IS_FSMC_IT_BANK(BANK) (((BANK) == FSMC_Bank2_NAND) || ((BANK) == FSMC_Bank3_NAND) || ((BANK) == FSMC_Bank4_PCCARD))
# 298 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_fsmc.h"
#define FSMC_DataAddressMux_Disable ((uint32_t)0x00000000)
#define FSMC_DataAddressMux_Enable ((uint32_t)0x00000002)
#define IS_FSMC_MUX(MUX) (((MUX) == FSMC_DataAddressMux_Disable) || ((MUX) == FSMC_DataAddressMux_Enable))
# 311 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_fsmc.h"
#define FSMC_MemoryType_SRAM ((uint32_t)0x00000000)
#define FSMC_MemoryType_PSRAM ((uint32_t)0x00000004)
#define FSMC_MemoryType_NOR ((uint32_t)0x00000008)
#define IS_FSMC_MEMORY(MEMORY) (((MEMORY) == FSMC_MemoryType_SRAM) || ((MEMORY) == FSMC_MemoryType_PSRAM)|| ((MEMORY) == FSMC_MemoryType_NOR))
# 326 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_fsmc.h"
#define FSMC_MemoryDataWidth_8b ((uint32_t)0x00000000)
#define FSMC_MemoryDataWidth_16b ((uint32_t)0x00000010)
#define IS_FSMC_MEMORY_WIDTH(WIDTH) (((WIDTH) == FSMC_MemoryDataWidth_8b) || ((WIDTH) == FSMC_MemoryDataWidth_16b))
# 339 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_fsmc.h"
#define FSMC_BurstAccessMode_Disable ((uint32_t)0x00000000)
#define FSMC_BurstAccessMode_Enable ((uint32_t)0x00000100)
#define IS_FSMC_BURSTMODE(STATE) (((STATE) == FSMC_BurstAccessMode_Disable) || ((STATE) == FSMC_BurstAccessMode_Enable))
# 350 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_fsmc.h"
#define FSMC_AsynchronousWait_Disable ((uint32_t)0x00000000)
#define FSMC_AsynchronousWait_Enable ((uint32_t)0x00008000)
#define IS_FSMC_ASYNWAIT(STATE) (((STATE) == FSMC_AsynchronousWait_Disable) || ((STATE) == FSMC_AsynchronousWait_Enable))
# 363 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_fsmc.h"
#define FSMC_WaitSignalPolarity_Low ((uint32_t)0x00000000)
#define FSMC_WaitSignalPolarity_High ((uint32_t)0x00000200)
#define IS_FSMC_WAIT_POLARITY(POLARITY) (((POLARITY) == FSMC_WaitSignalPolarity_Low) || ((POLARITY) == FSMC_WaitSignalPolarity_High))
# 376 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_fsmc.h"
#define FSMC_WrapMode_Disable ((uint32_t)0x00000000)
#define FSMC_WrapMode_Enable ((uint32_t)0x00000400)
#define IS_FSMC_WRAP_MODE(MODE) (((MODE) == FSMC_WrapMode_Disable) || ((MODE) == FSMC_WrapMode_Enable))
# 389 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_fsmc.h"
#define FSMC_WaitSignalActive_BeforeWaitState ((uint32_t)0x00000000)
#define FSMC_WaitSignalActive_DuringWaitState ((uint32_t)0x00000800)
#define IS_FSMC_WAIT_SIGNAL_ACTIVE(ACTIVE) (((ACTIVE) == FSMC_WaitSignalActive_BeforeWaitState) || ((ACTIVE) == FSMC_WaitSignalActive_DuringWaitState))
# 402 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_fsmc.h"
#define FSMC_WriteOperation_Disable ((uint32_t)0x00000000)
#define FSMC_WriteOperation_Enable ((uint32_t)0x00001000)
#define IS_FSMC_WRITE_OPERATION(OPERATION) (((OPERATION) == FSMC_WriteOperation_Disable) || ((OPERATION) == FSMC_WriteOperation_Enable))
# 415 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_fsmc.h"
#define FSMC_WaitSignal_Disable ((uint32_t)0x00000000)
#define FSMC_WaitSignal_Enable ((uint32_t)0x00002000)
#define IS_FSMC_WAITE_SIGNAL(SIGNAL) (((SIGNAL) == FSMC_WaitSignal_Disable) || ((SIGNAL) == FSMC_WaitSignal_Enable))
# 427 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_fsmc.h"
#define FSMC_ExtendedMode_Disable ((uint32_t)0x00000000)
#define FSMC_ExtendedMode_Enable ((uint32_t)0x00004000)

#define IS_FSMC_EXTENDED_MODE(MODE) (((MODE) == FSMC_ExtendedMode_Disable) || ((MODE) == FSMC_ExtendedMode_Enable))
# 441 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_fsmc.h"
#define FSMC_WriteBurst_Disable ((uint32_t)0x00000000)
#define FSMC_WriteBurst_Enable ((uint32_t)0x00080000)
#define IS_FSMC_WRITE_BURST(BURST) (((BURST) == FSMC_WriteBurst_Disable) || ((BURST) == FSMC_WriteBurst_Enable))
# 453 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_fsmc.h"
#define IS_FSMC_ADDRESS_SETUP_TIME(TIME) ((TIME) <= 0xF)
# 463 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_fsmc.h"
#define IS_FSMC_ADDRESS_HOLD_TIME(TIME) ((TIME) <= 0xF)
# 473 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_fsmc.h"
#define IS_FSMC_DATASETUP_TIME(TIME) (((TIME) > 0) && ((TIME) <= 0xFF))
# 483 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_fsmc.h"
#define IS_FSMC_TURNAROUND_TIME(TIME) ((TIME) <= 0xF)
# 493 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_fsmc.h"
#define IS_FSMC_CLK_DIV(DIV) ((DIV) <= 0xF)
# 503 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_fsmc.h"
#define IS_FSMC_DATA_LATENCY(LATENCY) ((LATENCY) <= 0xF)
# 513 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_fsmc.h"
#define FSMC_AccessMode_A ((uint32_t)0x00000000)
#define FSMC_AccessMode_B ((uint32_t)0x10000000)
#define FSMC_AccessMode_C ((uint32_t)0x20000000)
#define FSMC_AccessMode_D ((uint32_t)0x30000000)
#define IS_FSMC_ACCESS_MODE(MODE) (((MODE) == FSMC_AccessMode_A) || ((MODE) == FSMC_AccessMode_B) || ((MODE) == FSMC_AccessMode_C) || ((MODE) == FSMC_AccessMode_D))
# 538 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_fsmc.h"
#define FSMC_Waitfeature_Disable ((uint32_t)0x00000000)
#define FSMC_Waitfeature_Enable ((uint32_t)0x00000002)
#define IS_FSMC_WAIT_FEATURE(FEATURE) (((FEATURE) == FSMC_Waitfeature_Disable) || ((FEATURE) == FSMC_Waitfeature_Enable))
# 552 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_fsmc.h"
#define FSMC_ECC_Disable ((uint32_t)0x00000000)
#define FSMC_ECC_Enable ((uint32_t)0x00000040)
#define IS_FSMC_ECC_STATE(STATE) (((STATE) == FSMC_ECC_Disable) || ((STATE) == FSMC_ECC_Enable))
# 565 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_fsmc.h"
#define FSMC_ECCPageSize_256Bytes ((uint32_t)0x00000000)
#define FSMC_ECCPageSize_512Bytes ((uint32_t)0x00020000)
#define FSMC_ECCPageSize_1024Bytes ((uint32_t)0x00040000)
#define FSMC_ECCPageSize_2048Bytes ((uint32_t)0x00060000)
#define FSMC_ECCPageSize_4096Bytes ((uint32_t)0x00080000)
#define FSMC_ECCPageSize_8192Bytes ((uint32_t)0x000A0000)
#define IS_FSMC_ECCPAGE_SIZE(SIZE) (((SIZE) == FSMC_ECCPageSize_256Bytes) || ((SIZE) == FSMC_ECCPageSize_512Bytes) || ((SIZE) == FSMC_ECCPageSize_1024Bytes) || ((SIZE) == FSMC_ECCPageSize_2048Bytes) || ((SIZE) == FSMC_ECCPageSize_4096Bytes) || ((SIZE) == FSMC_ECCPageSize_8192Bytes))
# 586 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_fsmc.h"
#define IS_FSMC_TCLR_TIME(TIME) ((TIME) <= 0xFF)
# 596 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_fsmc.h"
#define IS_FSMC_TAR_TIME(TIME) ((TIME) <= 0xFF)
# 606 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_fsmc.h"
#define IS_FSMC_SETUP_TIME(TIME) ((TIME) <= 0xFF)
# 616 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_fsmc.h"
#define IS_FSMC_WAIT_TIME(TIME) ((TIME) <= 0xFF)
# 626 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_fsmc.h"
#define IS_FSMC_HOLD_TIME(TIME) ((TIME) <= 0xFF)
# 636 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_fsmc.h"
#define IS_FSMC_HIZ_TIME(TIME) ((TIME) <= 0xFF)
# 646 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_fsmc.h"
#define FSMC_IT_RisingEdge ((uint32_t)0x00000008)
#define FSMC_IT_Level ((uint32_t)0x00000010)
#define FSMC_IT_FallingEdge ((uint32_t)0x00000020)
#define IS_FSMC_IT(IT) ((((IT) & (uint32_t)0xFFFFFFC7) == 0x00000000) && ((IT) != 0x00000000))
#define IS_FSMC_GET_IT(IT) (((IT) == FSMC_IT_RisingEdge) || ((IT) == FSMC_IT_Level) || ((IT) == FSMC_IT_FallingEdge))
# 661 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_fsmc.h"
#define FSMC_FLAG_RisingEdge ((uint32_t)0x00000001)
#define FSMC_FLAG_Level ((uint32_t)0x00000002)
#define FSMC_FLAG_FallingEdge ((uint32_t)0x00000004)
#define FSMC_FLAG_FEMPT ((uint32_t)0x00000040)
#define IS_FSMC_GET_FLAG(FLAG) (((FLAG) == FSMC_FLAG_RisingEdge) || ((FLAG) == FSMC_FLAG_Level) || ((FLAG) == FSMC_FLAG_FallingEdge) || ((FLAG) == FSMC_FLAG_FEMPT))




#define IS_FSMC_CLEAR_FLAG(FLAG) ((((FLAG) & (uint32_t)0xFFFFFFF8) == 0x00000000) && ((FLAG) != 0x00000000))
# 696 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_fsmc.h"
void FSMC_NORSRAMDeInit(uint32_t FSMC_Bank);
void FSMC_NANDDeInit(uint32_t FSMC_Bank);
void FSMC_PCCARDDeInit(void);
void FSMC_NORSRAMInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct);
void FSMC_NANDInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct);
void FSMC_PCCARDInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct);
void FSMC_NORSRAMStructInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct);
void FSMC_NANDStructInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct);
void FSMC_PCCARDStructInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct);
void FSMC_NORSRAMCmd(uint32_t FSMC_Bank, FunctionalState NewState);
void FSMC_NANDCmd(uint32_t FSMC_Bank, FunctionalState NewState);
void FSMC_PCCARDCmd(FunctionalState NewState);
void FSMC_NANDECCCmd(uint32_t FSMC_Bank, FunctionalState NewState);
uint32_t FSMC_GetECC(uint32_t FSMC_Bank);
void FSMC_ITConfig(uint32_t FSMC_Bank, uint32_t FSMC_IT, FunctionalState NewState);
FlagStatus FSMC_GetFlagStatus(uint32_t FSMC_Bank, uint32_t FSMC_FLAG);
void FSMC_ClearFlag(uint32_t FSMC_Bank, uint32_t FSMC_FLAG);
ITStatus FSMC_GetITStatus(uint32_t FSMC_Bank, uint32_t FSMC_IT);
void FSMC_ClearITPendingBit(uint32_t FSMC_Bank, uint32_t FSMC_IT);
# 39 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x_conf.h" 2
# 1 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_gpio.h" 1
# 25 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_gpio.h"
#define __STM32F10x_GPIO_H 
# 46 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_gpio.h"
#define IS_GPIO_ALL_PERIPH(PERIPH) (((PERIPH) == GPIOA) || ((PERIPH) == GPIOB) || ((PERIPH) == GPIOC) || ((PERIPH) == GPIOD) || ((PERIPH) == GPIOE) || ((PERIPH) == GPIOF) || ((PERIPH) == GPIOG))
# 58 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_gpio.h"
typedef enum
{
  GPIO_Speed_10MHz = 1,
  GPIO_Speed_2MHz,
  GPIO_Speed_50MHz
}GPIOSpeed_TypeDef;
#define IS_GPIO_SPEED(SPEED) (((SPEED) == GPIO_Speed_10MHz) || ((SPEED) == GPIO_Speed_2MHz) || ((SPEED) == GPIO_Speed_50MHz))






typedef enum
{ GPIO_Mode_AIN = 0x0,
  GPIO_Mode_IN_FLOATING = 0x04,
  GPIO_Mode_IPD = 0x28,
  GPIO_Mode_IPU = 0x48,
  GPIO_Mode_Out_OD = 0x14,
  GPIO_Mode_Out_PP = 0x10,
  GPIO_Mode_AF_OD = 0x1C,
  GPIO_Mode_AF_PP = 0x18
}GPIOMode_TypeDef;

#define IS_GPIO_MODE(MODE) (((MODE) == GPIO_Mode_AIN) || ((MODE) == GPIO_Mode_IN_FLOATING) || ((MODE) == GPIO_Mode_IPD) || ((MODE) == GPIO_Mode_IPU) || ((MODE) == GPIO_Mode_Out_OD) || ((MODE) == GPIO_Mode_Out_PP) || ((MODE) == GPIO_Mode_AF_OD) || ((MODE) == GPIO_Mode_AF_PP))
# 91 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_gpio.h"
typedef struct
{
  uint16_t GPIO_Pin;


  GPIOSpeed_TypeDef GPIO_Speed;


  GPIOMode_TypeDef GPIO_Mode;

}GPIO_InitTypeDef;






typedef enum
{ Bit_RESET = 0,
  Bit_SET
}BitAction;

#define IS_GPIO_BIT_ACTION(ACTION) (((ACTION) == Bit_RESET) || ((ACTION) == Bit_SET))
# 127 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_gpio.h"
#define GPIO_Pin_0 ((uint16_t)0x0001)
#define GPIO_Pin_1 ((uint16_t)0x0002)
#define GPIO_Pin_2 ((uint16_t)0x0004)
#define GPIO_Pin_3 ((uint16_t)0x0008)
#define GPIO_Pin_4 ((uint16_t)0x0010)
#define GPIO_Pin_5 ((uint16_t)0x0020)
#define GPIO_Pin_6 ((uint16_t)0x0040)
#define GPIO_Pin_7 ((uint16_t)0x0080)
#define GPIO_Pin_8 ((uint16_t)0x0100)
#define GPIO_Pin_9 ((uint16_t)0x0200)
#define GPIO_Pin_10 ((uint16_t)0x0400)
#define GPIO_Pin_11 ((uint16_t)0x0800)
#define GPIO_Pin_12 ((uint16_t)0x1000)
#define GPIO_Pin_13 ((uint16_t)0x2000)
#define GPIO_Pin_14 ((uint16_t)0x4000)
#define GPIO_Pin_15 ((uint16_t)0x8000)
#define GPIO_Pin_All ((uint16_t)0xFFFF)

#define IS_GPIO_PIN(PIN) ((((PIN) & (uint16_t)0x00) == 0x00) && ((PIN) != (uint16_t)0x00))

#define IS_GET_GPIO_PIN(PIN) (((PIN) == GPIO_Pin_0) || ((PIN) == GPIO_Pin_1) || ((PIN) == GPIO_Pin_2) || ((PIN) == GPIO_Pin_3) || ((PIN) == GPIO_Pin_4) || ((PIN) == GPIO_Pin_5) || ((PIN) == GPIO_Pin_6) || ((PIN) == GPIO_Pin_7) || ((PIN) == GPIO_Pin_8) || ((PIN) == GPIO_Pin_9) || ((PIN) == GPIO_Pin_10) || ((PIN) == GPIO_Pin_11) || ((PIN) == GPIO_Pin_12) || ((PIN) == GPIO_Pin_13) || ((PIN) == GPIO_Pin_14) || ((PIN) == GPIO_Pin_15))
# 172 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_gpio.h"
#define GPIO_Remap_SPI1 ((uint32_t)0x00000001)
#define GPIO_Remap_I2C1 ((uint32_t)0x00000002)
#define GPIO_Remap_USART1 ((uint32_t)0x00000004)
#define GPIO_Remap_USART2 ((uint32_t)0x00000008)
#define GPIO_PartialRemap_USART3 ((uint32_t)0x00140010)
#define GPIO_FullRemap_USART3 ((uint32_t)0x00140030)
#define GPIO_PartialRemap_TIM1 ((uint32_t)0x00160040)
#define GPIO_FullRemap_TIM1 ((uint32_t)0x001600C0)
#define GPIO_PartialRemap1_TIM2 ((uint32_t)0x00180100)
#define GPIO_PartialRemap2_TIM2 ((uint32_t)0x00180200)
#define GPIO_FullRemap_TIM2 ((uint32_t)0x00180300)
#define GPIO_PartialRemap_TIM3 ((uint32_t)0x001A0800)
#define GPIO_FullRemap_TIM3 ((uint32_t)0x001A0C00)
#define GPIO_Remap_TIM4 ((uint32_t)0x00001000)
#define GPIO_Remap1_CAN1 ((uint32_t)0x001D4000)
#define GPIO_Remap2_CAN1 ((uint32_t)0x001D6000)
#define GPIO_Remap_PD01 ((uint32_t)0x00008000)
#define GPIO_Remap_TIM5CH4_LSI ((uint32_t)0x00200001)
#define GPIO_Remap_ADC1_ETRGINJ ((uint32_t)0x00200002)
#define GPIO_Remap_ADC1_ETRGREG ((uint32_t)0x00200004)
#define GPIO_Remap_ADC2_ETRGINJ ((uint32_t)0x00200008)
#define GPIO_Remap_ADC2_ETRGREG ((uint32_t)0x00200010)
#define GPIO_Remap_ETH ((uint32_t)0x00200020)
#define GPIO_Remap_CAN2 ((uint32_t)0x00200040)
#define GPIO_Remap_SWJ_NoJTRST ((uint32_t)0x00300100)
#define GPIO_Remap_SWJ_JTAGDisable ((uint32_t)0x00300200)
#define GPIO_Remap_SWJ_Disable ((uint32_t)0x00300400)
#define GPIO_Remap_SPI3 ((uint32_t)0x00201100)
#define GPIO_Remap_TIM2ITR1_PTP_SOF ((uint32_t)0x00202000)


#define GPIO_Remap_PTP_PPS ((uint32_t)0x00204000)

#define GPIO_Remap_TIM15 ((uint32_t)0x80000001)
#define GPIO_Remap_TIM16 ((uint32_t)0x80000002)
#define GPIO_Remap_TIM17 ((uint32_t)0x80000004)
#define GPIO_Remap_CEC ((uint32_t)0x80000008)
#define GPIO_Remap_TIM1_DMA ((uint32_t)0x80000010)

#define GPIO_Remap_TIM9 ((uint32_t)0x80000020)
#define GPIO_Remap_TIM10 ((uint32_t)0x80000040)
#define GPIO_Remap_TIM11 ((uint32_t)0x80000080)
#define GPIO_Remap_TIM13 ((uint32_t)0x80000100)
#define GPIO_Remap_TIM14 ((uint32_t)0x80000200)
#define GPIO_Remap_FSMC_NADV ((uint32_t)0x80000400)

#define GPIO_Remap_TIM67_DAC_DMA ((uint32_t)0x80000800)
#define GPIO_Remap_TIM12 ((uint32_t)0x80001000)
#define GPIO_Remap_MISC ((uint32_t)0x80002000)


#define IS_GPIO_REMAP(REMAP) (((REMAP) == GPIO_Remap_SPI1) || ((REMAP) == GPIO_Remap_I2C1) || ((REMAP) == GPIO_Remap_USART1) || ((REMAP) == GPIO_Remap_USART2) || ((REMAP) == GPIO_PartialRemap_USART3) || ((REMAP) == GPIO_FullRemap_USART3) || ((REMAP) == GPIO_PartialRemap_TIM1) || ((REMAP) == GPIO_FullRemap_TIM1) || ((REMAP) == GPIO_PartialRemap1_TIM2) || ((REMAP) == GPIO_PartialRemap2_TIM2) || ((REMAP) == GPIO_FullRemap_TIM2) || ((REMAP) == GPIO_PartialRemap_TIM3) || ((REMAP) == GPIO_FullRemap_TIM3) || ((REMAP) == GPIO_Remap_TIM4) || ((REMAP) == GPIO_Remap1_CAN1) || ((REMAP) == GPIO_Remap2_CAN1) || ((REMAP) == GPIO_Remap_PD01) || ((REMAP) == GPIO_Remap_TIM5CH4_LSI) || ((REMAP) == GPIO_Remap_ADC1_ETRGINJ) ||((REMAP) == GPIO_Remap_ADC1_ETRGREG) || ((REMAP) == GPIO_Remap_ADC2_ETRGINJ) ||((REMAP) == GPIO_Remap_ADC2_ETRGREG) || ((REMAP) == GPIO_Remap_ETH) ||((REMAP) == GPIO_Remap_CAN2) || ((REMAP) == GPIO_Remap_SWJ_NoJTRST) || ((REMAP) == GPIO_Remap_SWJ_JTAGDisable) || ((REMAP) == GPIO_Remap_SWJ_Disable)|| ((REMAP) == GPIO_Remap_SPI3) || ((REMAP) == GPIO_Remap_TIM2ITR1_PTP_SOF) || ((REMAP) == GPIO_Remap_PTP_PPS) || ((REMAP) == GPIO_Remap_TIM15) || ((REMAP) == GPIO_Remap_TIM16) || ((REMAP) == GPIO_Remap_TIM17) || ((REMAP) == GPIO_Remap_CEC) || ((REMAP) == GPIO_Remap_TIM1_DMA) || ((REMAP) == GPIO_Remap_TIM9) || ((REMAP) == GPIO_Remap_TIM10) || ((REMAP) == GPIO_Remap_TIM11) || ((REMAP) == GPIO_Remap_TIM13) || ((REMAP) == GPIO_Remap_TIM14) || ((REMAP) == GPIO_Remap_FSMC_NADV) || ((REMAP) == GPIO_Remap_TIM67_DAC_DMA) || ((REMAP) == GPIO_Remap_TIM12) || ((REMAP) == GPIO_Remap_MISC))
# 254 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_gpio.h"
#define GPIO_PortSourceGPIOA ((uint8_t)0x00)
#define GPIO_PortSourceGPIOB ((uint8_t)0x01)
#define GPIO_PortSourceGPIOC ((uint8_t)0x02)
#define GPIO_PortSourceGPIOD ((uint8_t)0x03)
#define GPIO_PortSourceGPIOE ((uint8_t)0x04)
#define GPIO_PortSourceGPIOF ((uint8_t)0x05)
#define GPIO_PortSourceGPIOG ((uint8_t)0x06)
#define IS_GPIO_EVENTOUT_PORT_SOURCE(PORTSOURCE) (((PORTSOURCE) == GPIO_PortSourceGPIOA) || ((PORTSOURCE) == GPIO_PortSourceGPIOB) || ((PORTSOURCE) == GPIO_PortSourceGPIOC) || ((PORTSOURCE) == GPIO_PortSourceGPIOD) || ((PORTSOURCE) == GPIO_PortSourceGPIOE))





#define IS_GPIO_EXTI_PORT_SOURCE(PORTSOURCE) (((PORTSOURCE) == GPIO_PortSourceGPIOA) || ((PORTSOURCE) == GPIO_PortSourceGPIOB) || ((PORTSOURCE) == GPIO_PortSourceGPIOC) || ((PORTSOURCE) == GPIO_PortSourceGPIOD) || ((PORTSOURCE) == GPIO_PortSourceGPIOE) || ((PORTSOURCE) == GPIO_PortSourceGPIOF) || ((PORTSOURCE) == GPIO_PortSourceGPIOG))
# 283 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_gpio.h"
#define GPIO_PinSource0 ((uint8_t)0x00)
#define GPIO_PinSource1 ((uint8_t)0x01)
#define GPIO_PinSource2 ((uint8_t)0x02)
#define GPIO_PinSource3 ((uint8_t)0x03)
#define GPIO_PinSource4 ((uint8_t)0x04)
#define GPIO_PinSource5 ((uint8_t)0x05)
#define GPIO_PinSource6 ((uint8_t)0x06)
#define GPIO_PinSource7 ((uint8_t)0x07)
#define GPIO_PinSource8 ((uint8_t)0x08)
#define GPIO_PinSource9 ((uint8_t)0x09)
#define GPIO_PinSource10 ((uint8_t)0x0A)
#define GPIO_PinSource11 ((uint8_t)0x0B)
#define GPIO_PinSource12 ((uint8_t)0x0C)
#define GPIO_PinSource13 ((uint8_t)0x0D)
#define GPIO_PinSource14 ((uint8_t)0x0E)
#define GPIO_PinSource15 ((uint8_t)0x0F)

#define IS_GPIO_PIN_SOURCE(PINSOURCE) (((PINSOURCE) == GPIO_PinSource0) || ((PINSOURCE) == GPIO_PinSource1) || ((PINSOURCE) == GPIO_PinSource2) || ((PINSOURCE) == GPIO_PinSource3) || ((PINSOURCE) == GPIO_PinSource4) || ((PINSOURCE) == GPIO_PinSource5) || ((PINSOURCE) == GPIO_PinSource6) || ((PINSOURCE) == GPIO_PinSource7) || ((PINSOURCE) == GPIO_PinSource8) || ((PINSOURCE) == GPIO_PinSource9) || ((PINSOURCE) == GPIO_PinSource10) || ((PINSOURCE) == GPIO_PinSource11) || ((PINSOURCE) == GPIO_PinSource12) || ((PINSOURCE) == GPIO_PinSource13) || ((PINSOURCE) == GPIO_PinSource14) || ((PINSOURCE) == GPIO_PinSource15))
# 324 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_gpio.h"
#define GPIO_ETH_MediaInterface_MII ((u32)0x00000000)
#define GPIO_ETH_MediaInterface_RMII ((u32)0x00000001)

#define IS_GPIO_ETH_MEDIA_INTERFACE(INTERFACE) (((INTERFACE) == GPIO_ETH_MediaInterface_MII) || ((INTERFACE) == GPIO_ETH_MediaInterface_RMII))
# 349 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_gpio.h"
void GPIO_DeInit(GPIO_TypeDef* GPIOx);
void GPIO_AFIODeInit(void);
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct);
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct);
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx);
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx);
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal);
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal);
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource);
void GPIO_EventOutputCmd(FunctionalState NewState);
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState);
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource);
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface);
# 40 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x_conf.h" 2
# 1 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_i2c.h" 1
# 25 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_i2c.h"
#define __STM32F10x_I2C_H 
# 50 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_i2c.h"
typedef struct
{
  uint32_t I2C_ClockSpeed;


  uint16_t I2C_Mode;


  uint16_t I2C_DutyCycle;


  uint16_t I2C_OwnAddress1;


  uint16_t I2C_Ack;


  uint16_t I2C_AcknowledgedAddress;

}I2C_InitTypeDef;
# 80 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_i2c.h"
#define IS_I2C_ALL_PERIPH(PERIPH) (((PERIPH) == I2C1) || ((PERIPH) == I2C2))





#define I2C_Mode_I2C ((uint16_t)0x0000)
#define I2C_Mode_SMBusDevice ((uint16_t)0x0002)
#define I2C_Mode_SMBusHost ((uint16_t)0x000A)
#define IS_I2C_MODE(MODE) (((MODE) == I2C_Mode_I2C) || ((MODE) == I2C_Mode_SMBusDevice) || ((MODE) == I2C_Mode_SMBusHost))
# 100 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_i2c.h"
#define I2C_DutyCycle_16_9 ((uint16_t)0x4000)
#define I2C_DutyCycle_2 ((uint16_t)0xBFFF)
#define IS_I2C_DUTY_CYCLE(CYCLE) (((CYCLE) == I2C_DutyCycle_16_9) || ((CYCLE) == I2C_DutyCycle_2))
# 112 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_i2c.h"
#define I2C_Ack_Enable ((uint16_t)0x0400)
#define I2C_Ack_Disable ((uint16_t)0x0000)
#define IS_I2C_ACK_STATE(STATE) (((STATE) == I2C_Ack_Enable) || ((STATE) == I2C_Ack_Disable))
# 124 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_i2c.h"
#define I2C_Direction_Transmitter ((uint8_t)0x00)
#define I2C_Direction_Receiver ((uint8_t)0x01)
#define IS_I2C_DIRECTION(DIRECTION) (((DIRECTION) == I2C_Direction_Transmitter) || ((DIRECTION) == I2C_Direction_Receiver))
# 136 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_i2c.h"
#define I2C_AcknowledgedAddress_7bit ((uint16_t)0x4000)
#define I2C_AcknowledgedAddress_10bit ((uint16_t)0xC000)
#define IS_I2C_ACKNOWLEDGE_ADDRESS(ADDRESS) (((ADDRESS) == I2C_AcknowledgedAddress_7bit) || ((ADDRESS) == I2C_AcknowledgedAddress_10bit))
# 148 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_i2c.h"
#define I2C_Register_CR1 ((uint8_t)0x00)
#define I2C_Register_CR2 ((uint8_t)0x04)
#define I2C_Register_OAR1 ((uint8_t)0x08)
#define I2C_Register_OAR2 ((uint8_t)0x0C)
#define I2C_Register_DR ((uint8_t)0x10)
#define I2C_Register_SR1 ((uint8_t)0x14)
#define I2C_Register_SR2 ((uint8_t)0x18)
#define I2C_Register_CCR ((uint8_t)0x1C)
#define I2C_Register_TRISE ((uint8_t)0x20)
#define IS_I2C_REGISTER(REGISTER) (((REGISTER) == I2C_Register_CR1) || ((REGISTER) == I2C_Register_CR2) || ((REGISTER) == I2C_Register_OAR1) || ((REGISTER) == I2C_Register_OAR2) || ((REGISTER) == I2C_Register_DR) || ((REGISTER) == I2C_Register_SR1) || ((REGISTER) == I2C_Register_SR2) || ((REGISTER) == I2C_Register_CCR) || ((REGISTER) == I2C_Register_TRISE))
# 174 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_i2c.h"
#define I2C_SMBusAlert_Low ((uint16_t)0x2000)
#define I2C_SMBusAlert_High ((uint16_t)0xDFFF)
#define IS_I2C_SMBUS_ALERT(ALERT) (((ALERT) == I2C_SMBusAlert_Low) || ((ALERT) == I2C_SMBusAlert_High))
# 186 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_i2c.h"
#define I2C_PECPosition_Next ((uint16_t)0x0800)
#define I2C_PECPosition_Current ((uint16_t)0xF7FF)
#define IS_I2C_PEC_POSITION(POSITION) (((POSITION) == I2C_PECPosition_Next) || ((POSITION) == I2C_PECPosition_Current))
# 198 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_i2c.h"
#define I2C_NACKPosition_Next ((uint16_t)0x0800)
#define I2C_NACKPosition_Current ((uint16_t)0xF7FF)
#define IS_I2C_NACK_POSITION(POSITION) (((POSITION) == I2C_NACKPosition_Next) || ((POSITION) == I2C_NACKPosition_Current))
# 210 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_i2c.h"
#define I2C_IT_BUF ((uint16_t)0x0400)
#define I2C_IT_EVT ((uint16_t)0x0200)
#define I2C_IT_ERR ((uint16_t)0x0100)
#define IS_I2C_CONFIG_IT(IT) ((((IT) & (uint16_t)0xF8FF) == 0x00) && ((IT) != 0x00))
# 222 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_i2c.h"
#define I2C_IT_SMBALERT ((uint32_t)0x01008000)
#define I2C_IT_TIMEOUT ((uint32_t)0x01004000)
#define I2C_IT_PECERR ((uint32_t)0x01001000)
#define I2C_IT_OVR ((uint32_t)0x01000800)
#define I2C_IT_AF ((uint32_t)0x01000400)
#define I2C_IT_ARLO ((uint32_t)0x01000200)
#define I2C_IT_BERR ((uint32_t)0x01000100)
#define I2C_IT_TXE ((uint32_t)0x06000080)
#define I2C_IT_RXNE ((uint32_t)0x06000040)
#define I2C_IT_STOPF ((uint32_t)0x02000010)
#define I2C_IT_ADD10 ((uint32_t)0x02000008)
#define I2C_IT_BTF ((uint32_t)0x02000004)
#define I2C_IT_ADDR ((uint32_t)0x02000002)
#define I2C_IT_SB ((uint32_t)0x02000001)

#define IS_I2C_CLEAR_IT(IT) ((((IT) & (uint16_t)0x20FF) == 0x00) && ((IT) != (uint16_t)0x00))

#define IS_I2C_GET_IT(IT) (((IT) == I2C_IT_SMBALERT) || ((IT) == I2C_IT_TIMEOUT) || ((IT) == I2C_IT_PECERR) || ((IT) == I2C_IT_OVR) || ((IT) == I2C_IT_AF) || ((IT) == I2C_IT_ARLO) || ((IT) == I2C_IT_BERR) || ((IT) == I2C_IT_TXE) || ((IT) == I2C_IT_RXNE) || ((IT) == I2C_IT_STOPF) || ((IT) == I2C_IT_ADD10) || ((IT) == I2C_IT_BTF) || ((IT) == I2C_IT_ADDR) || ((IT) == I2C_IT_SB))
# 258 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_i2c.h"
#define I2C_FLAG_DUALF ((uint32_t)0x00800000)
#define I2C_FLAG_SMBHOST ((uint32_t)0x00400000)
#define I2C_FLAG_SMBDEFAULT ((uint32_t)0x00200000)
#define I2C_FLAG_GENCALL ((uint32_t)0x00100000)
#define I2C_FLAG_TRA ((uint32_t)0x00040000)
#define I2C_FLAG_BUSY ((uint32_t)0x00020000)
#define I2C_FLAG_MSL ((uint32_t)0x00010000)





#define I2C_FLAG_SMBALERT ((uint32_t)0x10008000)
#define I2C_FLAG_TIMEOUT ((uint32_t)0x10004000)
#define I2C_FLAG_PECERR ((uint32_t)0x10001000)
#define I2C_FLAG_OVR ((uint32_t)0x10000800)
#define I2C_FLAG_AF ((uint32_t)0x10000400)
#define I2C_FLAG_ARLO ((uint32_t)0x10000200)
#define I2C_FLAG_BERR ((uint32_t)0x10000100)
#define I2C_FLAG_TXE ((uint32_t)0x10000080)
#define I2C_FLAG_RXNE ((uint32_t)0x10000040)
#define I2C_FLAG_STOPF ((uint32_t)0x10000010)
#define I2C_FLAG_ADD10 ((uint32_t)0x10000008)
#define I2C_FLAG_BTF ((uint32_t)0x10000004)
#define I2C_FLAG_ADDR ((uint32_t)0x10000002)
#define I2C_FLAG_SB ((uint32_t)0x10000001)

#define IS_I2C_CLEAR_FLAG(FLAG) ((((FLAG) & (uint16_t)0x20FF) == 0x00) && ((FLAG) != (uint16_t)0x00))

#define IS_I2C_GET_FLAG(FLAG) (((FLAG) == I2C_FLAG_DUALF) || ((FLAG) == I2C_FLAG_SMBHOST) || ((FLAG) == I2C_FLAG_SMBDEFAULT) || ((FLAG) == I2C_FLAG_GENCALL) || ((FLAG) == I2C_FLAG_TRA) || ((FLAG) == I2C_FLAG_BUSY) || ((FLAG) == I2C_FLAG_MSL) || ((FLAG) == I2C_FLAG_SMBALERT) || ((FLAG) == I2C_FLAG_TIMEOUT) || ((FLAG) == I2C_FLAG_PECERR) || ((FLAG) == I2C_FLAG_OVR) || ((FLAG) == I2C_FLAG_AF) || ((FLAG) == I2C_FLAG_ARLO) || ((FLAG) == I2C_FLAG_BERR) || ((FLAG) == I2C_FLAG_TXE) || ((FLAG) == I2C_FLAG_RXNE) || ((FLAG) == I2C_FLAG_STOPF) || ((FLAG) == I2C_FLAG_ADD10) || ((FLAG) == I2C_FLAG_BTF) || ((FLAG) == I2C_FLAG_ADDR) || ((FLAG) == I2C_FLAG_SB))
# 319 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_i2c.h"
#define I2C_EVENT_MASTER_MODE_SELECT ((uint32_t)0x00030001)
# 347 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_i2c.h"
#define I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED ((uint32_t)0x00070082)
#define I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED ((uint32_t)0x00030002)

#define I2C_EVENT_MASTER_MODE_ADDRESS10 ((uint32_t)0x00030008)
# 383 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_i2c.h"
#define I2C_EVENT_MASTER_BYTE_RECEIVED ((uint32_t)0x00030040)



#define I2C_EVENT_MASTER_BYTE_TRANSMITTING ((uint32_t)0x00070080)

#define I2C_EVENT_MASTER_BYTE_TRANSMITTED ((uint32_t)0x00070084)
# 424 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_i2c.h"
#define I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED ((uint32_t)0x00020002)
#define I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED ((uint32_t)0x00060082)


#define I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED ((uint32_t)0x00820000)
#define I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED ((uint32_t)0x00860080)


#define I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED ((uint32_t)0x00120000)
# 463 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_i2c.h"
#define I2C_EVENT_SLAVE_BYTE_RECEIVED ((uint32_t)0x00020040)

#define I2C_EVENT_SLAVE_STOP_DETECTED ((uint32_t)0x00000010)



#define I2C_EVENT_SLAVE_BYTE_TRANSMITTED ((uint32_t)0x00060084)
#define I2C_EVENT_SLAVE_BYTE_TRANSMITTING ((uint32_t)0x00060080)

#define I2C_EVENT_SLAVE_ACK_FAILURE ((uint32_t)0x00000400)



#define IS_I2C_EVENT(EVENT) (((EVENT) == I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED) || ((EVENT) == I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED) || ((EVENT) == I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED) || ((EVENT) == I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED) || ((EVENT) == I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED) || ((EVENT) == I2C_EVENT_SLAVE_BYTE_RECEIVED) || ((EVENT) == (I2C_EVENT_SLAVE_BYTE_RECEIVED | I2C_FLAG_DUALF)) || ((EVENT) == (I2C_EVENT_SLAVE_BYTE_RECEIVED | I2C_FLAG_GENCALL)) || ((EVENT) == I2C_EVENT_SLAVE_BYTE_TRANSMITTED) || ((EVENT) == (I2C_EVENT_SLAVE_BYTE_TRANSMITTED | I2C_FLAG_DUALF)) || ((EVENT) == (I2C_EVENT_SLAVE_BYTE_TRANSMITTED | I2C_FLAG_GENCALL)) || ((EVENT) == I2C_EVENT_SLAVE_STOP_DETECTED) || ((EVENT) == I2C_EVENT_MASTER_MODE_SELECT) || ((EVENT) == I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED) || ((EVENT) == I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED) || ((EVENT) == I2C_EVENT_MASTER_BYTE_RECEIVED) || ((EVENT) == I2C_EVENT_MASTER_BYTE_TRANSMITTED) || ((EVENT) == I2C_EVENT_MASTER_BYTE_TRANSMITTING) || ((EVENT) == I2C_EVENT_MASTER_MODE_ADDRESS10) || ((EVENT) == I2C_EVENT_SLAVE_ACK_FAILURE))
# 504 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_i2c.h"
#define IS_I2C_OWN_ADDRESS1(ADDRESS1) ((ADDRESS1) <= 0x3FF)
# 513 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_i2c.h"
#define IS_I2C_CLOCK_SPEED(SPEED) (((SPEED) >= 0x1) && ((SPEED) <= 400000))
# 534 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_i2c.h"
void I2C_DeInit(I2C_TypeDef* I2Cx);
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct);
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct);
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState);
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState);
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState);
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState);
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState);
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState);
void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint8_t Address);
void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState);
void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState);
void I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState);
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data);
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx);
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction);
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register);
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState);
void I2C_NACKPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_NACKPosition);
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert);
void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState);
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition);
void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState);
uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx);
void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState);
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState);
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle);
# 645 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_i2c.h"
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT);





uint32_t I2C_GetLastEvent(I2C_TypeDef* I2Cx);





FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG);





void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG);
ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT);
void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT);
# 41 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x_conf.h" 2
# 1 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_iwdg.h" 1
# 25 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_iwdg.h"
#define __STM32F10x_IWDG_H 
# 58 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_iwdg.h"
#define IWDG_WriteAccess_Enable ((uint16_t)0x5555)
#define IWDG_WriteAccess_Disable ((uint16_t)0x0000)
#define IS_IWDG_WRITE_ACCESS(ACCESS) (((ACCESS) == IWDG_WriteAccess_Enable) || ((ACCESS) == IWDG_WriteAccess_Disable))
# 70 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_iwdg.h"
#define IWDG_Prescaler_4 ((uint8_t)0x00)
#define IWDG_Prescaler_8 ((uint8_t)0x01)
#define IWDG_Prescaler_16 ((uint8_t)0x02)
#define IWDG_Prescaler_32 ((uint8_t)0x03)
#define IWDG_Prescaler_64 ((uint8_t)0x04)
#define IWDG_Prescaler_128 ((uint8_t)0x05)
#define IWDG_Prescaler_256 ((uint8_t)0x06)
#define IS_IWDG_PRESCALER(PRESCALER) (((PRESCALER) == IWDG_Prescaler_4) || ((PRESCALER) == IWDG_Prescaler_8) || ((PRESCALER) == IWDG_Prescaler_16) || ((PRESCALER) == IWDG_Prescaler_32) || ((PRESCALER) == IWDG_Prescaler_64) || ((PRESCALER) == IWDG_Prescaler_128)|| ((PRESCALER) == IWDG_Prescaler_256))
# 92 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_iwdg.h"
#define IWDG_FLAG_PVU ((uint16_t)0x0001)
#define IWDG_FLAG_RVU ((uint16_t)0x0002)
#define IS_IWDG_FLAG(FLAG) (((FLAG) == IWDG_FLAG_PVU) || ((FLAG) == IWDG_FLAG_RVU))
#define IS_IWDG_RELOAD(RELOAD) ((RELOAD) <= 0xFFF)
# 116 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_iwdg.h"
void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess);
void IWDG_SetPrescaler(uint8_t IWDG_Prescaler);
void IWDG_SetReload(uint16_t Reload);
void IWDG_ReloadCounter(void);
void IWDG_Enable(void);
FlagStatus IWDG_GetFlagStatus(uint16_t IWDG_FLAG);
# 42 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x_conf.h" 2
# 1 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_pwr.h" 1
# 25 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_pwr.h"
#define __STM32F10x_PWR_H 
# 58 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_pwr.h"
#define PWR_PVDLevel_2V2 ((uint32_t)0x00000000)
#define PWR_PVDLevel_2V3 ((uint32_t)0x00000020)
#define PWR_PVDLevel_2V4 ((uint32_t)0x00000040)
#define PWR_PVDLevel_2V5 ((uint32_t)0x00000060)
#define PWR_PVDLevel_2V6 ((uint32_t)0x00000080)
#define PWR_PVDLevel_2V7 ((uint32_t)0x000000A0)
#define PWR_PVDLevel_2V8 ((uint32_t)0x000000C0)
#define PWR_PVDLevel_2V9 ((uint32_t)0x000000E0)
#define IS_PWR_PVD_LEVEL(LEVEL) (((LEVEL) == PWR_PVDLevel_2V2) || ((LEVEL) == PWR_PVDLevel_2V3)|| ((LEVEL) == PWR_PVDLevel_2V4) || ((LEVEL) == PWR_PVDLevel_2V5)|| ((LEVEL) == PWR_PVDLevel_2V6) || ((LEVEL) == PWR_PVDLevel_2V7)|| ((LEVEL) == PWR_PVDLevel_2V8) || ((LEVEL) == PWR_PVDLevel_2V9))
# 78 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_pwr.h"
#define PWR_Regulator_ON ((uint32_t)0x00000000)
#define PWR_Regulator_LowPower ((uint32_t)0x00000001)
#define IS_PWR_REGULATOR(REGULATOR) (((REGULATOR) == PWR_Regulator_ON) || ((REGULATOR) == PWR_Regulator_LowPower))
# 90 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_pwr.h"
#define PWR_STOPEntry_WFI ((uint8_t)0x01)
#define PWR_STOPEntry_WFE ((uint8_t)0x02)
#define IS_PWR_STOP_ENTRY(ENTRY) (((ENTRY) == PWR_STOPEntry_WFI) || ((ENTRY) == PWR_STOPEntry_WFE))
# 102 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_pwr.h"
#define PWR_FLAG_WU ((uint32_t)0x00000001)
#define PWR_FLAG_SB ((uint32_t)0x00000002)
#define PWR_FLAG_PVDO ((uint32_t)0x00000004)
#define IS_PWR_GET_FLAG(FLAG) (((FLAG) == PWR_FLAG_WU) || ((FLAG) == PWR_FLAG_SB) || ((FLAG) == PWR_FLAG_PVDO))


#define IS_PWR_CLEAR_FLAG(FLAG) (((FLAG) == PWR_FLAG_WU) || ((FLAG) == PWR_FLAG_SB))
# 129 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_pwr.h"
void PWR_DeInit(void);
void PWR_BackupAccessCmd(FunctionalState NewState);
void PWR_PVDCmd(FunctionalState NewState);
void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel);
void PWR_WakeUpPinCmd(FunctionalState NewState);
void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry);
void PWR_EnterSTANDBYMode(void);
FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG);
void PWR_ClearFlag(uint32_t PWR_FLAG);
# 43 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x_conf.h" 2
# 1 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rcc.h" 1
# 25 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rcc.h"
#define __STM32F10x_RCC_H 
# 46 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rcc.h"
typedef struct
{
  uint32_t SYSCLK_Frequency;
  uint32_t HCLK_Frequency;
  uint32_t PCLK1_Frequency;
  uint32_t PCLK2_Frequency;
  uint32_t ADCCLK_Frequency;
}RCC_ClocksTypeDef;
# 67 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rcc.h"
#define RCC_HSE_OFF ((uint32_t)0x00000000)
#define RCC_HSE_ON ((uint32_t)0x00010000)
#define RCC_HSE_Bypass ((uint32_t)0x00040000)
#define IS_RCC_HSE(HSE) (((HSE) == RCC_HSE_OFF) || ((HSE) == RCC_HSE_ON) || ((HSE) == RCC_HSE_Bypass))
# 81 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rcc.h"
#define RCC_PLLSource_HSI_Div2 ((uint32_t)0x00000000)


#define RCC_PLLSource_HSE_Div1 ((uint32_t)0x00010000)
#define RCC_PLLSource_HSE_Div2 ((uint32_t)0x00030000)
#define IS_RCC_PLL_SOURCE(SOURCE) (((SOURCE) == RCC_PLLSource_HSI_Div2) || ((SOURCE) == RCC_PLLSource_HSE_Div1) || ((SOURCE) == RCC_PLLSource_HSE_Div2))
# 103 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rcc.h"
#define RCC_PLLMul_2 ((uint32_t)0x00000000)
#define RCC_PLLMul_3 ((uint32_t)0x00040000)
#define RCC_PLLMul_4 ((uint32_t)0x00080000)
#define RCC_PLLMul_5 ((uint32_t)0x000C0000)
#define RCC_PLLMul_6 ((uint32_t)0x00100000)
#define RCC_PLLMul_7 ((uint32_t)0x00140000)
#define RCC_PLLMul_8 ((uint32_t)0x00180000)
#define RCC_PLLMul_9 ((uint32_t)0x001C0000)
#define RCC_PLLMul_10 ((uint32_t)0x00200000)
#define RCC_PLLMul_11 ((uint32_t)0x00240000)
#define RCC_PLLMul_12 ((uint32_t)0x00280000)
#define RCC_PLLMul_13 ((uint32_t)0x002C0000)
#define RCC_PLLMul_14 ((uint32_t)0x00300000)
#define RCC_PLLMul_15 ((uint32_t)0x00340000)
#define RCC_PLLMul_16 ((uint32_t)0x00380000)
#define IS_RCC_PLL_MUL(MUL) (((MUL) == RCC_PLLMul_2) || ((MUL) == RCC_PLLMul_3) || ((MUL) == RCC_PLLMul_4) || ((MUL) == RCC_PLLMul_5) || ((MUL) == RCC_PLLMul_6) || ((MUL) == RCC_PLLMul_7) || ((MUL) == RCC_PLLMul_8) || ((MUL) == RCC_PLLMul_9) || ((MUL) == RCC_PLLMul_10) || ((MUL) == RCC_PLLMul_11) || ((MUL) == RCC_PLLMul_12) || ((MUL) == RCC_PLLMul_13) || ((MUL) == RCC_PLLMul_14) || ((MUL) == RCC_PLLMul_15) || ((MUL) == RCC_PLLMul_16))
# 289 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rcc.h"
#define RCC_SYSCLKSource_HSI ((uint32_t)0x00000000)
#define RCC_SYSCLKSource_HSE ((uint32_t)0x00000001)
#define RCC_SYSCLKSource_PLLCLK ((uint32_t)0x00000002)
#define IS_RCC_SYSCLK_SOURCE(SOURCE) (((SOURCE) == RCC_SYSCLKSource_HSI) || ((SOURCE) == RCC_SYSCLKSource_HSE) || ((SOURCE) == RCC_SYSCLKSource_PLLCLK))
# 303 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rcc.h"
#define RCC_SYSCLK_Div1 ((uint32_t)0x00000000)
#define RCC_SYSCLK_Div2 ((uint32_t)0x00000080)
#define RCC_SYSCLK_Div4 ((uint32_t)0x00000090)
#define RCC_SYSCLK_Div8 ((uint32_t)0x000000A0)
#define RCC_SYSCLK_Div16 ((uint32_t)0x000000B0)
#define RCC_SYSCLK_Div64 ((uint32_t)0x000000C0)
#define RCC_SYSCLK_Div128 ((uint32_t)0x000000D0)
#define RCC_SYSCLK_Div256 ((uint32_t)0x000000E0)
#define RCC_SYSCLK_Div512 ((uint32_t)0x000000F0)
#define IS_RCC_HCLK(HCLK) (((HCLK) == RCC_SYSCLK_Div1) || ((HCLK) == RCC_SYSCLK_Div2) || ((HCLK) == RCC_SYSCLK_Div4) || ((HCLK) == RCC_SYSCLK_Div8) || ((HCLK) == RCC_SYSCLK_Div16) || ((HCLK) == RCC_SYSCLK_Div64) || ((HCLK) == RCC_SYSCLK_Div128) || ((HCLK) == RCC_SYSCLK_Div256) || ((HCLK) == RCC_SYSCLK_Div512))
# 325 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rcc.h"
#define RCC_HCLK_Div1 ((uint32_t)0x00000000)
#define RCC_HCLK_Div2 ((uint32_t)0x00000400)
#define RCC_HCLK_Div4 ((uint32_t)0x00000500)
#define RCC_HCLK_Div8 ((uint32_t)0x00000600)
#define RCC_HCLK_Div16 ((uint32_t)0x00000700)
#define IS_RCC_PCLK(PCLK) (((PCLK) == RCC_HCLK_Div1) || ((PCLK) == RCC_HCLK_Div2) || ((PCLK) == RCC_HCLK_Div4) || ((PCLK) == RCC_HCLK_Div8) || ((PCLK) == RCC_HCLK_Div16))
# 341 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rcc.h"
#define RCC_IT_LSIRDY ((uint8_t)0x01)
#define RCC_IT_LSERDY ((uint8_t)0x02)
#define RCC_IT_HSIRDY ((uint8_t)0x04)
#define RCC_IT_HSERDY ((uint8_t)0x08)
#define RCC_IT_PLLRDY ((uint8_t)0x10)
#define RCC_IT_CSS ((uint8_t)0x80)


#define IS_RCC_IT(IT) ((((IT) & (uint8_t)0xE0) == 0x00) && ((IT) != 0x00))
#define IS_RCC_GET_IT(IT) (((IT) == RCC_IT_LSIRDY) || ((IT) == RCC_IT_LSERDY) || ((IT) == RCC_IT_HSIRDY) || ((IT) == RCC_IT_HSERDY) || ((IT) == RCC_IT_PLLRDY) || ((IT) == RCC_IT_CSS))


#define IS_RCC_CLEAR_IT(IT) ((((IT) & (uint8_t)0x60) == 0x00) && ((IT) != 0x00))
# 375 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rcc.h"
#define RCC_USBCLKSource_PLLCLK_1Div5 ((uint8_t)0x00)
#define RCC_USBCLKSource_PLLCLK_Div1 ((uint8_t)0x01)

#define IS_RCC_USBCLK_SOURCE(SOURCE) (((SOURCE) == RCC_USBCLKSource_PLLCLK_1Div5) || ((SOURCE) == RCC_USBCLKSource_PLLCLK_Div1))
# 429 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rcc.h"
#define RCC_PCLK2_Div2 ((uint32_t)0x00000000)
#define RCC_PCLK2_Div4 ((uint32_t)0x00004000)
#define RCC_PCLK2_Div6 ((uint32_t)0x00008000)
#define RCC_PCLK2_Div8 ((uint32_t)0x0000C000)
#define IS_RCC_ADCCLK(ADCCLK) (((ADCCLK) == RCC_PCLK2_Div2) || ((ADCCLK) == RCC_PCLK2_Div4) || ((ADCCLK) == RCC_PCLK2_Div6) || ((ADCCLK) == RCC_PCLK2_Div8))
# 443 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rcc.h"
#define RCC_LSE_OFF ((uint8_t)0x00)
#define RCC_LSE_ON ((uint8_t)0x01)
#define RCC_LSE_Bypass ((uint8_t)0x04)
#define IS_RCC_LSE(LSE) (((LSE) == RCC_LSE_OFF) || ((LSE) == RCC_LSE_ON) || ((LSE) == RCC_LSE_Bypass))
# 456 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rcc.h"
#define RCC_RTCCLKSource_LSE ((uint32_t)0x00000100)
#define RCC_RTCCLKSource_LSI ((uint32_t)0x00000200)
#define RCC_RTCCLKSource_HSE_Div128 ((uint32_t)0x00000300)
#define IS_RCC_RTCCLK_SOURCE(SOURCE) (((SOURCE) == RCC_RTCCLKSource_LSE) || ((SOURCE) == RCC_RTCCLKSource_LSI) || ((SOURCE) == RCC_RTCCLKSource_HSE_Div128))
# 470 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rcc.h"
#define RCC_AHBPeriph_DMA1 ((uint32_t)0x00000001)
#define RCC_AHBPeriph_DMA2 ((uint32_t)0x00000002)
#define RCC_AHBPeriph_SRAM ((uint32_t)0x00000004)
#define RCC_AHBPeriph_FLITF ((uint32_t)0x00000010)
#define RCC_AHBPeriph_CRC ((uint32_t)0x00000040)


#define RCC_AHBPeriph_FSMC ((uint32_t)0x00000100)
#define RCC_AHBPeriph_SDIO ((uint32_t)0x00000400)
#define IS_RCC_AHB_PERIPH(PERIPH) ((((PERIPH) & 0xFFFFFAA8) == 0x00) && ((PERIPH) != 0x00))
# 497 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rcc.h"
#define RCC_APB2Periph_AFIO ((uint32_t)0x00000001)
#define RCC_APB2Periph_GPIOA ((uint32_t)0x00000004)
#define RCC_APB2Periph_GPIOB ((uint32_t)0x00000008)
#define RCC_APB2Periph_GPIOC ((uint32_t)0x00000010)
#define RCC_APB2Periph_GPIOD ((uint32_t)0x00000020)
#define RCC_APB2Periph_GPIOE ((uint32_t)0x00000040)
#define RCC_APB2Periph_GPIOF ((uint32_t)0x00000080)
#define RCC_APB2Periph_GPIOG ((uint32_t)0x00000100)
#define RCC_APB2Periph_ADC1 ((uint32_t)0x00000200)
#define RCC_APB2Periph_ADC2 ((uint32_t)0x00000400)
#define RCC_APB2Periph_TIM1 ((uint32_t)0x00000800)
#define RCC_APB2Periph_SPI1 ((uint32_t)0x00001000)
#define RCC_APB2Periph_TIM8 ((uint32_t)0x00002000)
#define RCC_APB2Periph_USART1 ((uint32_t)0x00004000)
#define RCC_APB2Periph_ADC3 ((uint32_t)0x00008000)
#define RCC_APB2Periph_TIM15 ((uint32_t)0x00010000)
#define RCC_APB2Periph_TIM16 ((uint32_t)0x00020000)
#define RCC_APB2Periph_TIM17 ((uint32_t)0x00040000)
#define RCC_APB2Periph_TIM9 ((uint32_t)0x00080000)
#define RCC_APB2Periph_TIM10 ((uint32_t)0x00100000)
#define RCC_APB2Periph_TIM11 ((uint32_t)0x00200000)

#define IS_RCC_APB2_PERIPH(PERIPH) ((((PERIPH) & 0xFFC00002) == 0x00) && ((PERIPH) != 0x00))
# 528 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rcc.h"
#define RCC_APB1Periph_TIM2 ((uint32_t)0x00000001)
#define RCC_APB1Periph_TIM3 ((uint32_t)0x00000002)
#define RCC_APB1Periph_TIM4 ((uint32_t)0x00000004)
#define RCC_APB1Periph_TIM5 ((uint32_t)0x00000008)
#define RCC_APB1Periph_TIM6 ((uint32_t)0x00000010)
#define RCC_APB1Periph_TIM7 ((uint32_t)0x00000020)
#define RCC_APB1Periph_TIM12 ((uint32_t)0x00000040)
#define RCC_APB1Periph_TIM13 ((uint32_t)0x00000080)
#define RCC_APB1Periph_TIM14 ((uint32_t)0x00000100)
#define RCC_APB1Periph_WWDG ((uint32_t)0x00000800)
#define RCC_APB1Periph_SPI2 ((uint32_t)0x00004000)
#define RCC_APB1Periph_SPI3 ((uint32_t)0x00008000)
#define RCC_APB1Periph_USART2 ((uint32_t)0x00020000)
#define RCC_APB1Periph_USART3 ((uint32_t)0x00040000)
#define RCC_APB1Periph_UART4 ((uint32_t)0x00080000)
#define RCC_APB1Periph_UART5 ((uint32_t)0x00100000)
#define RCC_APB1Periph_I2C1 ((uint32_t)0x00200000)
#define RCC_APB1Periph_I2C2 ((uint32_t)0x00400000)
#define RCC_APB1Periph_USB ((uint32_t)0x00800000)
#define RCC_APB1Periph_CAN1 ((uint32_t)0x02000000)
#define RCC_APB1Periph_CAN2 ((uint32_t)0x04000000)
#define RCC_APB1Periph_BKP ((uint32_t)0x08000000)
#define RCC_APB1Periph_PWR ((uint32_t)0x10000000)
#define RCC_APB1Periph_DAC ((uint32_t)0x20000000)
#define RCC_APB1Periph_CEC ((uint32_t)0x40000000)

#define IS_RCC_APB1_PERIPH(PERIPH) ((((PERIPH) & 0x81013600) == 0x00) && ((PERIPH) != 0x00))
# 564 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rcc.h"
#define RCC_MCO_NoClock ((uint8_t)0x00)
#define RCC_MCO_SYSCLK ((uint8_t)0x04)
#define RCC_MCO_HSI ((uint8_t)0x05)
#define RCC_MCO_HSE ((uint8_t)0x06)
#define RCC_MCO_PLLCLK_Div2 ((uint8_t)0x07)


#define IS_RCC_MCO(MCO) (((MCO) == RCC_MCO_NoClock) || ((MCO) == RCC_MCO_HSI) || ((MCO) == RCC_MCO_SYSCLK) || ((MCO) == RCC_MCO_HSE) || ((MCO) == RCC_MCO_PLLCLK_Div2))
# 595 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rcc.h"
#define RCC_FLAG_HSIRDY ((uint8_t)0x21)
#define RCC_FLAG_HSERDY ((uint8_t)0x31)
#define RCC_FLAG_PLLRDY ((uint8_t)0x39)
#define RCC_FLAG_LSERDY ((uint8_t)0x41)
#define RCC_FLAG_LSIRDY ((uint8_t)0x61)
#define RCC_FLAG_PINRST ((uint8_t)0x7A)
#define RCC_FLAG_PORRST ((uint8_t)0x7B)
#define RCC_FLAG_SFTRST ((uint8_t)0x7C)
#define RCC_FLAG_IWDGRST ((uint8_t)0x7D)
#define RCC_FLAG_WWDGRST ((uint8_t)0x7E)
#define RCC_FLAG_LPWRRST ((uint8_t)0x7F)


#define IS_RCC_FLAG(FLAG) (((FLAG) == RCC_FLAG_HSIRDY) || ((FLAG) == RCC_FLAG_HSERDY) || ((FLAG) == RCC_FLAG_PLLRDY) || ((FLAG) == RCC_FLAG_LSERDY) || ((FLAG) == RCC_FLAG_LSIRDY) || ((FLAG) == RCC_FLAG_PINRST) || ((FLAG) == RCC_FLAG_PORRST) || ((FLAG) == RCC_FLAG_SFTRST) || ((FLAG) == RCC_FLAG_IWDGRST)|| ((FLAG) == RCC_FLAG_WWDGRST)|| ((FLAG) == RCC_FLAG_LPWRRST))
# 626 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rcc.h"
#define IS_RCC_CALIBRATION_VALUE(VALUE) ((VALUE) <= 0x1F)
# 647 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rcc.h"
void RCC_DeInit(void);
void RCC_HSEConfig(uint32_t RCC_HSE);
ErrorStatus RCC_WaitForHSEStartUp(void);
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue);
void RCC_HSICmd(FunctionalState NewState);
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul);
void RCC_PLLCmd(FunctionalState NewState);
# 667 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rcc.h"
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource);
uint8_t RCC_GetSYSCLKSource(void);
void RCC_HCLKConfig(uint32_t RCC_SYSCLK);
void RCC_PCLK1Config(uint32_t RCC_HCLK);
void RCC_PCLK2Config(uint32_t RCC_HCLK);
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState);


 void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource);




void RCC_ADCCLKConfig(uint32_t RCC_PCLK2);






void RCC_LSEConfig(uint8_t RCC_LSE);
void RCC_LSICmd(FunctionalState NewState);
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource);
void RCC_RTCCLKCmd(FunctionalState NewState);
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks);
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState);
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState);
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState);





void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState);
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState);
void RCC_BackupResetCmd(FunctionalState NewState);
void RCC_ClockSecuritySystemCmd(FunctionalState NewState);
void RCC_MCOConfig(uint8_t RCC_MCO);
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG);
void RCC_ClearFlag(void);
ITStatus RCC_GetITStatus(uint8_t RCC_IT);
void RCC_ClearITPendingBit(uint8_t RCC_IT);
# 44 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x_conf.h" 2
# 1 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rtc.h" 1
# 25 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rtc.h"
#define __STM32F10x_RTC_H 
# 58 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rtc.h"
#define RTC_IT_OW ((uint16_t)0x0004)
#define RTC_IT_ALR ((uint16_t)0x0002)
#define RTC_IT_SEC ((uint16_t)0x0001)
#define IS_RTC_IT(IT) ((((IT) & (uint16_t)0xFFF8) == 0x00) && ((IT) != 0x00))
#define IS_RTC_GET_IT(IT) (((IT) == RTC_IT_OW) || ((IT) == RTC_IT_ALR) || ((IT) == RTC_IT_SEC))
# 72 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rtc.h"
#define RTC_FLAG_RTOFF ((uint16_t)0x0020)
#define RTC_FLAG_RSF ((uint16_t)0x0008)
#define RTC_FLAG_OW ((uint16_t)0x0004)
#define RTC_FLAG_ALR ((uint16_t)0x0002)
#define RTC_FLAG_SEC ((uint16_t)0x0001)
#define IS_RTC_CLEAR_FLAG(FLAG) ((((FLAG) & (uint16_t)0xFFF0) == 0x00) && ((FLAG) != 0x00))
#define IS_RTC_GET_FLAG(FLAG) (((FLAG) == RTC_FLAG_RTOFF) || ((FLAG) == RTC_FLAG_RSF) || ((FLAG) == RTC_FLAG_OW) || ((FLAG) == RTC_FLAG_ALR) || ((FLAG) == RTC_FLAG_SEC))


#define IS_RTC_PRESCALER(PRESCALER) ((PRESCALER) <= 0xFFFFF)
# 103 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_rtc.h"
void RTC_ITConfig(uint16_t RTC_IT, FunctionalState NewState);
void RTC_EnterConfigMode(void);
void RTC_ExitConfigMode(void);
uint32_t RTC_GetCounter(void);
void RTC_SetCounter(uint32_t CounterValue);
void RTC_SetPrescaler(uint32_t PrescalerValue);
void RTC_SetAlarm(uint32_t AlarmValue);
uint32_t RTC_GetDivider(void);
void RTC_WaitForLastTask(void);
void RTC_WaitForSynchro(void);
FlagStatus RTC_GetFlagStatus(uint16_t RTC_FLAG);
void RTC_ClearFlag(uint16_t RTC_FLAG);
ITStatus RTC_GetITStatus(uint16_t RTC_IT);
void RTC_ClearITPendingBit(uint16_t RTC_IT);
# 45 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x_conf.h" 2
# 1 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_sdio.h" 1
# 25 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_sdio.h"
#define __STM32F10x_SDIO_H 
# 46 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_sdio.h"
typedef struct
{
  uint32_t SDIO_ClockEdge;


  uint32_t SDIO_ClockBypass;



  uint32_t SDIO_ClockPowerSave;



  uint32_t SDIO_BusWide;


  uint32_t SDIO_HardwareFlowControl;


  uint8_t SDIO_ClockDiv;


} SDIO_InitTypeDef;

typedef struct
{
  uint32_t SDIO_Argument;




  uint32_t SDIO_CmdIndex;

  uint32_t SDIO_Response;


  uint32_t SDIO_Wait;


  uint32_t SDIO_CPSM;


} SDIO_CmdInitTypeDef;

typedef struct
{
  uint32_t SDIO_DataTimeOut;

  uint32_t SDIO_DataLength;

  uint32_t SDIO_DataBlockSize;


  uint32_t SDIO_TransferDir;



  uint32_t SDIO_TransferMode;


  uint32_t SDIO_DPSM;


} SDIO_DataInitTypeDef;
# 123 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_sdio.h"
#define SDIO_ClockEdge_Rising ((uint32_t)0x00000000)
#define SDIO_ClockEdge_Falling ((uint32_t)0x00002000)
#define IS_SDIO_CLOCK_EDGE(EDGE) (((EDGE) == SDIO_ClockEdge_Rising) || ((EDGE) == SDIO_ClockEdge_Falling))
# 135 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_sdio.h"
#define SDIO_ClockBypass_Disable ((uint32_t)0x00000000)
#define SDIO_ClockBypass_Enable ((uint32_t)0x00000400)
#define IS_SDIO_CLOCK_BYPASS(BYPASS) (((BYPASS) == SDIO_ClockBypass_Disable) || ((BYPASS) == SDIO_ClockBypass_Enable))
# 147 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_sdio.h"
#define SDIO_ClockPowerSave_Disable ((uint32_t)0x00000000)
#define SDIO_ClockPowerSave_Enable ((uint32_t)0x00000200)
#define IS_SDIO_CLOCK_POWER_SAVE(SAVE) (((SAVE) == SDIO_ClockPowerSave_Disable) || ((SAVE) == SDIO_ClockPowerSave_Enable))
# 159 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_sdio.h"
#define SDIO_BusWide_1b ((uint32_t)0x00000000)
#define SDIO_BusWide_4b ((uint32_t)0x00000800)
#define SDIO_BusWide_8b ((uint32_t)0x00001000)
#define IS_SDIO_BUS_WIDE(WIDE) (((WIDE) == SDIO_BusWide_1b) || ((WIDE) == SDIO_BusWide_4b) || ((WIDE) == SDIO_BusWide_8b))
# 173 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_sdio.h"
#define SDIO_HardwareFlowControl_Disable ((uint32_t)0x00000000)
#define SDIO_HardwareFlowControl_Enable ((uint32_t)0x00004000)
#define IS_SDIO_HARDWARE_FLOW_CONTROL(CONTROL) (((CONTROL) == SDIO_HardwareFlowControl_Disable) || ((CONTROL) == SDIO_HardwareFlowControl_Enable))
# 185 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_sdio.h"
#define SDIO_PowerState_OFF ((uint32_t)0x00000000)
#define SDIO_PowerState_ON ((uint32_t)0x00000003)
#define IS_SDIO_POWER_STATE(STATE) (((STATE) == SDIO_PowerState_OFF) || ((STATE) == SDIO_PowerState_ON))
# 197 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_sdio.h"
#define SDIO_IT_CCRCFAIL ((uint32_t)0x00000001)
#define SDIO_IT_DCRCFAIL ((uint32_t)0x00000002)
#define SDIO_IT_CTIMEOUT ((uint32_t)0x00000004)
#define SDIO_IT_DTIMEOUT ((uint32_t)0x00000008)
#define SDIO_IT_TXUNDERR ((uint32_t)0x00000010)
#define SDIO_IT_RXOVERR ((uint32_t)0x00000020)
#define SDIO_IT_CMDREND ((uint32_t)0x00000040)
#define SDIO_IT_CMDSENT ((uint32_t)0x00000080)
#define SDIO_IT_DATAEND ((uint32_t)0x00000100)
#define SDIO_IT_STBITERR ((uint32_t)0x00000200)
#define SDIO_IT_DBCKEND ((uint32_t)0x00000400)
#define SDIO_IT_CMDACT ((uint32_t)0x00000800)
#define SDIO_IT_TXACT ((uint32_t)0x00001000)
#define SDIO_IT_RXACT ((uint32_t)0x00002000)
#define SDIO_IT_TXFIFOHE ((uint32_t)0x00004000)
#define SDIO_IT_RXFIFOHF ((uint32_t)0x00008000)
#define SDIO_IT_TXFIFOF ((uint32_t)0x00010000)
#define SDIO_IT_RXFIFOF ((uint32_t)0x00020000)
#define SDIO_IT_TXFIFOE ((uint32_t)0x00040000)
#define SDIO_IT_RXFIFOE ((uint32_t)0x00080000)
#define SDIO_IT_TXDAVL ((uint32_t)0x00100000)
#define SDIO_IT_RXDAVL ((uint32_t)0x00200000)
#define SDIO_IT_SDIOIT ((uint32_t)0x00400000)
#define SDIO_IT_CEATAEND ((uint32_t)0x00800000)
#define IS_SDIO_IT(IT) ((((IT) & (uint32_t)0xFF000000) == 0x00) && ((IT) != (uint32_t)0x00))
# 230 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_sdio.h"
#define IS_SDIO_CMD_INDEX(INDEX) ((INDEX) < 0x40)
# 239 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_sdio.h"
#define SDIO_Response_No ((uint32_t)0x00000000)
#define SDIO_Response_Short ((uint32_t)0x00000040)
#define SDIO_Response_Long ((uint32_t)0x000000C0)
#define IS_SDIO_RESPONSE(RESPONSE) (((RESPONSE) == SDIO_Response_No) || ((RESPONSE) == SDIO_Response_Short) || ((RESPONSE) == SDIO_Response_Long))
# 253 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_sdio.h"
#define SDIO_Wait_No ((uint32_t)0x00000000)
#define SDIO_Wait_IT ((uint32_t)0x00000100)
#define SDIO_Wait_Pend ((uint32_t)0x00000200)
#define IS_SDIO_WAIT(WAIT) (((WAIT) == SDIO_Wait_No) || ((WAIT) == SDIO_Wait_IT) || ((WAIT) == SDIO_Wait_Pend))
# 266 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_sdio.h"
#define SDIO_CPSM_Disable ((uint32_t)0x00000000)
#define SDIO_CPSM_Enable ((uint32_t)0x00000400)
#define IS_SDIO_CPSM(CPSM) (((CPSM) == SDIO_CPSM_Enable) || ((CPSM) == SDIO_CPSM_Disable))
# 277 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_sdio.h"
#define SDIO_RESP1 ((uint32_t)0x00000000)
#define SDIO_RESP2 ((uint32_t)0x00000004)
#define SDIO_RESP3 ((uint32_t)0x00000008)
#define SDIO_RESP4 ((uint32_t)0x0000000C)
#define IS_SDIO_RESP(RESP) (((RESP) == SDIO_RESP1) || ((RESP) == SDIO_RESP2) || ((RESP) == SDIO_RESP3) || ((RESP) == SDIO_RESP4))
# 291 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_sdio.h"
#define IS_SDIO_DATA_LENGTH(LENGTH) ((LENGTH) <= 0x01FFFFFF)
# 300 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_sdio.h"
#define SDIO_DataBlockSize_1b ((uint32_t)0x00000000)
#define SDIO_DataBlockSize_2b ((uint32_t)0x00000010)
#define SDIO_DataBlockSize_4b ((uint32_t)0x00000020)
#define SDIO_DataBlockSize_8b ((uint32_t)0x00000030)
#define SDIO_DataBlockSize_16b ((uint32_t)0x00000040)
#define SDIO_DataBlockSize_32b ((uint32_t)0x00000050)
#define SDIO_DataBlockSize_64b ((uint32_t)0x00000060)
#define SDIO_DataBlockSize_128b ((uint32_t)0x00000070)
#define SDIO_DataBlockSize_256b ((uint32_t)0x00000080)
#define SDIO_DataBlockSize_512b ((uint32_t)0x00000090)
#define SDIO_DataBlockSize_1024b ((uint32_t)0x000000A0)
#define SDIO_DataBlockSize_2048b ((uint32_t)0x000000B0)
#define SDIO_DataBlockSize_4096b ((uint32_t)0x000000C0)
#define SDIO_DataBlockSize_8192b ((uint32_t)0x000000D0)
#define SDIO_DataBlockSize_16384b ((uint32_t)0x000000E0)
#define IS_SDIO_BLOCK_SIZE(SIZE) (((SIZE) == SDIO_DataBlockSize_1b) || ((SIZE) == SDIO_DataBlockSize_2b) || ((SIZE) == SDIO_DataBlockSize_4b) || ((SIZE) == SDIO_DataBlockSize_8b) || ((SIZE) == SDIO_DataBlockSize_16b) || ((SIZE) == SDIO_DataBlockSize_32b) || ((SIZE) == SDIO_DataBlockSize_64b) || ((SIZE) == SDIO_DataBlockSize_128b) || ((SIZE) == SDIO_DataBlockSize_256b) || ((SIZE) == SDIO_DataBlockSize_512b) || ((SIZE) == SDIO_DataBlockSize_1024b) || ((SIZE) == SDIO_DataBlockSize_2048b) || ((SIZE) == SDIO_DataBlockSize_4096b) || ((SIZE) == SDIO_DataBlockSize_8192b) || ((SIZE) == SDIO_DataBlockSize_16384b))
# 338 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_sdio.h"
#define SDIO_TransferDir_ToCard ((uint32_t)0x00000000)
#define SDIO_TransferDir_ToSDIO ((uint32_t)0x00000002)
#define IS_SDIO_TRANSFER_DIR(DIR) (((DIR) == SDIO_TransferDir_ToCard) || ((DIR) == SDIO_TransferDir_ToSDIO))
# 350 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_sdio.h"
#define SDIO_TransferMode_Block ((uint32_t)0x00000000)
#define SDIO_TransferMode_Stream ((uint32_t)0x00000004)
#define IS_SDIO_TRANSFER_MODE(MODE) (((MODE) == SDIO_TransferMode_Stream) || ((MODE) == SDIO_TransferMode_Block))
# 362 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_sdio.h"
#define SDIO_DPSM_Disable ((uint32_t)0x00000000)
#define SDIO_DPSM_Enable ((uint32_t)0x00000001)
#define IS_SDIO_DPSM(DPSM) (((DPSM) == SDIO_DPSM_Enable) || ((DPSM) == SDIO_DPSM_Disable))
# 373 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_sdio.h"
#define SDIO_FLAG_CCRCFAIL ((uint32_t)0x00000001)
#define SDIO_FLAG_DCRCFAIL ((uint32_t)0x00000002)
#define SDIO_FLAG_CTIMEOUT ((uint32_t)0x00000004)
#define SDIO_FLAG_DTIMEOUT ((uint32_t)0x00000008)
#define SDIO_FLAG_TXUNDERR ((uint32_t)0x00000010)
#define SDIO_FLAG_RXOVERR ((uint32_t)0x00000020)
#define SDIO_FLAG_CMDREND ((uint32_t)0x00000040)
#define SDIO_FLAG_CMDSENT ((uint32_t)0x00000080)
#define SDIO_FLAG_DATAEND ((uint32_t)0x00000100)
#define SDIO_FLAG_STBITERR ((uint32_t)0x00000200)
#define SDIO_FLAG_DBCKEND ((uint32_t)0x00000400)
#define SDIO_FLAG_CMDACT ((uint32_t)0x00000800)
#define SDIO_FLAG_TXACT ((uint32_t)0x00001000)
#define SDIO_FLAG_RXACT ((uint32_t)0x00002000)
#define SDIO_FLAG_TXFIFOHE ((uint32_t)0x00004000)
#define SDIO_FLAG_RXFIFOHF ((uint32_t)0x00008000)
#define SDIO_FLAG_TXFIFOF ((uint32_t)0x00010000)
#define SDIO_FLAG_RXFIFOF ((uint32_t)0x00020000)
#define SDIO_FLAG_TXFIFOE ((uint32_t)0x00040000)
#define SDIO_FLAG_RXFIFOE ((uint32_t)0x00080000)
#define SDIO_FLAG_TXDAVL ((uint32_t)0x00100000)
#define SDIO_FLAG_RXDAVL ((uint32_t)0x00200000)
#define SDIO_FLAG_SDIOIT ((uint32_t)0x00400000)
#define SDIO_FLAG_CEATAEND ((uint32_t)0x00800000)
#define IS_SDIO_FLAG(FLAG) (((FLAG) == SDIO_FLAG_CCRCFAIL) || ((FLAG) == SDIO_FLAG_DCRCFAIL) || ((FLAG) == SDIO_FLAG_CTIMEOUT) || ((FLAG) == SDIO_FLAG_DTIMEOUT) || ((FLAG) == SDIO_FLAG_TXUNDERR) || ((FLAG) == SDIO_FLAG_RXOVERR) || ((FLAG) == SDIO_FLAG_CMDREND) || ((FLAG) == SDIO_FLAG_CMDSENT) || ((FLAG) == SDIO_FLAG_DATAEND) || ((FLAG) == SDIO_FLAG_STBITERR) || ((FLAG) == SDIO_FLAG_DBCKEND) || ((FLAG) == SDIO_FLAG_CMDACT) || ((FLAG) == SDIO_FLAG_TXACT) || ((FLAG) == SDIO_FLAG_RXACT) || ((FLAG) == SDIO_FLAG_TXFIFOHE) || ((FLAG) == SDIO_FLAG_RXFIFOHF) || ((FLAG) == SDIO_FLAG_TXFIFOF) || ((FLAG) == SDIO_FLAG_RXFIFOF) || ((FLAG) == SDIO_FLAG_TXFIFOE) || ((FLAG) == SDIO_FLAG_RXFIFOE) || ((FLAG) == SDIO_FLAG_TXDAVL) || ((FLAG) == SDIO_FLAG_RXDAVL) || ((FLAG) == SDIO_FLAG_SDIOIT) || ((FLAG) == SDIO_FLAG_CEATAEND))
# 422 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_sdio.h"
#define IS_SDIO_CLEAR_FLAG(FLAG) ((((FLAG) & (uint32_t)0xFF3FF800) == 0x00) && ((FLAG) != (uint32_t)0x00))

#define IS_SDIO_GET_IT(IT) (((IT) == SDIO_IT_CCRCFAIL) || ((IT) == SDIO_IT_DCRCFAIL) || ((IT) == SDIO_IT_CTIMEOUT) || ((IT) == SDIO_IT_DTIMEOUT) || ((IT) == SDIO_IT_TXUNDERR) || ((IT) == SDIO_IT_RXOVERR) || ((IT) == SDIO_IT_CMDREND) || ((IT) == SDIO_IT_CMDSENT) || ((IT) == SDIO_IT_DATAEND) || ((IT) == SDIO_IT_STBITERR) || ((IT) == SDIO_IT_DBCKEND) || ((IT) == SDIO_IT_CMDACT) || ((IT) == SDIO_IT_TXACT) || ((IT) == SDIO_IT_RXACT) || ((IT) == SDIO_IT_TXFIFOHE) || ((IT) == SDIO_IT_RXFIFOHF) || ((IT) == SDIO_IT_TXFIFOF) || ((IT) == SDIO_IT_RXFIFOF) || ((IT) == SDIO_IT_TXFIFOE) || ((IT) == SDIO_IT_RXFIFOE) || ((IT) == SDIO_IT_TXDAVL) || ((IT) == SDIO_IT_RXDAVL) || ((IT) == SDIO_IT_SDIOIT) || ((IT) == SDIO_IT_CEATAEND))
# 449 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_sdio.h"
#define IS_SDIO_CLEAR_IT(IT) ((((IT) & (uint32_t)0xFF3FF800) == 0x00) && ((IT) != (uint32_t)0x00))
# 459 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_sdio.h"
#define SDIO_ReadWaitMode_CLK ((uint32_t)0x00000001)
#define SDIO_ReadWaitMode_DATA2 ((uint32_t)0x00000000)
#define IS_SDIO_READWAIT_MODE(MODE) (((MODE) == SDIO_ReadWaitMode_CLK) || ((MODE) == SDIO_ReadWaitMode_DATA2))
# 483 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_sdio.h"
void SDIO_DeInit(void);
void SDIO_Init(SDIO_InitTypeDef* SDIO_InitStruct);
void SDIO_StructInit(SDIO_InitTypeDef* SDIO_InitStruct);
void SDIO_ClockCmd(FunctionalState NewState);
void SDIO_SetPowerState(uint32_t SDIO_PowerState);
uint32_t SDIO_GetPowerState(void);
void SDIO_ITConfig(uint32_t SDIO_IT, FunctionalState NewState);
void SDIO_DMACmd(FunctionalState NewState);
void SDIO_SendCommand(SDIO_CmdInitTypeDef *SDIO_CmdInitStruct);
void SDIO_CmdStructInit(SDIO_CmdInitTypeDef* SDIO_CmdInitStruct);
uint8_t SDIO_GetCommandResponse(void);
uint32_t SDIO_GetResponse(uint32_t SDIO_RESP);
void SDIO_DataConfig(SDIO_DataInitTypeDef* SDIO_DataInitStruct);
void SDIO_DataStructInit(SDIO_DataInitTypeDef* SDIO_DataInitStruct);
uint32_t SDIO_GetDataCounter(void);
uint32_t SDIO_ReadData(void);
void SDIO_WriteData(uint32_t Data);
uint32_t SDIO_GetFIFOCount(void);
void SDIO_StartSDIOReadWait(FunctionalState NewState);
void SDIO_StopSDIOReadWait(FunctionalState NewState);
void SDIO_SetSDIOReadWaitMode(uint32_t SDIO_ReadWaitMode);
void SDIO_SetSDIOOperation(FunctionalState NewState);
void SDIO_SendSDIOSuspendCmd(FunctionalState NewState);
void SDIO_CommandCompletionCmd(FunctionalState NewState);
void SDIO_CEATAITCmd(FunctionalState NewState);
void SDIO_SendCEATACmd(FunctionalState NewState);
FlagStatus SDIO_GetFlagStatus(uint32_t SDIO_FLAG);
void SDIO_ClearFlag(uint32_t SDIO_FLAG);
ITStatus SDIO_GetITStatus(uint32_t SDIO_IT);
void SDIO_ClearITPendingBit(uint32_t SDIO_IT);
# 46 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x_conf.h" 2
# 1 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_spi.h" 1
# 25 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_spi.h"
#define __STM32F10x_SPI_H 
# 50 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_spi.h"
typedef struct
{
  uint16_t SPI_Direction;


  uint16_t SPI_Mode;


  uint16_t SPI_DataSize;


  uint16_t SPI_CPOL;


  uint16_t SPI_CPHA;


  uint16_t SPI_NSS;



  uint16_t SPI_BaudRatePrescaler;





  uint16_t SPI_FirstBit;


  uint16_t SPI_CRCPolynomial;
}SPI_InitTypeDef;





typedef struct
{

  uint16_t I2S_Mode;


  uint16_t I2S_Standard;


  uint16_t I2S_DataFormat;


  uint16_t I2S_MCLKOutput;


  uint32_t I2S_AudioFreq;


  uint16_t I2S_CPOL;

}I2S_InitTypeDef;
# 117 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_spi.h"
#define IS_SPI_ALL_PERIPH(PERIPH) (((PERIPH) == SPI1) || ((PERIPH) == SPI2) || ((PERIPH) == SPI3))



#define IS_SPI_23_PERIPH(PERIPH) (((PERIPH) == SPI2) || ((PERIPH) == SPI3))






#define SPI_Direction_2Lines_FullDuplex ((uint16_t)0x0000)
#define SPI_Direction_2Lines_RxOnly ((uint16_t)0x0400)
#define SPI_Direction_1Line_Rx ((uint16_t)0x8000)
#define SPI_Direction_1Line_Tx ((uint16_t)0xC000)
#define IS_SPI_DIRECTION_MODE(MODE) (((MODE) == SPI_Direction_2Lines_FullDuplex) || ((MODE) == SPI_Direction_2Lines_RxOnly) || ((MODE) == SPI_Direction_1Line_Rx) || ((MODE) == SPI_Direction_1Line_Tx))
# 144 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_spi.h"
#define SPI_Mode_Master ((uint16_t)0x0104)
#define SPI_Mode_Slave ((uint16_t)0x0000)
#define IS_SPI_MODE(MODE) (((MODE) == SPI_Mode_Master) || ((MODE) == SPI_Mode_Slave))
# 156 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_spi.h"
#define SPI_DataSize_16b ((uint16_t)0x0800)
#define SPI_DataSize_8b ((uint16_t)0x0000)
#define IS_SPI_DATASIZE(DATASIZE) (((DATASIZE) == SPI_DataSize_16b) || ((DATASIZE) == SPI_DataSize_8b))
# 168 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_spi.h"
#define SPI_CPOL_Low ((uint16_t)0x0000)
#define SPI_CPOL_High ((uint16_t)0x0002)
#define IS_SPI_CPOL(CPOL) (((CPOL) == SPI_CPOL_Low) || ((CPOL) == SPI_CPOL_High))
# 180 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_spi.h"
#define SPI_CPHA_1Edge ((uint16_t)0x0000)
#define SPI_CPHA_2Edge ((uint16_t)0x0001)
#define IS_SPI_CPHA(CPHA) (((CPHA) == SPI_CPHA_1Edge) || ((CPHA) == SPI_CPHA_2Edge))
# 192 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_spi.h"
#define SPI_NSS_Soft ((uint16_t)0x0200)
#define SPI_NSS_Hard ((uint16_t)0x0000)
#define IS_SPI_NSS(NSS) (((NSS) == SPI_NSS_Soft) || ((NSS) == SPI_NSS_Hard))
# 204 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_spi.h"
#define SPI_BaudRatePrescaler_2 ((uint16_t)0x0000)
#define SPI_BaudRatePrescaler_4 ((uint16_t)0x0008)
#define SPI_BaudRatePrescaler_8 ((uint16_t)0x0010)
#define SPI_BaudRatePrescaler_16 ((uint16_t)0x0018)
#define SPI_BaudRatePrescaler_32 ((uint16_t)0x0020)
#define SPI_BaudRatePrescaler_64 ((uint16_t)0x0028)
#define SPI_BaudRatePrescaler_128 ((uint16_t)0x0030)
#define SPI_BaudRatePrescaler_256 ((uint16_t)0x0038)
#define IS_SPI_BAUDRATE_PRESCALER(PRESCALER) (((PRESCALER) == SPI_BaudRatePrescaler_2) || ((PRESCALER) == SPI_BaudRatePrescaler_4) || ((PRESCALER) == SPI_BaudRatePrescaler_8) || ((PRESCALER) == SPI_BaudRatePrescaler_16) || ((PRESCALER) == SPI_BaudRatePrescaler_32) || ((PRESCALER) == SPI_BaudRatePrescaler_64) || ((PRESCALER) == SPI_BaudRatePrescaler_128) || ((PRESCALER) == SPI_BaudRatePrescaler_256))
# 228 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_spi.h"
#define SPI_FirstBit_MSB ((uint16_t)0x0000)
#define SPI_FirstBit_LSB ((uint16_t)0x0080)
#define IS_SPI_FIRST_BIT(BIT) (((BIT) == SPI_FirstBit_MSB) || ((BIT) == SPI_FirstBit_LSB))
# 240 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_spi.h"
#define I2S_Mode_SlaveTx ((uint16_t)0x0000)
#define I2S_Mode_SlaveRx ((uint16_t)0x0100)
#define I2S_Mode_MasterTx ((uint16_t)0x0200)
#define I2S_Mode_MasterRx ((uint16_t)0x0300)
#define IS_I2S_MODE(MODE) (((MODE) == I2S_Mode_SlaveTx) || ((MODE) == I2S_Mode_SlaveRx) || ((MODE) == I2S_Mode_MasterTx) || ((MODE) == I2S_Mode_MasterRx) )
# 256 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_spi.h"
#define I2S_Standard_Phillips ((uint16_t)0x0000)
#define I2S_Standard_MSB ((uint16_t)0x0010)
#define I2S_Standard_LSB ((uint16_t)0x0020)
#define I2S_Standard_PCMShort ((uint16_t)0x0030)
#define I2S_Standard_PCMLong ((uint16_t)0x00B0)
#define IS_I2S_STANDARD(STANDARD) (((STANDARD) == I2S_Standard_Phillips) || ((STANDARD) == I2S_Standard_MSB) || ((STANDARD) == I2S_Standard_LSB) || ((STANDARD) == I2S_Standard_PCMShort) || ((STANDARD) == I2S_Standard_PCMLong))
# 274 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_spi.h"
#define I2S_DataFormat_16b ((uint16_t)0x0000)
#define I2S_DataFormat_16bextended ((uint16_t)0x0001)
#define I2S_DataFormat_24b ((uint16_t)0x0003)
#define I2S_DataFormat_32b ((uint16_t)0x0005)
#define IS_I2S_DATA_FORMAT(FORMAT) (((FORMAT) == I2S_DataFormat_16b) || ((FORMAT) == I2S_DataFormat_16bextended) || ((FORMAT) == I2S_DataFormat_24b) || ((FORMAT) == I2S_DataFormat_32b))
# 290 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_spi.h"
#define I2S_MCLKOutput_Enable ((uint16_t)0x0200)
#define I2S_MCLKOutput_Disable ((uint16_t)0x0000)
#define IS_I2S_MCLK_OUTPUT(OUTPUT) (((OUTPUT) == I2S_MCLKOutput_Enable) || ((OUTPUT) == I2S_MCLKOutput_Disable))
# 302 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_spi.h"
#define I2S_AudioFreq_192k ((uint32_t)192000)
#define I2S_AudioFreq_96k ((uint32_t)96000)
#define I2S_AudioFreq_48k ((uint32_t)48000)
#define I2S_AudioFreq_44k ((uint32_t)44100)
#define I2S_AudioFreq_32k ((uint32_t)32000)
#define I2S_AudioFreq_22k ((uint32_t)22050)
#define I2S_AudioFreq_16k ((uint32_t)16000)
#define I2S_AudioFreq_11k ((uint32_t)11025)
#define I2S_AudioFreq_8k ((uint32_t)8000)
#define I2S_AudioFreq_Default ((uint32_t)2)

#define IS_I2S_AUDIO_FREQ(FREQ) ((((FREQ) >= I2S_AudioFreq_8k) && ((FREQ) <= I2S_AudioFreq_192k)) || ((FREQ) == I2S_AudioFreq_Default))
# 324 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_spi.h"
#define I2S_CPOL_Low ((uint16_t)0x0000)
#define I2S_CPOL_High ((uint16_t)0x0008)
#define IS_I2S_CPOL(CPOL) (((CPOL) == I2S_CPOL_Low) || ((CPOL) == I2S_CPOL_High))
# 336 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_spi.h"
#define SPI_I2S_DMAReq_Tx ((uint16_t)0x0002)
#define SPI_I2S_DMAReq_Rx ((uint16_t)0x0001)
#define IS_SPI_I2S_DMAREQ(DMAREQ) ((((DMAREQ) & (uint16_t)0xFFFC) == 0x00) && ((DMAREQ) != 0x00))
# 347 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_spi.h"
#define SPI_NSSInternalSoft_Set ((uint16_t)0x0100)
#define SPI_NSSInternalSoft_Reset ((uint16_t)0xFEFF)
#define IS_SPI_NSS_INTERNAL(INTERNAL) (((INTERNAL) == SPI_NSSInternalSoft_Set) || ((INTERNAL) == SPI_NSSInternalSoft_Reset))
# 359 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_spi.h"
#define SPI_CRC_Tx ((uint8_t)0x00)
#define SPI_CRC_Rx ((uint8_t)0x01)
#define IS_SPI_CRC(CRC) (((CRC) == SPI_CRC_Tx) || ((CRC) == SPI_CRC_Rx))
# 370 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_spi.h"
#define SPI_Direction_Rx ((uint16_t)0xBFFF)
#define SPI_Direction_Tx ((uint16_t)0x4000)
#define IS_SPI_DIRECTION(DIRECTION) (((DIRECTION) == SPI_Direction_Rx) || ((DIRECTION) == SPI_Direction_Tx))
# 382 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_spi.h"
#define SPI_I2S_IT_TXE ((uint8_t)0x71)
#define SPI_I2S_IT_RXNE ((uint8_t)0x60)
#define SPI_I2S_IT_ERR ((uint8_t)0x50)
#define IS_SPI_I2S_CONFIG_IT(IT) (((IT) == SPI_I2S_IT_TXE) || ((IT) == SPI_I2S_IT_RXNE) || ((IT) == SPI_I2S_IT_ERR))


#define SPI_I2S_IT_OVR ((uint8_t)0x56)
#define SPI_IT_MODF ((uint8_t)0x55)
#define SPI_IT_CRCERR ((uint8_t)0x54)
#define I2S_IT_UDR ((uint8_t)0x53)
#define IS_SPI_I2S_CLEAR_IT(IT) (((IT) == SPI_IT_CRCERR))
#define IS_SPI_I2S_GET_IT(IT) (((IT) == SPI_I2S_IT_RXNE) || ((IT) == SPI_I2S_IT_TXE) || ((IT) == I2S_IT_UDR) || ((IT) == SPI_IT_CRCERR) || ((IT) == SPI_IT_MODF) || ((IT) == SPI_I2S_IT_OVR))
# 404 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_spi.h"
#define SPI_I2S_FLAG_RXNE ((uint16_t)0x0001)
#define SPI_I2S_FLAG_TXE ((uint16_t)0x0002)
#define I2S_FLAG_CHSIDE ((uint16_t)0x0004)
#define I2S_FLAG_UDR ((uint16_t)0x0008)
#define SPI_FLAG_CRCERR ((uint16_t)0x0010)
#define SPI_FLAG_MODF ((uint16_t)0x0020)
#define SPI_I2S_FLAG_OVR ((uint16_t)0x0040)
#define SPI_I2S_FLAG_BSY ((uint16_t)0x0080)
#define IS_SPI_I2S_CLEAR_FLAG(FLAG) (((FLAG) == SPI_FLAG_CRCERR))
#define IS_SPI_I2S_GET_FLAG(FLAG) (((FLAG) == SPI_I2S_FLAG_BSY) || ((FLAG) == SPI_I2S_FLAG_OVR) || ((FLAG) == SPI_FLAG_MODF) || ((FLAG) == SPI_FLAG_CRCERR) || ((FLAG) == I2S_FLAG_UDR) || ((FLAG) == I2S_FLAG_CHSIDE) || ((FLAG) == SPI_I2S_FLAG_TXE) || ((FLAG) == SPI_I2S_FLAG_RXNE))
# 425 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_spi.h"
#define IS_SPI_CRC_POLYNOMIAL(POLYNOMIAL) ((POLYNOMIAL) >= 0x1)
# 446 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_spi.h"
void SPI_I2S_DeInit(SPI_TypeDef* SPIx);
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct);
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct);
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct);
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct);
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState);
void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState);
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState);
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState);
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data);
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx);
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft);
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState);
void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize);
void SPI_TransmitCRC(SPI_TypeDef* SPIx);
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState);
uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC);
uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx);
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction);
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG);
void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG);
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT);
void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT);
# 47 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x_conf.h" 2
# 1 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h" 1
# 25 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
#define __STM32F10x_TIM_H 
# 51 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
typedef struct
{
  uint16_t TIM_Prescaler;


  uint16_t TIM_CounterMode;


  uint16_t TIM_Period;



  uint16_t TIM_ClockDivision;


  uint8_t TIM_RepetitionCounter;







} TIM_TimeBaseInitTypeDef;





typedef struct
{
  uint16_t TIM_OCMode;


  uint16_t TIM_OutputState;


  uint16_t TIM_OutputNState;



  uint16_t TIM_Pulse;


  uint16_t TIM_OCPolarity;


  uint16_t TIM_OCNPolarity;



  uint16_t TIM_OCIdleState;



  uint16_t TIM_OCNIdleState;


} TIM_OCInitTypeDef;





typedef struct
{

  uint16_t TIM_Channel;


  uint16_t TIM_ICPolarity;


  uint16_t TIM_ICSelection;


  uint16_t TIM_ICPrescaler;


  uint16_t TIM_ICFilter;

} TIM_ICInitTypeDef;






typedef struct
{

  uint16_t TIM_OSSRState;


  uint16_t TIM_OSSIState;


  uint16_t TIM_LOCKLevel;


  uint16_t TIM_DeadTime;



  uint16_t TIM_Break;


  uint16_t TIM_BreakPolarity;


  uint16_t TIM_AutomaticOutput;

} TIM_BDTRInitTypeDef;





#define IS_TIM_ALL_PERIPH(PERIPH) (((PERIPH) == TIM1) || ((PERIPH) == TIM2) || ((PERIPH) == TIM3) || ((PERIPH) == TIM4) || ((PERIPH) == TIM5) || ((PERIPH) == TIM6) || ((PERIPH) == TIM7) || ((PERIPH) == TIM8) || ((PERIPH) == TIM9) || ((PERIPH) == TIM10)|| ((PERIPH) == TIM11)|| ((PERIPH) == TIM12)|| ((PERIPH) == TIM13)|| ((PERIPH) == TIM14)|| ((PERIPH) == TIM15)|| ((PERIPH) == TIM16)|| ((PERIPH) == TIM17))
# 188 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
#define IS_TIM_LIST1_PERIPH(PERIPH) (((PERIPH) == TIM1) || ((PERIPH) == TIM8))



#define IS_TIM_LIST2_PERIPH(PERIPH) (((PERIPH) == TIM1) || ((PERIPH) == TIM8) || ((PERIPH) == TIM15)|| ((PERIPH) == TIM16)|| ((PERIPH) == TIM17))






#define IS_TIM_LIST3_PERIPH(PERIPH) (((PERIPH) == TIM1) || ((PERIPH) == TIM2) || ((PERIPH) == TIM3) || ((PERIPH) == TIM4) || ((PERIPH) == TIM5) || ((PERIPH) == TIM8))







#define IS_TIM_LIST4_PERIPH(PERIPH) (((PERIPH) == TIM1) || ((PERIPH) == TIM2) || ((PERIPH) == TIM3) || ((PERIPH) == TIM4) || ((PERIPH) == TIM5) || ((PERIPH) == TIM8) || ((PERIPH) == TIM15)|| ((PERIPH) == TIM16)|| ((PERIPH) == TIM17))
# 218 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
#define IS_TIM_LIST5_PERIPH(PERIPH) (((PERIPH) == TIM1) || ((PERIPH) == TIM2) || ((PERIPH) == TIM3) || ((PERIPH) == TIM4) || ((PERIPH) == TIM5) || ((PERIPH) == TIM8) || ((PERIPH) == TIM15))
# 227 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
#define IS_TIM_LIST6_PERIPH(PERIPH) (((PERIPH) == TIM1) || ((PERIPH) == TIM2) || ((PERIPH) == TIM3) || ((PERIPH) == TIM4) || ((PERIPH) == TIM5) || ((PERIPH) == TIM8) || ((PERIPH) == TIM9) || ((PERIPH) == TIM12)|| ((PERIPH) == TIM15))
# 238 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
#define IS_TIM_LIST7_PERIPH(PERIPH) (((PERIPH) == TIM1) || ((PERIPH) == TIM2) || ((PERIPH) == TIM3) || ((PERIPH) == TIM4) || ((PERIPH) == TIM5) || ((PERIPH) == TIM6) || ((PERIPH) == TIM7) || ((PERIPH) == TIM8) || ((PERIPH) == TIM9) || ((PERIPH) == TIM12)|| ((PERIPH) == TIM15))
# 251 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
#define IS_TIM_LIST8_PERIPH(PERIPH) (((PERIPH) == TIM1) || ((PERIPH) == TIM2) || ((PERIPH) == TIM3) || ((PERIPH) == TIM4) || ((PERIPH) == TIM5) || ((PERIPH) == TIM8) || ((PERIPH) == TIM9) || ((PERIPH) == TIM10)|| ((PERIPH) == TIM11)|| ((PERIPH) == TIM12)|| ((PERIPH) == TIM13)|| ((PERIPH) == TIM14)|| ((PERIPH) == TIM15)|| ((PERIPH) == TIM16)|| ((PERIPH) == TIM17))
# 268 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
#define IS_TIM_LIST9_PERIPH(PERIPH) (((PERIPH) == TIM1) || ((PERIPH) == TIM2) || ((PERIPH) == TIM3) || ((PERIPH) == TIM4) || ((PERIPH) == TIM5) || ((PERIPH) == TIM6) || ((PERIPH) == TIM7) || ((PERIPH) == TIM8) || ((PERIPH) == TIM15)|| ((PERIPH) == TIM16)|| ((PERIPH) == TIM17))
# 288 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
#define TIM_OCMode_Timing ((uint16_t)0x0000)
#define TIM_OCMode_Active ((uint16_t)0x0010)
#define TIM_OCMode_Inactive ((uint16_t)0x0020)
#define TIM_OCMode_Toggle ((uint16_t)0x0030)
#define TIM_OCMode_PWM1 ((uint16_t)0x0060)
#define TIM_OCMode_PWM2 ((uint16_t)0x0070)
#define IS_TIM_OC_MODE(MODE) (((MODE) == TIM_OCMode_Timing) || ((MODE) == TIM_OCMode_Active) || ((MODE) == TIM_OCMode_Inactive) || ((MODE) == TIM_OCMode_Toggle)|| ((MODE) == TIM_OCMode_PWM1) || ((MODE) == TIM_OCMode_PWM2))





#define IS_TIM_OCM(MODE) (((MODE) == TIM_OCMode_Timing) || ((MODE) == TIM_OCMode_Active) || ((MODE) == TIM_OCMode_Inactive) || ((MODE) == TIM_OCMode_Toggle)|| ((MODE) == TIM_OCMode_PWM1) || ((MODE) == TIM_OCMode_PWM2) || ((MODE) == TIM_ForcedAction_Active) || ((MODE) == TIM_ForcedAction_InActive))
# 316 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
#define TIM_OPMode_Single ((uint16_t)0x0008)
#define TIM_OPMode_Repetitive ((uint16_t)0x0000)
#define IS_TIM_OPM_MODE(MODE) (((MODE) == TIM_OPMode_Single) || ((MODE) == TIM_OPMode_Repetitive))
# 328 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
#define TIM_Channel_1 ((uint16_t)0x0000)
#define TIM_Channel_2 ((uint16_t)0x0004)
#define TIM_Channel_3 ((uint16_t)0x0008)
#define TIM_Channel_4 ((uint16_t)0x000C)
#define IS_TIM_CHANNEL(CHANNEL) (((CHANNEL) == TIM_Channel_1) || ((CHANNEL) == TIM_Channel_2) || ((CHANNEL) == TIM_Channel_3) || ((CHANNEL) == TIM_Channel_4))



#define IS_TIM_PWMI_CHANNEL(CHANNEL) (((CHANNEL) == TIM_Channel_1) || ((CHANNEL) == TIM_Channel_2))

#define IS_TIM_COMPLEMENTARY_CHANNEL(CHANNEL) (((CHANNEL) == TIM_Channel_1) || ((CHANNEL) == TIM_Channel_2) || ((CHANNEL) == TIM_Channel_3))
# 349 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
#define TIM_CKD_DIV1 ((uint16_t)0x0000)
#define TIM_CKD_DIV2 ((uint16_t)0x0100)
#define TIM_CKD_DIV4 ((uint16_t)0x0200)
#define IS_TIM_CKD_DIV(DIV) (((DIV) == TIM_CKD_DIV1) || ((DIV) == TIM_CKD_DIV2) || ((DIV) == TIM_CKD_DIV4))
# 363 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
#define TIM_CounterMode_Up ((uint16_t)0x0000)
#define TIM_CounterMode_Down ((uint16_t)0x0010)
#define TIM_CounterMode_CenterAligned1 ((uint16_t)0x0020)
#define TIM_CounterMode_CenterAligned2 ((uint16_t)0x0040)
#define TIM_CounterMode_CenterAligned3 ((uint16_t)0x0060)
#define IS_TIM_COUNTER_MODE(MODE) (((MODE) == TIM_CounterMode_Up) || ((MODE) == TIM_CounterMode_Down) || ((MODE) == TIM_CounterMode_CenterAligned1) || ((MODE) == TIM_CounterMode_CenterAligned2) || ((MODE) == TIM_CounterMode_CenterAligned3))
# 381 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
#define TIM_OCPolarity_High ((uint16_t)0x0000)
#define TIM_OCPolarity_Low ((uint16_t)0x0002)
#define IS_TIM_OC_POLARITY(POLARITY) (((POLARITY) == TIM_OCPolarity_High) || ((POLARITY) == TIM_OCPolarity_Low))
# 393 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
#define TIM_OCNPolarity_High ((uint16_t)0x0000)
#define TIM_OCNPolarity_Low ((uint16_t)0x0008)
#define IS_TIM_OCN_POLARITY(POLARITY) (((POLARITY) == TIM_OCNPolarity_High) || ((POLARITY) == TIM_OCNPolarity_Low))
# 405 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
#define TIM_OutputState_Disable ((uint16_t)0x0000)
#define TIM_OutputState_Enable ((uint16_t)0x0001)
#define IS_TIM_OUTPUT_STATE(STATE) (((STATE) == TIM_OutputState_Disable) || ((STATE) == TIM_OutputState_Enable))
# 417 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
#define TIM_OutputNState_Disable ((uint16_t)0x0000)
#define TIM_OutputNState_Enable ((uint16_t)0x0004)
#define IS_TIM_OUTPUTN_STATE(STATE) (((STATE) == TIM_OutputNState_Disable) || ((STATE) == TIM_OutputNState_Enable))
# 429 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
#define TIM_CCx_Enable ((uint16_t)0x0001)
#define TIM_CCx_Disable ((uint16_t)0x0000)
#define IS_TIM_CCX(CCX) (((CCX) == TIM_CCx_Enable) || ((CCX) == TIM_CCx_Disable))
# 441 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
#define TIM_CCxN_Enable ((uint16_t)0x0004)
#define TIM_CCxN_Disable ((uint16_t)0x0000)
#define IS_TIM_CCXN(CCXN) (((CCXN) == TIM_CCxN_Enable) || ((CCXN) == TIM_CCxN_Disable))
# 453 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
#define TIM_Break_Enable ((uint16_t)0x1000)
#define TIM_Break_Disable ((uint16_t)0x0000)
#define IS_TIM_BREAK_STATE(STATE) (((STATE) == TIM_Break_Enable) || ((STATE) == TIM_Break_Disable))
# 465 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
#define TIM_BreakPolarity_Low ((uint16_t)0x0000)
#define TIM_BreakPolarity_High ((uint16_t)0x2000)
#define IS_TIM_BREAK_POLARITY(POLARITY) (((POLARITY) == TIM_BreakPolarity_Low) || ((POLARITY) == TIM_BreakPolarity_High))
# 477 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
#define TIM_AutomaticOutput_Enable ((uint16_t)0x4000)
#define TIM_AutomaticOutput_Disable ((uint16_t)0x0000)
#define IS_TIM_AUTOMATIC_OUTPUT_STATE(STATE) (((STATE) == TIM_AutomaticOutput_Enable) || ((STATE) == TIM_AutomaticOutput_Disable))
# 489 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
#define TIM_LOCKLevel_OFF ((uint16_t)0x0000)
#define TIM_LOCKLevel_1 ((uint16_t)0x0100)
#define TIM_LOCKLevel_2 ((uint16_t)0x0200)
#define TIM_LOCKLevel_3 ((uint16_t)0x0300)
#define IS_TIM_LOCK_LEVEL(LEVEL) (((LEVEL) == TIM_LOCKLevel_OFF) || ((LEVEL) == TIM_LOCKLevel_1) || ((LEVEL) == TIM_LOCKLevel_2) || ((LEVEL) == TIM_LOCKLevel_3))
# 505 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
#define TIM_OSSIState_Enable ((uint16_t)0x0400)
#define TIM_OSSIState_Disable ((uint16_t)0x0000)
#define IS_TIM_OSSI_STATE(STATE) (((STATE) == TIM_OSSIState_Enable) || ((STATE) == TIM_OSSIState_Disable))
# 517 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
#define TIM_OSSRState_Enable ((uint16_t)0x0800)
#define TIM_OSSRState_Disable ((uint16_t)0x0000)
#define IS_TIM_OSSR_STATE(STATE) (((STATE) == TIM_OSSRState_Enable) || ((STATE) == TIM_OSSRState_Disable))
# 529 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
#define TIM_OCIdleState_Set ((uint16_t)0x0100)
#define TIM_OCIdleState_Reset ((uint16_t)0x0000)
#define IS_TIM_OCIDLE_STATE(STATE) (((STATE) == TIM_OCIdleState_Set) || ((STATE) == TIM_OCIdleState_Reset))
# 541 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
#define TIM_OCNIdleState_Set ((uint16_t)0x0200)
#define TIM_OCNIdleState_Reset ((uint16_t)0x0000)
#define IS_TIM_OCNIDLE_STATE(STATE) (((STATE) == TIM_OCNIdleState_Set) || ((STATE) == TIM_OCNIdleState_Reset))
# 553 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
#define TIM_ICPolarity_Rising ((uint16_t)0x0000)
#define TIM_ICPolarity_Falling ((uint16_t)0x0002)
#define TIM_ICPolarity_BothEdge ((uint16_t)0x000A)
#define IS_TIM_IC_POLARITY(POLARITY) (((POLARITY) == TIM_ICPolarity_Rising) || ((POLARITY) == TIM_ICPolarity_Falling))

#define IS_TIM_IC_POLARITY_LITE(POLARITY) (((POLARITY) == TIM_ICPolarity_Rising) || ((POLARITY) == TIM_ICPolarity_Falling)|| ((POLARITY) == TIM_ICPolarity_BothEdge))
# 569 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
#define TIM_ICSelection_DirectTI ((uint16_t)0x0001)

#define TIM_ICSelection_IndirectTI ((uint16_t)0x0002)

#define TIM_ICSelection_TRC ((uint16_t)0x0003)
#define IS_TIM_IC_SELECTION(SELECTION) (((SELECTION) == TIM_ICSelection_DirectTI) || ((SELECTION) == TIM_ICSelection_IndirectTI) || ((SELECTION) == TIM_ICSelection_TRC))
# 585 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
#define TIM_ICPSC_DIV1 ((uint16_t)0x0000)
#define TIM_ICPSC_DIV2 ((uint16_t)0x0004)
#define TIM_ICPSC_DIV4 ((uint16_t)0x0008)
#define TIM_ICPSC_DIV8 ((uint16_t)0x000C)
#define IS_TIM_IC_PRESCALER(PRESCALER) (((PRESCALER) == TIM_ICPSC_DIV1) || ((PRESCALER) == TIM_ICPSC_DIV2) || ((PRESCALER) == TIM_ICPSC_DIV4) || ((PRESCALER) == TIM_ICPSC_DIV8))
# 601 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
#define TIM_IT_Update ((uint16_t)0x0001)
#define TIM_IT_CC1 ((uint16_t)0x0002)
#define TIM_IT_CC2 ((uint16_t)0x0004)
#define TIM_IT_CC3 ((uint16_t)0x0008)
#define TIM_IT_CC4 ((uint16_t)0x0010)
#define TIM_IT_COM ((uint16_t)0x0020)
#define TIM_IT_Trigger ((uint16_t)0x0040)
#define TIM_IT_Break ((uint16_t)0x0080)
#define IS_TIM_IT(IT) ((((IT) & (uint16_t)0xFF00) == 0x0000) && ((IT) != 0x0000))

#define IS_TIM_GET_IT(IT) (((IT) == TIM_IT_Update) || ((IT) == TIM_IT_CC1) || ((IT) == TIM_IT_CC2) || ((IT) == TIM_IT_CC3) || ((IT) == TIM_IT_CC4) || ((IT) == TIM_IT_COM) || ((IT) == TIM_IT_Trigger) || ((IT) == TIM_IT_Break))
# 627 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
#define TIM_DMABase_CR1 ((uint16_t)0x0000)
#define TIM_DMABase_CR2 ((uint16_t)0x0001)
#define TIM_DMABase_SMCR ((uint16_t)0x0002)
#define TIM_DMABase_DIER ((uint16_t)0x0003)
#define TIM_DMABase_SR ((uint16_t)0x0004)
#define TIM_DMABase_EGR ((uint16_t)0x0005)
#define TIM_DMABase_CCMR1 ((uint16_t)0x0006)
#define TIM_DMABase_CCMR2 ((uint16_t)0x0007)
#define TIM_DMABase_CCER ((uint16_t)0x0008)
#define TIM_DMABase_CNT ((uint16_t)0x0009)
#define TIM_DMABase_PSC ((uint16_t)0x000A)
#define TIM_DMABase_ARR ((uint16_t)0x000B)
#define TIM_DMABase_RCR ((uint16_t)0x000C)
#define TIM_DMABase_CCR1 ((uint16_t)0x000D)
#define TIM_DMABase_CCR2 ((uint16_t)0x000E)
#define TIM_DMABase_CCR3 ((uint16_t)0x000F)
#define TIM_DMABase_CCR4 ((uint16_t)0x0010)
#define TIM_DMABase_BDTR ((uint16_t)0x0011)
#define TIM_DMABase_DCR ((uint16_t)0x0012)
#define IS_TIM_DMA_BASE(BASE) (((BASE) == TIM_DMABase_CR1) || ((BASE) == TIM_DMABase_CR2) || ((BASE) == TIM_DMABase_SMCR) || ((BASE) == TIM_DMABase_DIER) || ((BASE) == TIM_DMABase_SR) || ((BASE) == TIM_DMABase_EGR) || ((BASE) == TIM_DMABase_CCMR1) || ((BASE) == TIM_DMABase_CCMR2) || ((BASE) == TIM_DMABase_CCER) || ((BASE) == TIM_DMABase_CNT) || ((BASE) == TIM_DMABase_PSC) || ((BASE) == TIM_DMABase_ARR) || ((BASE) == TIM_DMABase_RCR) || ((BASE) == TIM_DMABase_CCR1) || ((BASE) == TIM_DMABase_CCR2) || ((BASE) == TIM_DMABase_CCR3) || ((BASE) == TIM_DMABase_CCR4) || ((BASE) == TIM_DMABase_BDTR) || ((BASE) == TIM_DMABase_DCR))
# 673 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
#define TIM_DMABurstLength_1Transfer ((uint16_t)0x0000)
#define TIM_DMABurstLength_2Transfers ((uint16_t)0x0100)
#define TIM_DMABurstLength_3Transfers ((uint16_t)0x0200)
#define TIM_DMABurstLength_4Transfers ((uint16_t)0x0300)
#define TIM_DMABurstLength_5Transfers ((uint16_t)0x0400)
#define TIM_DMABurstLength_6Transfers ((uint16_t)0x0500)
#define TIM_DMABurstLength_7Transfers ((uint16_t)0x0600)
#define TIM_DMABurstLength_8Transfers ((uint16_t)0x0700)
#define TIM_DMABurstLength_9Transfers ((uint16_t)0x0800)
#define TIM_DMABurstLength_10Transfers ((uint16_t)0x0900)
#define TIM_DMABurstLength_11Transfers ((uint16_t)0x0A00)
#define TIM_DMABurstLength_12Transfers ((uint16_t)0x0B00)
#define TIM_DMABurstLength_13Transfers ((uint16_t)0x0C00)
#define TIM_DMABurstLength_14Transfers ((uint16_t)0x0D00)
#define TIM_DMABurstLength_15Transfers ((uint16_t)0x0E00)
#define TIM_DMABurstLength_16Transfers ((uint16_t)0x0F00)
#define TIM_DMABurstLength_17Transfers ((uint16_t)0x1000)
#define TIM_DMABurstLength_18Transfers ((uint16_t)0x1100)
#define IS_TIM_DMA_LENGTH(LENGTH) (((LENGTH) == TIM_DMABurstLength_1Transfer) || ((LENGTH) == TIM_DMABurstLength_2Transfers) || ((LENGTH) == TIM_DMABurstLength_3Transfers) || ((LENGTH) == TIM_DMABurstLength_4Transfers) || ((LENGTH) == TIM_DMABurstLength_5Transfers) || ((LENGTH) == TIM_DMABurstLength_6Transfers) || ((LENGTH) == TIM_DMABurstLength_7Transfers) || ((LENGTH) == TIM_DMABurstLength_8Transfers) || ((LENGTH) == TIM_DMABurstLength_9Transfers) || ((LENGTH) == TIM_DMABurstLength_10Transfers) || ((LENGTH) == TIM_DMABurstLength_11Transfers) || ((LENGTH) == TIM_DMABurstLength_12Transfers) || ((LENGTH) == TIM_DMABurstLength_13Transfers) || ((LENGTH) == TIM_DMABurstLength_14Transfers) || ((LENGTH) == TIM_DMABurstLength_15Transfers) || ((LENGTH) == TIM_DMABurstLength_16Transfers) || ((LENGTH) == TIM_DMABurstLength_17Transfers) || ((LENGTH) == TIM_DMABurstLength_18Transfers))
# 717 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
#define TIM_DMA_Update ((uint16_t)0x0100)
#define TIM_DMA_CC1 ((uint16_t)0x0200)
#define TIM_DMA_CC2 ((uint16_t)0x0400)
#define TIM_DMA_CC3 ((uint16_t)0x0800)
#define TIM_DMA_CC4 ((uint16_t)0x1000)
#define TIM_DMA_COM ((uint16_t)0x2000)
#define TIM_DMA_Trigger ((uint16_t)0x4000)
#define IS_TIM_DMA_SOURCE(SOURCE) ((((SOURCE) & (uint16_t)0x80FF) == 0x0000) && ((SOURCE) != 0x0000))
# 734 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
#define TIM_ExtTRGPSC_OFF ((uint16_t)0x0000)
#define TIM_ExtTRGPSC_DIV2 ((uint16_t)0x1000)
#define TIM_ExtTRGPSC_DIV4 ((uint16_t)0x2000)
#define TIM_ExtTRGPSC_DIV8 ((uint16_t)0x3000)
#define IS_TIM_EXT_PRESCALER(PRESCALER) (((PRESCALER) == TIM_ExtTRGPSC_OFF) || ((PRESCALER) == TIM_ExtTRGPSC_DIV2) || ((PRESCALER) == TIM_ExtTRGPSC_DIV4) || ((PRESCALER) == TIM_ExtTRGPSC_DIV8))
# 750 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
#define TIM_TS_ITR0 ((uint16_t)0x0000)
#define TIM_TS_ITR1 ((uint16_t)0x0010)
#define TIM_TS_ITR2 ((uint16_t)0x0020)
#define TIM_TS_ITR3 ((uint16_t)0x0030)
#define TIM_TS_TI1F_ED ((uint16_t)0x0040)
#define TIM_TS_TI1FP1 ((uint16_t)0x0050)
#define TIM_TS_TI2FP2 ((uint16_t)0x0060)
#define TIM_TS_ETRF ((uint16_t)0x0070)
#define IS_TIM_TRIGGER_SELECTION(SELECTION) (((SELECTION) == TIM_TS_ITR0) || ((SELECTION) == TIM_TS_ITR1) || ((SELECTION) == TIM_TS_ITR2) || ((SELECTION) == TIM_TS_ITR3) || ((SELECTION) == TIM_TS_TI1F_ED) || ((SELECTION) == TIM_TS_TI1FP1) || ((SELECTION) == TIM_TS_TI2FP2) || ((SELECTION) == TIM_TS_ETRF))







#define IS_TIM_INTERNAL_TRIGGER_SELECTION(SELECTION) (((SELECTION) == TIM_TS_ITR0) || ((SELECTION) == TIM_TS_ITR1) || ((SELECTION) == TIM_TS_ITR2) || ((SELECTION) == TIM_TS_ITR3))
# 778 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
#define TIM_TIxExternalCLK1Source_TI1 ((uint16_t)0x0050)
#define TIM_TIxExternalCLK1Source_TI2 ((uint16_t)0x0060)
#define TIM_TIxExternalCLK1Source_TI1ED ((uint16_t)0x0040)
#define IS_TIM_TIXCLK_SOURCE(SOURCE) (((SOURCE) == TIM_TIxExternalCLK1Source_TI1) || ((SOURCE) == TIM_TIxExternalCLK1Source_TI2) || ((SOURCE) == TIM_TIxExternalCLK1Source_TI1ED))
# 791 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
#define TIM_ExtTRGPolarity_Inverted ((uint16_t)0x8000)
#define TIM_ExtTRGPolarity_NonInverted ((uint16_t)0x0000)
#define IS_TIM_EXT_POLARITY(POLARITY) (((POLARITY) == TIM_ExtTRGPolarity_Inverted) || ((POLARITY) == TIM_ExtTRGPolarity_NonInverted))
# 803 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
#define TIM_PSCReloadMode_Update ((uint16_t)0x0000)
#define TIM_PSCReloadMode_Immediate ((uint16_t)0x0001)
#define IS_TIM_PRESCALER_RELOAD(RELOAD) (((RELOAD) == TIM_PSCReloadMode_Update) || ((RELOAD) == TIM_PSCReloadMode_Immediate))
# 815 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
#define TIM_ForcedAction_Active ((uint16_t)0x0050)
#define TIM_ForcedAction_InActive ((uint16_t)0x0040)
#define IS_TIM_FORCED_ACTION(ACTION) (((ACTION) == TIM_ForcedAction_Active) || ((ACTION) == TIM_ForcedAction_InActive))
# 827 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
#define TIM_EncoderMode_TI1 ((uint16_t)0x0001)
#define TIM_EncoderMode_TI2 ((uint16_t)0x0002)
#define TIM_EncoderMode_TI12 ((uint16_t)0x0003)
#define IS_TIM_ENCODER_MODE(MODE) (((MODE) == TIM_EncoderMode_TI1) || ((MODE) == TIM_EncoderMode_TI2) || ((MODE) == TIM_EncoderMode_TI12))
# 842 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
#define TIM_EventSource_Update ((uint16_t)0x0001)
#define TIM_EventSource_CC1 ((uint16_t)0x0002)
#define TIM_EventSource_CC2 ((uint16_t)0x0004)
#define TIM_EventSource_CC3 ((uint16_t)0x0008)
#define TIM_EventSource_CC4 ((uint16_t)0x0010)
#define TIM_EventSource_COM ((uint16_t)0x0020)
#define TIM_EventSource_Trigger ((uint16_t)0x0040)
#define TIM_EventSource_Break ((uint16_t)0x0080)
#define IS_TIM_EVENT_SOURCE(SOURCE) ((((SOURCE) & (uint16_t)0xFF00) == 0x0000) && ((SOURCE) != 0x0000))
# 860 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
#define TIM_UpdateSource_Global ((uint16_t)0x0000)


#define TIM_UpdateSource_Regular ((uint16_t)0x0001)
#define IS_TIM_UPDATE_SOURCE(SOURCE) (((SOURCE) == TIM_UpdateSource_Global) || ((SOURCE) == TIM_UpdateSource_Regular))
# 874 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
#define TIM_OCPreload_Enable ((uint16_t)0x0008)
#define TIM_OCPreload_Disable ((uint16_t)0x0000)
#define IS_TIM_OCPRELOAD_STATE(STATE) (((STATE) == TIM_OCPreload_Enable) || ((STATE) == TIM_OCPreload_Disable))
# 886 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
#define TIM_OCFast_Enable ((uint16_t)0x0004)
#define TIM_OCFast_Disable ((uint16_t)0x0000)
#define IS_TIM_OCFAST_STATE(STATE) (((STATE) == TIM_OCFast_Enable) || ((STATE) == TIM_OCFast_Disable))
# 899 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
#define TIM_OCClear_Enable ((uint16_t)0x0080)
#define TIM_OCClear_Disable ((uint16_t)0x0000)
#define IS_TIM_OCCLEAR_STATE(STATE) (((STATE) == TIM_OCClear_Enable) || ((STATE) == TIM_OCClear_Disable))
# 911 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
#define TIM_TRGOSource_Reset ((uint16_t)0x0000)
#define TIM_TRGOSource_Enable ((uint16_t)0x0010)
#define TIM_TRGOSource_Update ((uint16_t)0x0020)
#define TIM_TRGOSource_OC1 ((uint16_t)0x0030)
#define TIM_TRGOSource_OC1Ref ((uint16_t)0x0040)
#define TIM_TRGOSource_OC2Ref ((uint16_t)0x0050)
#define TIM_TRGOSource_OC3Ref ((uint16_t)0x0060)
#define TIM_TRGOSource_OC4Ref ((uint16_t)0x0070)
#define IS_TIM_TRGO_SOURCE(SOURCE) (((SOURCE) == TIM_TRGOSource_Reset) || ((SOURCE) == TIM_TRGOSource_Enable) || ((SOURCE) == TIM_TRGOSource_Update) || ((SOURCE) == TIM_TRGOSource_OC1) || ((SOURCE) == TIM_TRGOSource_OC1Ref) || ((SOURCE) == TIM_TRGOSource_OC2Ref) || ((SOURCE) == TIM_TRGOSource_OC3Ref) || ((SOURCE) == TIM_TRGOSource_OC4Ref))
# 935 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
#define TIM_SlaveMode_Reset ((uint16_t)0x0004)
#define TIM_SlaveMode_Gated ((uint16_t)0x0005)
#define TIM_SlaveMode_Trigger ((uint16_t)0x0006)
#define TIM_SlaveMode_External1 ((uint16_t)0x0007)
#define IS_TIM_SLAVE_MODE(MODE) (((MODE) == TIM_SlaveMode_Reset) || ((MODE) == TIM_SlaveMode_Gated) || ((MODE) == TIM_SlaveMode_Trigger) || ((MODE) == TIM_SlaveMode_External1))
# 951 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
#define TIM_MasterSlaveMode_Enable ((uint16_t)0x0080)
#define TIM_MasterSlaveMode_Disable ((uint16_t)0x0000)
#define IS_TIM_MSM_STATE(STATE) (((STATE) == TIM_MasterSlaveMode_Enable) || ((STATE) == TIM_MasterSlaveMode_Disable))
# 963 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
#define TIM_FLAG_Update ((uint16_t)0x0001)
#define TIM_FLAG_CC1 ((uint16_t)0x0002)
#define TIM_FLAG_CC2 ((uint16_t)0x0004)
#define TIM_FLAG_CC3 ((uint16_t)0x0008)
#define TIM_FLAG_CC4 ((uint16_t)0x0010)
#define TIM_FLAG_COM ((uint16_t)0x0020)
#define TIM_FLAG_Trigger ((uint16_t)0x0040)
#define TIM_FLAG_Break ((uint16_t)0x0080)
#define TIM_FLAG_CC1OF ((uint16_t)0x0200)
#define TIM_FLAG_CC2OF ((uint16_t)0x0400)
#define TIM_FLAG_CC3OF ((uint16_t)0x0800)
#define TIM_FLAG_CC4OF ((uint16_t)0x1000)
#define IS_TIM_GET_FLAG(FLAG) (((FLAG) == TIM_FLAG_Update) || ((FLAG) == TIM_FLAG_CC1) || ((FLAG) == TIM_FLAG_CC2) || ((FLAG) == TIM_FLAG_CC3) || ((FLAG) == TIM_FLAG_CC4) || ((FLAG) == TIM_FLAG_COM) || ((FLAG) == TIM_FLAG_Trigger) || ((FLAG) == TIM_FLAG_Break) || ((FLAG) == TIM_FLAG_CC1OF) || ((FLAG) == TIM_FLAG_CC2OF) || ((FLAG) == TIM_FLAG_CC3OF) || ((FLAG) == TIM_FLAG_CC4OF))
# 989 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
#define IS_TIM_CLEAR_FLAG(TIM_FLAG) ((((TIM_FLAG) & (uint16_t)0xE100) == 0x0000) && ((TIM_FLAG) != 0x0000))
# 998 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
#define IS_TIM_IC_FILTER(ICFILTER) ((ICFILTER) <= 0xF)
# 1007 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
#define IS_TIM_EXT_FILTER(EXTFILTER) ((EXTFILTER) <= 0xF)
# 1016 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
#define TIM_DMABurstLength_1Byte TIM_DMABurstLength_1Transfer
#define TIM_DMABurstLength_2Bytes TIM_DMABurstLength_2Transfers
#define TIM_DMABurstLength_3Bytes TIM_DMABurstLength_3Transfers
#define TIM_DMABurstLength_4Bytes TIM_DMABurstLength_4Transfers
#define TIM_DMABurstLength_5Bytes TIM_DMABurstLength_5Transfers
#define TIM_DMABurstLength_6Bytes TIM_DMABurstLength_6Transfers
#define TIM_DMABurstLength_7Bytes TIM_DMABurstLength_7Transfers
#define TIM_DMABurstLength_8Bytes TIM_DMABurstLength_8Transfers
#define TIM_DMABurstLength_9Bytes TIM_DMABurstLength_9Transfers
#define TIM_DMABurstLength_10Bytes TIM_DMABurstLength_10Transfers
#define TIM_DMABurstLength_11Bytes TIM_DMABurstLength_11Transfers
#define TIM_DMABurstLength_12Bytes TIM_DMABurstLength_12Transfers
#define TIM_DMABurstLength_13Bytes TIM_DMABurstLength_13Transfers
#define TIM_DMABurstLength_14Bytes TIM_DMABurstLength_14Transfers
#define TIM_DMABurstLength_15Bytes TIM_DMABurstLength_15Transfers
#define TIM_DMABurstLength_16Bytes TIM_DMABurstLength_16Transfers
#define TIM_DMABurstLength_17Bytes TIM_DMABurstLength_17Transfers
#define TIM_DMABurstLength_18Bytes TIM_DMABurstLength_18Transfers
# 1054 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
void TIM_DeInit(TIM_TypeDef* TIMx);
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct);
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct);
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct);
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct);
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct);
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct);
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct);
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct);
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct);
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct);
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct);
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct);
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState);
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState);
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState);
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource);
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength);
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState);
void TIM_InternalClockConfig(TIM_TypeDef* TIMx);
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource);
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter);
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                             uint16_t ExtTRGFilter);
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter);
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                   uint16_t ExtTRGFilter);
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode);
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode);
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource);
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity);
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction);
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction);
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction);
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction);
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState);
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState);
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState);
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState);
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload);
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload);
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload);
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload);
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast);
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast);
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast);
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast);
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear);
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear);
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear);
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear);
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity);
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity);
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity);
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity);
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity);
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity);
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity);
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx);
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN);
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode);
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState);
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource);
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState);
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode);
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource);
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode);
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode);
void TIM_SetCounter(TIM_TypeDef* TIMx, uint16_t Counter);
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint16_t Autoreload);
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1);
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint16_t Compare2);
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint16_t Compare3);
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint16_t Compare4);
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC);
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC);
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC);
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC);
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD);
uint16_t TIM_GetCapture1(TIM_TypeDef* TIMx);
uint16_t TIM_GetCapture2(TIM_TypeDef* TIMx);
uint16_t TIM_GetCapture3(TIM_TypeDef* TIMx);
uint16_t TIM_GetCapture4(TIM_TypeDef* TIMx);
uint16_t TIM_GetCounter(TIM_TypeDef* TIMx);
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx);
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG);
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG);
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT);
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT);
# 48 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x_conf.h" 2
# 1 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_usart.h" 1
# 25 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_usart.h"
#define __STM32F10x_USART_H 
# 50 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_usart.h"
typedef struct
{
  uint32_t USART_BaudRate;




  uint16_t USART_WordLength;


  uint16_t USART_StopBits;


  uint16_t USART_Parity;






  uint16_t USART_Mode;


  uint16_t USART_HardwareFlowControl;


} USART_InitTypeDef;





typedef struct
{

  uint16_t USART_Clock;


  uint16_t USART_CPOL;


  uint16_t USART_CPHA;


  uint16_t USART_LastBit;


} USART_ClockInitTypeDef;
# 107 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_usart.h"
#define IS_USART_ALL_PERIPH(PERIPH) (((PERIPH) == USART1) || ((PERIPH) == USART2) || ((PERIPH) == USART3) || ((PERIPH) == UART4) || ((PERIPH) == UART5))





#define IS_USART_123_PERIPH(PERIPH) (((PERIPH) == USART1) || ((PERIPH) == USART2) || ((PERIPH) == USART3))



#define IS_USART_1234_PERIPH(PERIPH) (((PERIPH) == USART1) || ((PERIPH) == USART2) || ((PERIPH) == USART3) || ((PERIPH) == UART4))







#define USART_WordLength_8b ((uint16_t)0x0000)
#define USART_WordLength_9b ((uint16_t)0x1000)

#define IS_USART_WORD_LENGTH(LENGTH) (((LENGTH) == USART_WordLength_8b) || ((LENGTH) == USART_WordLength_9b))
# 138 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_usart.h"
#define USART_StopBits_1 ((uint16_t)0x0000)
#define USART_StopBits_0_5 ((uint16_t)0x1000)
#define USART_StopBits_2 ((uint16_t)0x2000)
#define USART_StopBits_1_5 ((uint16_t)0x3000)
#define IS_USART_STOPBITS(STOPBITS) (((STOPBITS) == USART_StopBits_1) || ((STOPBITS) == USART_StopBits_0_5) || ((STOPBITS) == USART_StopBits_2) || ((STOPBITS) == USART_StopBits_1_5))
# 154 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_usart.h"
#define USART_Parity_No ((uint16_t)0x0000)
#define USART_Parity_Even ((uint16_t)0x0400)
#define USART_Parity_Odd ((uint16_t)0x0600)
#define IS_USART_PARITY(PARITY) (((PARITY) == USART_Parity_No) || ((PARITY) == USART_Parity_Even) || ((PARITY) == USART_Parity_Odd))
# 168 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_usart.h"
#define USART_Mode_Rx ((uint16_t)0x0004)
#define USART_Mode_Tx ((uint16_t)0x0008)
#define IS_USART_MODE(MODE) ((((MODE) & (uint16_t)0xFFF3) == 0x00) && ((MODE) != (uint16_t)0x00))







#define USART_HardwareFlowControl_None ((uint16_t)0x0000)
#define USART_HardwareFlowControl_RTS ((uint16_t)0x0100)
#define USART_HardwareFlowControl_CTS ((uint16_t)0x0200)
#define USART_HardwareFlowControl_RTS_CTS ((uint16_t)0x0300)
#define IS_USART_HARDWARE_FLOW_CONTROL(CONTROL) (((CONTROL) == USART_HardwareFlowControl_None) || ((CONTROL) == USART_HardwareFlowControl_RTS) || ((CONTROL) == USART_HardwareFlowControl_CTS) || ((CONTROL) == USART_HardwareFlowControl_RTS_CTS))
# 194 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_usart.h"
#define USART_Clock_Disable ((uint16_t)0x0000)
#define USART_Clock_Enable ((uint16_t)0x0800)
#define IS_USART_CLOCK(CLOCK) (((CLOCK) == USART_Clock_Disable) || ((CLOCK) == USART_Clock_Enable))
# 206 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_usart.h"
#define USART_CPOL_Low ((uint16_t)0x0000)
#define USART_CPOL_High ((uint16_t)0x0400)
#define IS_USART_CPOL(CPOL) (((CPOL) == USART_CPOL_Low) || ((CPOL) == USART_CPOL_High))
# 218 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_usart.h"
#define USART_CPHA_1Edge ((uint16_t)0x0000)
#define USART_CPHA_2Edge ((uint16_t)0x0200)
#define IS_USART_CPHA(CPHA) (((CPHA) == USART_CPHA_1Edge) || ((CPHA) == USART_CPHA_2Edge))
# 230 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_usart.h"
#define USART_LastBit_Disable ((uint16_t)0x0000)
#define USART_LastBit_Enable ((uint16_t)0x0100)
#define IS_USART_LASTBIT(LASTBIT) (((LASTBIT) == USART_LastBit_Disable) || ((LASTBIT) == USART_LastBit_Enable))
# 242 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_usart.h"
#define USART_IT_PE ((uint16_t)0x0028)
#define USART_IT_TXE ((uint16_t)0x0727)
#define USART_IT_TC ((uint16_t)0x0626)
#define USART_IT_RXNE ((uint16_t)0x0525)
#define USART_IT_IDLE ((uint16_t)0x0424)
#define USART_IT_LBD ((uint16_t)0x0846)
#define USART_IT_CTS ((uint16_t)0x096A)
#define USART_IT_ERR ((uint16_t)0x0060)
#define USART_IT_ORE ((uint16_t)0x0360)
#define USART_IT_NE ((uint16_t)0x0260)
#define USART_IT_FE ((uint16_t)0x0160)
#define IS_USART_CONFIG_IT(IT) (((IT) == USART_IT_PE) || ((IT) == USART_IT_TXE) || ((IT) == USART_IT_TC) || ((IT) == USART_IT_RXNE) || ((IT) == USART_IT_IDLE) || ((IT) == USART_IT_LBD) || ((IT) == USART_IT_CTS) || ((IT) == USART_IT_ERR))



#define IS_USART_GET_IT(IT) (((IT) == USART_IT_PE) || ((IT) == USART_IT_TXE) || ((IT) == USART_IT_TC) || ((IT) == USART_IT_RXNE) || ((IT) == USART_IT_IDLE) || ((IT) == USART_IT_LBD) || ((IT) == USART_IT_CTS) || ((IT) == USART_IT_ORE) || ((IT) == USART_IT_NE) || ((IT) == USART_IT_FE))




#define IS_USART_CLEAR_IT(IT) (((IT) == USART_IT_TC) || ((IT) == USART_IT_RXNE) || ((IT) == USART_IT_LBD) || ((IT) == USART_IT_CTS))
# 272 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_usart.h"
#define USART_DMAReq_Tx ((uint16_t)0x0080)
#define USART_DMAReq_Rx ((uint16_t)0x0040)
#define IS_USART_DMAREQ(DMAREQ) ((((DMAREQ) & (uint16_t)0xFF3F) == 0x00) && ((DMAREQ) != (uint16_t)0x00))
# 284 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_usart.h"
#define USART_WakeUp_IdleLine ((uint16_t)0x0000)
#define USART_WakeUp_AddressMark ((uint16_t)0x0800)
#define IS_USART_WAKEUP(WAKEUP) (((WAKEUP) == USART_WakeUp_IdleLine) || ((WAKEUP) == USART_WakeUp_AddressMark))
# 296 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_usart.h"
#define USART_LINBreakDetectLength_10b ((uint16_t)0x0000)
#define USART_LINBreakDetectLength_11b ((uint16_t)0x0020)
#define IS_USART_LIN_BREAK_DETECT_LENGTH(LENGTH) (((LENGTH) == USART_LINBreakDetectLength_10b) || ((LENGTH) == USART_LINBreakDetectLength_11b))
# 309 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_usart.h"
#define USART_IrDAMode_LowPower ((uint16_t)0x0004)
#define USART_IrDAMode_Normal ((uint16_t)0x0000)
#define IS_USART_IRDA_MODE(MODE) (((MODE) == USART_IrDAMode_LowPower) || ((MODE) == USART_IrDAMode_Normal))
# 321 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_usart.h"
#define USART_FLAG_CTS ((uint16_t)0x0200)
#define USART_FLAG_LBD ((uint16_t)0x0100)
#define USART_FLAG_TXE ((uint16_t)0x0080)
#define USART_FLAG_TC ((uint16_t)0x0040)
#define USART_FLAG_RXNE ((uint16_t)0x0020)
#define USART_FLAG_IDLE ((uint16_t)0x0010)
#define USART_FLAG_ORE ((uint16_t)0x0008)
#define USART_FLAG_NE ((uint16_t)0x0004)
#define USART_FLAG_FE ((uint16_t)0x0002)
#define USART_FLAG_PE ((uint16_t)0x0001)
#define IS_USART_FLAG(FLAG) (((FLAG) == USART_FLAG_PE) || ((FLAG) == USART_FLAG_TXE) || ((FLAG) == USART_FLAG_TC) || ((FLAG) == USART_FLAG_RXNE) || ((FLAG) == USART_FLAG_IDLE) || ((FLAG) == USART_FLAG_LBD) || ((FLAG) == USART_FLAG_CTS) || ((FLAG) == USART_FLAG_ORE) || ((FLAG) == USART_FLAG_NE) || ((FLAG) == USART_FLAG_FE))





#define IS_USART_CLEAR_FLAG(FLAG) ((((FLAG) & (uint16_t)0xFC9F) == 0x00) && ((FLAG) != (uint16_t)0x00))
#define IS_USART_PERIPH_FLAG(PERIPH,USART_FLAG) ((((*(uint32_t*)&(PERIPH)) != UART4_BASE) && ((*(uint32_t*)&(PERIPH)) != UART5_BASE)) || ((USART_FLAG) != USART_FLAG_CTS))


#define IS_USART_BAUDRATE(BAUDRATE) (((BAUDRATE) > 0) && ((BAUDRATE) < 0x0044AA21))
#define IS_USART_ADDRESS(ADDRESS) ((ADDRESS) <= 0xF)
#define IS_USART_DATA(DATA) ((DATA) <= 0x1FF)
# 365 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_usart.h"
void USART_DeInit(USART_TypeDef* USARTx);
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct);
void USART_StructInit(USART_InitTypeDef* USART_InitStruct);
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct);
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct);
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState);
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState);
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState);
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address);
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp);
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState);
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength);
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState);
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data);
uint16_t USART_ReceiveData(USART_TypeDef* USARTx);
void USART_SendBreak(USART_TypeDef* USARTx);
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime);
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler);
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState);
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState);
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState);
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState);
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState);
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode);
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState);
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG);
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG);
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT);
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT);
# 49 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x_conf.h" 2
# 1 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_wwdg.h" 1
# 25 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_wwdg.h"
#define __STM32F10x_WWDG_H 
# 58 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_wwdg.h"
#define WWDG_Prescaler_1 ((uint32_t)0x00000000)
#define WWDG_Prescaler_2 ((uint32_t)0x00000080)
#define WWDG_Prescaler_4 ((uint32_t)0x00000100)
#define WWDG_Prescaler_8 ((uint32_t)0x00000180)
#define IS_WWDG_PRESCALER(PRESCALER) (((PRESCALER) == WWDG_Prescaler_1) || ((PRESCALER) == WWDG_Prescaler_2) || ((PRESCALER) == WWDG_Prescaler_4) || ((PRESCALER) == WWDG_Prescaler_8))



#define IS_WWDG_WINDOW_VALUE(VALUE) ((VALUE) <= 0x7F)
#define IS_WWDG_COUNTER(COUNTER) (((COUNTER) >= 0x40) && ((COUNTER) <= 0x7F))
# 88 "./lib/main/STM32F10x_StdPeriph_Driver/inc/stm32f10x_wwdg.h"
void WWDG_DeInit(void);
void WWDG_SetPrescaler(uint32_t WWDG_Prescaler);
void WWDG_SetWindowValue(uint8_t WindowValue);
void WWDG_EnableIT(void);
void WWDG_SetCounter(uint8_t Counter);
void WWDG_Enable(uint8_t Counter);
FlagStatus WWDG_GetFlagStatus(void);
void WWDG_ClearFlag(void);
# 50 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x_conf.h" 2
# 1 "./lib/main/STM32F10x_StdPeriph_Driver/inc/misc.h" 1
# 25 "./lib/main/STM32F10x_StdPeriph_Driver/inc/misc.h"
#define __MISC_H 
# 50 "./lib/main/STM32F10x_StdPeriph_Driver/inc/misc.h"
typedef struct
{
  uint8_t NVIC_IRQChannel;




  uint8_t NVIC_IRQChannelPreemptionPriority;



  uint8_t NVIC_IRQChannelSubPriority;



  FunctionalState NVIC_IRQChannelCmd;


} NVIC_InitTypeDef;
# 115 "./lib/main/STM32F10x_StdPeriph_Driver/inc/misc.h"
#define NVIC_VectTab_RAM ((uint32_t)0x20000000)
#define NVIC_VectTab_FLASH ((uint32_t)0x08000000)
#define IS_NVIC_VECTTAB(VECTTAB) (((VECTTAB) == NVIC_VectTab_RAM) || ((VECTTAB) == NVIC_VectTab_FLASH))
# 127 "./lib/main/STM32F10x_StdPeriph_Driver/inc/misc.h"
#define NVIC_LP_SEVONPEND ((uint8_t)0x10)
#define NVIC_LP_SLEEPDEEP ((uint8_t)0x04)
#define NVIC_LP_SLEEPONEXIT ((uint8_t)0x02)
#define IS_NVIC_LP(LP) (((LP) == NVIC_LP_SEVONPEND) || ((LP) == NVIC_LP_SLEEPDEEP) || ((LP) == NVIC_LP_SLEEPONEXIT))
# 141 "./lib/main/STM32F10x_StdPeriph_Driver/inc/misc.h"
#define NVIC_PriorityGroup_0 ((uint32_t)0x700)

#define NVIC_PriorityGroup_1 ((uint32_t)0x600)

#define NVIC_PriorityGroup_2 ((uint32_t)0x500)

#define NVIC_PriorityGroup_3 ((uint32_t)0x400)

#define NVIC_PriorityGroup_4 ((uint32_t)0x300)


#define IS_NVIC_PRIORITY_GROUP(GROUP) (((GROUP) == NVIC_PriorityGroup_0) || ((GROUP) == NVIC_PriorityGroup_1) || ((GROUP) == NVIC_PriorityGroup_2) || ((GROUP) == NVIC_PriorityGroup_3) || ((GROUP) == NVIC_PriorityGroup_4))





#define IS_NVIC_PREEMPTION_PRIORITY(PRIORITY) ((PRIORITY) < 0x10)

#define IS_NVIC_SUB_PRIORITY(PRIORITY) ((PRIORITY) < 0x10)

#define IS_NVIC_OFFSET(OFFSET) ((OFFSET) < 0x000FFFFF)
# 172 "./lib/main/STM32F10x_StdPeriph_Driver/inc/misc.h"
#define SysTick_CLKSource_HCLK_Div8 ((uint32_t)0xFFFFFFFB)
#define SysTick_CLKSource_HCLK ((uint32_t)0x00000004)
#define IS_SYSTICK_CLK_SOURCE(SOURCE) (((SOURCE) == SysTick_CLKSource_HCLK) || ((SOURCE) == SysTick_CLKSource_HCLK_Div8))
# 196 "./lib/main/STM32F10x_StdPeriph_Driver/inc/misc.h"
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup);
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct);
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset);
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState);
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource);
# 51 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x_conf.h" 2

extern void assert_param(int val);
# 74 "./lib/main/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x_conf.h"
#define assert_param(expr) ((void)0)
# 36 "./src/main/platform.h" 2




#define U_ID_0 (*(uint32_t*)0x1FFFF7E8)
#define U_ID_1 (*(uint32_t*)0x1FFFF7EC)
#define U_ID_2 (*(uint32_t*)0x1FFFF7F0)



# 1 "./src/main/target/NAZE/target.h" 1
# 19 "./src/main/target/NAZE/target.h"
       

#define TARGET_BOARD_IDENTIFIER "AFNA"
#define USE_HARDWARE_REVISION_DETECTION 

#define LED0_GPIO GPIOB
#define LED0_PIN Pin_3
#define LED0_PERIPHERAL RCC_APB2Periph_GPIOB
#define LED1_GPIO GPIOB
#define LED1_PIN Pin_4
#define LED1_PERIPHERAL RCC_APB2Periph_GPIOB

#define BEEP_GPIO GPIOA
#define BEEP_PIN Pin_12
#define BEEP_PERIPHERAL RCC_APB2Periph_GPIOA

#define BARO_XCLR_GPIO GPIOC
#define BARO_XCLR_PIN Pin_13
#define BARO_EOC_GPIO GPIOC
#define BARO_EOC_PIN Pin_14
#define BARO_APB2_PERIPHERALS RCC_APB2Periph_GPIOC

#define INVERTER_PIN Pin_2
#define INVERTER_GPIO GPIOB
#define INVERTER_PERIPHERAL RCC_APB2Periph_GPIOB
#define INVERTER_USART USART2







#define USE_SPI 
#define USE_SPI_DEVICE_2 

#define NAZE_SPI_INSTANCE SPI2
#define NAZE_SPI_CS_GPIO GPIOB
#define NAZE_SPI_CS_PIN GPIO_Pin_12
#define NAZE_CS_GPIO_CLK_PERIPHERAL RCC_APB2Periph_GPIOB

#define CUSTOM_FLASHCHIP 

#define M25P16_CS_GPIO NAZE_SPI_CS_GPIO
#define M25P16_CS_PIN NAZE_SPI_CS_PIN
#define M25P16_SPI_INSTANCE NAZE_SPI_INSTANCE

#define MPU6500_CS_GPIO_CLK_PERIPHERAL NAZE_CS_GPIO_CLK_PERIPHERAL
#define MPU6500_CS_GPIO NAZE_SPI_CS_GPIO
#define MPU6500_CS_PIN NAZE_SPI_CS_PIN
#define MPU6500_SPI_INSTANCE NAZE_SPI_INSTANCE


#define USE_FLASHFS 

#define USE_FLASH_M25P16 

#define USE_EXTI 
#define MAG_INT_EXTI PC14
#define MPU_INT_EXTI PC13


#define USE_MPU_DATA_READY_SIGNAL 


#define USE_MAG_DATA_READY_SIGNAL 

#define GYRO 
#define USE_GYRO_MPU3050 
#define USE_GYRO_MPU6050 
#define USE_GYRO_MPU6500 
#define USE_GYRO_SPI_MPU6500 


#define GYRO_MPU3050_ALIGN CW0_DEG
#define GYRO_MPU6050_ALIGN CW0_DEG
#define GYRO_MPU6500_ALIGN CW0_DEG

#define ACC 
#define USE_ACC_ADXL345 
#define USE_ACC_BMA280 
#define USE_ACC_MMA8452 
#define USE_ACC_MPU6050 
#define USE_ACC_MPU6500 
#define USE_ACC_SPI_MPU6500 

#define ACC_ADXL345_ALIGN CW270_DEG
#define ACC_MPU6050_ALIGN CW0_DEG
#define ACC_MMA8452_ALIGN CW90_DEG
#define ACC_BMA280_ALIGN CW0_DEG
#define ACC_MPU6500_ALIGN CW0_DEG

#define BARO 
#define USE_BARO_MS5611 
#define USE_BARO_BMP085 
#define USE_BARO_BMP280 

#define MAG 
#define USE_MAG_HMC5883 

#define MAG_HMC5883_ALIGN CW180_DEG

#define BEEPER 
#define LED0 
#define LED1 
#define INVERTER 


#define SONAR 
#define SONAR_PWM_TRIGGER_PIN Pin_8
#define SONAR_PWM_TRIGGER_GPIO GPIOB
#define SONAR_PWM_ECHO_PIN Pin_9
#define SONAR_PWM_ECHO_GPIO GPIOB
#define SONAR_PWM_TRIGGER_IO PB8
#define SONAR_PWM_ECHO_IO PB9

#define SONAR_TRIGGER_PIN Pin_0
#define SONAR_TRIGGER_GPIO GPIOB
#define SONAR_ECHO_PIN Pin_1
#define SONAR_ECHO_GPIO GPIOB
#define SONAR_TRIGGER_IO PB0
#define SONAR_ECHO_IO PB1

#define USE_UART1 
#define USE_UART2 
#define USE_UART3 
#define USE_SOFTSERIAL1 
#define USE_SOFTSERIAL2 
#define SERIAL_PORT_COUNT 5

#define SOFTSERIAL_1_TIMER TIM3
#define SOFTSERIAL_1_TIMER_RX_HARDWARE 4
#define SOFTSERIAL_1_TIMER_TX_HARDWARE 5
#define SOFTSERIAL_2_TIMER TIM3
#define SOFTSERIAL_2_TIMER_RX_HARDWARE 6
#define SOFTSERIAL_2_TIMER_TX_HARDWARE 7

#define USE_UART1_TX_DMA 


#define UART3_RX_PIN Pin_11
#define UART3_TX_PIN Pin_10
#define UART3_GPIO GPIOB
#define UART3_APB1_PERIPHERALS RCC_APB1Periph_USART3
#define UART3_APB2_PERIPHERALS RCC_APB2Periph_GPIOB

#define USE_I2C 
#define I2C_DEVICE (I2CDEV_2)






#define USE_ADC 
#define BOARD_HAS_VOLTAGE_DIVIDER 

#define ADC_INSTANCE ADC1
#define ADC_ABP2_PERIPHERAL RCC_APB2Periph_ADC1
#define ADC_AHB_PERIPHERAL RCC_AHBPeriph_DMA1
#define ADC_DMA_CHANNEL DMA1_Channel1

#define ADC0_GPIO GPIOB
#define ADC0_GPIO_PIN GPIO_Pin_1
#define ADC0_CHANNEL ADC_Channel_9

#define ADC1_GPIO GPIOA
#define ADC1_GPIO_PIN GPIO_Pin_4
#define ADC1_CHANNEL ADC_Channel_4

#define ADC2_GPIO GPIOA
#define ADC2_GPIO_PIN GPIO_Pin_1
#define ADC2_CHANNEL ADC_Channel_1

#define ADC3_GPIO GPIOA
#define ADC3_GPIO_PIN GPIO_Pin_5
#define ADC3_CHANNEL ADC_Channel_5

#define ADC_CHANNEL_COUNT 4

#define ADC_AMPERAGE ADC_CHANNEL0
#define ADC_BATTERY ADC_CHANNEL1
#define ADC_RSSI ADC_CHANNEL2
#define ADC_EXTERNAL ADC_CHANNEL3


#define LED_STRIP 
#define LED_STRIP_TIMER TIM3
#define WS2811_DMA_TC_FLAG DMA1_FLAG_TC6
#define WS2811_DMA_HANDLER_IDENTIFER DMA1Channel6Descriptor

#define GPS 
#define GTUNE 
#define BLACKBOX 
#define TELEMETRY 
#define TELEMETRY_IBUS 
#define SERIAL_RX 
#define USE_SERVOS 
#define USE_CLI 

#define SPEKTRUM_BIND 

#define BIND_PORT GPIOA
#define BIND_PIN Pin_3

#define USE_SERIAL_4WAY_BLHELI_INTERFACE 
# 243 "./src/main/target/NAZE/target.h"
#define TARGET_IO_PORTA 0xffff
#define TARGET_IO_PORTB 0xffff
#define TARGET_IO_PORTC (BIT(13)|BIT(14)|BIT(15))
# 47 "./src/main/platform.h" 2
# 28 "./src/main/telemetry/mavlink.c" 2

# 1 "./src/main/build/build_config.h" 1
# 18 "./src/main/build/build_config.h"
       

#define UNUSED(x) (void)(x)
#define BUILD_BUG_ON(condition) ((void)sizeof(char[1 - 2*!!(condition)]))
# 30 "./src/main/build/build_config.h"
#define STATIC_UNIT_TESTED static
#define STATIC_INLINE_UNIT_TESTED static inline
#define INLINE_UNIT_TESTED inline
#define UNIT_TESTED 





#define REQUIRE_CC_ARM_PRINTF_SUPPORT 
#define REQUIRE_PRINTF_LONG_SUPPORT 
# 30 "./src/main/telemetry/mavlink.c" 2



# 1 "./src/main/common/maths.h" 1
# 18 "./src/main/common/maths.h"
       


#define sq(x) ((x)*(x))



#define FAST_TRIGONOMETRY 



#define M_PIf 3.14159265358979323846f

#define RAD (M_PIf / 180.0f)

#define MIN(a,b) ((a) < (b) ? (a) : (b))
#define MAX(a,b) ((a) > (b) ? (a) : (b))
#define ABS(x) ((x) > 0 ? (x) : -(x))

typedef struct stdev_s
{
    float m_oldM, m_newM, m_oldS, m_newS;
    int m_n;
} stdev_t;


typedef struct fp_vector {
    float X;
    float Y;
    float Z;
} t_fp_vector_def;

typedef union {
    float A[3];
    t_fp_vector_def V;
} t_fp_vector;



typedef struct fp_angles {
    float roll;
    float pitch;
    float yaw;
} fp_angles_def;

typedef union {
    float raw[3];
    fp_angles_def angles;
} fp_angles_t;

int32_t applyDeadband(int32_t value, int32_t deadband);

int constrain(int amt, int low, int high);
float constrainf(float amt, float low, float high);

void devClear(stdev_t *dev);
void devPush(stdev_t *dev, float x);
float devVariance(stdev_t *dev);
float devStandardDeviation(stdev_t *dev);
float degreesToRadians(int16_t degrees);

int scaleRange(int x, int srcMin, int srcMax, int destMin, int destMax);

void normalizeV(struct fp_vector *src, struct fp_vector *dest);

void rotateV(struct fp_vector *v, fp_angles_t *delta);
void buildRotationMatrix(fp_angles_t *delta, float matrix[3][3]);

int32_t quickMedianFilter3(int32_t * v);
int32_t quickMedianFilter5(int32_t * v);
int32_t quickMedianFilter7(int32_t * v);
int32_t quickMedianFilter9(int32_t * v);
# 98 "./src/main/common/maths.h"
#define sin_approx(x) sinf(x)
#define cos_approx(x) cosf(x)
#define atan2_approx(y,x) atan2f(y,x)
#define acos_approx(x) acosf(x)
#define tan_approx(x) tanf(x)


void arraySubInt32(int32_t *dest, int32_t *array1, int32_t *array2, int count);
# 34 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/common/axis.h" 1
# 18 "./src/main/common/axis.h"
       

typedef enum {
    X = 0,
    Y,
    Z
} axis_e;

#define XYZ_AXIS_COUNT 3


typedef enum {
    FD_ROLL = 0,
    FD_PITCH,
    FD_YAW,
    FD_INDEX_COUNT
} flight_dynamics_index_t;


typedef enum {
    AI_ROLL = 0,
    AI_PITCH,
    ANGLE_INDEX_COUNT
} angle_index_t;
# 35 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/common/color.h" 1
# 18 "./src/main/common/color.h"
       


typedef enum {
    RGB_RED = 0,
    RGB_GREEN,
    RGB_BLUE
} colorComponent_e;

#define RGB_COLOR_COMPONENT_COUNT (RGB_BLUE + 1)

typedef union {
    struct {
        uint8_t r;
        uint8_t g;
        uint8_t b;
    } rgb;
    uint8_t raw[(RGB_BLUE + 1)];
} rgbColor24bpp_t;

#define HSV_HUE_MAX 359
#define HSV_SATURATION_MAX 255
#define HSV_VALUE_MAX 255

typedef enum {
    HSV_HUE = 0,
    HSV_SATURATION,
    HSV_VALUE
} hsvColorComponent_e;

#define HSV_COLOR_COMPONENT_COUNT (HSV_VALUE + 1)

typedef struct hsvColor_s {
    uint16_t h;
    uint8_t s;
    uint8_t v;
} hsvColor_t;
# 36 "./src/main/telemetry/mavlink.c" 2

# 1 "./src/main/config/parameter_group.h" 1
# 18 "./src/main/config/parameter_group.h"
       

typedef uint16_t pgn_t;


typedef enum {
    PGRF_NONE = 0,
    PGRF_CLASSIFICATON_BIT = (1 << 0),
} pgRegistryFlags_e;

typedef enum {
    PGR_PGN_MASK = 0x0fff,
    PGR_PGN_VERSION_MASK = 0xf000,
    PGR_SIZE_MASK = 0x0fff,
    PGR_SIZE_SYSTEM_FLAG = 0x0000,
    PGR_SIZE_PROFILE_FLAG = 0x8000,
} pgRegistryInternal_e;


typedef void (pgResetFunc)(void * , int );

typedef struct pgRegistry_s {
    pgn_t pgn;
    uint16_t size;
    uint8_t *address;
    uint8_t **ptr;
    union {
        void *ptr;
        pgResetFunc *fn;
    } reset;
} pgRegistry_t;

static inline uint16_t pgN(const pgRegistry_t* reg) {return reg->pgn & PGR_PGN_MASK;}
static inline uint8_t pgVersion(const pgRegistry_t* reg) {return reg->pgn >> 12;}
static inline uint16_t pgSize(const pgRegistry_t* reg) {return reg->size & PGR_SIZE_MASK;}
static inline uint16_t pgIsSystem(const pgRegistry_t* reg) {return (reg->size & PGR_SIZE_PROFILE_FLAG) == 0;}

#define PG_PACKED __attribute__((packed))
# 66 "./src/main/config/parameter_group.h"
extern const pgRegistry_t __pg_registry_start[];
extern const pgRegistry_t __pg_registry_end[];
#define PG_REGISTER_ATTRIBUTES __attribute__ ((section(".pg_registry"), used, aligned(4)))

extern const uint8_t __pg_resetdata_start[];
extern const uint8_t __pg_resetdata_end[];
#define PG_RESETDATA_ATTRIBUTES __attribute__ ((section(".pg_resetdata"), used, aligned(2)))


#define PG_REGISTRY_SIZE (__pg_registry_end - __pg_registry_start)


#define PG_FOREACH(_name) for (const pgRegistry_t *(_name) = __pg_registry_start; (_name) < __pg_registry_end; _name++)


#define PG_FOREACH_PROFILE(_name) PG_FOREACH(_name) if(pgIsSystem(_name)) continue; else
# 90 "./src/main/config/parameter_group.h"
#define PG_RESET_CURRENT(_name) do { extern const pgRegistry_t _name ##_Registry; pgResetCurrent(&_name ## _Registry); } while(0)







#define PG_DECLARE(_type,_name) extern _type _name ## _System; static inline _type* _name(void) { return &_name ## _System; } struct _dummy






#define PG_DECLARE_ARR(_type,_size,_name) extern _type _name ## _SystemArray[_size]; static inline _type* _name(int _index) { return &_name ## _SystemArray[_index]; } static inline _type (* _name ## _arr(void))[_size] { return &_name ## _SystemArray; } struct _dummy







#define PG_DECLARE_PROFILE(_type,_name) extern _type *_name ## _ProfileCurrent; static inline _type* _name(void) { return _name ## _ProfileCurrent; } struct _dummy






#define PG_REGISTER_I(_type,_name,_pgn,_version,_reset) _type _name ## _System; extern const pgRegistry_t _name ## _Registry; const pgRegistry_t _name ##_Registry PG_REGISTER_ATTRIBUTES = { .pgn = _pgn | (_version << 12), .size = sizeof(_type) | PGR_SIZE_SYSTEM_FLAG, .address = (uint8_t*)&_name ## _System, .ptr = 0, _reset, }
# 133 "./src/main/config/parameter_group.h"
#define PG_REGISTER(_type,_name,_pgn,_version) PG_REGISTER_I(_type, _name, _pgn, _version, .reset = {.ptr = 0})



#define PG_REGISTER_WITH_RESET_FN(_type,_name,_pgn,_version) extern void pgResetFn_ ## _name(_type *); PG_REGISTER_I(_type, _name, _pgn, _version, .reset = {.fn = (pgResetFunc*)&pgResetFn_ ## _name })




#define PG_REGISTER_WITH_RESET_TEMPLATE(_type,_name,_pgn,_version) extern const _type pgResetTemplate_ ## _name; PG_REGISTER_I(_type, _name, _pgn, _version, .reset = {.ptr = (void*)&pgResetTemplate_ ## _name})





#define PG_REGISTER_ARR_I(_type,_size,_name,_pgn,_version,_reset) _type _name ## _SystemArray[_size]; extern const pgRegistry_t _name ##_Registry; const pgRegistry_t _name ## _Registry PG_REGISTER_ATTRIBUTES = { .pgn = _pgn | (_version << 12), .size = (sizeof(_type) * _size) | PGR_SIZE_SYSTEM_FLAG, .address = (uint8_t*)&_name ## _SystemArray, .ptr = 0, _reset, }
# 160 "./src/main/config/parameter_group.h"
#define PG_REGISTER_ARR(_type,_size,_name,_pgn,_version) PG_REGISTER_ARR_I(_type, _size, _name, _pgn, _version, .reset = {.ptr = 0})



#define PG_REGISTER_ARR_WITH_RESET_FN(_type,_size,_name,_pgn,_version) extern void pgResetFn_ ## _name(_type *); PG_REGISTER_ARR_I(_type, _size, _name, _pgn, _version, .reset = {.fn = (pgResetFunc*)&pgResetFn_ ## _name})
# 181 "./src/main/config/parameter_group.h"
#define _PG_PROFILE_CURRENT_DECL(_type,_name) _type *_name ## _ProfileCurrent;




#define PG_REGISTER_PROFILE_I(_type,_name,_pgn,_version,_reset) STATIC_UNIT_TESTED _type _name ## _Storage[MAX_PROFILE_COUNT]; _PG_PROFILE_CURRENT_DECL(_type, _name) extern const pgRegistry_t _name ## _Registry; const pgRegistry_t _name ## _Registry PG_REGISTER_ATTRIBUTES = { .pgn = _pgn | (_version << 12), .size = sizeof(_type) | PGR_SIZE_PROFILE_FLAG, .address = (uint8_t*)&_name ## _Storage, .ptr = (uint8_t **)&_name ## _ProfileCurrent, _reset, }
# 199 "./src/main/config/parameter_group.h"
#define PG_REGISTER_PROFILE(_type,_name,_pgn,_version) PG_REGISTER_PROFILE_I(_type, _name, _pgn, _version, .reset = {.ptr = 0})



#define PG_REGISTER_PROFILE_WITH_RESET_FN(_type,_name,_pgn,_version) extern void pgResetFn_ ## _name(_type *); PG_REGISTER_PROFILE_I(_type, _name, _pgn, _version, .reset = {.fn = (pgResetFunc*)&pgResetFn_ ## _name})




#define PG_REGISTER_PROFILE_WITH_RESET_TEMPLATE(_type,_name,_pgn,_version) extern const _type pgResetTemplate_ ## _name; PG_REGISTER_PROFILE_I(_type, _name, _pgn, _version, .reset = {.ptr = (void*)&pgResetTemplate_ ## _name})







#define PG_RESET_TEMPLATE(_type,_name,...) const _type pgResetTemplate_ ## _name PG_RESETDATA_ATTRIBUTES = { __VA_ARGS__ }





const pgRegistry_t* pgFind(pgn_t pgn);

void pgLoad(const pgRegistry_t* reg, int profileIndex, const void *from, int size, int version);
int pgStore(const pgRegistry_t* reg, void *to, int size, uint8_t profileIndex);
void pgResetAll(int profileCount);
void pgResetCurrent(const pgRegistry_t *reg);
void pgReset(const pgRegistry_t* reg, int profileIndex);
void pgActivateProfile(int profileIndex);
# 38 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/config/feature.h" 1
# 18 "./src/main/config/feature.h"
       

typedef struct featureConfig_s {
    uint32_t enabledFeatures;
} featureConfig_t;

extern featureConfig_t featureConfig_System; static inline featureConfig_t* featureConfig(void) { return &featureConfig_System; } struct _dummy;

void latchActiveFeatures(void);
_Bool featureConfigured(uint32_t mask);
_Bool feature(uint32_t mask);
void featureSet(uint32_t mask);
void featureClear(uint32_t mask);
void featureClearAll(void);
uint32_t featureMask(void);
# 39 "./src/main/telemetry/mavlink.c" 2

# 1 "./src/main/drivers/system.h" 1
# 18 "./src/main/drivers/system.h"
       

void systemInit(void);
void delayMicroseconds(uint32_t us);
void delay(uint32_t ms);

uint32_t micros(void);
uint32_t millis(void);


void failureMode(uint8_t mode);


void systemReset(void);
void systemResetToBootloader(void);
_Bool isMPUSoftReset(void);

void enableGPIOPowerUsageAndNoiseReductions(void);

extern uint32_t hse_value;

extern uint32_t cachedRccCsrValue;

typedef enum {
    FAILURE_DEVELOPER = 0,
    FAILURE_MISSING_ACC,
    FAILURE_ACC_INIT,
    FAILURE_ACC_INCOMPATIBLE,
    FAILURE_INVALID_EEPROM_CONTENTS,
    FAILURE_FLASH_WRITE_FAILED,
    FAILURE_GYRO_INIT_FAILED
} failureMode_e;
# 41 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/drivers/sensor.h" 1
# 18 "./src/main/drivers/sensor.h"
       

typedef _Bool (*sensorInitFuncPtr)(void);
typedef _Bool (*sensorReadFuncPtr)(int16_t *data);

struct acc_s;
struct gyro_s;
typedef void (*sensorAccInitFuncPtr)(struct acc_s *acc);
typedef void (*sensorGyroInitFuncPtr)(struct gyro_s* gyro, uint8_t lpf);
# 42 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/drivers/accgyro.h" 1
# 18 "./src/main/drivers/accgyro.h"
       

#define GYRO_LPF_256HZ 0
#define GYRO_LPF_188HZ 1
#define GYRO_LPF_98HZ 2
#define GYRO_LPF_42HZ 3
#define GYRO_LPF_20HZ 4
#define GYRO_LPF_10HZ 5
#define GYRO_LPF_5HZ 6
#define GYRO_LPF_NONE 7

typedef struct gyro_s {
    sensorGyroInitFuncPtr init;
    sensorReadFuncPtr read;
    sensorReadFuncPtr temperature;
    float scale;
    uint16_t sampleFrequencyHz;
} gyro_t;

typedef struct acc_s {
    sensorAccInitFuncPtr init;
    sensorReadFuncPtr read;
    uint16_t acc_1G;
    char revisionCode;
} acc_t;
# 43 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/drivers/gpio.h" 1
# 18 "./src/main/drivers/gpio.h"
       


typedef enum
{
    Mode_AIN = 0x0,
    Mode_IN_FLOATING = 0x04,
    Mode_IPD = 0x28,
    Mode_IPU = 0x48,
    Mode_Out_OD = 0x14,
    Mode_Out_PP = 0x10,
    Mode_AF_OD = 0x1C,
    Mode_AF_PP = 0x18
} GPIO_Mode;
# 74 "./src/main/drivers/gpio.h"
typedef enum
{
    Speed_10MHz = 1,
    Speed_2MHz,
    Speed_50MHz
} GPIO_Speed;

typedef enum
{
    Pin_0 = 0x0001,
    Pin_1 = 0x0002,
    Pin_2 = 0x0004,
    Pin_3 = 0x0008,
    Pin_4 = 0x0010,
    Pin_5 = 0x0020,
    Pin_6 = 0x0040,
    Pin_7 = 0x0080,
    Pin_8 = 0x0100,
    Pin_9 = 0x0200,
    Pin_10 = 0x0400,
    Pin_11 = 0x0800,
    Pin_12 = 0x1000,
    Pin_13 = 0x2000,
    Pin_14 = 0x4000,
    Pin_15 = 0x8000,
    Pin_All = 0xFFFF
} GPIO_Pin;

typedef struct
{
    uint16_t pin;
    GPIO_Mode mode;
    GPIO_Speed speed;
} gpio_config_t;


static inline void digitalHi(GPIO_TypeDef *p, uint16_t i) { p->BSRR = i; }
static inline void digitalLo(GPIO_TypeDef *p, uint16_t i) { p->BRR = i; }
static inline void digitalToggle(GPIO_TypeDef *p, uint16_t i) { p->ODR ^= i; }
static inline uint16_t digitalIn(GPIO_TypeDef *p, uint16_t i) {return p->IDR & i; }




void gpioInit(GPIO_TypeDef *gpio, const gpio_config_t *config);
void gpioExtiLineConfig(uint8_t portsrc, uint8_t pinsrc);
void gpioPinRemapConfig(uint32_t remap, _Bool enable);
# 44 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/drivers/timer.h" 1
# 18 "./src/main/drivers/timer.h"
       


#define USABLE_TIMER_CHANNEL_COUNT 14


typedef uint16_t captureCompare_t;







typedef uint16_t timCCR_t;
typedef uint16_t timCCER_t;
typedef uint16_t timSR_t;
typedef uint16_t timCNT_t;
# 46 "./src/main/drivers/timer.h"
struct timerCCHandlerRec_s;
struct timerOvrHandlerRec_s;
typedef void timerCCHandlerCallback(struct timerCCHandlerRec_s* self, uint16_t capture);
typedef void timerOvrHandlerCallback(struct timerOvrHandlerRec_s* self, uint16_t capture);

typedef struct timerCCHandlerRec_s {
    timerCCHandlerCallback* fn;
} timerCCHandlerRec_t;

typedef struct timerOvrHandlerRec_s {
    timerOvrHandlerCallback* fn;
    struct timerOvrHandlerRec_s* next;
} timerOvrHandlerRec_t;

typedef struct {
    TIM_TypeDef *tim;
    GPIO_TypeDef *gpio;
    uint16_t pin;
    uint8_t channel;
    uint8_t irq;
    uint8_t outputEnable;
    GPIO_Mode gpioInputMode;




} timerHardware_t;

extern const timerHardware_t timerHardware[];

typedef enum {
    TYPE_FREE,
    TYPE_PWMINPUT,
    TYPE_PPMINPUT,
    TYPE_PWMOUTPUT_MOTOR,
    TYPE_PWMOUTPUT_FAST,
    TYPE_PWMOUTPUT_SERVO,
    TYPE_SOFTSERIAL_RX,
    TYPE_SOFTSERIAL_TX,
    TYPE_SOFTSERIAL_RXTX,
    TYPE_SOFTSERIAL_AUXTIMER,
    TYPE_ADC,
    TYPE_SERIAL_RX,
    TYPE_SERIAL_TX,
    TYPE_SERIAL_RXTX,
    TYPE_TIMER
} channelType_t;

void timerConfigure(const timerHardware_t *timHw, uint16_t period, uint8_t mhz);

void timerChConfigIC(const timerHardware_t *timHw, _Bool polarityRising, unsigned inputFilterSamples);
void timerChConfigICDual(const timerHardware_t* timHw, _Bool polarityRising, unsigned inputFilterSamples);
void timerChICPolarity(const timerHardware_t *timHw, _Bool polarityRising);
volatile timCCR_t* timerChCCR(const timerHardware_t* timHw);
volatile timCCR_t* timerChCCRLo(const timerHardware_t* timHw);
volatile timCCR_t* timerChCCRHi(const timerHardware_t* timHw);
void timerChConfigOC(const timerHardware_t* timHw, _Bool outEnable, _Bool stateHigh);
void timerChConfigGPIO(const timerHardware_t* timHw, GPIO_Mode mode);

void timerChCCHandlerInit(timerCCHandlerRec_t *self, timerCCHandlerCallback *fn);
void timerChOvrHandlerInit(timerOvrHandlerRec_t *self, timerOvrHandlerCallback *fn);
void timerChConfigCallbacks(const timerHardware_t *channel, timerCCHandlerRec_t *edgeCallback, timerOvrHandlerRec_t *overflowCallback);
void timerChConfigCallbacksDual(const timerHardware_t *channel, timerCCHandlerRec_t *edgeCallbackLo, timerCCHandlerRec_t *edgeCallbackHi, timerOvrHandlerRec_t *overflowCallback);
void timerChITConfigDualLo(const timerHardware_t* timHw, FunctionalState newState);
void timerChITConfig(const timerHardware_t* timHw, FunctionalState newState);
void timerChClearCCFlag(const timerHardware_t* timHw);

void timerChInit(const timerHardware_t *timHw, channelType_t type, int irqPriority);

void timerInit(void);
void timerStart(void);
void timerForceOverflow(TIM_TypeDef *tim);

void configTimeBase(TIM_TypeDef *tim, uint16_t period, uint8_t mhz);
# 45 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/drivers/serial.h" 1
# 18 "./src/main/drivers/serial.h"
       

typedef enum portMode_t {
    MODE_RX = 1 << 0,
    MODE_TX = 1 << 1,
    MODE_RXTX = MODE_RX | MODE_TX
} portMode_t;

typedef enum portOptions_t {
    SERIAL_NOT_INVERTED = 0 << 0,
    SERIAL_INVERTED = 1 << 0,
    SERIAL_STOPBITS_1 = 0 << 1,
    SERIAL_STOPBITS_2 = 1 << 1,
    SERIAL_PARITY_NO = 0 << 2,
    SERIAL_PARITY_EVEN = 1 << 2,
    SERIAL_UNIDIR = 0 << 3,
    SERIAL_BIDIR = 1 << 3
} portOptions_t;

typedef void (*serialReceiveCallbackPtr)(uint16_t data);

typedef struct serialPort_s {

    const struct serialPortVTable *vTable;

    uint8_t identifier;
    portMode_t mode;
    portOptions_t options;

    uint32_t baudRate;

    uint32_t rxBufferSize;
    uint32_t txBufferSize;
    volatile uint8_t *rxBuffer;
    volatile uint8_t *txBuffer;
    uint32_t rxBufferHead;
    uint32_t rxBufferTail;
    uint32_t txBufferHead;
    uint32_t txBufferTail;


    serialReceiveCallbackPtr callback;
} serialPort_t;

struct serialPortVTable {
    void (*serialWrite)(serialPort_t *instance, uint8_t ch);

    uint32_t (*serialTotalRxWaiting)(const serialPort_t *instance);
    uint8_t (*serialTotalTxFree)(const serialPort_t *instance);

    uint8_t (*serialRead)(serialPort_t *instance);


    void (*serialSetBaudRate)(serialPort_t *instance, uint32_t baudRate);

    _Bool (*isSerialTransmitBufferEmpty)(const serialPort_t *instance);

    void (*setMode)(serialPort_t *instance, portMode_t mode);

    void (*writeBuf)(serialPort_t *instance, const void *data, int count);

    void (*beginWrite)(serialPort_t *instance);
    void (*endWrite)(serialPort_t *instance);
};

void serialWrite(serialPort_t *instance, uint8_t ch);
uint32_t serialRxBytesWaiting(const serialPort_t *instance);
uint8_t serialTxBytesFree(const serialPort_t *instance);
void serialWriteBuf(serialPort_t *instance, const uint8_t *data, int count);
uint8_t serialRead(serialPort_t *instance);
void serialSetBaudRate(serialPort_t *instance, uint32_t baudRate);
void serialSetMode(serialPort_t *instance, portMode_t mode);
_Bool isSerialTransmitBufferEmpty(const serialPort_t *instance);
void serialPrint(serialPort_t *instance, const char *str);
uint32_t serialGetBaudRate(serialPort_t *instance);


void serialWriteBufShim(void *instance, uint8_t *data, int count);
void serialBeginWrite(serialPort_t *instance);
void serialEndWrite(serialPort_t *instance);
# 46 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/drivers/pwm_rx.h" 1
# 18 "./src/main/drivers/pwm_rx.h"
       

typedef enum {
    INPUT_FILTERING_DISABLED = 0,
    INPUT_FILTERING_ENABLED
} inputFilteringMode_e;

typedef struct pwmRxConfig_s {
    inputFilteringMode_e inputFilteringMode;
} pwmRxConfig_t;

extern pwmRxConfig_t pwmRxConfig_System; static inline pwmRxConfig_t* pwmRxConfig(void) { return &pwmRxConfig_System; } struct _dummy;

#define PPM_RCVR_TIMEOUT 0


void ppmInConfig(const timerHardware_t *timerHardwarePtr);
void ppmAvoidPWMTimerClash(const timerHardware_t *timerHardwarePtr, TIM_TypeDef *sharedPwmTimer);

void pwmInConfig(const timerHardware_t *timerHardwarePtr, uint8_t channel);
uint16_t pwmRead(uint8_t channel);
uint16_t ppmRead(uint8_t channel);

_Bool isPPMDataBeingReceived(void);
void resetPPMDataReceivedState(void);

void pwmRxInit(void);

_Bool isPWMDataBeingReceived(void);
# 47 "./src/main/telemetry/mavlink.c" 2

# 1 "./src/main/fc/fc_serial.h" 1
# 18 "./src/main/fc/fc_serial.h"
       

typedef enum {
    BAUDRATE_MSP_SERVER = 0,
    BAUDRATE_GPS,
    BAUDRATE_TELEMETRY,
    BAUDRATE_BLACKBOX
} functionBaudRate_e;
# 49 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/fc/config.h" 1
# 18 "./src/main/fc/config.h"
       

#define ONESHOT_FEATURE_CHANGED_DELAY_ON_BOOT_MS 1500


typedef enum {
    FEATURE_RX_PPM = 1 << 0,
    FEATURE_VBAT = 1 << 1,
    FEATURE_INFLIGHT_ACC_CAL = 1 << 2,
    FEATURE_RX_SERIAL = 1 << 3,
    FEATURE_MOTOR_STOP = 1 << 4,
    FEATURE_SERVO_TILT = 1 << 5,
    FEATURE_SOFTSERIAL = 1 << 6,
    FEATURE_GPS = 1 << 7,
    FEATURE_FAILSAFE = 1 << 8,
    FEATURE_SONAR = 1 << 9,
    FEATURE_TELEMETRY = 1 << 10,
    FEATURE_AMPERAGE_METER = 1 << 11,
    FEATURE_3D = 1 << 12,
    FEATURE_RX_PARALLEL_PWM = 1 << 13,
    FEATURE_RX_MSP = 1 << 14,
    FEATURE_RSSI_ADC = 1 << 15,
    FEATURE_LED_STRIP = 1 << 16,
    FEATURE_DISPLAY = 1 << 17,
    FEATURE_ONESHOT125 = 1 << 18,
    FEATURE_BLACKBOX = 1 << 19,
    FEATURE_CHANNEL_FORWARDING = 1 << 20,
    FEATURE_TRANSPONDER = 1 << 21,
    FEATURE_OSD = 1 << 22,
} features_e;

void handleOneshotFeatureChangeOnRestart(void);

void initEEPROM(void);
void resetEEPROM(void);
void readEEPROM(void);
void writeEEPROM();
void ensureEEPROMContainsValidData(void);
void saveConfigAndNotify(void);

void changeProfile(uint8_t profileIndex);

uint8_t getCurrentControlRateProfile(void);
void changeControlRateProfile(uint8_t profileIndex);
# 50 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/fc/rc_controls.h" 1
# 18 "./src/main/fc/rc_controls.h"
       

typedef enum {
    BOXARM = 0,
    BOXANGLE,
    BOXHORIZON,
    BOXBARO,

    BOXMAG,
    BOXHEADFREE,
    BOXHEADADJ,
    BOXCAMSTAB,
    BOXCAMTRIG,
    BOXGPSHOME,
    BOXGPSHOLD,
    BOXPASSTHRU,
    BOXBEEPERON,
    BOXLEDMAX,
    BOXLEDLOW,
    BOXLLIGHTS,
    BOXCALIB,
    BOXGOV,
    BOXOSD,
    BOXTELEMETRY,
    BOXGTUNE,
    BOXSONAR,
    BOXSERVO1,
    BOXSERVO2,
    BOXSERVO3,
    BOXBLACKBOX,
    BOXFAILSAFE,
    BOXAIRMODE,
    BOXVTX,
    CHECKBOX_ITEM_COUNT
} boxId_e;

typedef enum rc_alias {
    ROLL = 0,
    PITCH,
    YAW,
    THROTTLE,
    AUX1,
    AUX2,
    AUX3,
    AUX4,
    AUX5,
    AUX6,
    AUX7,
    AUX8
} rc_alias_e;

typedef enum {
    THROTTLE_LOW = 0,
    THROTTLE_HIGH
} throttleStatus_e;

typedef enum {
    NOT_CENTERED = 0,
    CENTERED
} rollPitchStatus_e;

#define ROL_LO (1 << (2 * ROLL))
#define ROL_CE (3 << (2 * ROLL))
#define ROL_HI (2 << (2 * ROLL))
#define PIT_LO (1 << (2 * PITCH))
#define PIT_CE (3 << (2 * PITCH))
#define PIT_HI (2 << (2 * PITCH))
#define YAW_LO (1 << (2 * YAW))
#define YAW_CE (3 << (2 * YAW))
#define YAW_HI (2 << (2 * YAW))
#define THR_LO (1 << (2 * THROTTLE))
#define THR_CE (3 << (2 * THROTTLE))
#define THR_HI (2 << (2 * THROTTLE))

#define MAX_MODE_ACTIVATION_CONDITION_COUNT 20

#define CHANNEL_RANGE_MIN 900
#define CHANNEL_RANGE_MAX 2100

#define MODE_STEP_TO_CHANNEL_VALUE(step) (CHANNEL_RANGE_MIN + 25 * (step))
#define CHANNEL_VALUE_TO_STEP(channelValue) ((constrain((channelValue), CHANNEL_RANGE_MIN, CHANNEL_RANGE_MAX) - CHANNEL_RANGE_MIN) / 25)

#define MIN_MODE_RANGE_STEP 0
#define MAX_MODE_RANGE_STEP ((CHANNEL_RANGE_MAX - CHANNEL_RANGE_MIN) / 25)


#define CONTROL_RATE_CONFIG_ROLL_PITCH_RATE_MAX 100


#define CONTROL_RATE_CONFIG_YAW_RATE_MAX 255

#define CONTROL_RATE_CONFIG_TPA_MAX 100





typedef struct channelRange_s {
    uint8_t startStep;
    uint8_t endStep;
} channelRange_t;

typedef struct modeActivationCondition_s {
    boxId_e modeId;
    uint8_t auxChannelIndex;
    channelRange_t range;
} modeActivationCondition_t;

#define IS_RANGE_USABLE(range) ((range)->startStep < (range)->endStep)

typedef struct modeActivationProfile_s {
    modeActivationCondition_t modeActivationConditions[20];
} modeActivationProfile_t;

extern modeActivationProfile_t *modeActivationProfile_ProfileCurrent; static inline modeActivationProfile_t* modeActivationProfile(void) { return modeActivationProfile_ProfileCurrent; } struct _dummy;

extern int16_t rcCommand[4];

typedef struct rcControlsConfig_s {
    uint8_t deadband;
    uint8_t yaw_deadband;
    uint8_t alt_hold_deadband;
    uint8_t alt_hold_fast_change;
    int8_t yaw_control_direction;
    uint16_t deadband3d_throttle;
} rcControlsConfig_t;

extern rcControlsConfig_t *rcControlsConfig_ProfileCurrent; static inline rcControlsConfig_t* rcControlsConfig(void) { return rcControlsConfig_ProfileCurrent; } struct _dummy;

typedef struct armingConfig_s {

    uint8_t retarded_arm;
    uint8_t disarm_kill_switch;
    uint8_t auto_disarm_delay;
    uint8_t max_arm_angle;
} armingConfig_t;

extern armingConfig_t armingConfig_System; static inline armingConfig_t* armingConfig(void) { return &armingConfig_System; } struct _dummy;

_Bool areUsingSticksToArm(void);

_Bool areSticksInApModePosition(uint16_t ap_mode);
struct rxConfig_s;
throttleStatus_e calculateThrottleStatus(struct rxConfig_s *rxConfig, uint16_t deadband3d_throttle);
rollPitchStatus_e calculateRollPitchCenterStatus(struct rxConfig_s *rxConfig);
void processRcStickPositions(struct rxConfig_s *rxConfig, throttleStatus_e throttleStatus, _Bool retarded_arm, _Bool disarm_kill_switch);

_Bool rcModeIsActive(boxId_e modeId);
void rcModeUpdateActivated(modeActivationCondition_t *modeActivationConditions);
_Bool rcModeIsActivationConditionPresent(modeActivationCondition_t *modeActivationConditions, boxId_e modeId);


_Bool isUsingSticksForArming(void);

int32_t getRcStickDeflection(int32_t axis, uint16_t midrc);

void useRcControlsConfig(modeActivationCondition_t *modeActivationConditions);

_Bool isRangeActive(uint8_t auxChannelIndex, channelRange_t *range);
# 51 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/fc/runtime_config.h" 1
# 18 "./src/main/fc/runtime_config.h"
       


typedef enum {
    OK_TO_ARM = (1 << 0),
    PREVENT_ARMING = (1 << 1),
    ARMED = (1 << 2)
} armingFlag_e;

extern uint8_t armingFlags;

#define DISABLE_ARMING_FLAG(mask) (armingFlags &= ~(mask))
#define ENABLE_ARMING_FLAG(mask) (armingFlags |= (mask))
#define ARMING_FLAG(mask) (armingFlags & (mask))

typedef enum {
    ANGLE_MODE = (1 << 0),
    HORIZON_MODE = (1 << 1),
    MAG_MODE = (1 << 2),
    BARO_MODE = (1 << 3),
    GPS_HOME_MODE = (1 << 4),
    GPS_HOLD_MODE = (1 << 5),
    HEADFREE_MODE = (1 << 6),
    UNUSED_MODE = (1 << 7),
    PASSTHRU_MODE = (1 << 8),
    SONAR_MODE = (1 << 9),
    FAILSAFE_MODE = (1 << 10),
    GTUNE_MODE = (1 << 11),
} flightModeFlags_e;

extern uint16_t flightModeFlags;

#define DISABLE_FLIGHT_MODE(mask) disableFlightMode(mask)
#define ENABLE_FLIGHT_MODE(mask) enableFlightMode(mask)
#define FLIGHT_MODE(mask) (flightModeFlags & (mask))




#define FLIGHT_MODE_BOXID_MAP_INITIALIZER { BOXANGLE, BOXHORIZON, BOXMAG, BOXBARO, BOXGPSHOME, BOXGPSHOLD, BOXHEADFREE, -1, BOXPASSTHRU, BOXSONAR, BOXFAILSAFE, BOXGTUNE}




typedef enum {
    GPS_FIX_HOME = (1 << 0),
    GPS_FIX = (1 << 1),
    CALIBRATE_MAG = (1 << 2),
    SMALL_ANGLE = (1 << 3),
    FIXED_WING = (1 << 4),
    ANTI_WINDUP = (1 << 5),
} stateFlags_t;

#define DISABLE_STATE(mask) (stateFlags &= ~(mask))
#define ENABLE_STATE(mask) (stateFlags |= (mask))
#define STATE(mask) (stateFlags & (mask))

extern uint8_t stateFlags;

uint16_t enableFlightMode(flightModeFlags_e mask);
uint16_t disableFlightMode(flightModeFlags_e mask);

_Bool sensors(uint32_t mask);
void sensorsSet(uint32_t mask);
void sensorsClear(uint32_t mask);
uint32_t sensorsMask(void);

void mwDisarm(void);
# 52 "./src/main/telemetry/mavlink.c" 2

# 1 "./src/main/io/serial.h" 1
# 18 "./src/main/io/serial.h"
       

typedef enum {
    PORTSHARING_UNUSED = 0,
    PORTSHARING_NOT_SHARED,
    PORTSHARING_SHARED
} portSharing_e;

typedef enum {
    FUNCTION_NONE = 0,
    FUNCTION_MSP_SERVER = (1 << 0),
    FUNCTION_GPS = (1 << 1),
    FUNCTION_TELEMETRY_FRSKY = (1 << 2),
    FUNCTION_TELEMETRY_HOTT = (1 << 3),
    FUNCTION_TELEMETRY_LTM = (1 << 4),
    FUNCTION_TELEMETRY_SMARTPORT = (1 << 5),
    FUNCTION_RX_SERIAL = (1 << 6),
    FUNCTION_BLACKBOX = (1 << 7),
    FUNCTION_TELEMETRY_MAVLINK = (1 << 8),
    FUNCTION_MSP_CLIENT = (1 << 9),
    FUNCTION_TELEMETRY_IBUS = (1 << 10),
    FUNCTION_PASSTHROUGH = (1 << 11),
} serialPortFunction_e;

typedef enum {
    BAUD_AUTO = 0,
    BAUD_9600,
    BAUD_19200,
    BAUD_38400,
    BAUD_57600,
    BAUD_115200,
    BAUD_230400,
    BAUD_250000,
} baudRate_e;

extern const uint32_t baudRates[];


typedef enum {
    SERIAL_PORT_NONE = -1,
    SERIAL_PORT_UART1 = 0,
    SERIAL_PORT_UART2,
    SERIAL_PORT_UART3,
    SERIAL_PORT_UART4,
    SERIAL_PORT_UART5,
    SERIAL_PORT_USB_VCP = 20,
    SERIAL_PORT_SOFTSERIAL1 = 30,
    SERIAL_PORT_SOFTSERIAL2,
    SERIAL_PORT_IDENTIFIER_MAX = SERIAL_PORT_SOFTSERIAL2
} serialPortIdentifier_e;

extern const serialPortIdentifier_e serialPortIdentifiers[5];

void serialInit(_Bool softserialEnabled);





typedef struct serialPortUsage_s {
    serialPortIdentifier_e identifier;
    serialPort_t *serialPort;
    serialPortFunction_e function;
} serialPortUsage_t;

serialPort_t *findSharedSerialPort(uint16_t functionMask, serialPortFunction_e sharedWithFunction);
serialPort_t *findNextSharedSerialPort(uint16_t functionMask, serialPortFunction_e sharedWithFunction);





#define FUNCTION_BAUD_RATE_COUNT 4

typedef struct serialPortConfig_s {
    serialPortIdentifier_e identifier;
    uint16_t functionMask;
    uint8_t baudRates[4];
} serialPortConfig_t;

typedef struct serialConfig_s {
    uint8_t reboot_character;
    serialPortConfig_t portConfigs[5];
} serialConfig_t;

extern serialConfig_t serialConfig_System; static inline serialConfig_t* serialConfig(void) { return &serialConfig_System; } struct _dummy;
typedef void serialConsumer(uint8_t);





void serialRemovePort(serialPortIdentifier_e identifier);
uint8_t serialGetAvailablePortCount(void);
_Bool serialIsPortAvailable(serialPortIdentifier_e identifier);
_Bool isSerialConfigValid(serialConfig_t *serialConfig);
serialPortConfig_t *serialFindPortConfiguration(serialPortIdentifier_e identifier);
_Bool doesConfigurationUsePort(serialPortIdentifier_e portIdentifier);
serialPortConfig_t *findSerialPortConfig(uint16_t mask);
serialPortConfig_t *findNextSerialPortConfig(uint16_t mask);
serialPortUsage_t *findSerialPortUsageByIdentifier(serialPortIdentifier_e identifier);

portSharing_e determinePortSharing(serialPortConfig_t *portConfig, serialPortFunction_e function);
_Bool isSerialPortShared(serialPortConfig_t *portConfig, uint16_t functionMask, serialPortFunction_e sharedWithFunction);
_Bool isSerialPortOpen(serialPortConfig_t *portConfig);




serialPort_t *openSerialPort(
    serialPortIdentifier_e identifier,
    serialPortFunction_e function,
    serialReceiveCallbackPtr callback,
    uint32_t baudrate,
    portMode_t mode,
    portOptions_t options
);
void closeSerialPort(serialPort_t *serialPort);

void waitForSerialPortToFinishTransmitting(serialPort_t *serialPort);

baudRate_e lookupBaudRateIndex(uint32_t baudRate);





void evaluateOtherData(serialPort_t *serialPort, uint8_t receivedChar);
void handleSerial(void);

void serialPassthrough(serialPort_t *left, serialPort_t *right, serialConsumer
                       *leftC, serialConsumer *rightC);
# 54 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/io/gimbal.h" 1
# 18 "./src/main/io/gimbal.h"
       

typedef enum {
    GIMBAL_MODE_NORMAL = 0,
    GIMBAL_MODE_MIXTILT = 1
} gimbalMode_e;

#define GIMBAL_MODE_MAX (GIMBAL_MODE_MIXTILT)

typedef struct gimbalConfig_s {
    uint8_t mode;
} gimbalConfig_t;

extern gimbalConfig_t *gimbalConfig_ProfileCurrent; static inline gimbalConfig_t* gimbalConfig(void) { return gimbalConfig_ProfileCurrent; } struct _dummy;
# 55 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/io/gps.h" 1
# 18 "./src/main/io/gps.h"
       

#define LAT 0
#define LON 1

#define GPS_DEGREES_DIVIDER 10000000L

typedef enum {
    GPS_NMEA = 0,
    GPS_UBLOX
} gpsProvider_e;

#define GPS_PROVIDER_MAX GPS_UBLOX

typedef enum {
    SBAS_AUTO = 0,
    SBAS_EGNOS,
    SBAS_WAAS,
    SBAS_MSAS,
    SBAS_GAGAN
} sbasMode_e;

#define SBAS_MODE_MAX SBAS_GAGAN

typedef enum {
    GPS_BAUDRATE_115200 = 0,
    GPS_BAUDRATE_57600,
    GPS_BAUDRATE_38400,
    GPS_BAUDRATE_19200,
    GPS_BAUDRATE_9600
} gpsBaudRate_e;

typedef enum {
    GPS_AUTOCONFIG_OFF = 0,
    GPS_AUTOCONFIG_ON,
} gpsAutoConfig_e;

typedef enum {
    GPS_AUTOBAUD_OFF = 0,
    GPS_AUTOBAUD_ON
} gpsAutoBaud_e;

#define GPS_BAUDRATE_MAX GPS_BAUDRATE_9600

typedef struct gpsConfig_s {
    gpsProvider_e provider;
    sbasMode_e sbasMode;
    gpsAutoConfig_e autoConfig;
    gpsAutoBaud_e autoBaud;
} gpsConfig_t;

extern gpsConfig_t gpsConfig_System; static inline gpsConfig_t* gpsConfig(void) { return &gpsConfig_System; } struct _dummy;

typedef struct gpsCoordinateDDDMMmmmm_s {
    int16_t dddmm;
    int16_t mmmm;
} gpsCoordinateDDDMMmmmm_t;


typedef enum {
    GPS_MESSAGE_STATE_IDLE = 0,
    GPS_MESSAGE_STATE_INIT,
    GPS_MESSAGE_STATE_SBAS,
    GPS_MESSAGE_STATE_MAX = GPS_MESSAGE_STATE_SBAS
} gpsMessageState_e;

#define GPS_MESSAGE_STATE_ENTRY_COUNT (GPS_MESSAGE_STATE_MAX + 1)

typedef struct gpsData_s {
    uint8_t state;
    uint8_t baudrateIndex;
    uint32_t errors;
    uint32_t timeouts;
    uint32_t lastMessage;
    uint32_t lastLastMessage;

    uint32_t state_position;
    uint32_t state_ts;
    gpsMessageState_e messageState;
} gpsData_t;

#define GPS_PACKET_LOG_ENTRY_COUNT 21
extern char gpsPacketLog[21];

extern gpsData_t gpsData;
extern int32_t GPS_coord[2];

extern uint8_t GPS_numSat;
extern uint16_t GPS_hdop;
extern uint8_t GPS_update;
extern uint32_t GPS_packetCount;
extern uint32_t GPS_svInfoReceivedCount;
extern uint16_t GPS_altitude;
extern uint16_t GPS_speed;
extern uint16_t GPS_ground_course;
extern uint8_t GPS_numCh;
extern uint8_t GPS_svinfo_chn[16];
extern uint8_t GPS_svinfo_svid[16];
extern uint8_t GPS_svinfo_quality[16];
extern uint8_t GPS_svinfo_cno[16];

extern uint32_t GPS_garbageByteCount;

#define GPS_DBHZ_MIN 0
#define GPS_DBHZ_MAX 55

void gpsInit(void);

void gpsThread(void);
_Bool gpsNewFrame(uint8_t c);
void updateGpsIndicator(uint32_t currentTime);
# 56 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/io/ledstrip.h" 1
# 18 "./src/main/io/ledstrip.h"
       

#define LED_MAX_STRIP_LENGTH 32
#define LED_CONFIGURABLE_COLOR_COUNT 16
#define LED_MODE_COUNT 6
#define LED_DIRECTION_COUNT 6
#define LED_BASEFUNCTION_COUNT 7
#define LED_OVERLAY_COUNT 6
#define LED_SPECIAL_COLOR_COUNT 11

#define LED_POS_OFFSET 0
#define LED_FUNCTION_OFFSET 8
#define LED_OVERLAY_OFFSET 12
#define LED_COLOR_OFFSET 18
#define LED_DIRECTION_OFFSET 22
#define LED_PARAMS_OFFSET 28

#define LED_POS_BITCNT 8
#define LED_FUNCTION_BITCNT 4
#define LED_OVERLAY_BITCNT 6
#define LED_COLOR_BITCNT 4
#define LED_DIRECTION_BITCNT 6
#define LED_PARAMS_BITCNT 4

#define LED_FLAG_OVERLAY_MASK ((1 << LED_OVERLAY_BITCNT) - 1)
#define LED_FLAG_DIRECTION_MASK ((1 << LED_DIRECTION_BITCNT) - 1)

#define LED_MOV_POS(pos) ((pos) << LED_POS_OFFSET)
#define LED_MOV_FUNCTION(func) ((func) << LED_FUNCTION_OFFSET)
#define LED_MOV_OVERLAY(overlay) ((overlay) << LED_OVERLAY_OFFSET)
#define LED_MOV_COLOR(colorId) ((colorId) << LED_COLOR_OFFSET)
#define LED_MOV_DIRECTION(direction) ((direction) << LED_DIRECTION_OFFSET)
#define LED_MOV_PARAMS(param) ((param) << LED_PARAMS_OFFSET)

#define LED_BIT_MASK(len) ((1 << (len)) - 1)

#define LED_POS_MASK LED_MOV_POS(((1 << LED_POS_BITCNT) - 1))
#define LED_FUNCTION_MASK LED_MOV_FUNCTION(((1 << LED_FUNCTION_BITCNT) - 1))
#define LED_OVERLAY_MASK LED_MOV_OVERLAY(LED_FLAG_OVERLAY_MASK)
#define LED_COLOR_MASK LED_MOV_COLOR(((1 << LED_COLOR_BITCNT) - 1))
#define LED_DIRECTION_MASK LED_MOV_DIRECTION(LED_FLAG_DIRECTION_MASK)
#define LED_PARAMS_MASK LED_MOV_PARAMS(((1 << LED_PARAMS_BITCNT) - 1))

#define LED_FLAG_OVERLAY(id) (1 << (id))
#define LED_FLAG_DIRECTION(id) (1 << (id))

#define LED_X_BIT_OFFSET 4
#define LED_Y_BIT_OFFSET 0
#define LED_XY_MASK 0x0F
#define CALCULATE_LED_XY(x,y) ((((x) & LED_XY_MASK) << LED_X_BIT_OFFSET) | (((y) & LED_XY_MASK) << LED_Y_BIT_OFFSET))

typedef enum {
    LED_MODE_ORIENTATION = 0,
    LED_MODE_HEADFREE,
    LED_MODE_HORIZON,
    LED_MODE_ANGLE,
    LED_MODE_MAG,
    LED_MODE_BARO,
    LED_SPECIAL
} ledModeIndex_e;

typedef enum {
    LED_SCOLOR_DISARMED = 0,
    LED_SCOLOR_ARMED,
    LED_SCOLOR_ANIMATION,
    LED_SCOLOR_BACKGROUND,
    LED_SCOLOR_BLINKBACKGROUND,
    LED_SCOLOR_GPSNOSATS,
    LED_SCOLOR_GPSNOLOCK,
    LED_SCOLOR_GPSLOCKED
} ledSpecialColorIds_e;

typedef enum {
    LED_DIRECTION_NORTH = 0,
    LED_DIRECTION_EAST,
    LED_DIRECTION_SOUTH,
    LED_DIRECTION_WEST,
    LED_DIRECTION_UP,
    LED_DIRECTION_DOWN
} ledDirectionId_e;

typedef enum {
    LED_FUNCTION_COLOR,
    LED_FUNCTION_FLIGHT_MODE,
    LED_FUNCTION_ARM_STATE,
    LED_FUNCTION_BATTERY,
    LED_FUNCTION_RSSI,
    LED_FUNCTION_GPS,
    LED_FUNCTION_THRUST_RING,
} ledBaseFunctionId_e;

typedef enum {
    LED_OVERLAY_THROTTLE,
    LED_OVERLAY_LARSON_SCANNER,
    LED_OVERLAY_BLINK,
    LED_OVERLAY_LANDING_FLASH,
    LED_OVERLAY_INDICATOR,
    LED_OVERLAY_WARNING,
} ledOverlayId_e;

typedef struct modeColorIndexes_s {
    uint8_t color[6];
} modeColorIndexes_t;

typedef struct specialColorIndexes_s {
    uint8_t color[11];
} specialColorIndexes_t;

typedef uint32_t ledConfig_t;

typedef struct ledCounts_s {
    uint8_t count;
    uint8_t ring;
    uint8_t larson;
    uint8_t ringSeqLen;
} ledCounts_t;

#define DEFINE_LED(x,y,col,dir,func,ol,params) (LED_MOV_POS(CALCULATE_LED_XY(x, y)) | LED_MOV_COLOR(col) | LED_MOV_DIRECTION(dir) | LED_MOV_FUNCTION(func) | LED_MOV_OVERLAY(ol) | LED_MOV_PARAMS(params))

static inline uint8_t ledGetXY(const ledConfig_t *lcfg) { return ((*lcfg >> 0) & ((1 << (8)) - 1)); }
static inline uint8_t ledGetX(const ledConfig_t *lcfg) { return ((*lcfg >> (0 + 4)) & 0x0F); }
static inline uint8_t ledGetY(const ledConfig_t *lcfg) { return ((*lcfg >> (0 + 0)) & 0x0F); }
static inline uint8_t ledGetFunction(const ledConfig_t *lcfg) { return ((*lcfg >> 8) & ((1 << (4)) - 1)); }
static inline uint8_t ledGetOverlay(const ledConfig_t *lcfg) { return ((*lcfg >> 12) & ((1 << (6)) - 1)); }
static inline uint8_t ledGetColor(const ledConfig_t *lcfg) { return ((*lcfg >> 18) & ((1 << (4)) - 1)); }
static inline uint8_t ledGetDirection(const ledConfig_t *lcfg) { return ((*lcfg >> 22) & ((1 << (6)) - 1)); }
static inline uint8_t ledGetParams(const ledConfig_t *lcfg) { return ((*lcfg >> 28) & ((1 << (4)) - 1)); }

static inline _Bool ledGetOverlayBit(const ledConfig_t *lcfg, int id) { return ((ledGetOverlay(lcfg) >> id) & 1); }
static inline _Bool ledGetDirectionBit(const ledConfig_t *lcfg, int id) { return ((ledGetDirection(lcfg) >> id) & 1); }

extern ledConfig_t ledConfigs_SystemArray[32]; static inline ledConfig_t* ledConfigs(int _index) { return &ledConfigs_SystemArray[_index]; } static inline ledConfig_t (* ledConfigs_arr(void))[32] { return &ledConfigs_SystemArray; } struct _dummy;
extern hsvColor_t colors_SystemArray[16]; static inline hsvColor_t* colors(int _index) { return &colors_SystemArray[_index]; } static inline hsvColor_t (* colors_arr(void))[16] { return &colors_SystemArray; } struct _dummy;
extern modeColorIndexes_t modeColors_SystemArray[6]; static inline modeColorIndexes_t* modeColors(int _index) { return &modeColors_SystemArray[_index]; } static inline modeColorIndexes_t (* modeColors_arr(void))[6] { return &modeColors_SystemArray; } struct _dummy;
extern specialColorIndexes_t specialColors_System; static inline specialColorIndexes_t* specialColors(void) { return &specialColors_System; } struct _dummy;

_Bool parseColor(int index, const char *colorConfig);

_Bool parseLedStripConfig(int ledIndex, const char *config);
void generateLedConfig(int ledIndex, char *ledConfigBuffer, size_t bufferSize);
void reevaluateLedConfig(void);

void ledStripInit(void);
void ledStripEnable(void);
void updateLedStrip(void);

_Bool setModeColor(ledModeIndex_e modeIndex, int modeColorIndex, int colorIndex);

extern uint16_t rssi;
# 57 "./src/main/telemetry/mavlink.c" 2

# 1 "./src/main/sensors/sensors.h" 1
# 18 "./src/main/sensors/sensors.h"
       

typedef enum {
    SENSOR_INDEX_GYRO = 0,
    SENSOR_INDEX_ACC,
    SENSOR_INDEX_BARO,
    SENSOR_INDEX_MAG
} sensorIndex_e;

#define MAX_SENSORS_TO_DETECT (SENSOR_INDEX_MAG + 1)

extern uint8_t detectedSensors[(SENSOR_INDEX_MAG + 1)];

typedef struct int16_flightDynamicsTrims_s {
    int16_t roll;
    int16_t pitch;
    int16_t yaw;
} flightDynamicsTrims_def_t;

typedef union flightDynamicsTrims_u {
    int16_t raw[3];
    flightDynamicsTrims_def_t values;
} flightDynamicsTrims_t;

#define CALIBRATING_GYRO_CYCLES 1000
#define CALIBRATING_ACC_CYCLES 400
#define CALIBRATING_BARO_CYCLES 200

typedef enum {
    SENSOR_GYRO = 1 << 0,
    SENSOR_ACC = 1 << 1,
    SENSOR_BARO = 1 << 2,
    SENSOR_MAG = 1 << 3,
    SENSOR_SONAR = 1 << 4,
    SENSOR_GPS = 1 << 5,
    SENSOR_GPSMAG = 1 << 6,
} sensors_e;

typedef enum {
    ALIGN_DEFAULT = 0,
    CW0_DEG = 1,
    CW90_DEG = 2,
    CW180_DEG = 3,
    CW270_DEG = 4,
    CW0_DEG_FLIP = 5,
    CW90_DEG_FLIP = 6,
    CW180_DEG_FLIP = 7,
    CW270_DEG_FLIP = 8
} sensor_align_e;

typedef struct sensorAlignmentConfig_s {
    sensor_align_e gyro_align;
    sensor_align_e acc_align;
    sensor_align_e mag_align;
} sensorAlignmentConfig_t;

typedef struct sensorSelectionConfig_s {
    uint8_t acc_hardware;
    uint8_t mag_hardware;
    uint8_t baro_hardware;
} sensorSelectionConfig_t;

typedef struct sensorTrims_s {
    flightDynamicsTrims_t accZero;
    flightDynamicsTrims_t magZero;
} sensorTrims_t;

extern sensorSelectionConfig_t sensorSelectionConfig_System; static inline sensorSelectionConfig_t* sensorSelectionConfig(void) { return &sensorSelectionConfig_System; } struct _dummy;
extern sensorAlignmentConfig_t sensorAlignmentConfig_System; static inline sensorAlignmentConfig_t* sensorAlignmentConfig(void) { return &sensorAlignmentConfig_System; } struct _dummy;
extern sensorTrims_t sensorTrims_System; static inline sensorTrims_t* sensorTrims(void) { return &sensorTrims_System; } struct _dummy;
# 59 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/sensors/acceleration.h" 1
# 18 "./src/main/sensors/acceleration.h"
       


typedef enum {
    ACC_DEFAULT = 0,
    ACC_NONE = 1,
    ACC_ADXL345 = 2,
    ACC_MPU6050 = 3,
    ACC_MMA8452 = 4,
    ACC_BMA280 = 5,
    ACC_LSM303DLHC = 6,
    ACC_MPU6000 = 7,
    ACC_MPU6500 = 8,
    ACC_FAKE = 9,
} accelerationSensor_e;

#define ACC_MAX ACC_FAKE

extern sensor_align_e accAlign;
extern acc_t acc;

extern int32_t accSmooth[3];
extern uint32_t accSamplingInterval;

typedef struct rollAndPitchTrims_s {
    int16_t roll;
    int16_t pitch;
} rollAndPitchTrims_t_def;

typedef union rollAndPitchTrims_u {
    int16_t raw[2];
    rollAndPitchTrims_t_def values;
} rollAndPitchTrims_t;

typedef struct accDeadband_s {
    uint8_t xy;
    uint8_t z;
} accDeadband_t;

typedef struct accelerometerConfig_s {
    rollAndPitchTrims_t accelerometerTrims;


    uint8_t acc_cut_hz;
    float accz_lpf_cutoff;
    accDeadband_t accDeadband;
    uint8_t acc_unarmedcal;
} accelerometerConfig_t;

extern accelerometerConfig_t *accelerometerConfig_ProfileCurrent; static inline accelerometerConfig_t* accelerometerConfig(void) { return accelerometerConfig_ProfileCurrent; } struct _dummy;

_Bool isAccelerationCalibrationComplete(void);
void accSetCalibrationCycles(uint16_t calibrationCyclesRequired);
void resetRollAndPitchTrims(rollAndPitchTrims_t *rollAndPitchTrims);
void updateAccelerationReadings(rollAndPitchTrims_t *rollAndPitchTrims);
void setAccelerationTrims(flightDynamicsTrims_t *accelerationTrimsToUse);
void accelerationFilterInit(uint8_t acc_cut_hz);
# 60 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/sensors/gyro.h" 1
# 18 "./src/main/sensors/gyro.h"
       

typedef enum {
    GYRO_NONE = 0,
    GYRO_DEFAULT,
    GYRO_MPU6050,
    GYRO_L3G4200D,
    GYRO_MPU3050,
    GYRO_L3GD20,
    GYRO_MPU6000,
    GYRO_MPU6500,
    GYRO_FAKE
} gyroSensor_e;

extern gyro_t gyro;
extern sensor_align_e gyroAlign;

extern int32_t gyroADC[3];
extern float gyroADCf[3];

typedef struct gyroConfig_s {
    uint8_t gyroMovementCalibrationThreshold;
    uint8_t gyro_lpf;
    uint8_t gyro_soft_type;
    uint16_t gyro_soft_lpf_hz;
    uint16_t gyro_soft_notch_hz;
    uint16_t gyro_soft_notch_cutoff_hz;
    uint8_t gyro_sync;
    uint8_t pid_process_denom;
    uint16_t gyro_sample_hz;
} gyroConfig_t;

extern gyroConfig_t gyroConfig_System; static inline gyroConfig_t* gyroConfig(void) { return &gyroConfig_System; } struct _dummy;

void gyroInit(void);
void gyroUpdate(void);
void gyroSetCalibrationCycles(uint16_t calibrationCyclesRequired);
_Bool isGyroCalibrationComplete(void);
# 61 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/sensors/barometer.h" 1
# 18 "./src/main/sensors/barometer.h"
       

typedef enum {
    BARO_DEFAULT = 0,
    BARO_NONE = 1,
    BARO_BMP085 = 2,
    BARO_MS5611 = 3,
    BARO_BMP280 = 4
} baroSensor_e;

#define BARO_SAMPLE_COUNT_MAX 48
#define BARO_MAX BARO_BMP280

extern int32_t BaroAlt;
extern int32_t baroTemperature;



typedef struct barometerConfig_s {
    uint8_t baro_sample_count;
    float baro_noise_lpf;
    float baro_cf_vel;
    float baro_cf_alt;
} barometerConfig_t;

extern barometerConfig_t *barometerConfig_ProfileCurrent; static inline barometerConfig_t* barometerConfig(void) { return barometerConfig_ProfileCurrent; } struct _dummy;

_Bool isBaroCalibrationComplete(void);
void baroSetCalibrationCycles(uint16_t calibrationCyclesRequired);
uint32_t baroUpdate(void);
_Bool isBaroReady(void);
int32_t baroCalculateAltitude(void);
void performBaroCalibrationCycle(void);
# 62 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/sensors/boardalignment.h" 1
# 18 "./src/main/sensors/boardalignment.h"
       

typedef struct boardAlignment_s {
    int16_t rollDegrees;
    int16_t pitchDegrees;
    int16_t yawDegrees;
} __attribute__((packed)) boardAlignment_t;

extern boardAlignment_t boardAlignment_System; static inline boardAlignment_t* boardAlignment(void) { return &boardAlignment_System; } struct _dummy;

void alignSensors(int32_t *src, int32_t *dest, uint8_t rotation);
void initBoardAlignment(void);
# 63 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/telemetry/../sensors/amperage.h" 1
# 18 "./src/main/telemetry/../sensors/amperage.h"
       


#define MAX_AMPERAGE_METERS 2


typedef struct amperageMeterConfig_s {
    int16_t scale;
    uint16_t offset;
} amperageMeterConfig_t;

extern amperageMeterConfig_t amperageMeterConfig_SystemArray[2]; static inline amperageMeterConfig_t* amperageMeterConfig(int _index) { return &amperageMeterConfig_SystemArray[_index]; } static inline amperageMeterConfig_t (* amperageMeterConfig_arr(void))[2] { return &amperageMeterConfig_SystemArray; } struct _dummy;

typedef struct amperageMeter_s {
    int32_t amperage;
    int32_t mAhDrawn;
} amperageMeter_t;

typedef enum {
    AMPERAGE_METER_VIRTUAL = 0,
    AMPERAGE_METER_ADC,
} amperageMeter_e;

extern amperageMeter_t amperageMeters[2];

void amperageMeterInit(void);
void amperageUpdateMeter(int32_t lastUpdateAt);
void amperageUpdateVirtualMeter(int32_t lastUpdateAt, _Bool armed, _Bool throttleLowAndMotorStop, int32_t throttleOffset);

int32_t amperageSensorToCentiamps(const uint16_t src, amperageMeterConfig_t *config);

amperageMeter_t *getAmperageMeter(amperageMeter_e index);

void amperageMeterInit(void);
# 64 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/sensors/battery.h" 1
# 18 "./src/main/sensors/battery.h"
       

typedef struct batteryConfig_s {
    uint8_t vbatmaxcellvoltage;
    uint8_t vbatmincellvoltage;
    uint8_t vbatwarningcellvoltage;
    uint16_t batteryCapacity;
    uint8_t amperageMeterSource;
    uint8_t vbathysteresis;
} batteryConfig_t;

extern batteryConfig_t batteryConfig_System; static inline batteryConfig_t* batteryConfig(void) { return &batteryConfig_System; } struct _dummy;

typedef enum {
    BATTERY_OK = 0,
    BATTERY_WARNING,
    BATTERY_CRITICAL,
    BATTERY_NOT_PRESENT
} batteryState_e;

extern uint16_t vbat;

extern uint8_t batteryCellCount;
extern uint16_t batteryWarningVoltage;

uint16_t batteryAdcToVoltage(uint16_t src);
batteryState_e getBatteryState(void);
const char * getBatteryStateString(void);
void batteryUpdate(void);
void batteryInit(void);


uint8_t batteryVoltagePercentage(void);
uint8_t batteryCapacityRemainingPercentage(void);
# 65 "./src/main/telemetry/mavlink.c" 2

# 1 "./src/main/rx/rx.h" 1
# 18 "./src/main/rx/rx.h"
       

#define STICK_CHANNEL_COUNT 4

#define PWM_RANGE_ZERO 0
#define PWM_RANGE_MIN 1000
#define PWM_RANGE_MAX 2000
#define PWM_RANGE_MIDDLE (PWM_RANGE_MIN + ((PWM_RANGE_MAX - PWM_RANGE_MIN) / 2))

#define PWM_PULSE_MIN 750
#define PWM_PULSE_MAX 2250

#define RXFAIL_STEP_TO_CHANNEL_VALUE(step) (PWM_PULSE_MIN + 25 * step)
#define CHANNEL_VALUE_TO_RXFAIL_STEP(channelValue) ((constrain(channelValue, PWM_PULSE_MIN, PWM_PULSE_MAX) - PWM_PULSE_MIN) / 25)
#define MAX_RXFAIL_RANGE_STEP ((PWM_PULSE_MAX - PWM_PULSE_MIN) / 25)

#define DEFAULT_SERVO_MIN 1000
#define DEFAULT_SERVO_MIDDLE 1500
#define DEFAULT_SERVO_MAX 2000

typedef enum {
    RX_FRAME_PENDING = 0,
    RX_FRAME_COMPLETE = (1 << 0),
    RX_FRAME_FAILSAFE = (1 << 1)
} rxFrameState_t;

typedef enum {
    SERIALRX_SPEKTRUM1024 = 0,
    SERIALRX_SPEKTRUM2048 = 1,
    SERIALRX_SBUS = 2,
    SERIALRX_SUMD = 3,
    SERIALRX_SUMH = 4,
    SERIALRX_SRXL = 5,
    SERIALRX_XBUS_MODE_B_RJ01 = 6,
    SERIALRX_IBUS = 7,
    SERIALRX_PROVIDER_MAX = SERIALRX_IBUS
} SerialRXType;

#define SERIALRX_PROVIDER_COUNT (SERIALRX_PROVIDER_MAX + 1)

#define MAX_SUPPORTED_RC_PPM_CHANNEL_COUNT 12
#define MAX_SUPPORTED_RC_PARALLEL_PWM_CHANNEL_COUNT 8
#define MAX_SUPPORTED_RC_CHANNEL_COUNT (18)

#define NON_AUX_CHANNEL_COUNT 4
#define MAX_AUX_CHANNEL_COUNT (MAX_SUPPORTED_RC_CHANNEL_COUNT - NON_AUX_CHANNEL_COUNT)






#define MAX_SUPPORTED_RX_PARALLEL_PWM_OR_PPM_CHANNEL_COUNT MAX_SUPPORTED_RC_PPM_CHANNEL_COUNT


extern uint16_t rssi;

extern const char rcChannelLetters[];

extern int16_t rcData[(18)];

#define MAX_MAPPABLE_RX_INPUTS 8

#define RSSI_SCALE_MIN 1
#define RSSI_SCALE_MAX 255
#define RSSI_SCALE_DEFAULT 30

typedef enum {
    RX_FAILSAFE_MODE_AUTO = 0,
    RX_FAILSAFE_MODE_HOLD,
    RX_FAILSAFE_MODE_SET,
    RX_FAILSAFE_MODE_INVALID,
} rxFailsafeChannelMode_e;

#define RX_FAILSAFE_MODE_COUNT 3

typedef enum {
    RX_FAILSAFE_TYPE_FLIGHT = 0,
    RX_FAILSAFE_TYPE_AUX,
} rxFailsafeChannelType_e;

#define RX_FAILSAFE_TYPE_COUNT 2

typedef struct rxFailsafeChannelConfiguration_s {
    uint8_t mode;
    uint8_t step;
} rxFailsafeChannelConfig_t;

typedef struct rxChannelRangeConfiguration_s {
    uint16_t min;
    uint16_t max;
} rxChannelRangeConfiguration_t;

typedef struct rxConfig_s {
    uint8_t rcmap[8];
    uint8_t serialrx_provider;
    uint8_t sbus_inversion;
    uint8_t spektrum_sat_bind;
    uint8_t rssi_channel;
    uint8_t rssi_scale;
    uint8_t rssi_invert;
    uint8_t rcSmoothing;
    uint16_t midrc;
    uint16_t mincheck;
    uint16_t maxcheck;

    uint16_t rx_min_usec;
    uint16_t rx_max_usec;
} rxConfig_t;

extern rxConfig_t rxConfig_System; static inline rxConfig_t* rxConfig(void) { return &rxConfig_System; } struct _dummy;

extern rxFailsafeChannelConfig_t failsafeChannelConfigs_SystemArray[(18)]; static inline rxFailsafeChannelConfig_t* failsafeChannelConfigs(int _index) { return &failsafeChannelConfigs_SystemArray[_index]; } static inline rxFailsafeChannelConfig_t (* failsafeChannelConfigs_arr(void))[(18)] { return &failsafeChannelConfigs_SystemArray; } struct _dummy;
extern rxChannelRangeConfiguration_t channelRanges_SystemArray[4]; static inline rxChannelRangeConfiguration_t* channelRanges(int _index) { return &channelRanges_SystemArray[_index]; } static inline rxChannelRangeConfiguration_t (* channelRanges_arr(void))[4] { return &channelRanges_SystemArray; } struct _dummy;

struct rxRuntimeConfig_s;
typedef uint16_t (*rcReadRawDataFnPtr)(const struct rxRuntimeConfig_s *rxRuntimeConfig, uint8_t chan);
typedef uint8_t (*rcFrameStatusFnPtr)(void);

typedef struct rxRuntimeConfig_s {
    uint8_t channelCount;
    uint16_t rxRefreshRate;
    rcReadRawDataFnPtr rcReadRawFn;
    rcFrameStatusFnPtr rcFrameStatusFn;
} rxRuntimeConfig_t;

extern rxRuntimeConfig_t rxRuntimeConfig;

void updateRx(uint32_t currentTime);
_Bool rxIsReceivingSignal(void);
_Bool rxAreFlightChannelsValid(void);
_Bool shouldProcessRx(uint32_t currentTime);
void calculateRxChannelsAndUpdateFailsafe(uint32_t currentTime);

void parseRcChannels(const char *input, rxConfig_t *rxConfig);
uint8_t serialRxFrameStatus();

void updateRSSI(uint32_t currentTime);
void resetAllRxChannelRangeConfigurations(rxChannelRangeConfiguration_t *rxChannelRangeConfiguration);

void suspendRxSignal(void);
void resumeRxSignal(void);

uint16_t rxGetRefreshRate(void);
# 67 "./src/main/telemetry/mavlink.c" 2

# 1 "./src/main/flight/mixer.h" 1
# 18 "./src/main/flight/mixer.h"
       
# 27 "./src/main/flight/mixer.h"
#define MAX_SUPPORTED_MOTORS 12


#define YAW_JUMP_PREVENTION_LIMIT_LOW 80
#define YAW_JUMP_PREVENTION_LIMIT_HIGH 500


typedef enum mixerMode
{
    MIXER_TRI = 1,
    MIXER_QUADP = 2,
    MIXER_QUADX = 3,
    MIXER_BICOPTER = 4,
    MIXER_GIMBAL = 5,
    MIXER_Y6 = 6,
    MIXER_HEX6 = 7,
    MIXER_FLYING_WING = 8,
    MIXER_Y4 = 9,
    MIXER_HEX6X = 10,
    MIXER_OCTOX8 = 11,
    MIXER_OCTOFLATP = 12,
    MIXER_OCTOFLATX = 13,
    MIXER_AIRPLANE = 14,
    MIXER_HELI_120_CCPM = 15,
    MIXER_HELI_90_DEG = 16,
    MIXER_VTAIL4 = 17,
    MIXER_HEX6H = 18,
    MIXER_PPM_TO_SERVO = 19,
    MIXER_DUALCOPTER = 20,
    MIXER_SINGLECOPTER = 21,
    MIXER_ATAIL4 = 22,
    MIXER_CUSTOM = 23,
    MIXER_CUSTOM_AIRPLANE = 24,
    MIXER_CUSTOM_TRI = 25
} mixerMode_e;


typedef struct motorMixer_s {
    float throttle;
    float roll;
    float pitch;
    float yaw;
} motorMixer_t;

extern motorMixer_t customMotorMixer_SystemArray[12]; static inline motorMixer_t* customMotorMixer(int _index) { return &customMotorMixer_SystemArray[_index]; } static inline motorMixer_t (* customMotorMixer_arr(void))[12] { return &customMotorMixer_SystemArray; } struct _dummy;


typedef struct mixer_s {
    uint8_t motorCount;
    uint8_t useServo;
    const motorMixer_t *motor;
} mixer_t;

typedef struct mixerConfig_s {
    uint8_t mixerMode;
    uint8_t pid_at_min_throttle;
    int8_t yaw_motor_direction;
    uint16_t yaw_jump_prevention_limit;

    uint8_t tri_unarmed_servo;
    float servo_lowpass_freq;
    int8_t servo_lowpass_enable;

} mixerConfig_t;

extern mixerConfig_t mixerConfig_System; static inline mixerConfig_t* mixerConfig(void) { return &mixerConfig_System; } struct _dummy;

typedef struct motor3DConfig_s {
    uint16_t deadband3d_low;
    uint16_t deadband3d_high;
    uint16_t neutral3d;
} motor3DConfig_t;


extern motor3DConfig_t motor3DConfig_System; static inline motor3DConfig_t* motor3DConfig(void) { return &motor3DConfig_System; } struct _dummy;


#define CHANNEL_FORWARDING_DISABLED (uint8_t)0xFF

extern int16_t motor[12];
extern int16_t motor_disarmed[12];

extern _Bool motorLimitReached;

void mixerInit(motorMixer_t *customMotorMixers);
void writeAllMotors(int16_t mc);
void mixerLoadMix(int index, motorMixer_t *customMixers);
void mixerResetDisarmedMotors(void);
void mixTable(void);
void servoMixTable(void);
void writeMotors(void);
void stopMotors(void);
void StopPwmAllMotors(void);
void mixerInitialiseServoFiltering(uint32_t targetLooptime);
int16_t calculateMotorOff(void);
# 69 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/flight/pid.h" 1
# 18 "./src/main/flight/pid.h"
       

#define PID_MAX_I 256
#define PID_MAX_D 512
#define PID_MAX_TOTAL_PID 1000

#define GYRO_I_MAX 256
#define YAW_P_LIMIT_MIN 100
#define YAW_P_LIMIT_MAX 500

typedef enum {
    PIDROLL,
    PIDPITCH,
    PIDYAW,
    PIDALT,
    PIDPOS,
    PIDPOSR,
    PIDNAVR,
    PIDLEVEL,
    PIDMAG,
    PIDVEL,
    PID_ITEM_COUNT
} pidIndex_e;

typedef enum {
    PID_DELTA_FROM_MEASUREMENT = 0,
    PID_DELTA_FROM_ERROR
} pidDeltaMethod_e;

typedef enum {
    HORIZON_TILT_MODE_SAFE = 0,
    HORIZON_TILT_MODE_EXPERT
} horizonTiltMode_e;

typedef struct pidProfile_s {
    uint8_t P8[PID_ITEM_COUNT];
    uint8_t I8[PID_ITEM_COUNT];
    uint8_t D8[PID_ITEM_COUNT];
    uint8_t pidController;
    uint16_t yaw_p_limit;
    uint16_t dterm_lpf_hz;
    uint16_t yaw_lpf_hz;
    uint8_t deltaMethod;

    uint8_t horizon_tilt_effect;
    uint8_t horizon_tilt_mode;

    uint8_t dterm_filter_type;
    uint16_t dterm_notch_hz;
    uint16_t dterm_notch_cutoff;
} pidProfile_t;

extern pidProfile_t *pidProfile_ProfileCurrent; static inline pidProfile_t* pidProfile(void) { return pidProfile_ProfileCurrent; } struct _dummy;

struct controlRateConfig_s;
union rollAndPitchTrims_u;
struct rxConfig_s;
void pidLuxFloat(const pidProfile_t *pidProfile, const struct controlRateConfig_s *controlRateConfig,
        uint16_t max_angle_inclination, const union rollAndPitchTrims_u *angleTrim, const struct rxConfig_s *rxConfig);

extern int16_t axisPID[FD_INDEX_COUNT];
extern int32_t axisPID_P[FD_INDEX_COUNT], axisPID_I[FD_INDEX_COUNT], axisPID_D[FD_INDEX_COUNT];
extern uint32_t targetPidLooptime;

float pidScaleITermToRcInput(int axis);
void pidFilterIsSetCheck(const pidProfile_t *pidProfile);

float getdT(void);
void pidInitFilters(const pidProfile_t *pidProfile);
void pidSetTargetLooptime(uint32_t pidLooptime);
void pidResetITerm(void);

int calcHorizonLevelStrength(uint16_t rxConfigMidrc, int horizonTiltEffect,
        uint8_t horizonTiltMode, int horizonSensitivity);
# 70 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/flight/imu.h" 1
# 18 "./src/main/flight/imu.h"
       

extern int16_t throttleAngleCorrection;
extern uint32_t accTimeSum;
extern int accSumCount;
extern float accVelScale;
extern int32_t accSum[3];

#define DEGREES_TO_DECIDEGREES(angle) (angle * 10)
#define DECIDEGREES_TO_DEGREES(angle) (angle / 10)
#define DECIDEGREES_TO_RADIANS(angle) ((angle / 10.0f) * 0.0174532925f)
#define DEGREES_TO_RADIANS(angle) ((angle) * 0.0174532925f)

typedef union {
    int16_t raw[3];
    struct {

        int16_t roll;
        int16_t pitch;
        int16_t yaw;
    } values;
} attitudeEulerAngles_t;

extern attitudeEulerAngles_t attitude;

typedef struct imuConfig_s {

    uint16_t max_angle_inclination;
    uint8_t small_angle;
    uint16_t dcm_kp;
    uint16_t dcm_ki;
} imuConfig_t;

extern imuConfig_t imuConfig_System; static inline imuConfig_t* imuConfig(void) { return &imuConfig_System; } struct _dummy;

typedef struct throttleCorrectionConfig_s {
    uint16_t throttle_correction_angle;
    uint8_t throttle_correction_value;
} throttleCorrectionConfig_t;

extern throttleCorrectionConfig_t *throttleCorrectionConfig_ProfileCurrent; static inline throttleCorrectionConfig_t* throttleCorrectionConfig(void) { return throttleCorrectionConfig_ProfileCurrent; } struct _dummy;

typedef struct imuRuntimeConfig_s {
    uint8_t acc_cut_hz;
    uint8_t acc_unarmedcal;
    float dcm_ki;
    float dcm_kp;
    uint8_t small_angle;
} imuRuntimeConfig_t;

void imuInit(void);

void imuConfigure(
    imuRuntimeConfig_t *initialImuRuntimeConfig,
    accDeadband_t *initialAccDeadband,
    float accz_lpf_cutoff,
    uint16_t throttle_correction_angle
);

void imuUpdateAccelerometer(rollAndPitchTrims_t *accelerometerTrims);
void imuUpdateAttitude(void);
float calculateThrottleAngleScale(uint16_t throttle_correction_angle);
int16_t calculateThrottleAngleCorrection(uint8_t throttle_correction_value);
float calculateAccZLowPassFilterRCTimeConstant(float accz_lpf_cutoff);

int16_t imuCalculateHeading(t_fp_vector *vec);

float getCosTiltAngle(void);

void imuResetAccelerationSum(void);

_Bool imuIsAircraftArmable(uint8_t arming_angle);
# 71 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/flight/failsafe.h" 1
# 18 "./src/main/flight/failsafe.h"
       

#define FAILSAFE_POWER_ON_DELAY_US (1000 * 1000 * 5)
#define MILLIS_PER_TENTH_SECOND 100
#define MILLIS_PER_SECOND 1000
#define PERIOD_OF_1_SECONDS 1 * MILLIS_PER_SECOND
#define PERIOD_OF_3_SECONDS 3 * MILLIS_PER_SECOND
#define PERIOD_OF_30_SECONDS 30 * MILLIS_PER_SECOND
#define PERIOD_RXDATA_FAILURE 200
#define PERIOD_RXDATA_RECOVERY 200


typedef struct failsafeConfig_s {
    uint8_t failsafe_delay;
    uint8_t failsafe_off_delay;
    uint16_t failsafe_throttle;
    uint8_t failsafe_kill_switch;
    uint16_t failsafe_throttle_low_delay;
    uint8_t failsafe_procedure;
} __attribute__((packed)) failsafeConfig_t;

typedef enum {
    FAILSAFE_IDLE = 0,
    FAILSAFE_RX_LOSS_DETECTED,
    FAILSAFE_LANDING,
    FAILSAFE_LANDED,
    FAILSAFE_RX_LOSS_MONITORING,
    FAILSAFE_RX_LOSS_RECOVERED
} failsafePhase_e;

typedef enum {
    FAILSAFE_RXLINK_DOWN = 0,
    FAILSAFE_RXLINK_UP
} failsafeRxLinkState_e;

typedef enum {
    FAILSAFE_PROCEDURE_AUTO_LANDING = 0,
    FAILSAFE_PROCEDURE_DROP_IT
} failsafeProcedure_e;

typedef struct failsafeState_s {
    int16_t events;
    _Bool monitoring;
    _Bool active;
    uint32_t rxDataFailurePeriod;
    uint32_t validRxDataReceivedAt;
    uint32_t validRxDataFailedAt;
    uint32_t throttleLowPeriod;
    uint32_t landingShouldBeFinishedAt;
    uint32_t receivingRxDataPeriod;
    uint32_t receivingRxDataPeriodPreset;
    failsafePhase_e phase;
    failsafeRxLinkState_e rxLinkState;
} failsafeState_t;

extern failsafeConfig_t failsafeConfig_System; static inline failsafeConfig_t* failsafeConfig(void) { return &failsafeConfig_System; } struct _dummy;

void failsafeInit(void);

void useFailsafeConfig();

void failsafeStartMonitoring(void);
void failsafeUpdateState(void);

failsafePhase_e failsafePhase();
_Bool failsafeIsMonitoring(void);
_Bool failsafeIsActive(void);
_Bool failsafeIsReceivingRxData(void);
void failsafeOnRxSuspend(uint32_t suspendPeriod);
void failsafeOnRxResume(void);

void failsafeOnValidDataReceived(void);
void failsafeOnValidDataFailed(void);
# 72 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/flight/altitudehold.h" 1
# 18 "./src/main/flight/altitudehold.h"
extern int32_t AltHold;
extern int32_t vario;

typedef struct airplaneConfig_s {
    int8_t fixedwing_althold_dir;
} airplaneConfig_t;

extern airplaneConfig_t airplaneConfig_System; static inline airplaneConfig_t* airplaneConfig(void) { return &airplaneConfig_System; } struct _dummy;

void calculateEstimatedAltitude(uint32_t currentTime);

void applyAltHold(void);
void updateAltHoldState(void);
void updateSonarAltHoldState(void);

int32_t altitudeHoldGetEstimatedAltitude(void);
# 73 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/flight/navigation.h" 1
# 18 "./src/main/flight/navigation.h"
       


typedef enum {
    NAV_MODE_NONE = 0,
    NAV_MODE_POSHOLD,
    NAV_MODE_WP
} navigationMode_e;



typedef struct gpsProfile_s {
    uint16_t gps_wp_radius;
    uint8_t gps_lpf;
    uint8_t nav_slew_rate;
    uint8_t nav_controls_heading;
    uint16_t nav_speed_min;
    uint16_t nav_speed_max;
    uint16_t ap_mode;
} gpsProfile_t;

extern gpsProfile_t *gpsProfile_ProfileCurrent; static inline gpsProfile_t* gpsProfile(void) { return gpsProfile_ProfileCurrent; } struct _dummy;

extern int16_t GPS_angle[ANGLE_INDEX_COUNT];

extern int32_t GPS_home[2];
extern int32_t GPS_hold[2];

extern uint16_t GPS_distanceToHome;
extern int16_t GPS_directionToHome;

extern navigationMode_e nav_mode;

void GPS_reset_home_position(void);
void GPS_reset_nav(void);
void GPS_set_next_wp(int32_t* lat, int32_t* lon);
struct pidProfile_s;
void gpsUsePIDs(struct pidProfile_s *pidProfile);
void updateGpsStateForHomeAndHoldMode(void);
void updateGpsWaypointsAndMode(void);

void onGpsNewData(void);
# 74 "./src/main/telemetry/mavlink.c" 2

# 1 "./src/main/telemetry/telemetry.h" 1
# 18 "./src/main/telemetry/telemetry.h"
       

typedef enum {
    FRSKY_FORMAT_DMS = 0,
    FRSKY_FORMAT_NMEA
} frskyGpsCoordFormat_e;

typedef enum {
    FRSKY_UNIT_METRICS = 0,
    FRSKY_UNIT_IMPERIALS
} frskyUnit_e;

typedef struct telemetryConfig_s {
    uint8_t telemetry_switch;
    uint8_t telemetry_inversion;
    uint8_t telemetry_send_cells;
} telemetryConfig_t;

extern telemetryConfig_t telemetryConfig_System; static inline telemetryConfig_t* telemetryConfig(void) { return &telemetryConfig_System; } struct _dummy;

void telemetryInit(void);

uint8_t telemetryCheckState(void);
void telemetryProcess(uint16_t deadband3d_throttle);

_Bool telemetryDetermineEnabledState(portSharing_e portSharing);

void telemetryUseConfig(telemetryConfig_t *telemetryConfig);
# 76 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/telemetry/mavlink.h" 1
# 19 "./src/main/telemetry/mavlink.h"
#define TELEMETRY_MAVLINK_H_ 

void initMAVLinkTelemetry(void);
void handleMAVLinkTelemetry(void);
_Bool checkMAVLinkTelemetryState(void);

void freeMAVLinkTelemetryPort(void);
void configureMAVLinkTelemetryPort(void);
# 77 "./src/main/telemetry/mavlink.c" 2

# 1 "./lib/main/mavlink/common/mavlink.h" 1





#define MAVLINK_H 


#define MAVLINK_STX 254



#define MAVLINK_ENDIAN MAVLINK_LITTLE_ENDIAN



#define MAVLINK_ALIGNED_FIELDS 1



#define MAVLINK_CRC_EXTRA 1


# 1 "./lib/main/mavlink/common/version.h" 1





#define MAVLINK_VERSION_H 

#define MAVLINK_BUILD_DATE "Wed Apr 15 16:53:56 2015"
#define MAVLINK_WIRE_PROTOCOL_VERSION "1.0"
#define MAVLINK_MAX_DIALECT_PAYLOAD_SIZE 255
# 25 "./lib/main/mavlink/common/mavlink.h" 2
# 1 "./lib/main/mavlink/common/common.h" 1





#define MAVLINK_COMMON_H 
# 19 "./lib/main/mavlink/common/common.h"
#define MAVLINK_MESSAGE_LENGTHS {9, 31, 12, 0, 14, 28, 3, 32, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 20, 2, 25, 23, 30, 101, 22, 26, 16, 14, 28, 32, 28, 28, 22, 22, 21, 6, 6, 37, 4, 4, 2, 2, 4, 2, 2, 3, 13, 12, 37, 0, 0, 0, 27, 25, 0, 0, 0, 0, 0, 68, 26, 185, 229, 42, 6, 4, 0, 11, 18, 0, 0, 37, 20, 35, 33, 3, 0, 0, 0, 22, 39, 37, 53, 51, 53, 51, 0, 28, 56, 42, 33, 0, 0, 0, 0, 0, 0, 0, 26, 32, 32, 20, 32, 62, 44, 64, 84, 9, 254, 16, 12, 36, 44, 64, 22, 6, 14, 12, 97, 2, 2, 113, 35, 6, 79, 35, 35, 22, 13, 255, 14, 18, 43, 8, 22, 14, 36, 43, 41, 0, 0, 0, 0, 0, 0, 36, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 36, 30, 18, 18, 51, 9, 0}



#define MAVLINK_MESSAGE_CRCS {50, 124, 137, 0, 237, 217, 104, 119, 0, 0, 0, 89, 0, 0, 0, 0, 0, 0, 0, 0, 214, 159, 220, 168, 24, 23, 170, 144, 67, 115, 39, 246, 185, 104, 237, 244, 222, 212, 9, 254, 230, 28, 28, 132, 221, 232, 11, 153, 41, 39, 78, 0, 0, 0, 15, 3, 0, 0, 0, 0, 0, 153, 183, 51, 59, 118, 148, 21, 0, 243, 124, 0, 0, 38, 20, 158, 152, 143, 0, 0, 0, 106, 49, 22, 143, 140, 5, 150, 0, 231, 183, 63, 54, 0, 0, 0, 0, 0, 0, 0, 175, 102, 158, 208, 56, 93, 138, 108, 32, 185, 84, 34, 174, 124, 237, 4, 76, 128, 56, 116, 134, 237, 203, 250, 87, 203, 220, 25, 226, 46, 29, 223, 85, 6, 229, 203, 1, 195, 109, 168, 181, 0, 0, 0, 0, 0, 0, 154, 178, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 204, 49, 170, 44, 83, 46, 0}



#define MAVLINK_MESSAGE_INFO {MAVLINK_MESSAGE_INFO_HEARTBEAT, MAVLINK_MESSAGE_INFO_SYS_STATUS, MAVLINK_MESSAGE_INFO_SYSTEM_TIME, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, MAVLINK_MESSAGE_INFO_PING, MAVLINK_MESSAGE_INFO_CHANGE_OPERATOR_CONTROL, MAVLINK_MESSAGE_INFO_CHANGE_OPERATOR_CONTROL_ACK, MAVLINK_MESSAGE_INFO_AUTH_KEY, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, MAVLINK_MESSAGE_INFO_SET_MODE, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, MAVLINK_MESSAGE_INFO_PARAM_REQUEST_READ, MAVLINK_MESSAGE_INFO_PARAM_REQUEST_LIST, MAVLINK_MESSAGE_INFO_PARAM_VALUE, MAVLINK_MESSAGE_INFO_PARAM_SET, MAVLINK_MESSAGE_INFO_GPS_RAW_INT, MAVLINK_MESSAGE_INFO_GPS_STATUS, MAVLINK_MESSAGE_INFO_SCALED_IMU, MAVLINK_MESSAGE_INFO_RAW_IMU, MAVLINK_MESSAGE_INFO_RAW_PRESSURE, MAVLINK_MESSAGE_INFO_SCALED_PRESSURE, MAVLINK_MESSAGE_INFO_ATTITUDE, MAVLINK_MESSAGE_INFO_ATTITUDE_QUATERNION, MAVLINK_MESSAGE_INFO_LOCAL_POSITION_NED, MAVLINK_MESSAGE_INFO_GLOBAL_POSITION_INT, MAVLINK_MESSAGE_INFO_RC_CHANNELS_SCALED, MAVLINK_MESSAGE_INFO_RC_CHANNELS_RAW, MAVLINK_MESSAGE_INFO_SERVO_OUTPUT_RAW, MAVLINK_MESSAGE_INFO_MISSION_REQUEST_PARTIAL_LIST, MAVLINK_MESSAGE_INFO_MISSION_WRITE_PARTIAL_LIST, MAVLINK_MESSAGE_INFO_MISSION_ITEM, MAVLINK_MESSAGE_INFO_MISSION_REQUEST, MAVLINK_MESSAGE_INFO_MISSION_SET_CURRENT, MAVLINK_MESSAGE_INFO_MISSION_CURRENT, MAVLINK_MESSAGE_INFO_MISSION_REQUEST_LIST, MAVLINK_MESSAGE_INFO_MISSION_COUNT, MAVLINK_MESSAGE_INFO_MISSION_CLEAR_ALL, MAVLINK_MESSAGE_INFO_MISSION_ITEM_REACHED, MAVLINK_MESSAGE_INFO_MISSION_ACK, MAVLINK_MESSAGE_INFO_SET_GPS_GLOBAL_ORIGIN, MAVLINK_MESSAGE_INFO_GPS_GLOBAL_ORIGIN, MAVLINK_MESSAGE_INFO_PARAM_MAP_RC, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, MAVLINK_MESSAGE_INFO_SAFETY_SET_ALLOWED_AREA, MAVLINK_MESSAGE_INFO_SAFETY_ALLOWED_AREA, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, MAVLINK_MESSAGE_INFO_ATTITUDE_QUATERNION_COV, MAVLINK_MESSAGE_INFO_NAV_CONTROLLER_OUTPUT, MAVLINK_MESSAGE_INFO_GLOBAL_POSITION_INT_COV, MAVLINK_MESSAGE_INFO_LOCAL_POSITION_NED_COV, MAVLINK_MESSAGE_INFO_RC_CHANNELS, MAVLINK_MESSAGE_INFO_REQUEST_DATA_STREAM, MAVLINK_MESSAGE_INFO_DATA_STREAM, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, MAVLINK_MESSAGE_INFO_MANUAL_CONTROL, MAVLINK_MESSAGE_INFO_RC_CHANNELS_OVERRIDE, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, MAVLINK_MESSAGE_INFO_MISSION_ITEM_INT, MAVLINK_MESSAGE_INFO_VFR_HUD, MAVLINK_MESSAGE_INFO_COMMAND_INT, MAVLINK_MESSAGE_INFO_COMMAND_LONG, MAVLINK_MESSAGE_INFO_COMMAND_ACK, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, MAVLINK_MESSAGE_INFO_MANUAL_SETPOINT, MAVLINK_MESSAGE_INFO_SET_ATTITUDE_TARGET, MAVLINK_MESSAGE_INFO_ATTITUDE_TARGET, MAVLINK_MESSAGE_INFO_SET_POSITION_TARGET_LOCAL_NED, MAVLINK_MESSAGE_INFO_POSITION_TARGET_LOCAL_NED, MAVLINK_MESSAGE_INFO_SET_POSITION_TARGET_GLOBAL_INT, MAVLINK_MESSAGE_INFO_POSITION_TARGET_GLOBAL_INT, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, MAVLINK_MESSAGE_INFO_LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET, MAVLINK_MESSAGE_INFO_HIL_STATE, MAVLINK_MESSAGE_INFO_HIL_CONTROLS, MAVLINK_MESSAGE_INFO_HIL_RC_INPUTS_RAW, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, MAVLINK_MESSAGE_INFO_OPTICAL_FLOW, MAVLINK_MESSAGE_INFO_GLOBAL_VISION_POSITION_ESTIMATE, MAVLINK_MESSAGE_INFO_VISION_POSITION_ESTIMATE, MAVLINK_MESSAGE_INFO_VISION_SPEED_ESTIMATE, MAVLINK_MESSAGE_INFO_VICON_POSITION_ESTIMATE, MAVLINK_MESSAGE_INFO_HIGHRES_IMU, MAVLINK_MESSAGE_INFO_OPTICAL_FLOW_RAD, MAVLINK_MESSAGE_INFO_HIL_SENSOR, MAVLINK_MESSAGE_INFO_SIM_STATE, MAVLINK_MESSAGE_INFO_RADIO_STATUS, MAVLINK_MESSAGE_INFO_FILE_TRANSFER_PROTOCOL, MAVLINK_MESSAGE_INFO_TIMESYNC, MAVLINK_MESSAGE_INFO_CAMERA_TRIGGER, MAVLINK_MESSAGE_INFO_HIL_GPS, MAVLINK_MESSAGE_INFO_HIL_OPTICAL_FLOW, MAVLINK_MESSAGE_INFO_HIL_STATE_QUATERNION, MAVLINK_MESSAGE_INFO_SCALED_IMU2, MAVLINK_MESSAGE_INFO_LOG_REQUEST_LIST, MAVLINK_MESSAGE_INFO_LOG_ENTRY, MAVLINK_MESSAGE_INFO_LOG_REQUEST_DATA, MAVLINK_MESSAGE_INFO_LOG_DATA, MAVLINK_MESSAGE_INFO_LOG_ERASE, MAVLINK_MESSAGE_INFO_LOG_REQUEST_END, MAVLINK_MESSAGE_INFO_GPS_INJECT_DATA, MAVLINK_MESSAGE_INFO_GPS2_RAW, MAVLINK_MESSAGE_INFO_POWER_STATUS, MAVLINK_MESSAGE_INFO_SERIAL_CONTROL, MAVLINK_MESSAGE_INFO_GPS_RTK, MAVLINK_MESSAGE_INFO_GPS2_RTK, MAVLINK_MESSAGE_INFO_SCALED_IMU3, MAVLINK_MESSAGE_INFO_DATA_TRANSMISSION_HANDSHAKE, MAVLINK_MESSAGE_INFO_ENCAPSULATED_DATA, MAVLINK_MESSAGE_INFO_DISTANCE_SENSOR, MAVLINK_MESSAGE_INFO_TERRAIN_REQUEST, MAVLINK_MESSAGE_INFO_TERRAIN_DATA, MAVLINK_MESSAGE_INFO_TERRAIN_CHECK, MAVLINK_MESSAGE_INFO_TERRAIN_REPORT, MAVLINK_MESSAGE_INFO_SCALED_PRESSURE2, MAVLINK_MESSAGE_INFO_ATT_POS_MOCAP, MAVLINK_MESSAGE_INFO_SET_ACTUATOR_CONTROL_TARGET, MAVLINK_MESSAGE_INFO_ACTUATOR_CONTROL_TARGET, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, MAVLINK_MESSAGE_INFO_BATTERY_STATUS, MAVLINK_MESSAGE_INFO_AUTOPILOT_VERSION, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, MAVLINK_MESSAGE_INFO_V2_EXTENSION, MAVLINK_MESSAGE_INFO_MEMORY_VECT, MAVLINK_MESSAGE_INFO_DEBUG_VECT, MAVLINK_MESSAGE_INFO_NAMED_VALUE_FLOAT, MAVLINK_MESSAGE_INFO_NAMED_VALUE_INT, MAVLINK_MESSAGE_INFO_STATUSTEXT, MAVLINK_MESSAGE_INFO_DEBUG, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}}


# 1 "./lib/main/mavlink/common/../protocol.h" 1

#define _MAVLINK_PROTOCOL_H_ 


# 1 "./lib/main/mavlink/common/../mavlink_types.h" 1

#define MAVLINK_TYPES_H_ 
# 12 "./lib/main/mavlink/common/../mavlink_types.h"
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"




#define MAVPACKED(__Declaration__) __Declaration__ __attribute__((packed))






#define MAVLINK_MAX_PAYLOAD_LEN 255


#define MAVLINK_CORE_HEADER_LEN 5
#define MAVLINK_NUM_HEADER_BYTES (MAVLINK_CORE_HEADER_LEN + 1)
#define MAVLINK_NUM_CHECKSUM_BYTES 2
#define MAVLINK_NUM_NON_PAYLOAD_BYTES (MAVLINK_NUM_HEADER_BYTES + MAVLINK_NUM_CHECKSUM_BYTES)

#define MAVLINK_MAX_PACKET_LEN (MAVLINK_MAX_PAYLOAD_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES)

#define MAVLINK_MSG_ID_EXTENDED_MESSAGE 255
#define MAVLINK_EXTENDED_HEADER_LEN 14






#define MAVLINK_MAX_EXTENDED_PACKET_LEN 2048


#define MAVLINK_MAX_EXTENDED_PAYLOAD_LEN (MAVLINK_MAX_EXTENDED_PACKET_LEN - MAVLINK_EXTENDED_HEADER_LEN - MAVLINK_NUM_NON_PAYLOAD_BYTES)
# 58 "./lib/main/mavlink/common/../mavlink_types.h"
typedef struct param_union { union { float param_float; int32_t param_int32; uint32_t param_uint32; int16_t param_int16; uint16_t param_uint16; int8_t param_int8; uint8_t param_uint8; uint8_t bytes[4]; }; uint8_t type; } __attribute__((packed))
# 71 "./lib/main/mavlink/common/../mavlink_types.h"
   mavlink_param_union_t;
# 87 "./lib/main/mavlink/common/../mavlink_types.h"
typedef struct param_union_extended { union { struct { uint8_t is_double:1; uint8_t mavlink_type:7; union { char c; uint8_t uint8; int8_t int8; uint16_t uint16; int16_t int16; uint32_t uint32; int32_t int32; float f; uint8_t align[7]; }; }; uint8_t data[8]; }; } __attribute__((packed))
# 107 "./lib/main/mavlink/common/../mavlink_types.h"
   mavlink_param_union_double_t;





typedef struct __mavlink_system { uint8_t sysid; uint8_t compid; } __attribute__((packed))



   mavlink_system_t;

typedef struct __mavlink_message { uint16_t checksum; uint8_t magic; uint8_t len; uint8_t seq; uint8_t sysid; uint8_t compid; uint8_t msgid; uint64_t payload64[(255 +2 +7)/8]; } __attribute__((packed))
# 129 "./lib/main/mavlink/common/../mavlink_types.h"
   mavlink_message_t;

typedef struct __mavlink_extended_message { mavlink_message_t base_msg; int32_t extended_payload_len; uint8_t extended_payload[(2048 - 14 - ((5 + 1) + 2))]; } __attribute__((packed))




   mavlink_extended_message_t;

typedef enum {
 MAVLINK_TYPE_CHAR = 0,
 MAVLINK_TYPE_UINT8_T = 1,
 MAVLINK_TYPE_INT8_T = 2,
 MAVLINK_TYPE_UINT16_T = 3,
 MAVLINK_TYPE_INT16_T = 4,
 MAVLINK_TYPE_UINT32_T = 5,
 MAVLINK_TYPE_INT32_T = 6,
 MAVLINK_TYPE_UINT64_T = 7,
 MAVLINK_TYPE_INT64_T = 8,
 MAVLINK_TYPE_FLOAT = 9,
 MAVLINK_TYPE_DOUBLE = 10
} mavlink_message_type_t;

#define MAVLINK_MAX_FIELDS 64

typedef struct __mavlink_field_info {
        const char *name;
        const char *print_format;
        mavlink_message_type_t type;
        unsigned int array_length;
        unsigned int wire_offset;
        unsigned int structure_offset;
} mavlink_field_info_t;



typedef struct __mavlink_message_info {
 const char *name;
 unsigned num_fields;
 mavlink_field_info_t fields[64];
} mavlink_message_info_t;

#define _MAV_PAYLOAD(msg) ((const char *)(&((msg)->payload64[0])))
#define _MAV_PAYLOAD_NON_CONST(msg) ((char *)(&((msg)->payload64[0])))


#define mavlink_ck_a(msg) *((msg)->len + (uint8_t *)_MAV_PAYLOAD_NON_CONST(msg))
#define mavlink_ck_b(msg) *(((msg)->len+(uint16_t)1) + (uint8_t *)_MAV_PAYLOAD_NON_CONST(msg))

typedef enum {
    MAVLINK_COMM_0,
    MAVLINK_COMM_1,
    MAVLINK_COMM_2,
    MAVLINK_COMM_3
} mavlink_channel_t;
# 194 "./lib/main/mavlink/common/../mavlink_types.h"
#define MAVLINK_COMM_NUM_BUFFERS 4



typedef enum {
    MAVLINK_PARSE_STATE_UNINIT=0,
    MAVLINK_PARSE_STATE_IDLE,
    MAVLINK_PARSE_STATE_GOT_STX,
    MAVLINK_PARSE_STATE_GOT_SEQ,
    MAVLINK_PARSE_STATE_GOT_LENGTH,
    MAVLINK_PARSE_STATE_GOT_SYSID,
    MAVLINK_PARSE_STATE_GOT_COMPID,
    MAVLINK_PARSE_STATE_GOT_MSGID,
    MAVLINK_PARSE_STATE_GOT_PAYLOAD,
    MAVLINK_PARSE_STATE_GOT_CRC1
} mavlink_parse_state_t;

typedef struct __mavlink_status {
    uint8_t msg_received;
    uint8_t buffer_overrun;
    uint8_t parse_error;
    mavlink_parse_state_t parse_state;
    uint8_t packet_idx;
    uint8_t current_rx_seq;
    uint8_t current_tx_seq;
    uint16_t packet_rx_success_count;
    uint16_t packet_rx_drop_count;
} mavlink_status_t;

#define MAVLINK_BIG_ENDIAN 0
#define MAVLINK_LITTLE_ENDIAN 1


#pragma GCC diagnostic pop
# 6 "./lib/main/mavlink/common/../protocol.h" 2
# 14 "./lib/main/mavlink/common/../protocol.h"
#define MAVLINK_NEED_BYTE_SWAP (MAVLINK_ENDIAN != MAVLINK_LITTLE_ENDIAN)



#define MAVLINK_STACK_BUFFER 0



#define MAVLINK_AVOID_GCC_STACK_BUG defined(__GNUC__)



#define MAVLINK_ASSERT(x) 



#define MAVLINK_START_UART_SEND(chan,length) 



#define MAVLINK_END_UART_SEND(chan,length) 
# 78 "./lib/main/mavlink/common/../protocol.h"
#define MAVLINK_HELPER static inline
# 1 "./lib/main/mavlink/common/../mavlink_helpers.h" 1

#define _MAVLINK_HELPERS_H_ 


# 1 "./lib/main/mavlink/common/../checksum.h" 1





#define _CHECKSUM_H_ 
# 21 "./lib/main/mavlink/common/../checksum.h"
#define X25_INIT_CRC 0xffff
#define X25_VALIDATE_CRC 0xf0b8
# 34 "./lib/main/mavlink/common/../checksum.h"
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{

        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
        tmp ^= (tmp<<4);
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
}
# 51 "./lib/main/mavlink/common/../checksum.h"
static inline void crc_init(uint16_t* crcAccum)
{
        *crcAccum = 0xffff;
}
# 64 "./lib/main/mavlink/common/../checksum.h"
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
        uint16_t crcTmp;
        crc_init(&crcTmp);
 while (length--) {
                crc_accumulate(*pBuffer++, &crcTmp);
        }
        return crcTmp;
}
# 84 "./lib/main/mavlink/common/../checksum.h"
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
 const uint8_t *p = (const uint8_t *)pBuffer;
 while (length--) {
                crc_accumulate(*p++, crcAccum);
        }
}
# 6 "./lib/main/mavlink/common/../mavlink_helpers.h" 2

# 1 "./lib/main/mavlink/common/../mavlink_conversions.h" 1

#define _MAVLINK_CONVERSIONS_H_ 







# 1 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\math.h" 1 3


#define _MATH_H_ 


# 1 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\machine\\ieeefp.h" 1 3
# 7 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\math.h" 2 3







union __dmath
{
  double d;
  __ULong i[2];
};

union __fmath
{
  float f;
  __ULong i[1];
};


union __ldmath
{
  long double ld;
  __ULong i[4];
};



#define _M_LN2 0.693147180559945309417





#define HUGE_VAL (__builtin_huge_val())



#define HUGE_VALF (__builtin_huge_valf())



#define HUGE_VALL (__builtin_huge_vall())



#define INFINITY (__builtin_inff())



#define NAN (__builtin_nanf(""))
# 108 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\math.h" 3
extern double atan (double);
extern double cos (double);
extern double sin (double);
extern double tan (double);
extern double tanh (double);
extern double frexp (double, int *);
extern double modf (double, double *);
extern double ceil (double);
extern double fabs (double);
extern double floor (double);






extern double acos (double);
extern double asin (double);
extern double atan2 (double, double);
extern double cosh (double);
extern double sinh (double);
extern double exp (double);
extern double ldexp (double, int);
extern double log (double);
extern double log10 (double);
extern double pow (double, double);
extern double sqrt (double);
extern double fmod (double, double);
# 149 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\math.h" 3
#define FLT_EVAL_METHOD __FLT_EVAL_METHOD__
#define __TMP_FLT_EVAL_METHOD 



    typedef float float_t;
    typedef double double_t;
# 172 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\math.h" 3
#undef FLT_EVAL_METHOD


#define FP_NAN 0
#define FP_INFINITE 1
#define FP_ZERO 2
#define FP_SUBNORMAL 3
#define FP_NORMAL 4


#define FP_ILOGB0 (-INT_MAX)


#define FP_ILOGBNAN INT_MAX



#define MATH_ERRNO 1


#define MATH_ERREXCEPT 2


#define math_errhandling MATH_ERRNO


extern int __isinff (float x);
extern int __isinfd (double x);
extern int __isnanf (float x);
extern int __isnand (double x);
extern int __fpclassifyf (float x);
extern int __fpclassifyd (double x);
extern int __signbitf (float x);
extern int __signbitd (double x);

#define fpclassify(__x) ((sizeof(__x) == sizeof(float)) ? __fpclassifyf(__x) : __fpclassifyd(__x))




#define isfinite(__y) (__extension__ ({int __cy = fpclassify(__y); __cy != FP_INFINITE && __cy != FP_NAN;}))
# 224 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\math.h" 3
#define isinf(y) (fpclassify(y) == FP_INFINITE)



#define isnan(y) (fpclassify(y) == FP_NAN)


#define isnormal(y) (fpclassify(y) == FP_NORMAL)
#define signbit(__x) ((sizeof(__x) == sizeof(float)) ? __signbitf(__x) : __signbitd(__x))



#define isgreater(x,y) (__extension__ ({__typeof__(x) __x = (x); __typeof__(y) __y = (y); !isunordered(__x,__y) && (__x > __y);}))


#define isgreaterequal(x,y) (__extension__ ({__typeof__(x) __x = (x); __typeof__(y) __y = (y); !isunordered(__x,__y) && (__x >= __y);}))


#define isless(x,y) (__extension__ ({__typeof__(x) __x = (x); __typeof__(y) __y = (y); !isunordered(__x,__y) && (__x < __y);}))


#define islessequal(x,y) (__extension__ ({__typeof__(x) __x = (x); __typeof__(y) __y = (y); !isunordered(__x,__y) && (__x <= __y);}))


#define islessgreater(x,y) (__extension__ ({__typeof__(x) __x = (x); __typeof__(y) __y = (y); !isunordered(__x,__y) && (__x < __y || __x > __y);}))



#define isunordered(a,b) (__extension__ ({__typeof__(a) __a = (a); __typeof__(b) __b = (b); fpclassify(__a) == FP_NAN || fpclassify(__b) == FP_NAN;}))





extern double infinity (void);
extern double nan (const char *);
extern int finite (double);
extern double copysign (double, double);
extern double logb (double);
extern int ilogb (double);

extern double asinh (double);
extern double cbrt (double);
extern double nextafter (double, double);
extern double rint (double);
extern double scalbn (double, int);

extern double exp2 (double);
extern double scalbln (double, long int);
extern double tgamma (double);
extern double nearbyint (double);
extern long int lrint (double);
extern long long int llrint (double);
extern double round (double);
extern long int lround (double);
extern long long int llround (double);
extern double trunc (double);
extern double remquo (double, double, int *);
extern double fdim (double, double);
extern double fmax (double, double);
extern double fmin (double, double);
extern double fma (double, double, double);


extern double log1p (double);
extern double expm1 (double);



extern double acosh (double);
extern double atanh (double);
extern double remainder (double, double);
extern double gamma (double);
extern double lgamma (double);
extern double erf (double);
extern double erfc (double);
extern double log2 (double);

#define log2(x) (log (x) / _M_LN2)



extern double hypot (double, double);






extern float atanf (float);
extern float cosf (float);
extern float sinf (float);
extern float tanf (float);
extern float tanhf (float);
extern float frexpf (float, int *);
extern float modff (float, float *);
extern float ceilf (float);
extern float fabsf (float);
extern float floorf (float);


extern float acosf (float);
extern float asinf (float);
extern float atan2f (float, float);
extern float coshf (float);
extern float sinhf (float);
extern float expf (float);
extern float ldexpf (float, int);
extern float logf (float);
extern float log10f (float);
extern float powf (float, float);
extern float sqrtf (float);
extern float fmodf (float, float);




extern float exp2f (float);
extern float scalblnf (float, long int);
extern float tgammaf (float);
extern float nearbyintf (float);
extern long int lrintf (float);
extern long long llrintf (float);
extern float roundf (float);
extern long int lroundf (float);
extern long long int llroundf (float);
extern float truncf (float);
extern float remquof (float, float, int *);
extern float fdimf (float, float);
extern float fmaxf (float, float);
extern float fminf (float, float);
extern float fmaf (float, float, float);

extern float infinityf (void);
extern float nanf (const char *);
extern int finitef (float);
extern float copysignf (float, float);
extern float logbf (float);
extern int ilogbf (float);

extern float asinhf (float);
extern float cbrtf (float);
extern float nextafterf (float, float);
extern float rintf (float);
extern float scalbnf (float, int);
extern float log1pf (float);
extern float expm1f (float);


extern float acoshf (float);
extern float atanhf (float);
extern float remainderf (float, float);
extern float gammaf (float);
extern float lgammaf (float);
extern float erff (float);
extern float erfcf (float);
extern float log2f (float);
extern float hypotf (float, float);






extern long double atanl (long double);
extern long double cosl (long double);
extern long double sinl (long double);
extern long double tanl (long double);
extern long double tanhl (long double);
extern long double frexpl (long double value, int *);
extern long double modfl (long double, long double *);
extern long double ceill (long double);
extern long double fabsl (long double);
extern long double floorl (long double);
extern long double log1pl (long double);
extern long double expm1l (long double);




extern long double acosl (long double);
extern long double asinl (long double);
extern long double atan2l (long double, long double);
extern long double coshl (long double);
extern long double sinhl (long double);
extern long double expl (long double);
extern long double ldexpl (long double, int);
extern long double logl (long double);
extern long double log10l (long double);
extern long double powl (long double, long double);
extern long double sqrtl (long double);
extern long double fmodl (long double, long double);
extern long double hypotl (long double, long double);


extern long double copysignl (long double, long double);
extern long double nanl (const char *);
extern int ilogbl (long double);
extern long double asinhl (long double);
extern long double cbrtl (long double);
extern long double nextafterl (long double, long double);
extern long double rintl (long double);
extern long double scalbnl (long double, int);
extern long double exp2l (long double);
extern long double scalblnl (long double, long);
extern long double tgammal (long double);
extern long double nearbyintl (long double);
extern long int lrintl (long double);
extern long long int llrintl (long double);
extern long double roundl (long double);
extern long lroundl (long double);
extern long long int llroundl (long double);
extern long double truncl (long double);
extern long double remquol (long double, long double, int *);
extern long double fdiml (long double, long double);
extern long double fmaxl (long double, long double);
extern long double fminl (long double, long double);
extern long double fmal (long double, long double, long double);

extern long double acoshl (long double);
extern long double atanhl (long double);
extern long double remainderl (long double, long double);
extern long double lgammal (long double);
extern long double erfl (long double);
extern long double erfcl (long double);
# 463 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\math.h" 3
extern double drem (double, double);
extern void sincos (double, double *, double *);
extern double gamma_r (double, int *);
extern double lgamma_r (double, int *);

extern double y0 (double);
extern double y1 (double);
extern double yn (int, double);
extern double j0 (double);
extern double j1 (double);
extern double jn (int, double);

extern float dremf (float, float);
extern void sincosf (float, float *, float *);
extern float gammaf_r (float, int *);
extern float lgammaf_r (float, int *);

extern float y0f (float);
extern float y1f (float);
extern float ynf (int, float);
extern float j0f (float);
extern float j1f (float);
extern float jnf (int, float);



extern double exp10 (double);


extern double pow10 (double);


extern float exp10f (float);


extern float pow10f (float);
# 507 "c:\\dev\\gcc-arm-none-eabi-4_8-2014q2\\arm-none-eabi\\include\\math.h" 3
#define signgam (*__signgam())
extern int *__signgam (void);


#define __signgam_r(ptr) _REENT_SIGNGAM(ptr)







struct exception

{
  int type;
  char *name;
  double arg1;
  double arg2;
  double retval;
  int err;
};




extern int matherr (struct exception *e);




#define DOMAIN 1
#define SING 2
#define OVERFLOW 3
#define UNDERFLOW 4
#define TLOSS 5
#define PLOSS 6



#define MAXFLOAT 3.40282347e+38F

#define M_E 2.7182818284590452354
#define M_LOG2E 1.4426950408889634074
#define M_LOG10E 0.43429448190325182765
#define M_LN2 _M_LN2
#define M_LN10 2.30258509299404568402
#define M_PI 3.14159265358979323846
#define M_TWOPI (M_PI * 2.0)
#define M_PI_2 1.57079632679489661923
#define M_PI_4 0.78539816339744830962
#define M_3PI_4 2.3561944901923448370E0
#define M_SQRTPI 1.77245385090551602792981
#define M_1_PI 0.31830988618379067154
#define M_2_PI 0.63661977236758134308
#define M_2_SQRTPI 1.12837916709551257390
#define M_SQRT2 1.41421356237309504880
#define M_SQRT1_2 0.70710678118654752440
#define M_LN2LO 1.9082149292705877000E-10
#define M_LN2HI 6.9314718036912381649E-1
#define M_SQRT3 1.73205080756887719000
#define M_IVLN10 0.43429448190325182765
#define M_LOG2_E _M_LN2
#define M_INVLN2 1.4426950408889633870E0



enum __fdlibm_version
{
  __fdlibm_ieee = -1,
  __fdlibm_svid,
  __fdlibm_xopen,
  __fdlibm_posix
};

#define _LIB_VERSION_TYPE enum __fdlibm_version
#define _LIB_VERSION __fdlib_version

extern enum __fdlibm_version __fdlib_version;

#define _IEEE_ __fdlibm_ieee
#define _SVID_ __fdlibm_svid
#define _XOPEN_ __fdlibm_xopen
#define _POSIX_ __fdlibm_posix




# 11 "./lib/main/mavlink/common/../mavlink_conversions.h" 2
# 38 "./lib/main/mavlink/common/../mavlink_conversions.h"
static inline void mavlink_quaternion_to_dcm(const float quaternion[4], float dcm[3][3])
{
    double a = quaternion[0];
    double b = quaternion[1];
    double c = quaternion[2];
    double d = quaternion[3];
    double aSq = a * a;
    double bSq = b * b;
    double cSq = c * c;
    double dSq = d * d;
    dcm[0][0] = aSq + bSq - cSq - dSq;
    dcm[0][1] = 2 * (b * c - a * d);
    dcm[0][2] = 2 * (a * c + b * d);
    dcm[1][0] = 2 * (b * c + a * d);
    dcm[1][1] = aSq - bSq + cSq - dSq;
    dcm[1][2] = 2 * (c * d - a * b);
    dcm[2][0] = 2 * (b * d - a * c);
    dcm[2][1] = 2 * (a * b + c * d);
    dcm[2][2] = aSq - bSq - cSq + dSq;
}
# 68 "./lib/main/mavlink/common/../mavlink_conversions.h"
static inline void mavlink_dcm_to_euler(const float dcm[3][3], float* roll, float* pitch, float* yaw)
{
    float phi, theta, psi;
    theta = asin(-dcm[2][0]);

    if (fabsf(theta - (float)1.57079632679489661923) < 1.0e-3f) {
        phi = 0.0f;
        psi = (atan2f(dcm[1][2] - dcm[0][1],
                dcm[0][2] + dcm[1][1]) + phi);

    } else if (fabsf(theta + (float)1.57079632679489661923) < 1.0e-3f) {
        phi = 0.0f;
        psi = atan2f(dcm[1][2] - dcm[0][1],
                  dcm[0][2] + dcm[1][1] - phi);

    } else {
        phi = atan2f(dcm[2][1], dcm[2][2]);
        psi = atan2f(dcm[1][0], dcm[0][0]);
    }

    *roll = phi;
    *pitch = theta;
    *yaw = psi;
}
# 102 "./lib/main/mavlink/common/../mavlink_conversions.h"
static inline void mavlink_quaternion_to_euler(const float quaternion[4], float* roll, float* pitch, float* yaw)
{
    float dcm[3][3];
    mavlink_quaternion_to_dcm(quaternion, dcm);
    mavlink_dcm_to_euler((const float(*)[3])dcm, roll, pitch, yaw);
}
# 118 "./lib/main/mavlink/common/../mavlink_conversions.h"
static inline void mavlink_euler_to_quaternion(float roll, float pitch, float yaw, float quaternion[4])
{
    float cosPhi_2 = cosf(roll / 2);
    float sinPhi_2 = sinf(roll / 2);
    float cosTheta_2 = cosf(pitch / 2);
    float sinTheta_2 = sinf(pitch / 2);
    float cosPsi_2 = cosf(yaw / 2);
    float sinPsi_2 = sinf(yaw / 2);
    quaternion[0] = (cosPhi_2 * cosTheta_2 * cosPsi_2 +
            sinPhi_2 * sinTheta_2 * sinPsi_2);
    quaternion[1] = (sinPhi_2 * cosTheta_2 * cosPsi_2 -
            cosPhi_2 * sinTheta_2 * sinPsi_2);
    quaternion[2] = (cosPhi_2 * sinTheta_2 * cosPsi_2 +
            sinPhi_2 * cosTheta_2 * sinPsi_2);
    quaternion[3] = (cosPhi_2 * cosTheta_2 * sinPsi_2 -
            sinPhi_2 * sinTheta_2 * cosPsi_2);
}
# 146 "./lib/main/mavlink/common/../mavlink_conversions.h"
static inline void mavlink_dcm_to_quaternion(const float dcm[3][3], float quaternion[4])
{
    float tr = dcm[0][0] + dcm[1][1] + dcm[2][2];
    if (tr > 0.0f) {
        float s = sqrtf(tr + 1.0f);
        quaternion[0] = s * 0.5f;
        s = 0.5f / s;
        quaternion[1] = (dcm[2][1] - dcm[1][2]) * s;
        quaternion[2] = (dcm[0][2] - dcm[2][0]) * s;
        quaternion[3] = (dcm[1][0] - dcm[0][1]) * s;
    } else {


        int dcm_i = 0;
        int i;
        for (i = 1; i < 3; i++) {
            if (dcm[i][i] > dcm[dcm_i][dcm_i]) {
                dcm_i = i;
            }
        }

        int dcm_j = (dcm_i + 1) % 3;
        int dcm_k = (dcm_i + 2) % 3;

        float s = sqrtf((dcm[dcm_i][dcm_i] - dcm[dcm_j][dcm_j] -
                    dcm[dcm_k][dcm_k]) + 1.0f);
        quaternion[dcm_i + 1] = s * 0.5f;
        s = 0.5f / s;
        quaternion[dcm_j + 1] = (dcm[dcm_i][dcm_j] + dcm[dcm_j][dcm_i]) * s;
        quaternion[dcm_k + 1] = (dcm[dcm_k][dcm_i] + dcm[dcm_i][dcm_k]) * s;
        quaternion[0] = (dcm[dcm_k][dcm_j] - dcm[dcm_j][dcm_k]) * s;
    }
}
# 189 "./lib/main/mavlink/common/../mavlink_conversions.h"
static inline void mavlink_euler_to_dcm(float roll, float pitch, float yaw, float dcm[3][3])
{
    float cosPhi = cosf(roll);
    float sinPhi = sinf(roll);
    float cosThe = cosf(pitch);
    float sinThe = sinf(pitch);
    float cosPsi = cosf(yaw);
    float sinPsi = sinf(yaw);

    dcm[0][0] = cosThe * cosPsi;
    dcm[0][1] = -cosPhi * sinPsi + sinPhi * sinThe * cosPsi;
    dcm[0][2] = sinPhi * sinPsi + cosPhi * sinThe * cosPsi;

    dcm[1][0] = cosThe * sinPsi;
    dcm[1][1] = cosPhi * cosPsi + sinPhi * sinThe * sinPsi;
    dcm[1][2] = -sinPhi * cosPsi + cosPhi * sinThe * sinPsi;

    dcm[2][0] = -sinThe;
    dcm[2][1] = sinPhi * cosThe;
    dcm[2][2] = cosPhi * cosThe;
}
# 8 "./lib/main/mavlink/common/../mavlink_helpers.h" 2
# 17 "./lib/main/mavlink/common/../mavlink_helpers.h"
static inline mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{




 static mavlink_status_t m_mavlink_status[4];

 return &m_mavlink_status[chan];
}






static inline mavlink_message_t* mavlink_get_channel_buffer(uint8_t chan)
{





 static mavlink_message_t m_mavlink_buffer[4];

 return &m_mavlink_buffer[chan];
}





static inline void mavlink_reset_channel_status(uint8_t chan)
{
 mavlink_status_t *status = mavlink_get_channel_status(chan);
 status->parse_state = MAVLINK_PARSE_STATE_IDLE;
}
# 68 "./lib/main/mavlink/common/../mavlink_helpers.h"
static inline uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
            uint8_t chan, uint8_t length, uint8_t crc_extra)




{

 msg->magic = 254;
 msg->len = length;
 msg->sysid = system_id;
 msg->compid = component_id;

 msg->seq = mavlink_get_channel_status(chan)->current_tx_seq;
 mavlink_get_channel_status(chan)->current_tx_seq = mavlink_get_channel_status(chan)->current_tx_seq+1;
 msg->checksum = crc_calculate(((const uint8_t*)(msg)) + 3, 5);
 crc_accumulate_buffer(&msg->checksum, ((const char *)(&((msg)->payload64[0]))), msg->len);

 crc_accumulate(crc_extra, &msg->checksum);

 *((msg)->len + (uint8_t *)((char *)(&((msg)->payload64[0])))) = (uint8_t)(msg->checksum & 0xFF);
 *(((msg)->len+(uint16_t)1) + (uint8_t *)((char *)(&((msg)->payload64[0])))) = (uint8_t)(msg->checksum >> 8);

 return length + ((5 + 1) + 2);
}






static inline uint16_t mavlink_finalize_message(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
       uint8_t length, uint8_t crc_extra)
{
 return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, length, crc_extra);
}
# 174 "./lib/main/mavlink/common/../mavlink_helpers.h"
static inline uint16_t mavlink_msg_to_send_buffer(uint8_t *buffer, const mavlink_message_t *msg)
{
 memcpy(buffer, (const uint8_t *)&msg->magic, (5 + 1) + (uint16_t)msg->len);

 uint8_t *ck = buffer + ((5 + 1) + (uint16_t)msg->len);

 ck[0] = (uint8_t)(msg->checksum & 0xFF);
 ck[1] = (uint8_t)(msg->checksum >> 8);

 return ((5 + 1) + 2) + (uint16_t)msg->len;
}

union __mavlink_bitfield {
 uint8_t uint8;
 int8_t int8;
 uint16_t uint16;
 int16_t int16;
 uint32_t uint32;
 int32_t int32;
};


static inline void mavlink_start_checksum(mavlink_message_t* msg)
{
 crc_init(&msg->checksum);
}

static inline void mavlink_update_checksum(mavlink_message_t* msg, uint8_t c)
{
 crc_accumulate(c, &msg->checksum);
}
# 247 "./lib/main/mavlink/common/../mavlink_helpers.h"
static inline uint8_t mavlink_parse_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{






 static const uint8_t mavlink_message_crcs[256] = {50, 124, 137, 0, 237, 217, 104, 119, 0, 0, 0, 89, 0, 0, 0, 0, 0, 0, 0, 0, 214, 159, 220, 168, 24, 23, 170, 144, 67, 115, 39, 246, 185, 104, 237, 244, 222, 212, 9, 254, 230, 28, 28, 132, 221, 232, 11, 153, 41, 39, 78, 0, 0, 0, 15, 3, 0, 0, 0, 0, 0, 153, 183, 51, 59, 118, 148, 21, 0, 243, 124, 0, 0, 38, 20, 158, 152, 143, 0, 0, 0, 106, 49, 22, 143, 140, 5, 150, 0, 231, 183, 63, 54, 0, 0, 0, 0, 0, 0, 0, 175, 102, 158, 208, 56, 93, 138, 108, 32, 185, 84, 34, 174, 124, 237, 4, 76, 128, 56, 116, 134, 237, 203, 250, 87, 203, 220, 25, 226, 46, 29, 223, 85, 6, 229, 203, 1, 195, 109, 168, 181, 0, 0, 0, 0, 0, 0, 154, 178, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 204, 49, 170, 44, 83, 46, 0};
#define MAVLINK_MESSAGE_CRC(msgid) mavlink_message_crcs[msgid]
# 273 "./lib/main/mavlink/common/../mavlink_helpers.h"
 mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan);
 mavlink_status_t* status = mavlink_get_channel_status(chan);
 int bufferIndex = 0;

 status->msg_received = 0;

 switch (status->parse_state)
 {
 case MAVLINK_PARSE_STATE_UNINIT:
 case MAVLINK_PARSE_STATE_IDLE:
  if (c == 254)
  {
   status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
   rxmsg->len = 0;
   rxmsg->magic = c;
   mavlink_start_checksum(rxmsg);
  }
  break;

 case MAVLINK_PARSE_STATE_GOT_STX:
   if (status->msg_received





    )
  {
   status->buffer_overrun++;
   status->parse_error++;
   status->msg_received = 0;
   status->parse_state = MAVLINK_PARSE_STATE_IDLE;
  }
  else
  {

   rxmsg->len = c;
   status->packet_idx = 0;
   mavlink_update_checksum(rxmsg, c);
   status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
  }
  break;

 case MAVLINK_PARSE_STATE_GOT_LENGTH:
  rxmsg->seq = c;
  mavlink_update_checksum(rxmsg, c);
  status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
  break;

 case MAVLINK_PARSE_STATE_GOT_SEQ:
  rxmsg->sysid = c;
  mavlink_update_checksum(rxmsg, c);
  status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
  break;

 case MAVLINK_PARSE_STATE_GOT_SYSID:
  rxmsg->compid = c;
  mavlink_update_checksum(rxmsg, c);
  status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
  break;

 case MAVLINK_PARSE_STATE_GOT_COMPID:
# 343 "./lib/main/mavlink/common/../mavlink_helpers.h"
  rxmsg->msgid = c;
  mavlink_update_checksum(rxmsg, c);
  if (rxmsg->len == 0)
  {
   status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
  }
  else
  {
   status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID;
  }
  break;

 case MAVLINK_PARSE_STATE_GOT_MSGID:
  ((char *)(&((rxmsg)->payload64[0])))[status->packet_idx++] = (char)c;
  mavlink_update_checksum(rxmsg, c);
  if (status->packet_idx == rxmsg->len)
  {
   status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
  }
  break;

 case MAVLINK_PARSE_STATE_GOT_PAYLOAD:

  mavlink_update_checksum(rxmsg, mavlink_message_crcs[rxmsg->msgid]);

  if (c != (rxmsg->checksum & 0xFF)) {

   status->parse_error++;
   status->msg_received = 0;
   status->parse_state = MAVLINK_PARSE_STATE_IDLE;
   if (c == 254)
   {
    status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
    rxmsg->len = 0;
    mavlink_start_checksum(rxmsg);
   }
  }
  else
  {
   status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
   ((char *)(&((rxmsg)->payload64[0])))[status->packet_idx] = (char)c;
  }
  break;

 case MAVLINK_PARSE_STATE_GOT_CRC1:
  if (c != (rxmsg->checksum >> 8)) {

   status->parse_error++;
   status->msg_received = 0;
   status->parse_state = MAVLINK_PARSE_STATE_IDLE;
   if (c == 254)
   {
    status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
    rxmsg->len = 0;
    mavlink_start_checksum(rxmsg);
   }
  }
  else
  {

   status->msg_received = 1;
   status->parse_state = MAVLINK_PARSE_STATE_IDLE;
   ((char *)(&((rxmsg)->payload64[0])))[status->packet_idx+1] = (char)c;
   memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
  }
  break;
 }

 bufferIndex++;

 if (status->msg_received == 1)
 {





  status->current_rx_seq = rxmsg->seq;

  if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;

  status->packet_rx_success_count++;
 }

 r_message->len = rxmsg->len;
 r_mavlink_status->parse_state = status->parse_state;
 r_mavlink_status->packet_idx = status->packet_idx;
 r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
 r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
 r_mavlink_status->packet_rx_drop_count = status->parse_error;
 status->parse_error = 0;
 return status->msg_received;
}
# 447 "./lib/main/mavlink/common/../mavlink_helpers.h"
static inline uint8_t put_bitfield_n_by_index(int32_t b, uint8_t bits, uint8_t packet_index, uint8_t bit_index, uint8_t* r_bit_index, uint8_t* buffer)
{
 uint16_t bits_remain = bits;

 int32_t v;
 uint8_t i_bit_index, i_byte_index, curr_bits_n;
# 465 "./lib/main/mavlink/common/../mavlink_helpers.h"
 v = b;
# 484 "./lib/main/mavlink/common/../mavlink_helpers.h"
 i_bit_index = bit_index;
 i_byte_index = packet_index;
 if (bit_index > 0)
 {


  i_byte_index--;
 }


 while (bits_remain > 0)
 {







  if (bits_remain <= (uint8_t)(8 - i_bit_index))
  {

   curr_bits_n = (uint8_t)bits_remain;
  }
  else
  {
   curr_bits_n = (8 - i_bit_index);
  }



  buffer[i_byte_index] &= (0xFF >> (8 - curr_bits_n));

  buffer[i_byte_index] |= ((0x00 << curr_bits_n) & v);


  i_bit_index += curr_bits_n;


  bits_remain -= curr_bits_n;
  if (bits_remain > 0)
  {

   i_byte_index++;
   i_bit_index = 0;
  }
 }

 *r_bit_index = i_bit_index;

 if (i_bit_index != 7) i_byte_index++;
 return i_byte_index - packet_index;
}
# 80 "./lib/main/mavlink/common/../protocol.h" 2






static inline uint16_t mavlink_msg_get_send_buffer_length(const mavlink_message_t* msg)
{
 return msg->len + ((5 + 1) + 2);
}
# 134 "./lib/main/mavlink/common/../protocol.h"
#define _mav_put_uint8_t(buf,wire_offset,b) buf[wire_offset] = (uint8_t)b
#define _mav_put_int8_t(buf,wire_offset,b) buf[wire_offset] = (int8_t)b
#define _mav_put_char(buf,wire_offset,b) buf[wire_offset] = b
# 157 "./lib/main/mavlink/common/../protocol.h"
#define _mav_put_uint16_t(buf,wire_offset,b) *(uint16_t *)&buf[wire_offset] = b
#define _mav_put_int16_t(buf,wire_offset,b) *(int16_t *)&buf[wire_offset] = b
#define _mav_put_uint32_t(buf,wire_offset,b) *(uint32_t *)&buf[wire_offset] = b
#define _mav_put_int32_t(buf,wire_offset,b) *(int32_t *)&buf[wire_offset] = b
#define _mav_put_uint64_t(buf,wire_offset,b) *(uint64_t *)&buf[wire_offset] = b
#define _mav_put_int64_t(buf,wire_offset,b) *(int64_t *)&buf[wire_offset] = b
#define _mav_put_float(buf,wire_offset,b) *(float *)&buf[wire_offset] = b
#define _mav_put_double(buf,wire_offset,b) *(double *)&buf[wire_offset] = b





static inline void mav_array_memcpy(void *dest, const void *src, size_t n)
{
 if (src == ((void *)0)) {
  memset(dest, 0, n);
 } else {
  memcpy(dest, src, n);
 }
}




static inline void _mav_put_char_array(char *buf, uint8_t wire_offset, const char *b, uint8_t array_length)
{
 mav_array_memcpy(&buf[wire_offset], b, array_length);

}




static inline void _mav_put_uint8_t_array(char *buf, uint8_t wire_offset, const uint8_t *b, uint8_t array_length)
{
 mav_array_memcpy(&buf[wire_offset], b, array_length);

}




static inline void _mav_put_int8_t_array(char *buf, uint8_t wire_offset, const int8_t *b, uint8_t array_length)
{
 mav_array_memcpy(&buf[wire_offset], b, array_length);

}
# 220 "./lib/main/mavlink/common/../protocol.h"
#define _MAV_PUT_ARRAY(TYPE,V) static inline void _mav_put_ ## TYPE ##_array(char *buf, uint8_t wire_offset, const TYPE *b, uint8_t array_length) { mav_array_memcpy(&buf[wire_offset], b, array_length*sizeof(TYPE)); }






static inline void _mav_put_uint16_t_array(char *buf, uint8_t wire_offset, const uint16_t *b, uint8_t array_length) { mav_array_memcpy(&buf[wire_offset], b, array_length*sizeof(uint16_t)); }
static inline void _mav_put_uint32_t_array(char *buf, uint8_t wire_offset, const uint32_t *b, uint8_t array_length) { mav_array_memcpy(&buf[wire_offset], b, array_length*sizeof(uint32_t)); }
static inline void _mav_put_uint64_t_array(char *buf, uint8_t wire_offset, const uint64_t *b, uint8_t array_length) { mav_array_memcpy(&buf[wire_offset], b, array_length*sizeof(uint64_t)); }
static inline void _mav_put_int16_t_array(char *buf, uint8_t wire_offset, const int16_t *b, uint8_t array_length) { mav_array_memcpy(&buf[wire_offset], b, array_length*sizeof(int16_t)); }
static inline void _mav_put_int32_t_array(char *buf, uint8_t wire_offset, const int32_t *b, uint8_t array_length) { mav_array_memcpy(&buf[wire_offset], b, array_length*sizeof(int32_t)); }
static inline void _mav_put_int64_t_array(char *buf, uint8_t wire_offset, const int64_t *b, uint8_t array_length) { mav_array_memcpy(&buf[wire_offset], b, array_length*sizeof(int64_t)); }
static inline void _mav_put_float_array(char *buf, uint8_t wire_offset, const float *b, uint8_t array_length) { mav_array_memcpy(&buf[wire_offset], b, array_length*sizeof(float)); }
static inline void _mav_put_double_array(char *buf, uint8_t wire_offset, const double *b, uint8_t array_length) { mav_array_memcpy(&buf[wire_offset], b, array_length*sizeof(double)); }

#define _MAV_RETURN_char(msg,wire_offset) (const char)_MAV_PAYLOAD(msg)[wire_offset]
#define _MAV_RETURN_int8_t(msg,wire_offset) (const int8_t)_MAV_PAYLOAD(msg)[wire_offset]
#define _MAV_RETURN_uint8_t(msg,wire_offset) (const uint8_t)_MAV_PAYLOAD(msg)[wire_offset]
# 268 "./lib/main/mavlink/common/../protocol.h"
#define _MAV_MSG_RETURN_TYPE(TYPE) static inline TYPE _MAV_RETURN_ ## TYPE(const mavlink_message_t *msg, uint8_t ofs) { return *(const TYPE *)(&_MAV_PAYLOAD(msg)[ofs]);}



static inline uint16_t _MAV_RETURN_uint16_t(const mavlink_message_t *msg, uint8_t ofs) { return *(const uint16_t *)(&((const char *)(&((msg)->payload64[0])))[ofs]);}
static inline int16_t _MAV_RETURN_int16_t(const mavlink_message_t *msg, uint8_t ofs) { return *(const int16_t *)(&((const char *)(&((msg)->payload64[0])))[ofs]);}
static inline uint32_t _MAV_RETURN_uint32_t(const mavlink_message_t *msg, uint8_t ofs) { return *(const uint32_t *)(&((const char *)(&((msg)->payload64[0])))[ofs]);}
static inline int32_t _MAV_RETURN_int32_t(const mavlink_message_t *msg, uint8_t ofs) { return *(const int32_t *)(&((const char *)(&((msg)->payload64[0])))[ofs]);}
static inline uint64_t _MAV_RETURN_uint64_t(const mavlink_message_t *msg, uint8_t ofs) { return *(const uint64_t *)(&((const char *)(&((msg)->payload64[0])))[ofs]);}
static inline int64_t _MAV_RETURN_int64_t(const mavlink_message_t *msg, uint8_t ofs) { return *(const int64_t *)(&((const char *)(&((msg)->payload64[0])))[ofs]);}
static inline float _MAV_RETURN_float(const mavlink_message_t *msg, uint8_t ofs) { return *(const float *)(&((const char *)(&((msg)->payload64[0])))[ofs]);}
static inline double _MAV_RETURN_double(const mavlink_message_t *msg, uint8_t ofs) { return *(const double *)(&((const char *)(&((msg)->payload64[0])))[ofs]);}


static inline uint16_t _MAV_RETURN_char_array(const mavlink_message_t *msg, char *value,
           uint8_t array_length, uint8_t wire_offset)
{
 memcpy(value, &((const char *)(&((msg)->payload64[0])))[wire_offset], array_length);
 return array_length;
}

static inline uint16_t _MAV_RETURN_uint8_t_array(const mavlink_message_t *msg, uint8_t *value,
       uint8_t array_length, uint8_t wire_offset)
{
 memcpy(value, &((const char *)(&((msg)->payload64[0])))[wire_offset], array_length);
 return array_length;
}

static inline uint16_t _MAV_RETURN_int8_t_array(const mavlink_message_t *msg, int8_t *value,
             uint8_t array_length, uint8_t wire_offset)
{
 memcpy(value, &((const char *)(&((msg)->payload64[0])))[wire_offset], array_length);
 return array_length;
}
# 315 "./lib/main/mavlink/common/../protocol.h"
#define _MAV_RETURN_ARRAY(TYPE,V) static inline uint16_t _MAV_RETURN_ ## TYPE ##_array(const mavlink_message_t *msg, TYPE *value, uint8_t array_length, uint8_t wire_offset) { memcpy(value, &_MAV_PAYLOAD(msg)[wire_offset], array_length*sizeof(TYPE)); return array_length*sizeof(TYPE); }
# 324 "./lib/main/mavlink/common/../protocol.h"
static inline uint16_t _MAV_RETURN_uint16_t_array(const mavlink_message_t *msg, uint16_t *value, uint8_t array_length, uint8_t wire_offset) { memcpy(value, &((const char *)(&((msg)->payload64[0])))[wire_offset], array_length*sizeof(uint16_t)); return array_length*sizeof(uint16_t); }
static inline uint16_t _MAV_RETURN_uint32_t_array(const mavlink_message_t *msg, uint32_t *value, uint8_t array_length, uint8_t wire_offset) { memcpy(value, &((const char *)(&((msg)->payload64[0])))[wire_offset], array_length*sizeof(uint32_t)); return array_length*sizeof(uint32_t); }
static inline uint16_t _MAV_RETURN_uint64_t_array(const mavlink_message_t *msg, uint64_t *value, uint8_t array_length, uint8_t wire_offset) { memcpy(value, &((const char *)(&((msg)->payload64[0])))[wire_offset], array_length*sizeof(uint64_t)); return array_length*sizeof(uint64_t); }
static inline uint16_t _MAV_RETURN_int16_t_array(const mavlink_message_t *msg, int16_t *value, uint8_t array_length, uint8_t wire_offset) { memcpy(value, &((const char *)(&((msg)->payload64[0])))[wire_offset], array_length*sizeof(int16_t)); return array_length*sizeof(int16_t); }
static inline uint16_t _MAV_RETURN_int32_t_array(const mavlink_message_t *msg, int32_t *value, uint8_t array_length, uint8_t wire_offset) { memcpy(value, &((const char *)(&((msg)->payload64[0])))[wire_offset], array_length*sizeof(int32_t)); return array_length*sizeof(int32_t); }
static inline uint16_t _MAV_RETURN_int64_t_array(const mavlink_message_t *msg, int64_t *value, uint8_t array_length, uint8_t wire_offset) { memcpy(value, &((const char *)(&((msg)->payload64[0])))[wire_offset], array_length*sizeof(int64_t)); return array_length*sizeof(int64_t); }
static inline uint16_t _MAV_RETURN_float_array(const mavlink_message_t *msg, float *value, uint8_t array_length, uint8_t wire_offset) { memcpy(value, &((const char *)(&((msg)->payload64[0])))[wire_offset], array_length*sizeof(float)); return array_length*sizeof(float); }
static inline uint16_t _MAV_RETURN_double_array(const mavlink_message_t *msg, double *value, uint8_t array_length, uint8_t wire_offset) { memcpy(value, &((const char *)(&((msg)->payload64[0])))[wire_offset], array_length*sizeof(double)); return array_length*sizeof(double); }
# 31 "./lib/main/mavlink/common/common.h" 2

#define MAVLINK_ENABLED_COMMON 






#define HAVE_ENUM_MAV_AUTOPILOT 
typedef enum MAV_AUTOPILOT
{
 MAV_AUTOPILOT_GENERIC=0,
 MAV_AUTOPILOT_PIXHAWK=1,
 MAV_AUTOPILOT_SLUGS=2,
 MAV_AUTOPILOT_ARDUPILOTMEGA=3,
 MAV_AUTOPILOT_OPENPILOT=4,
 MAV_AUTOPILOT_GENERIC_WAYPOINTS_ONLY=5,
 MAV_AUTOPILOT_GENERIC_WAYPOINTS_AND_SIMPLE_NAVIGATION_ONLY=6,
 MAV_AUTOPILOT_GENERIC_MISSION_FULL=7,
 MAV_AUTOPILOT_INVALID=8,
 MAV_AUTOPILOT_PPZ=9,
 MAV_AUTOPILOT_UDB=10,
 MAV_AUTOPILOT_FP=11,
 MAV_AUTOPILOT_PX4=12,
 MAV_AUTOPILOT_SMACCMPILOT=13,
 MAV_AUTOPILOT_AUTOQUAD=14,
 MAV_AUTOPILOT_ARMAZILA=15,
 MAV_AUTOPILOT_AEROB=16,
 MAV_AUTOPILOT_ASLUAV=17,
 MAV_AUTOPILOT_ENUM_END=18,
} MAV_AUTOPILOT;




#define HAVE_ENUM_MAV_TYPE 
typedef enum MAV_TYPE
{
 MAV_TYPE_GENERIC=0,
 MAV_TYPE_FIXED_WING=1,
 MAV_TYPE_QUADROTOR=2,
 MAV_TYPE_COAXIAL=3,
 MAV_TYPE_HELICOPTER=4,
 MAV_TYPE_ANTENNA_TRACKER=5,
 MAV_TYPE_GCS=6,
 MAV_TYPE_AIRSHIP=7,
 MAV_TYPE_FREE_BALLOON=8,
 MAV_TYPE_ROCKET=9,
 MAV_TYPE_GROUND_ROVER=10,
 MAV_TYPE_SURFACE_BOAT=11,
 MAV_TYPE_SUBMARINE=12,
 MAV_TYPE_HEXAROTOR=13,
 MAV_TYPE_OCTOROTOR=14,
 MAV_TYPE_TRICOPTER=15,
 MAV_TYPE_FLAPPING_WING=16,
 MAV_TYPE_KITE=17,
 MAV_TYPE_ONBOARD_CONTROLLER=18,
 MAV_TYPE_VTOL_DUOROTOR=19,
 MAV_TYPE_VTOL_QUADROTOR=20,
 MAV_TYPE_VTOL_RESERVED1=21,
 MAV_TYPE_VTOL_RESERVED2=22,
 MAV_TYPE_VTOL_RESERVED3=23,
 MAV_TYPE_VTOL_RESERVED4=24,
 MAV_TYPE_VTOL_RESERVED5=25,
 MAV_TYPE_GIMBAL=26,
 MAV_TYPE_ENUM_END=27,
} MAV_TYPE;




#define HAVE_ENUM_MAV_MODE_FLAG 
typedef enum MAV_MODE_FLAG
{
 MAV_MODE_FLAG_CUSTOM_MODE_ENABLED=1,
 MAV_MODE_FLAG_TEST_ENABLED=2,
 MAV_MODE_FLAG_AUTO_ENABLED=4,
 MAV_MODE_FLAG_GUIDED_ENABLED=8,
 MAV_MODE_FLAG_STABILIZE_ENABLED=16,
 MAV_MODE_FLAG_HIL_ENABLED=32,
 MAV_MODE_FLAG_MANUAL_INPUT_ENABLED=64,
 MAV_MODE_FLAG_SAFETY_ARMED=128,
 MAV_MODE_FLAG_ENUM_END=129,
} MAV_MODE_FLAG;




#define HAVE_ENUM_MAV_MODE_FLAG_DECODE_POSITION 
typedef enum MAV_MODE_FLAG_DECODE_POSITION
{
 MAV_MODE_FLAG_DECODE_POSITION_CUSTOM_MODE=1,
 MAV_MODE_FLAG_DECODE_POSITION_TEST=2,
 MAV_MODE_FLAG_DECODE_POSITION_AUTO=4,
 MAV_MODE_FLAG_DECODE_POSITION_GUIDED=8,
 MAV_MODE_FLAG_DECODE_POSITION_STABILIZE=16,
 MAV_MODE_FLAG_DECODE_POSITION_HIL=32,
 MAV_MODE_FLAG_DECODE_POSITION_MANUAL=64,
 MAV_MODE_FLAG_DECODE_POSITION_SAFETY=128,
 MAV_MODE_FLAG_DECODE_POSITION_ENUM_END=129,
} MAV_MODE_FLAG_DECODE_POSITION;




#define HAVE_ENUM_MAV_GOTO 
typedef enum MAV_GOTO
{
 MAV_GOTO_DO_HOLD=0,
 MAV_GOTO_DO_CONTINUE=1,
 MAV_GOTO_HOLD_AT_CURRENT_POSITION=2,
 MAV_GOTO_HOLD_AT_SPECIFIED_POSITION=3,
 MAV_GOTO_ENUM_END=4,
} MAV_GOTO;





#define HAVE_ENUM_MAV_MODE 
typedef enum MAV_MODE
{
 MAV_MODE_PREFLIGHT=0,
 MAV_MODE_MANUAL_DISARMED=64,
 MAV_MODE_TEST_DISARMED=66,
 MAV_MODE_STABILIZE_DISARMED=80,
 MAV_MODE_GUIDED_DISARMED=88,
 MAV_MODE_AUTO_DISARMED=92,
 MAV_MODE_MANUAL_ARMED=192,
 MAV_MODE_TEST_ARMED=194,
 MAV_MODE_STABILIZE_ARMED=208,
 MAV_MODE_GUIDED_ARMED=216,
 MAV_MODE_AUTO_ARMED=220,
 MAV_MODE_ENUM_END=221,
} MAV_MODE;




#define HAVE_ENUM_MAV_STATE 
typedef enum MAV_STATE
{
 MAV_STATE_UNINIT=0,
 MAV_STATE_BOOT=1,
 MAV_STATE_CALIBRATING=2,
 MAV_STATE_STANDBY=3,
 MAV_STATE_ACTIVE=4,
 MAV_STATE_CRITICAL=5,
 MAV_STATE_EMERGENCY=6,
 MAV_STATE_POWEROFF=7,
 MAV_STATE_ENUM_END=8,
} MAV_STATE;




#define HAVE_ENUM_MAV_COMPONENT 
typedef enum MAV_COMPONENT
{
 MAV_COMP_ID_ALL=0,
 MAV_COMP_ID_CAMERA=100,
 MAV_COMP_ID_SERVO1=140,
 MAV_COMP_ID_SERVO2=141,
 MAV_COMP_ID_SERVO3=142,
 MAV_COMP_ID_SERVO4=143,
 MAV_COMP_ID_SERVO5=144,
 MAV_COMP_ID_SERVO6=145,
 MAV_COMP_ID_SERVO7=146,
 MAV_COMP_ID_SERVO8=147,
 MAV_COMP_ID_SERVO9=148,
 MAV_COMP_ID_SERVO10=149,
 MAV_COMP_ID_SERVO11=150,
 MAV_COMP_ID_SERVO12=151,
 MAV_COMP_ID_SERVO13=152,
 MAV_COMP_ID_SERVO14=153,
 MAV_COMP_ID_GIMBAL=154,
 MAV_COMP_ID_MAPPER=180,
 MAV_COMP_ID_MISSIONPLANNER=190,
 MAV_COMP_ID_PATHPLANNER=195,
 MAV_COMP_ID_IMU=200,
 MAV_COMP_ID_IMU_2=201,
 MAV_COMP_ID_IMU_3=202,
 MAV_COMP_ID_GPS=220,
 MAV_COMP_ID_UDP_BRIDGE=240,
 MAV_COMP_ID_UART_BRIDGE=241,
 MAV_COMP_ID_SYSTEM_CONTROL=250,
 MAV_COMPONENT_ENUM_END=251,
} MAV_COMPONENT;




#define HAVE_ENUM_MAV_SYS_STATUS_SENSOR 
typedef enum MAV_SYS_STATUS_SENSOR
{
 MAV_SYS_STATUS_SENSOR_3D_GYRO=1,
 MAV_SYS_STATUS_SENSOR_3D_ACCEL=2,
 MAV_SYS_STATUS_SENSOR_3D_MAG=4,
 MAV_SYS_STATUS_SENSOR_ABSOLUTE_PRESSURE=8,
 MAV_SYS_STATUS_SENSOR_DIFFERENTIAL_PRESSURE=16,
 MAV_SYS_STATUS_SENSOR_GPS=32,
 MAV_SYS_STATUS_SENSOR_OPTICAL_FLOW=64,
 MAV_SYS_STATUS_SENSOR_VISION_POSITION=128,
 MAV_SYS_STATUS_SENSOR_LASER_POSITION=256,
 MAV_SYS_STATUS_SENSOR_EXTERNAL_GROUND_TRUTH=512,
 MAV_SYS_STATUS_SENSOR_ANGULAR_RATE_CONTROL=1024,
 MAV_SYS_STATUS_SENSOR_ATTITUDE_STABILIZATION=2048,
 MAV_SYS_STATUS_SENSOR_YAW_POSITION=4096,
 MAV_SYS_STATUS_SENSOR_Z_ALTITUDE_CONTROL=8192,
 MAV_SYS_STATUS_SENSOR_XY_POSITION_CONTROL=16384,
 MAV_SYS_STATUS_SENSOR_MOTOR_OUTPUTS=32768,
 MAV_SYS_STATUS_SENSOR_RC_RECEIVER=65536,
 MAV_SYS_STATUS_SENSOR_3D_GYRO2=131072,
 MAV_SYS_STATUS_SENSOR_3D_ACCEL2=262144,
 MAV_SYS_STATUS_SENSOR_3D_MAG2=524288,
 MAV_SYS_STATUS_GEOFENCE=1048576,
 MAV_SYS_STATUS_AHRS=2097152,
 MAV_SYS_STATUS_TERRAIN=4194304,
 MAV_SYS_STATUS_SENSOR_ENUM_END=4194305,
} MAV_SYS_STATUS_SENSOR;




#define HAVE_ENUM_MAV_FRAME 
typedef enum MAV_FRAME
{
 MAV_FRAME_GLOBAL=0,
 MAV_FRAME_LOCAL_NED=1,
 MAV_FRAME_MISSION=2,
 MAV_FRAME_GLOBAL_RELATIVE_ALT=3,
 MAV_FRAME_LOCAL_ENU=4,
 MAV_FRAME_GLOBAL_INT=5,
 MAV_FRAME_GLOBAL_RELATIVE_ALT_INT=6,
 MAV_FRAME_LOCAL_OFFSET_NED=7,
 MAV_FRAME_BODY_NED=8,
 MAV_FRAME_BODY_OFFSET_NED=9,
 MAV_FRAME_GLOBAL_TERRAIN_ALT=10,
 MAV_FRAME_GLOBAL_TERRAIN_ALT_INT=11,
 MAV_FRAME_ENUM_END=12,
} MAV_FRAME;




#define HAVE_ENUM_MAVLINK_DATA_STREAM_TYPE 
typedef enum MAVLINK_DATA_STREAM_TYPE
{
 MAVLINK_DATA_STREAM_IMG_JPEG=1,
 MAVLINK_DATA_STREAM_IMG_BMP=2,
 MAVLINK_DATA_STREAM_IMG_RAW8U=3,
 MAVLINK_DATA_STREAM_IMG_RAW32U=4,
 MAVLINK_DATA_STREAM_IMG_PGM=5,
 MAVLINK_DATA_STREAM_IMG_PNG=6,
 MAVLINK_DATA_STREAM_TYPE_ENUM_END=7,
} MAVLINK_DATA_STREAM_TYPE;




#define HAVE_ENUM_FENCE_ACTION 
typedef enum FENCE_ACTION
{
 FENCE_ACTION_NONE=0,
 FENCE_ACTION_GUIDED=1,
 FENCE_ACTION_REPORT=2,
 FENCE_ACTION_GUIDED_THR_PASS=3,
 FENCE_ACTION_ENUM_END=4,
} FENCE_ACTION;




#define HAVE_ENUM_FENCE_BREACH 
typedef enum FENCE_BREACH
{
 FENCE_BREACH_NONE=0,
 FENCE_BREACH_MINALT=1,
 FENCE_BREACH_MAXALT=2,
 FENCE_BREACH_BOUNDARY=3,
 FENCE_BREACH_ENUM_END=4,
} FENCE_BREACH;




#define HAVE_ENUM_MAV_MOUNT_MODE 
typedef enum MAV_MOUNT_MODE
{
 MAV_MOUNT_MODE_RETRACT=0,
 MAV_MOUNT_MODE_NEUTRAL=1,
 MAV_MOUNT_MODE_MAVLINK_TARGETING=2,
 MAV_MOUNT_MODE_RC_TARGETING=3,
 MAV_MOUNT_MODE_GPS_POINT=4,
 MAV_MOUNT_MODE_ENUM_END=5,
} MAV_MOUNT_MODE;




#define HAVE_ENUM_MAV_CMD 
typedef enum MAV_CMD
{
 MAV_CMD_NAV_WAYPOINT=16,
 MAV_CMD_NAV_LOITER_UNLIM=17,
 MAV_CMD_NAV_LOITER_TURNS=18,
 MAV_CMD_NAV_LOITER_TIME=19,
 MAV_CMD_NAV_RETURN_TO_LAUNCH=20,
 MAV_CMD_NAV_LAND=21,
 MAV_CMD_NAV_TAKEOFF=22,
 MAV_CMD_NAV_CONTINUE_AND_CHANGE_ALT=30,
 MAV_CMD_NAV_ROI=80,
 MAV_CMD_NAV_PATHPLANNING=81,
 MAV_CMD_NAV_SPLINE_WAYPOINT=82,
 MAV_CMD_NAV_GUIDED_ENABLE=92,
 MAV_CMD_NAV_LAST=95,
 MAV_CMD_CONDITION_DELAY=112,
 MAV_CMD_CONDITION_CHANGE_ALT=113,
 MAV_CMD_CONDITION_DISTANCE=114,
 MAV_CMD_CONDITION_YAW=115,
 MAV_CMD_CONDITION_LAST=159,
 MAV_CMD_DO_SET_MODE=176,
 MAV_CMD_DO_JUMP=177,
 MAV_CMD_DO_CHANGE_SPEED=178,
 MAV_CMD_DO_SET_HOME=179,
 MAV_CMD_DO_SET_PARAMETER=180,
 MAV_CMD_DO_SET_RELAY=181,
 MAV_CMD_DO_REPEAT_RELAY=182,
 MAV_CMD_DO_SET_SERVO=183,
 MAV_CMD_DO_REPEAT_SERVO=184,
 MAV_CMD_DO_FLIGHTTERMINATION=185,
 MAV_CMD_DO_LAND_START=189,
 MAV_CMD_DO_RALLY_LAND=190,
 MAV_CMD_DO_GO_AROUND=191,
 MAV_CMD_DO_CONTROL_VIDEO=200,
 MAV_CMD_DO_SET_ROI=201,
 MAV_CMD_DO_DIGICAM_CONFIGURE=202,
 MAV_CMD_DO_DIGICAM_CONTROL=203,
 MAV_CMD_DO_MOUNT_CONFIGURE=204,
 MAV_CMD_DO_MOUNT_CONTROL=205,
 MAV_CMD_DO_SET_CAM_TRIGG_DIST=206,
 MAV_CMD_DO_FENCE_ENABLE=207,
 MAV_CMD_DO_PARACHUTE=208,
 MAV_CMD_DO_INVERTED_FLIGHT=210,
 MAV_CMD_DO_MOUNT_CONTROL_QUAT=220,
 MAV_CMD_DO_GUIDED_MASTER=221,
 MAV_CMD_DO_GUIDED_LIMITS=222,
 MAV_CMD_DO_LAST=240,
 MAV_CMD_PREFLIGHT_CALIBRATION=241,
 MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS=242,
 MAV_CMD_PREFLIGHT_STORAGE=245,
 MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN=246,
 MAV_CMD_OVERRIDE_GOTO=252,
 MAV_CMD_MISSION_START=300,
 MAV_CMD_COMPONENT_ARM_DISARM=400,
 MAV_CMD_START_RX_PAIR=500,
 MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES=520,
 MAV_CMD_IMAGE_START_CAPTURE=2000,
 MAV_CMD_IMAGE_STOP_CAPTURE=2001,
 MAV_CMD_DO_TRIGGER_CONTROL=2003,
 MAV_CMD_VIDEO_START_CAPTURE=2500,
 MAV_CMD_VIDEO_STOP_CAPTURE=2501,
 MAV_CMD_PANORAMA_CREATE=2800,
 MAV_CMD_PAYLOAD_PREPARE_DEPLOY=30001,
 MAV_CMD_PAYLOAD_CONTROL_DEPLOY=30002,
 MAV_CMD_ENUM_END=30003,
} MAV_CMD;






#define HAVE_ENUM_MAV_DATA_STREAM 
typedef enum MAV_DATA_STREAM
{
 MAV_DATA_STREAM_ALL=0,
 MAV_DATA_STREAM_RAW_SENSORS=1,
 MAV_DATA_STREAM_EXTENDED_STATUS=2,
 MAV_DATA_STREAM_RC_CHANNELS=3,
 MAV_DATA_STREAM_RAW_CONTROLLER=4,
 MAV_DATA_STREAM_POSITION=6,
 MAV_DATA_STREAM_EXTRA1=10,
 MAV_DATA_STREAM_EXTRA2=11,
 MAV_DATA_STREAM_EXTRA3=12,
 MAV_DATA_STREAM_ENUM_END=13,
} MAV_DATA_STREAM;






#define HAVE_ENUM_MAV_ROI 
typedef enum MAV_ROI
{
 MAV_ROI_NONE=0,
 MAV_ROI_WPNEXT=1,
 MAV_ROI_WPINDEX=2,
 MAV_ROI_LOCATION=3,
 MAV_ROI_TARGET=4,
 MAV_ROI_ENUM_END=5,
} MAV_ROI;




#define HAVE_ENUM_MAV_CMD_ACK 
typedef enum MAV_CMD_ACK
{
 MAV_CMD_ACK_OK=1,
 MAV_CMD_ACK_ERR_FAIL=2,
 MAV_CMD_ACK_ERR_ACCESS_DENIED=3,
 MAV_CMD_ACK_ERR_NOT_SUPPORTED=4,
 MAV_CMD_ACK_ERR_COORDINATE_FRAME_NOT_SUPPORTED=5,
 MAV_CMD_ACK_ERR_COORDINATES_OUT_OF_RANGE=6,
 MAV_CMD_ACK_ERR_X_LAT_OUT_OF_RANGE=7,
 MAV_CMD_ACK_ERR_Y_LON_OUT_OF_RANGE=8,
 MAV_CMD_ACK_ERR_Z_ALT_OUT_OF_RANGE=9,
 MAV_CMD_ACK_ENUM_END=10,
} MAV_CMD_ACK;




#define HAVE_ENUM_MAV_PARAM_TYPE 
typedef enum MAV_PARAM_TYPE
{
 MAV_PARAM_TYPE_UINT8=1,
 MAV_PARAM_TYPE_INT8=2,
 MAV_PARAM_TYPE_UINT16=3,
 MAV_PARAM_TYPE_INT16=4,
 MAV_PARAM_TYPE_UINT32=5,
 MAV_PARAM_TYPE_INT32=6,
 MAV_PARAM_TYPE_UINT64=7,
 MAV_PARAM_TYPE_INT64=8,
 MAV_PARAM_TYPE_REAL32=9,
 MAV_PARAM_TYPE_REAL64=10,
 MAV_PARAM_TYPE_ENUM_END=11,
} MAV_PARAM_TYPE;




#define HAVE_ENUM_MAV_RESULT 
typedef enum MAV_RESULT
{
 MAV_RESULT_ACCEPTED=0,
 MAV_RESULT_TEMPORARILY_REJECTED=1,
 MAV_RESULT_DENIED=2,
 MAV_RESULT_UNSUPPORTED=3,
 MAV_RESULT_FAILED=4,
 MAV_RESULT_ENUM_END=5,
} MAV_RESULT;




#define HAVE_ENUM_MAV_MISSION_RESULT 
typedef enum MAV_MISSION_RESULT
{
 MAV_MISSION_ACCEPTED=0,
 MAV_MISSION_ERROR=1,
 MAV_MISSION_UNSUPPORTED_FRAME=2,
 MAV_MISSION_UNSUPPORTED=3,
 MAV_MISSION_NO_SPACE=4,
 MAV_MISSION_INVALID=5,
 MAV_MISSION_INVALID_PARAM1=6,
 MAV_MISSION_INVALID_PARAM2=7,
 MAV_MISSION_INVALID_PARAM3=8,
 MAV_MISSION_INVALID_PARAM4=9,
 MAV_MISSION_INVALID_PARAM5_X=10,
 MAV_MISSION_INVALID_PARAM6_Y=11,
 MAV_MISSION_INVALID_PARAM7=12,
 MAV_MISSION_INVALID_SEQUENCE=13,
 MAV_MISSION_DENIED=14,
 MAV_MISSION_RESULT_ENUM_END=15,
} MAV_MISSION_RESULT;




#define HAVE_ENUM_MAV_SEVERITY 
typedef enum MAV_SEVERITY
{
 MAV_SEVERITY_EMERGENCY=0,
 MAV_SEVERITY_ALERT=1,
 MAV_SEVERITY_CRITICAL=2,
 MAV_SEVERITY_ERROR=3,
 MAV_SEVERITY_WARNING=4,
 MAV_SEVERITY_NOTICE=5,
 MAV_SEVERITY_INFO=6,
 MAV_SEVERITY_DEBUG=7,
 MAV_SEVERITY_ENUM_END=8,
} MAV_SEVERITY;




#define HAVE_ENUM_MAV_POWER_STATUS 
typedef enum MAV_POWER_STATUS
{
 MAV_POWER_STATUS_BRICK_VALID=1,
 MAV_POWER_STATUS_SERVO_VALID=2,
 MAV_POWER_STATUS_USB_CONNECTED=4,
 MAV_POWER_STATUS_PERIPH_OVERCURRENT=8,
 MAV_POWER_STATUS_PERIPH_HIPOWER_OVERCURRENT=16,
 MAV_POWER_STATUS_CHANGED=32,
 MAV_POWER_STATUS_ENUM_END=33,
} MAV_POWER_STATUS;




#define HAVE_ENUM_SERIAL_CONTROL_DEV 
typedef enum SERIAL_CONTROL_DEV
{
 SERIAL_CONTROL_DEV_TELEM1=0,
 SERIAL_CONTROL_DEV_TELEM2=1,
 SERIAL_CONTROL_DEV_GPS1=2,
 SERIAL_CONTROL_DEV_GPS2=3,
 SERIAL_CONTROL_DEV_ENUM_END=4,
} SERIAL_CONTROL_DEV;




#define HAVE_ENUM_SERIAL_CONTROL_FLAG 
typedef enum SERIAL_CONTROL_FLAG
{
 SERIAL_CONTROL_FLAG_REPLY=1,
 SERIAL_CONTROL_FLAG_RESPOND=2,
 SERIAL_CONTROL_FLAG_EXCLUSIVE=4,
 SERIAL_CONTROL_FLAG_BLOCKING=8,
 SERIAL_CONTROL_FLAG_MULTI=16,
 SERIAL_CONTROL_FLAG_ENUM_END=17,
} SERIAL_CONTROL_FLAG;




#define HAVE_ENUM_MAV_DISTANCE_SENSOR 
typedef enum MAV_DISTANCE_SENSOR
{
 MAV_DISTANCE_SENSOR_LASER=0,
 MAV_DISTANCE_SENSOR_ULTRASOUND=1,
 MAV_DISTANCE_SENSOR_ENUM_END=2,
} MAV_DISTANCE_SENSOR;




#define HAVE_ENUM_MAV_PROTOCOL_CAPABILITY 
typedef enum MAV_PROTOCOL_CAPABILITY
{
 MAV_PROTOCOL_CAPABILITY_MISSION_FLOAT=1,
 MAV_PROTOCOL_CAPABILITY_PARAM_FLOAT=2,
 MAV_PROTOCOL_CAPABILITY_MISSION_INT=4,
 MAV_PROTOCOL_CAPABILITY_COMMAND_INT=8,
 MAV_PROTOCOL_CAPABILITY_PARAM_UNION=16,
 MAV_PROTOCOL_CAPABILITY_FTP=32,
 MAV_PROTOCOL_CAPABILITY_SET_ATTITUDE_TARGET=64,
 MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_LOCAL_NED=128,
 MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_GLOBAL_INT=256,
 MAV_PROTOCOL_CAPABILITY_TERRAIN=512,
 MAV_PROTOCOL_CAPABILITY_SET_ACTUATOR_TARGET=1024,
 MAV_PROTOCOL_CAPABILITY_ENUM_END=1025,
} MAV_PROTOCOL_CAPABILITY;




#define HAVE_ENUM_MAV_ESTIMATOR_TYPE 
typedef enum MAV_ESTIMATOR_TYPE
{
 MAV_ESTIMATOR_TYPE_NAIVE=1,
 MAV_ESTIMATOR_TYPE_VISION=2,
 MAV_ESTIMATOR_TYPE_VIO=3,
 MAV_ESTIMATOR_TYPE_GPS=4,
 MAV_ESTIMATOR_TYPE_GPS_INS=5,
 MAV_ESTIMATOR_TYPE_ENUM_END=6,
} MAV_ESTIMATOR_TYPE;




#define HAVE_ENUM_MAV_BATTERY_TYPE 
typedef enum MAV_BATTERY_TYPE
{
 MAV_BATTERY_TYPE_UNKNOWN=0,
 MAV_BATTERY_TYPE_LIPO=1,
 MAV_BATTERY_TYPE_LIFE=2,
 MAV_BATTERY_TYPE_LION=3,
 MAV_BATTERY_TYPE_NIMH=4,
 MAV_BATTERY_TYPE_ENUM_END=5,
} MAV_BATTERY_TYPE;




#define HAVE_ENUM_MAV_BATTERY_FUNCTION 
typedef enum MAV_BATTERY_FUNCTION
{
 MAV_BATTERY_FUNCTION_UNKNOWN=0,
 MAV_BATTERY_FUNCTION_ALL=1,
 MAV_BATTERY_FUNCTION_PROPULSION=2,
 MAV_BATTERY_FUNCTION_AVIONICS=3,
 MAV_BATTERY_TYPE_PAYLOAD=4,
 MAV_BATTERY_FUNCTION_ENUM_END=5,
} MAV_BATTERY_FUNCTION;







#define MAVLINK_VERSION 3
# 657 "./lib/main/mavlink/common/common.h"
# 1 "./lib/main/mavlink/common/./mavlink_msg_heartbeat.h" 1


#define MAVLINK_MSG_ID_HEARTBEAT 0

typedef struct __mavlink_heartbeat_t
{
 uint32_t custom_mode;
 uint8_t type;
 uint8_t autopilot;
 uint8_t base_mode;
 uint8_t system_status;
 uint8_t mavlink_version;
} mavlink_heartbeat_t;

#define MAVLINK_MSG_ID_HEARTBEAT_LEN 9
#define MAVLINK_MSG_ID_0_LEN 9

#define MAVLINK_MSG_ID_HEARTBEAT_CRC 50
#define MAVLINK_MSG_ID_0_CRC 50



#define MAVLINK_MESSAGE_INFO_HEARTBEAT { "HEARTBEAT", 6, { { "custom_mode", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_heartbeat_t, custom_mode) }, { "type", NULL, MAVLINK_TYPE_UINT8_T, 0, 4, offsetof(mavlink_heartbeat_t, type) }, { "autopilot", NULL, MAVLINK_TYPE_UINT8_T, 0, 5, offsetof(mavlink_heartbeat_t, autopilot) }, { "base_mode", NULL, MAVLINK_TYPE_UINT8_T, 0, 6, offsetof(mavlink_heartbeat_t, base_mode) }, { "system_status", NULL, MAVLINK_TYPE_UINT8_T, 0, 7, offsetof(mavlink_heartbeat_t, system_status) }, { "mavlink_version", NULL, MAVLINK_TYPE_UINT8_T, 0, 8, offsetof(mavlink_heartbeat_t, mavlink_version) }, } }
# 49 "./lib/main/mavlink/common/./mavlink_msg_heartbeat.h"
static inline uint16_t mavlink_msg_heartbeat_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t type, uint8_t autopilot, uint8_t base_mode, uint32_t custom_mode, uint8_t system_status)
{
# 63 "./lib/main/mavlink/common/./mavlink_msg_heartbeat.h"
 mavlink_heartbeat_t packet;
 packet.custom_mode = custom_mode;
 packet.type = type;
 packet.autopilot = autopilot;
 packet.base_mode = base_mode;
 packet.system_status = system_status;
 packet.mavlink_version = 3;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 9);


 msg->msgid = 0;

    return mavlink_finalize_message(msg, system_id, component_id, 9, 50);



}
# 95 "./lib/main/mavlink/common/./mavlink_msg_heartbeat.h"
static inline uint16_t mavlink_msg_heartbeat_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t type,uint8_t autopilot,uint8_t base_mode,uint32_t custom_mode,uint8_t system_status)
{
# 110 "./lib/main/mavlink/common/./mavlink_msg_heartbeat.h"
 mavlink_heartbeat_t packet;
 packet.custom_mode = custom_mode;
 packet.type = type;
 packet.autopilot = autopilot;
 packet.base_mode = base_mode;
 packet.system_status = system_status;
 packet.mavlink_version = 3;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 9);


 msg->msgid = 0;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 9, 50);



}
# 137 "./lib/main/mavlink/common/./mavlink_msg_heartbeat.h"
static inline uint16_t mavlink_msg_heartbeat_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_heartbeat_t* heartbeat)
{
 return mavlink_msg_heartbeat_pack(system_id, component_id, msg, heartbeat->type, heartbeat->autopilot, heartbeat->base_mode, heartbeat->custom_mode, heartbeat->system_status);
}
# 151 "./lib/main/mavlink/common/./mavlink_msg_heartbeat.h"
static inline uint16_t mavlink_msg_heartbeat_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_heartbeat_t* heartbeat)
{
 return mavlink_msg_heartbeat_pack_chan(system_id, component_id, chan, msg, heartbeat->type, heartbeat->autopilot, heartbeat->base_mode, heartbeat->custom_mode, heartbeat->system_status);
}
# 253 "./lib/main/mavlink/common/./mavlink_msg_heartbeat.h"
static inline uint8_t mavlink_msg_heartbeat_get_type(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[4];
}






static inline uint8_t mavlink_msg_heartbeat_get_autopilot(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[5];
}






static inline uint8_t mavlink_msg_heartbeat_get_base_mode(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[6];
}






static inline uint32_t mavlink_msg_heartbeat_get_custom_mode(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_heartbeat_get_system_status(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[7];
}






static inline uint8_t mavlink_msg_heartbeat_get_mavlink_version(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[8];
}







static inline void mavlink_msg_heartbeat_decode(const mavlink_message_t* msg, mavlink_heartbeat_t* heartbeat)
{
# 324 "./lib/main/mavlink/common/./mavlink_msg_heartbeat.h"
 memcpy(heartbeat, ((const char *)(&((msg)->payload64[0]))), 9);

}
# 658 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_sys_status.h" 1


#define MAVLINK_MSG_ID_SYS_STATUS 1

typedef struct __mavlink_sys_status_t
{
 uint32_t onboard_control_sensors_present;
 uint32_t onboard_control_sensors_enabled;
 uint32_t onboard_control_sensors_health;
 uint16_t load;
 uint16_t voltage_battery;
 int16_t current_battery;
 uint16_t drop_rate_comm;
 uint16_t errors_comm;
 uint16_t errors_count1;
 uint16_t errors_count2;
 uint16_t errors_count3;
 uint16_t errors_count4;
 int8_t battery_remaining;
} mavlink_sys_status_t;

#define MAVLINK_MSG_ID_SYS_STATUS_LEN 31
#define MAVLINK_MSG_ID_1_LEN 31

#define MAVLINK_MSG_ID_SYS_STATUS_CRC 124
#define MAVLINK_MSG_ID_1_CRC 124



#define MAVLINK_MESSAGE_INFO_SYS_STATUS { "SYS_STATUS", 13, { { "onboard_control_sensors_present", "0x%04x", MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_sys_status_t, onboard_control_sensors_present) }, { "onboard_control_sensors_enabled", "0x%04x", MAVLINK_TYPE_UINT32_T, 0, 4, offsetof(mavlink_sys_status_t, onboard_control_sensors_enabled) }, { "onboard_control_sensors_health", "0x%04x", MAVLINK_TYPE_UINT32_T, 0, 8, offsetof(mavlink_sys_status_t, onboard_control_sensors_health) }, { "load", NULL, MAVLINK_TYPE_UINT16_T, 0, 12, offsetof(mavlink_sys_status_t, load) }, { "voltage_battery", NULL, MAVLINK_TYPE_UINT16_T, 0, 14, offsetof(mavlink_sys_status_t, voltage_battery) }, { "current_battery", NULL, MAVLINK_TYPE_INT16_T, 0, 16, offsetof(mavlink_sys_status_t, current_battery) }, { "drop_rate_comm", NULL, MAVLINK_TYPE_UINT16_T, 0, 18, offsetof(mavlink_sys_status_t, drop_rate_comm) }, { "errors_comm", NULL, MAVLINK_TYPE_UINT16_T, 0, 20, offsetof(mavlink_sys_status_t, errors_comm) }, { "errors_count1", NULL, MAVLINK_TYPE_UINT16_T, 0, 22, offsetof(mavlink_sys_status_t, errors_count1) }, { "errors_count2", NULL, MAVLINK_TYPE_UINT16_T, 0, 24, offsetof(mavlink_sys_status_t, errors_count2) }, { "errors_count3", NULL, MAVLINK_TYPE_UINT16_T, 0, 26, offsetof(mavlink_sys_status_t, errors_count3) }, { "errors_count4", NULL, MAVLINK_TYPE_UINT16_T, 0, 28, offsetof(mavlink_sys_status_t, errors_count4) }, { "battery_remaining", NULL, MAVLINK_TYPE_INT8_T, 0, 30, offsetof(mavlink_sys_status_t, battery_remaining) }, } }
# 71 "./lib/main/mavlink/common/./mavlink_msg_sys_status.h"
static inline uint16_t mavlink_msg_sys_status_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t onboard_control_sensors_present, uint32_t onboard_control_sensors_enabled, uint32_t onboard_control_sensors_health, uint16_t load, uint16_t voltage_battery, int16_t current_battery, int8_t battery_remaining, uint16_t drop_rate_comm, uint16_t errors_comm, uint16_t errors_count1, uint16_t errors_count2, uint16_t errors_count3, uint16_t errors_count4)
{
# 92 "./lib/main/mavlink/common/./mavlink_msg_sys_status.h"
 mavlink_sys_status_t packet;
 packet.onboard_control_sensors_present = onboard_control_sensors_present;
 packet.onboard_control_sensors_enabled = onboard_control_sensors_enabled;
 packet.onboard_control_sensors_health = onboard_control_sensors_health;
 packet.load = load;
 packet.voltage_battery = voltage_battery;
 packet.current_battery = current_battery;
 packet.drop_rate_comm = drop_rate_comm;
 packet.errors_comm = errors_comm;
 packet.errors_count1 = errors_count1;
 packet.errors_count2 = errors_count2;
 packet.errors_count3 = errors_count3;
 packet.errors_count4 = errors_count4;
 packet.battery_remaining = battery_remaining;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 31);


 msg->msgid = 1;

    return mavlink_finalize_message(msg, system_id, component_id, 31, 124);



}
# 139 "./lib/main/mavlink/common/./mavlink_msg_sys_status.h"
static inline uint16_t mavlink_msg_sys_status_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t onboard_control_sensors_present,uint32_t onboard_control_sensors_enabled,uint32_t onboard_control_sensors_health,uint16_t load,uint16_t voltage_battery,int16_t current_battery,int8_t battery_remaining,uint16_t drop_rate_comm,uint16_t errors_comm,uint16_t errors_count1,uint16_t errors_count2,uint16_t errors_count3,uint16_t errors_count4)
{
# 161 "./lib/main/mavlink/common/./mavlink_msg_sys_status.h"
 mavlink_sys_status_t packet;
 packet.onboard_control_sensors_present = onboard_control_sensors_present;
 packet.onboard_control_sensors_enabled = onboard_control_sensors_enabled;
 packet.onboard_control_sensors_health = onboard_control_sensors_health;
 packet.load = load;
 packet.voltage_battery = voltage_battery;
 packet.current_battery = current_battery;
 packet.drop_rate_comm = drop_rate_comm;
 packet.errors_comm = errors_comm;
 packet.errors_count1 = errors_count1;
 packet.errors_count2 = errors_count2;
 packet.errors_count3 = errors_count3;
 packet.errors_count4 = errors_count4;
 packet.battery_remaining = battery_remaining;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 31);


 msg->msgid = 1;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 31, 124);



}
# 195 "./lib/main/mavlink/common/./mavlink_msg_sys_status.h"
static inline uint16_t mavlink_msg_sys_status_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_sys_status_t* sys_status)
{
 return mavlink_msg_sys_status_pack(system_id, component_id, msg, sys_status->onboard_control_sensors_present, sys_status->onboard_control_sensors_enabled, sys_status->onboard_control_sensors_health, sys_status->load, sys_status->voltage_battery, sys_status->current_battery, sys_status->battery_remaining, sys_status->drop_rate_comm, sys_status->errors_comm, sys_status->errors_count1, sys_status->errors_count2, sys_status->errors_count3, sys_status->errors_count4);
}
# 209 "./lib/main/mavlink/common/./mavlink_msg_sys_status.h"
static inline uint16_t mavlink_msg_sys_status_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_sys_status_t* sys_status)
{
 return mavlink_msg_sys_status_pack_chan(system_id, component_id, chan, msg, sys_status->onboard_control_sensors_present, sys_status->onboard_control_sensors_enabled, sys_status->onboard_control_sensors_health, sys_status->load, sys_status->voltage_battery, sys_status->current_battery, sys_status->battery_remaining, sys_status->drop_rate_comm, sys_status->errors_comm, sys_status->errors_count1, sys_status->errors_count2, sys_status->errors_count3, sys_status->errors_count4);
}
# 347 "./lib/main/mavlink/common/./mavlink_msg_sys_status.h"
static inline uint32_t mavlink_msg_sys_status_get_onboard_control_sensors_present(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint32_t mavlink_msg_sys_status_get_onboard_control_sensors_enabled(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 4);
}






static inline uint32_t mavlink_msg_sys_status_get_onboard_control_sensors_health(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 8);
}






static inline uint16_t mavlink_msg_sys_status_get_load(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 12);
}






static inline uint16_t mavlink_msg_sys_status_get_voltage_battery(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 14);
}






static inline int16_t mavlink_msg_sys_status_get_current_battery(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 16);
}






static inline int8_t mavlink_msg_sys_status_get_battery_remaining(const mavlink_message_t* msg)
{
 return (const int8_t)((const char *)(&((msg)->payload64[0])))[30];
}






static inline uint16_t mavlink_msg_sys_status_get_drop_rate_comm(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 18);
}






static inline uint16_t mavlink_msg_sys_status_get_errors_comm(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 20);
}






static inline uint16_t mavlink_msg_sys_status_get_errors_count1(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 22);
}






static inline uint16_t mavlink_msg_sys_status_get_errors_count2(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 24);
}






static inline uint16_t mavlink_msg_sys_status_get_errors_count3(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 26);
}






static inline uint16_t mavlink_msg_sys_status_get_errors_count4(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 28);
}







static inline void mavlink_msg_sys_status_decode(const mavlink_message_t* msg, mavlink_sys_status_t* sys_status)
{
# 495 "./lib/main/mavlink/common/./mavlink_msg_sys_status.h"
 memcpy(sys_status, ((const char *)(&((msg)->payload64[0]))), 31);

}
# 659 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_system_time.h" 1


#define MAVLINK_MSG_ID_SYSTEM_TIME 2

typedef struct __mavlink_system_time_t
{
 uint64_t time_unix_usec;
 uint32_t time_boot_ms;
} mavlink_system_time_t;

#define MAVLINK_MSG_ID_SYSTEM_TIME_LEN 12
#define MAVLINK_MSG_ID_2_LEN 12

#define MAVLINK_MSG_ID_SYSTEM_TIME_CRC 137
#define MAVLINK_MSG_ID_2_CRC 137



#define MAVLINK_MESSAGE_INFO_SYSTEM_TIME { "SYSTEM_TIME", 2, { { "time_unix_usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_system_time_t, time_unix_usec) }, { "time_boot_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 8, offsetof(mavlink_system_time_t, time_boot_ms) }, } }
# 38 "./lib/main/mavlink/common/./mavlink_msg_system_time.h"
static inline uint16_t mavlink_msg_system_time_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint64_t time_unix_usec, uint32_t time_boot_ms)
{







 mavlink_system_time_t packet;
 packet.time_unix_usec = time_unix_usec;
 packet.time_boot_ms = time_boot_ms;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 12);


 msg->msgid = 2;

    return mavlink_finalize_message(msg, system_id, component_id, 12, 137);



}
# 73 "./lib/main/mavlink/common/./mavlink_msg_system_time.h"
static inline uint16_t mavlink_msg_system_time_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint64_t time_unix_usec,uint32_t time_boot_ms)
{







 mavlink_system_time_t packet;
 packet.time_unix_usec = time_unix_usec;
 packet.time_boot_ms = time_boot_ms;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 12);


 msg->msgid = 2;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 12, 137);



}
# 107 "./lib/main/mavlink/common/./mavlink_msg_system_time.h"
static inline uint16_t mavlink_msg_system_time_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_system_time_t* system_time)
{
 return mavlink_msg_system_time_pack(system_id, component_id, msg, system_time->time_unix_usec, system_time->time_boot_ms);
}
# 121 "./lib/main/mavlink/common/./mavlink_msg_system_time.h"
static inline uint16_t mavlink_msg_system_time_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_system_time_t* system_time)
{
 return mavlink_msg_system_time_pack_chan(system_id, component_id, chan, msg, system_time->time_unix_usec, system_time->time_boot_ms);
}
# 204 "./lib/main/mavlink/common/./mavlink_msg_system_time.h"
static inline uint64_t mavlink_msg_system_time_get_time_unix_usec(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint32_t mavlink_msg_system_time_get_time_boot_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 8);
}







static inline void mavlink_msg_system_time_decode(const mavlink_message_t* msg, mavlink_system_time_t* system_time)
{




 memcpy(system_time, ((const char *)(&((msg)->payload64[0]))), 12);

}
# 660 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_ping.h" 1


#define MAVLINK_MSG_ID_PING 4

typedef struct __mavlink_ping_t
{
 uint64_t time_usec;
 uint32_t seq;
 uint8_t target_system;
 uint8_t target_component;
} mavlink_ping_t;

#define MAVLINK_MSG_ID_PING_LEN 14
#define MAVLINK_MSG_ID_4_LEN 14

#define MAVLINK_MSG_ID_PING_CRC 237
#define MAVLINK_MSG_ID_4_CRC 237



#define MAVLINK_MESSAGE_INFO_PING { "PING", 4, { { "time_usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_ping_t, time_usec) }, { "seq", NULL, MAVLINK_TYPE_UINT32_T, 0, 8, offsetof(mavlink_ping_t, seq) }, { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 12, offsetof(mavlink_ping_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 13, offsetof(mavlink_ping_t, target_component) }, } }
# 44 "./lib/main/mavlink/common/./mavlink_msg_ping.h"
static inline uint16_t mavlink_msg_ping_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint64_t time_usec, uint32_t seq, uint8_t target_system, uint8_t target_component)
{
# 56 "./lib/main/mavlink/common/./mavlink_msg_ping.h"
 mavlink_ping_t packet;
 packet.time_usec = time_usec;
 packet.seq = seq;
 packet.target_system = target_system;
 packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 14);


 msg->msgid = 4;

    return mavlink_finalize_message(msg, system_id, component_id, 14, 237);



}
# 85 "./lib/main/mavlink/common/./mavlink_msg_ping.h"
static inline uint16_t mavlink_msg_ping_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint64_t time_usec,uint32_t seq,uint8_t target_system,uint8_t target_component)
{
# 98 "./lib/main/mavlink/common/./mavlink_msg_ping.h"
 mavlink_ping_t packet;
 packet.time_usec = time_usec;
 packet.seq = seq;
 packet.target_system = target_system;
 packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 14);


 msg->msgid = 4;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 14, 237);



}
# 123 "./lib/main/mavlink/common/./mavlink_msg_ping.h"
static inline uint16_t mavlink_msg_ping_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_ping_t* ping)
{
 return mavlink_msg_ping_pack(system_id, component_id, msg, ping->time_usec, ping->seq, ping->target_system, ping->target_component);
}
# 137 "./lib/main/mavlink/common/./mavlink_msg_ping.h"
static inline uint16_t mavlink_msg_ping_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_ping_t* ping)
{
 return mavlink_msg_ping_pack_chan(system_id, component_id, chan, msg, ping->time_usec, ping->seq, ping->target_system, ping->target_component);
}
# 230 "./lib/main/mavlink/common/./mavlink_msg_ping.h"
static inline uint64_t mavlink_msg_ping_get_time_usec(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint32_t mavlink_msg_ping_get_seq(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 8);
}






static inline uint8_t mavlink_msg_ping_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[12];
}






static inline uint8_t mavlink_msg_ping_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[13];
}







static inline void mavlink_msg_ping_decode(const mavlink_message_t* msg, mavlink_ping_t* ping)
{






 memcpy(ping, ((const char *)(&((msg)->payload64[0]))), 14);

}
# 661 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_change_operator_control.h" 1


#define MAVLINK_MSG_ID_CHANGE_OPERATOR_CONTROL 5

typedef struct __mavlink_change_operator_control_t
{
 uint8_t target_system;
 uint8_t control_request;
 uint8_t version;
 char passkey[25];
} mavlink_change_operator_control_t;

#define MAVLINK_MSG_ID_CHANGE_OPERATOR_CONTROL_LEN 28
#define MAVLINK_MSG_ID_5_LEN 28

#define MAVLINK_MSG_ID_CHANGE_OPERATOR_CONTROL_CRC 217
#define MAVLINK_MSG_ID_5_CRC 217

#define MAVLINK_MSG_CHANGE_OPERATOR_CONTROL_FIELD_PASSKEY_LEN 25

#define MAVLINK_MESSAGE_INFO_CHANGE_OPERATOR_CONTROL { "CHANGE_OPERATOR_CONTROL", 4, { { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 0, offsetof(mavlink_change_operator_control_t, target_system) }, { "control_request", NULL, MAVLINK_TYPE_UINT8_T, 0, 1, offsetof(mavlink_change_operator_control_t, control_request) }, { "version", NULL, MAVLINK_TYPE_UINT8_T, 0, 2, offsetof(mavlink_change_operator_control_t, version) }, { "passkey", NULL, MAVLINK_TYPE_CHAR, 25, 3, offsetof(mavlink_change_operator_control_t, passkey) }, } }
# 44 "./lib/main/mavlink/common/./mavlink_msg_change_operator_control.h"
static inline uint16_t mavlink_msg_change_operator_control_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_system, uint8_t control_request, uint8_t version, const char *passkey)
{
# 55 "./lib/main/mavlink/common/./mavlink_msg_change_operator_control.h"
 mavlink_change_operator_control_t packet;
 packet.target_system = target_system;
 packet.control_request = control_request;
 packet.version = version;
 mav_array_memcpy(packet.passkey, passkey, sizeof(char)*25);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 28);


 msg->msgid = 5;

    return mavlink_finalize_message(msg, system_id, component_id, 28, 217);



}
# 83 "./lib/main/mavlink/common/./mavlink_msg_change_operator_control.h"
static inline uint16_t mavlink_msg_change_operator_control_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_system,uint8_t control_request,uint8_t version,const char *passkey)
{
# 95 "./lib/main/mavlink/common/./mavlink_msg_change_operator_control.h"
 mavlink_change_operator_control_t packet;
 packet.target_system = target_system;
 packet.control_request = control_request;
 packet.version = version;
 mav_array_memcpy(packet.passkey, passkey, sizeof(char)*25);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 28);


 msg->msgid = 5;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 28, 217);



}
# 119 "./lib/main/mavlink/common/./mavlink_msg_change_operator_control.h"
static inline uint16_t mavlink_msg_change_operator_control_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_change_operator_control_t* change_operator_control)
{
 return mavlink_msg_change_operator_control_pack(system_id, component_id, msg, change_operator_control->target_system, change_operator_control->control_request, change_operator_control->version, change_operator_control->passkey);
}
# 133 "./lib/main/mavlink/common/./mavlink_msg_change_operator_control.h"
static inline uint16_t mavlink_msg_change_operator_control_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_change_operator_control_t* change_operator_control)
{
 return mavlink_msg_change_operator_control_pack_chan(system_id, component_id, chan, msg, change_operator_control->target_system, change_operator_control->control_request, change_operator_control->version, change_operator_control->passkey);
}
# 222 "./lib/main/mavlink/common/./mavlink_msg_change_operator_control.h"
static inline uint8_t mavlink_msg_change_operator_control_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_change_operator_control_get_control_request(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}






static inline uint8_t mavlink_msg_change_operator_control_get_version(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}






static inline uint16_t mavlink_msg_change_operator_control_get_passkey(const mavlink_message_t* msg, char *passkey)
{
 return _MAV_RETURN_char_array(msg, passkey, 25, 3);
}







static inline void mavlink_msg_change_operator_control_decode(const mavlink_message_t* msg, mavlink_change_operator_control_t* change_operator_control)
{






 memcpy(change_operator_control, ((const char *)(&((msg)->payload64[0]))), 28);

}
# 662 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_change_operator_control_ack.h" 1


#define MAVLINK_MSG_ID_CHANGE_OPERATOR_CONTROL_ACK 6

typedef struct __mavlink_change_operator_control_ack_t
{
 uint8_t gcs_system_id;
 uint8_t control_request;
 uint8_t ack;
} mavlink_change_operator_control_ack_t;

#define MAVLINK_MSG_ID_CHANGE_OPERATOR_CONTROL_ACK_LEN 3
#define MAVLINK_MSG_ID_6_LEN 3

#define MAVLINK_MSG_ID_CHANGE_OPERATOR_CONTROL_ACK_CRC 104
#define MAVLINK_MSG_ID_6_CRC 104



#define MAVLINK_MESSAGE_INFO_CHANGE_OPERATOR_CONTROL_ACK { "CHANGE_OPERATOR_CONTROL_ACK", 3, { { "gcs_system_id", NULL, MAVLINK_TYPE_UINT8_T, 0, 0, offsetof(mavlink_change_operator_control_ack_t, gcs_system_id) }, { "control_request", NULL, MAVLINK_TYPE_UINT8_T, 0, 1, offsetof(mavlink_change_operator_control_ack_t, control_request) }, { "ack", NULL, MAVLINK_TYPE_UINT8_T, 0, 2, offsetof(mavlink_change_operator_control_ack_t, ack) }, } }
# 41 "./lib/main/mavlink/common/./mavlink_msg_change_operator_control_ack.h"
static inline uint16_t mavlink_msg_change_operator_control_ack_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t gcs_system_id, uint8_t control_request, uint8_t ack)
{
# 52 "./lib/main/mavlink/common/./mavlink_msg_change_operator_control_ack.h"
 mavlink_change_operator_control_ack_t packet;
 packet.gcs_system_id = gcs_system_id;
 packet.control_request = control_request;
 packet.ack = ack;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 3);


 msg->msgid = 6;

    return mavlink_finalize_message(msg, system_id, component_id, 3, 104);



}
# 79 "./lib/main/mavlink/common/./mavlink_msg_change_operator_control_ack.h"
static inline uint16_t mavlink_msg_change_operator_control_ack_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t gcs_system_id,uint8_t control_request,uint8_t ack)
{
# 91 "./lib/main/mavlink/common/./mavlink_msg_change_operator_control_ack.h"
 mavlink_change_operator_control_ack_t packet;
 packet.gcs_system_id = gcs_system_id;
 packet.control_request = control_request;
 packet.ack = ack;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 3);


 msg->msgid = 6;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 3, 104);



}
# 115 "./lib/main/mavlink/common/./mavlink_msg_change_operator_control_ack.h"
static inline uint16_t mavlink_msg_change_operator_control_ack_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_change_operator_control_ack_t* change_operator_control_ack)
{
 return mavlink_msg_change_operator_control_ack_pack(system_id, component_id, msg, change_operator_control_ack->gcs_system_id, change_operator_control_ack->control_request, change_operator_control_ack->ack);
}
# 129 "./lib/main/mavlink/common/./mavlink_msg_change_operator_control_ack.h"
static inline uint16_t mavlink_msg_change_operator_control_ack_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_change_operator_control_ack_t* change_operator_control_ack)
{
 return mavlink_msg_change_operator_control_ack_pack_chan(system_id, component_id, chan, msg, change_operator_control_ack->gcs_system_id, change_operator_control_ack->control_request, change_operator_control_ack->ack);
}
# 217 "./lib/main/mavlink/common/./mavlink_msg_change_operator_control_ack.h"
static inline uint8_t mavlink_msg_change_operator_control_ack_get_gcs_system_id(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_change_operator_control_ack_get_control_request(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}






static inline uint8_t mavlink_msg_change_operator_control_ack_get_ack(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}







static inline void mavlink_msg_change_operator_control_ack_decode(const mavlink_message_t* msg, mavlink_change_operator_control_ack_t* change_operator_control_ack)
{





 memcpy(change_operator_control_ack, ((const char *)(&((msg)->payload64[0]))), 3);

}
# 663 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_auth_key.h" 1


#define MAVLINK_MSG_ID_AUTH_KEY 7

typedef struct __mavlink_auth_key_t
{
 char key[32];
} mavlink_auth_key_t;

#define MAVLINK_MSG_ID_AUTH_KEY_LEN 32
#define MAVLINK_MSG_ID_7_LEN 32

#define MAVLINK_MSG_ID_AUTH_KEY_CRC 119
#define MAVLINK_MSG_ID_7_CRC 119

#define MAVLINK_MSG_AUTH_KEY_FIELD_KEY_LEN 32

#define MAVLINK_MESSAGE_INFO_AUTH_KEY { "AUTH_KEY", 1, { { "key", NULL, MAVLINK_TYPE_CHAR, 32, 0, offsetof(mavlink_auth_key_t, key) }, } }
# 35 "./lib/main/mavlink/common/./mavlink_msg_auth_key.h"
static inline uint16_t mavlink_msg_auth_key_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             const char *key)
{






 mavlink_auth_key_t packet;

 mav_array_memcpy(packet.key, key, sizeof(char)*32);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 32);


 msg->msgid = 7;

    return mavlink_finalize_message(msg, system_id, component_id, 32, 119);



}
# 67 "./lib/main/mavlink/common/./mavlink_msg_auth_key.h"
static inline uint16_t mavlink_msg_auth_key_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 const char *key)
{






 mavlink_auth_key_t packet;

 mav_array_memcpy(packet.key, key, sizeof(char)*32);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 32);


 msg->msgid = 7;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 32, 119);



}
# 99 "./lib/main/mavlink/common/./mavlink_msg_auth_key.h"
static inline uint16_t mavlink_msg_auth_key_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_auth_key_t* auth_key)
{
 return mavlink_msg_auth_key_pack(system_id, component_id, msg, auth_key->key);
}
# 113 "./lib/main/mavlink/common/./mavlink_msg_auth_key.h"
static inline uint16_t mavlink_msg_auth_key_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_auth_key_t* auth_key)
{
 return mavlink_msg_auth_key_pack_chan(system_id, component_id, chan, msg, auth_key->key);
}
# 191 "./lib/main/mavlink/common/./mavlink_msg_auth_key.h"
static inline uint16_t mavlink_msg_auth_key_get_key(const mavlink_message_t* msg, char *key)
{
 return _MAV_RETURN_char_array(msg, key, 32, 0);
}







static inline void mavlink_msg_auth_key_decode(const mavlink_message_t* msg, mavlink_auth_key_t* auth_key)
{



 memcpy(auth_key, ((const char *)(&((msg)->payload64[0]))), 32);

}
# 664 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_set_mode.h" 1


#define MAVLINK_MSG_ID_SET_MODE 11

typedef struct __mavlink_set_mode_t
{
 uint32_t custom_mode;
 uint8_t target_system;
 uint8_t base_mode;
} mavlink_set_mode_t;

#define MAVLINK_MSG_ID_SET_MODE_LEN 6
#define MAVLINK_MSG_ID_11_LEN 6

#define MAVLINK_MSG_ID_SET_MODE_CRC 89
#define MAVLINK_MSG_ID_11_CRC 89



#define MAVLINK_MESSAGE_INFO_SET_MODE { "SET_MODE", 3, { { "custom_mode", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_set_mode_t, custom_mode) }, { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 4, offsetof(mavlink_set_mode_t, target_system) }, { "base_mode", NULL, MAVLINK_TYPE_UINT8_T, 0, 5, offsetof(mavlink_set_mode_t, base_mode) }, } }
# 41 "./lib/main/mavlink/common/./mavlink_msg_set_mode.h"
static inline uint16_t mavlink_msg_set_mode_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_system, uint8_t base_mode, uint32_t custom_mode)
{
# 52 "./lib/main/mavlink/common/./mavlink_msg_set_mode.h"
 mavlink_set_mode_t packet;
 packet.custom_mode = custom_mode;
 packet.target_system = target_system;
 packet.base_mode = base_mode;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 6);


 msg->msgid = 11;

    return mavlink_finalize_message(msg, system_id, component_id, 6, 89);



}
# 79 "./lib/main/mavlink/common/./mavlink_msg_set_mode.h"
static inline uint16_t mavlink_msg_set_mode_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_system,uint8_t base_mode,uint32_t custom_mode)
{
# 91 "./lib/main/mavlink/common/./mavlink_msg_set_mode.h"
 mavlink_set_mode_t packet;
 packet.custom_mode = custom_mode;
 packet.target_system = target_system;
 packet.base_mode = base_mode;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 6);


 msg->msgid = 11;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 6, 89);



}
# 115 "./lib/main/mavlink/common/./mavlink_msg_set_mode.h"
static inline uint16_t mavlink_msg_set_mode_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_set_mode_t* set_mode)
{
 return mavlink_msg_set_mode_pack(system_id, component_id, msg, set_mode->target_system, set_mode->base_mode, set_mode->custom_mode);
}
# 129 "./lib/main/mavlink/common/./mavlink_msg_set_mode.h"
static inline uint16_t mavlink_msg_set_mode_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_set_mode_t* set_mode)
{
 return mavlink_msg_set_mode_pack_chan(system_id, component_id, chan, msg, set_mode->target_system, set_mode->base_mode, set_mode->custom_mode);
}
# 217 "./lib/main/mavlink/common/./mavlink_msg_set_mode.h"
static inline uint8_t mavlink_msg_set_mode_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[4];
}






static inline uint8_t mavlink_msg_set_mode_get_base_mode(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[5];
}






static inline uint32_t mavlink_msg_set_mode_get_custom_mode(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}







static inline void mavlink_msg_set_mode_decode(const mavlink_message_t* msg, mavlink_set_mode_t* set_mode)
{





 memcpy(set_mode, ((const char *)(&((msg)->payload64[0]))), 6);

}
# 665 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_param_request_read.h" 1


#define MAVLINK_MSG_ID_PARAM_REQUEST_READ 20

typedef struct __mavlink_param_request_read_t
{
 int16_t param_index;
 uint8_t target_system;
 uint8_t target_component;
 char param_id[16];
} mavlink_param_request_read_t;

#define MAVLINK_MSG_ID_PARAM_REQUEST_READ_LEN 20
#define MAVLINK_MSG_ID_20_LEN 20

#define MAVLINK_MSG_ID_PARAM_REQUEST_READ_CRC 214
#define MAVLINK_MSG_ID_20_CRC 214

#define MAVLINK_MSG_PARAM_REQUEST_READ_FIELD_PARAM_ID_LEN 16

#define MAVLINK_MESSAGE_INFO_PARAM_REQUEST_READ { "PARAM_REQUEST_READ", 4, { { "param_index", NULL, MAVLINK_TYPE_INT16_T, 0, 0, offsetof(mavlink_param_request_read_t, param_index) }, { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 2, offsetof(mavlink_param_request_read_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 3, offsetof(mavlink_param_request_read_t, target_component) }, { "param_id", NULL, MAVLINK_TYPE_CHAR, 16, 4, offsetof(mavlink_param_request_read_t, param_id) }, } }
# 44 "./lib/main/mavlink/common/./mavlink_msg_param_request_read.h"
static inline uint16_t mavlink_msg_param_request_read_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_system, uint8_t target_component, const char *param_id, int16_t param_index)
{
# 55 "./lib/main/mavlink/common/./mavlink_msg_param_request_read.h"
 mavlink_param_request_read_t packet;
 packet.param_index = param_index;
 packet.target_system = target_system;
 packet.target_component = target_component;
 mav_array_memcpy(packet.param_id, param_id, sizeof(char)*16);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 20);


 msg->msgid = 20;

    return mavlink_finalize_message(msg, system_id, component_id, 20, 214);



}
# 83 "./lib/main/mavlink/common/./mavlink_msg_param_request_read.h"
static inline uint16_t mavlink_msg_param_request_read_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_system,uint8_t target_component,const char *param_id,int16_t param_index)
{
# 95 "./lib/main/mavlink/common/./mavlink_msg_param_request_read.h"
 mavlink_param_request_read_t packet;
 packet.param_index = param_index;
 packet.target_system = target_system;
 packet.target_component = target_component;
 mav_array_memcpy(packet.param_id, param_id, sizeof(char)*16);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 20);


 msg->msgid = 20;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 20, 214);



}
# 119 "./lib/main/mavlink/common/./mavlink_msg_param_request_read.h"
static inline uint16_t mavlink_msg_param_request_read_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_param_request_read_t* param_request_read)
{
 return mavlink_msg_param_request_read_pack(system_id, component_id, msg, param_request_read->target_system, param_request_read->target_component, param_request_read->param_id, param_request_read->param_index);
}
# 133 "./lib/main/mavlink/common/./mavlink_msg_param_request_read.h"
static inline uint16_t mavlink_msg_param_request_read_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_param_request_read_t* param_request_read)
{
 return mavlink_msg_param_request_read_pack_chan(system_id, component_id, chan, msg, param_request_read->target_system, param_request_read->target_component, param_request_read->param_id, param_request_read->param_index);
}
# 222 "./lib/main/mavlink/common/./mavlink_msg_param_request_read.h"
static inline uint8_t mavlink_msg_param_request_read_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}






static inline uint8_t mavlink_msg_param_request_read_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[3];
}






static inline uint16_t mavlink_msg_param_request_read_get_param_id(const mavlink_message_t* msg, char *param_id)
{
 return _MAV_RETURN_char_array(msg, param_id, 16, 4);
}






static inline int16_t mavlink_msg_param_request_read_get_param_index(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 0);
}







static inline void mavlink_msg_param_request_read_decode(const mavlink_message_t* msg, mavlink_param_request_read_t* param_request_read)
{






 memcpy(param_request_read, ((const char *)(&((msg)->payload64[0]))), 20);

}
# 666 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_param_request_list.h" 1


#define MAVLINK_MSG_ID_PARAM_REQUEST_LIST 21

typedef struct __mavlink_param_request_list_t
{
 uint8_t target_system;
 uint8_t target_component;
} mavlink_param_request_list_t;

#define MAVLINK_MSG_ID_PARAM_REQUEST_LIST_LEN 2
#define MAVLINK_MSG_ID_21_LEN 2

#define MAVLINK_MSG_ID_PARAM_REQUEST_LIST_CRC 159
#define MAVLINK_MSG_ID_21_CRC 159



#define MAVLINK_MESSAGE_INFO_PARAM_REQUEST_LIST { "PARAM_REQUEST_LIST", 2, { { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 0, offsetof(mavlink_param_request_list_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 1, offsetof(mavlink_param_request_list_t, target_component) }, } }
# 38 "./lib/main/mavlink/common/./mavlink_msg_param_request_list.h"
static inline uint16_t mavlink_msg_param_request_list_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_system, uint8_t target_component)
{







 mavlink_param_request_list_t packet;
 packet.target_system = target_system;
 packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


 msg->msgid = 21;

    return mavlink_finalize_message(msg, system_id, component_id, 2, 159);



}
# 73 "./lib/main/mavlink/common/./mavlink_msg_param_request_list.h"
static inline uint16_t mavlink_msg_param_request_list_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_system,uint8_t target_component)
{







 mavlink_param_request_list_t packet;
 packet.target_system = target_system;
 packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


 msg->msgid = 21;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 2, 159);



}
# 107 "./lib/main/mavlink/common/./mavlink_msg_param_request_list.h"
static inline uint16_t mavlink_msg_param_request_list_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_param_request_list_t* param_request_list)
{
 return mavlink_msg_param_request_list_pack(system_id, component_id, msg, param_request_list->target_system, param_request_list->target_component);
}
# 121 "./lib/main/mavlink/common/./mavlink_msg_param_request_list.h"
static inline uint16_t mavlink_msg_param_request_list_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_param_request_list_t* param_request_list)
{
 return mavlink_msg_param_request_list_pack_chan(system_id, component_id, chan, msg, param_request_list->target_system, param_request_list->target_component);
}
# 204 "./lib/main/mavlink/common/./mavlink_msg_param_request_list.h"
static inline uint8_t mavlink_msg_param_request_list_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_param_request_list_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}







static inline void mavlink_msg_param_request_list_decode(const mavlink_message_t* msg, mavlink_param_request_list_t* param_request_list)
{




 memcpy(param_request_list, ((const char *)(&((msg)->payload64[0]))), 2);

}
# 667 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_param_value.h" 1


#define MAVLINK_MSG_ID_PARAM_VALUE 22

typedef struct __mavlink_param_value_t
{
 float param_value;
 uint16_t param_count;
 uint16_t param_index;
 char param_id[16];
 uint8_t param_type;
} mavlink_param_value_t;

#define MAVLINK_MSG_ID_PARAM_VALUE_LEN 25
#define MAVLINK_MSG_ID_22_LEN 25

#define MAVLINK_MSG_ID_PARAM_VALUE_CRC 220
#define MAVLINK_MSG_ID_22_CRC 220

#define MAVLINK_MSG_PARAM_VALUE_FIELD_PARAM_ID_LEN 16

#define MAVLINK_MESSAGE_INFO_PARAM_VALUE { "PARAM_VALUE", 5, { { "param_value", NULL, MAVLINK_TYPE_FLOAT, 0, 0, offsetof(mavlink_param_value_t, param_value) }, { "param_count", NULL, MAVLINK_TYPE_UINT16_T, 0, 4, offsetof(mavlink_param_value_t, param_count) }, { "param_index", NULL, MAVLINK_TYPE_UINT16_T, 0, 6, offsetof(mavlink_param_value_t, param_index) }, { "param_id", NULL, MAVLINK_TYPE_CHAR, 16, 8, offsetof(mavlink_param_value_t, param_id) }, { "param_type", NULL, MAVLINK_TYPE_UINT8_T, 0, 24, offsetof(mavlink_param_value_t, param_type) }, } }
# 47 "./lib/main/mavlink/common/./mavlink_msg_param_value.h"
static inline uint16_t mavlink_msg_param_value_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             const char *param_id, float param_value, uint8_t param_type, uint16_t param_count, uint16_t param_index)
{
# 59 "./lib/main/mavlink/common/./mavlink_msg_param_value.h"
 mavlink_param_value_t packet;
 packet.param_value = param_value;
 packet.param_count = param_count;
 packet.param_index = param_index;
 packet.param_type = param_type;
 mav_array_memcpy(packet.param_id, param_id, sizeof(char)*16);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 25);


 msg->msgid = 22;

    return mavlink_finalize_message(msg, system_id, component_id, 25, 220);



}
# 89 "./lib/main/mavlink/common/./mavlink_msg_param_value.h"
static inline uint16_t mavlink_msg_param_value_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 const char *param_id,float param_value,uint8_t param_type,uint16_t param_count,uint16_t param_index)
{
# 102 "./lib/main/mavlink/common/./mavlink_msg_param_value.h"
 mavlink_param_value_t packet;
 packet.param_value = param_value;
 packet.param_count = param_count;
 packet.param_index = param_index;
 packet.param_type = param_type;
 mav_array_memcpy(packet.param_id, param_id, sizeof(char)*16);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 25);


 msg->msgid = 22;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 25, 220);



}
# 127 "./lib/main/mavlink/common/./mavlink_msg_param_value.h"
static inline uint16_t mavlink_msg_param_value_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_param_value_t* param_value)
{
 return mavlink_msg_param_value_pack(system_id, component_id, msg, param_value->param_id, param_value->param_value, param_value->param_type, param_value->param_count, param_value->param_index);
}
# 141 "./lib/main/mavlink/common/./mavlink_msg_param_value.h"
static inline uint16_t mavlink_msg_param_value_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_param_value_t* param_value)
{
 return mavlink_msg_param_value_pack_chan(system_id, component_id, chan, msg, param_value->param_id, param_value->param_value, param_value->param_type, param_value->param_count, param_value->param_index);
}
# 235 "./lib/main/mavlink/common/./mavlink_msg_param_value.h"
static inline uint16_t mavlink_msg_param_value_get_param_id(const mavlink_message_t* msg, char *param_id)
{
 return _MAV_RETURN_char_array(msg, param_id, 16, 8);
}






static inline float mavlink_msg_param_value_get_param_value(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 0);
}






static inline uint8_t mavlink_msg_param_value_get_param_type(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[24];
}






static inline uint16_t mavlink_msg_param_value_get_param_count(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 4);
}






static inline uint16_t mavlink_msg_param_value_get_param_index(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 6);
}







static inline void mavlink_msg_param_value_decode(const mavlink_message_t* msg, mavlink_param_value_t* param_value)
{







 memcpy(param_value, ((const char *)(&((msg)->payload64[0]))), 25);

}
# 668 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_param_set.h" 1


#define MAVLINK_MSG_ID_PARAM_SET 23

typedef struct __mavlink_param_set_t
{
 float param_value;
 uint8_t target_system;
 uint8_t target_component;
 char param_id[16];
 uint8_t param_type;
} mavlink_param_set_t;

#define MAVLINK_MSG_ID_PARAM_SET_LEN 23
#define MAVLINK_MSG_ID_23_LEN 23

#define MAVLINK_MSG_ID_PARAM_SET_CRC 168
#define MAVLINK_MSG_ID_23_CRC 168

#define MAVLINK_MSG_PARAM_SET_FIELD_PARAM_ID_LEN 16

#define MAVLINK_MESSAGE_INFO_PARAM_SET { "PARAM_SET", 5, { { "param_value", NULL, MAVLINK_TYPE_FLOAT, 0, 0, offsetof(mavlink_param_set_t, param_value) }, { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 4, offsetof(mavlink_param_set_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 5, offsetof(mavlink_param_set_t, target_component) }, { "param_id", NULL, MAVLINK_TYPE_CHAR, 16, 6, offsetof(mavlink_param_set_t, param_id) }, { "param_type", NULL, MAVLINK_TYPE_UINT8_T, 0, 22, offsetof(mavlink_param_set_t, param_type) }, } }
# 47 "./lib/main/mavlink/common/./mavlink_msg_param_set.h"
static inline uint16_t mavlink_msg_param_set_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_system, uint8_t target_component, const char *param_id, float param_value, uint8_t param_type)
{
# 59 "./lib/main/mavlink/common/./mavlink_msg_param_set.h"
 mavlink_param_set_t packet;
 packet.param_value = param_value;
 packet.target_system = target_system;
 packet.target_component = target_component;
 packet.param_type = param_type;
 mav_array_memcpy(packet.param_id, param_id, sizeof(char)*16);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 23);


 msg->msgid = 23;

    return mavlink_finalize_message(msg, system_id, component_id, 23, 168);



}
# 89 "./lib/main/mavlink/common/./mavlink_msg_param_set.h"
static inline uint16_t mavlink_msg_param_set_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_system,uint8_t target_component,const char *param_id,float param_value,uint8_t param_type)
{
# 102 "./lib/main/mavlink/common/./mavlink_msg_param_set.h"
 mavlink_param_set_t packet;
 packet.param_value = param_value;
 packet.target_system = target_system;
 packet.target_component = target_component;
 packet.param_type = param_type;
 mav_array_memcpy(packet.param_id, param_id, sizeof(char)*16);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 23);


 msg->msgid = 23;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 23, 168);



}
# 127 "./lib/main/mavlink/common/./mavlink_msg_param_set.h"
static inline uint16_t mavlink_msg_param_set_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_param_set_t* param_set)
{
 return mavlink_msg_param_set_pack(system_id, component_id, msg, param_set->target_system, param_set->target_component, param_set->param_id, param_set->param_value, param_set->param_type);
}
# 141 "./lib/main/mavlink/common/./mavlink_msg_param_set.h"
static inline uint16_t mavlink_msg_param_set_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_param_set_t* param_set)
{
 return mavlink_msg_param_set_pack_chan(system_id, component_id, chan, msg, param_set->target_system, param_set->target_component, param_set->param_id, param_set->param_value, param_set->param_type);
}
# 235 "./lib/main/mavlink/common/./mavlink_msg_param_set.h"
static inline uint8_t mavlink_msg_param_set_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[4];
}






static inline uint8_t mavlink_msg_param_set_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[5];
}






static inline uint16_t mavlink_msg_param_set_get_param_id(const mavlink_message_t* msg, char *param_id)
{
 return _MAV_RETURN_char_array(msg, param_id, 16, 6);
}






static inline float mavlink_msg_param_set_get_param_value(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 0);
}






static inline uint8_t mavlink_msg_param_set_get_param_type(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[22];
}







static inline void mavlink_msg_param_set_decode(const mavlink_message_t* msg, mavlink_param_set_t* param_set)
{







 memcpy(param_set, ((const char *)(&((msg)->payload64[0]))), 23);

}
# 669 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_gps_raw_int.h" 1


#define MAVLINK_MSG_ID_GPS_RAW_INT 24

typedef struct __mavlink_gps_raw_int_t
{
 uint64_t time_usec;
 int32_t lat;
 int32_t lon;
 int32_t alt;
 uint16_t eph;
 uint16_t epv;
 uint16_t vel;
 uint16_t cog;
 uint8_t fix_type;
 uint8_t satellites_visible;
} mavlink_gps_raw_int_t;

#define MAVLINK_MSG_ID_GPS_RAW_INT_LEN 30
#define MAVLINK_MSG_ID_24_LEN 30

#define MAVLINK_MSG_ID_GPS_RAW_INT_CRC 24
#define MAVLINK_MSG_ID_24_CRC 24



#define MAVLINK_MESSAGE_INFO_GPS_RAW_INT { "GPS_RAW_INT", 10, { { "time_usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_gps_raw_int_t, time_usec) }, { "lat", NULL, MAVLINK_TYPE_INT32_T, 0, 8, offsetof(mavlink_gps_raw_int_t, lat) }, { "lon", NULL, MAVLINK_TYPE_INT32_T, 0, 12, offsetof(mavlink_gps_raw_int_t, lon) }, { "alt", NULL, MAVLINK_TYPE_INT32_T, 0, 16, offsetof(mavlink_gps_raw_int_t, alt) }, { "eph", NULL, MAVLINK_TYPE_UINT16_T, 0, 20, offsetof(mavlink_gps_raw_int_t, eph) }, { "epv", NULL, MAVLINK_TYPE_UINT16_T, 0, 22, offsetof(mavlink_gps_raw_int_t, epv) }, { "vel", NULL, MAVLINK_TYPE_UINT16_T, 0, 24, offsetof(mavlink_gps_raw_int_t, vel) }, { "cog", NULL, MAVLINK_TYPE_UINT16_T, 0, 26, offsetof(mavlink_gps_raw_int_t, cog) }, { "fix_type", NULL, MAVLINK_TYPE_UINT8_T, 0, 28, offsetof(mavlink_gps_raw_int_t, fix_type) }, { "satellites_visible", NULL, MAVLINK_TYPE_UINT8_T, 0, 29, offsetof(mavlink_gps_raw_int_t, satellites_visible) }, } }
# 62 "./lib/main/mavlink/common/./mavlink_msg_gps_raw_int.h"
static inline uint16_t mavlink_msg_gps_raw_int_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint64_t time_usec, uint8_t fix_type, int32_t lat, int32_t lon, int32_t alt, uint16_t eph, uint16_t epv, uint16_t vel, uint16_t cog, uint8_t satellites_visible)
{
# 80 "./lib/main/mavlink/common/./mavlink_msg_gps_raw_int.h"
 mavlink_gps_raw_int_t packet;
 packet.time_usec = time_usec;
 packet.lat = lat;
 packet.lon = lon;
 packet.alt = alt;
 packet.eph = eph;
 packet.epv = epv;
 packet.vel = vel;
 packet.cog = cog;
 packet.fix_type = fix_type;
 packet.satellites_visible = satellites_visible;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 30);


 msg->msgid = 24;

    return mavlink_finalize_message(msg, system_id, component_id, 30, 24);



}
# 121 "./lib/main/mavlink/common/./mavlink_msg_gps_raw_int.h"
static inline uint16_t mavlink_msg_gps_raw_int_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint64_t time_usec,uint8_t fix_type,int32_t lat,int32_t lon,int32_t alt,uint16_t eph,uint16_t epv,uint16_t vel,uint16_t cog,uint8_t satellites_visible)
{
# 140 "./lib/main/mavlink/common/./mavlink_msg_gps_raw_int.h"
 mavlink_gps_raw_int_t packet;
 packet.time_usec = time_usec;
 packet.lat = lat;
 packet.lon = lon;
 packet.alt = alt;
 packet.eph = eph;
 packet.epv = epv;
 packet.vel = vel;
 packet.cog = cog;
 packet.fix_type = fix_type;
 packet.satellites_visible = satellites_visible;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 30);


 msg->msgid = 24;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 30, 24);



}
# 171 "./lib/main/mavlink/common/./mavlink_msg_gps_raw_int.h"
static inline uint16_t mavlink_msg_gps_raw_int_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_gps_raw_int_t* gps_raw_int)
{
 return mavlink_msg_gps_raw_int_pack(system_id, component_id, msg, gps_raw_int->time_usec, gps_raw_int->fix_type, gps_raw_int->lat, gps_raw_int->lon, gps_raw_int->alt, gps_raw_int->eph, gps_raw_int->epv, gps_raw_int->vel, gps_raw_int->cog, gps_raw_int->satellites_visible);
}
# 185 "./lib/main/mavlink/common/./mavlink_msg_gps_raw_int.h"
static inline uint16_t mavlink_msg_gps_raw_int_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_gps_raw_int_t* gps_raw_int)
{
 return mavlink_msg_gps_raw_int_pack_chan(system_id, component_id, chan, msg, gps_raw_int->time_usec, gps_raw_int->fix_type, gps_raw_int->lat, gps_raw_int->lon, gps_raw_int->alt, gps_raw_int->eph, gps_raw_int->epv, gps_raw_int->vel, gps_raw_int->cog, gps_raw_int->satellites_visible);
}
# 308 "./lib/main/mavlink/common/./mavlink_msg_gps_raw_int.h"
static inline uint64_t mavlink_msg_gps_raw_int_get_time_usec(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint8_t mavlink_msg_gps_raw_int_get_fix_type(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[28];
}






static inline int32_t mavlink_msg_gps_raw_int_get_lat(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 8);
}






static inline int32_t mavlink_msg_gps_raw_int_get_lon(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 12);
}






static inline int32_t mavlink_msg_gps_raw_int_get_alt(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 16);
}






static inline uint16_t mavlink_msg_gps_raw_int_get_eph(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 20);
}






static inline uint16_t mavlink_msg_gps_raw_int_get_epv(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 22);
}






static inline uint16_t mavlink_msg_gps_raw_int_get_vel(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 24);
}






static inline uint16_t mavlink_msg_gps_raw_int_get_cog(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 26);
}






static inline uint8_t mavlink_msg_gps_raw_int_get_satellites_visible(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[29];
}







static inline void mavlink_msg_gps_raw_int_decode(const mavlink_message_t* msg, mavlink_gps_raw_int_t* gps_raw_int)
{
# 423 "./lib/main/mavlink/common/./mavlink_msg_gps_raw_int.h"
 memcpy(gps_raw_int, ((const char *)(&((msg)->payload64[0]))), 30);

}
# 670 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_gps_status.h" 1


#define MAVLINK_MSG_ID_GPS_STATUS 25

typedef struct __mavlink_gps_status_t
{
 uint8_t satellites_visible;
 uint8_t satellite_prn[20];
 uint8_t satellite_used[20];
 uint8_t satellite_elevation[20];
 uint8_t satellite_azimuth[20];
 uint8_t satellite_snr[20];
} mavlink_gps_status_t;

#define MAVLINK_MSG_ID_GPS_STATUS_LEN 101
#define MAVLINK_MSG_ID_25_LEN 101

#define MAVLINK_MSG_ID_GPS_STATUS_CRC 23
#define MAVLINK_MSG_ID_25_CRC 23

#define MAVLINK_MSG_GPS_STATUS_FIELD_SATELLITE_PRN_LEN 20
#define MAVLINK_MSG_GPS_STATUS_FIELD_SATELLITE_USED_LEN 20
#define MAVLINK_MSG_GPS_STATUS_FIELD_SATELLITE_ELEVATION_LEN 20
#define MAVLINK_MSG_GPS_STATUS_FIELD_SATELLITE_AZIMUTH_LEN 20
#define MAVLINK_MSG_GPS_STATUS_FIELD_SATELLITE_SNR_LEN 20

#define MAVLINK_MESSAGE_INFO_GPS_STATUS { "GPS_STATUS", 6, { { "satellites_visible", NULL, MAVLINK_TYPE_UINT8_T, 0, 0, offsetof(mavlink_gps_status_t, satellites_visible) }, { "satellite_prn", NULL, MAVLINK_TYPE_UINT8_T, 20, 1, offsetof(mavlink_gps_status_t, satellite_prn) }, { "satellite_used", NULL, MAVLINK_TYPE_UINT8_T, 20, 21, offsetof(mavlink_gps_status_t, satellite_used) }, { "satellite_elevation", NULL, MAVLINK_TYPE_UINT8_T, 20, 41, offsetof(mavlink_gps_status_t, satellite_elevation) }, { "satellite_azimuth", NULL, MAVLINK_TYPE_UINT8_T, 20, 61, offsetof(mavlink_gps_status_t, satellite_azimuth) }, { "satellite_snr", NULL, MAVLINK_TYPE_UINT8_T, 20, 81, offsetof(mavlink_gps_status_t, satellite_snr) }, } }
# 54 "./lib/main/mavlink/common/./mavlink_msg_gps_status.h"
static inline uint16_t mavlink_msg_gps_status_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t satellites_visible, const uint8_t *satellite_prn, const uint8_t *satellite_used, const uint8_t *satellite_elevation, const uint8_t *satellite_azimuth, const uint8_t *satellite_snr)
{
# 67 "./lib/main/mavlink/common/./mavlink_msg_gps_status.h"
 mavlink_gps_status_t packet;
 packet.satellites_visible = satellites_visible;
 mav_array_memcpy(packet.satellite_prn, satellite_prn, sizeof(uint8_t)*20);
 mav_array_memcpy(packet.satellite_used, satellite_used, sizeof(uint8_t)*20);
 mav_array_memcpy(packet.satellite_elevation, satellite_elevation, sizeof(uint8_t)*20);
 mav_array_memcpy(packet.satellite_azimuth, satellite_azimuth, sizeof(uint8_t)*20);
 mav_array_memcpy(packet.satellite_snr, satellite_snr, sizeof(uint8_t)*20);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 101);


 msg->msgid = 25;

    return mavlink_finalize_message(msg, system_id, component_id, 101, 23);



}
# 99 "./lib/main/mavlink/common/./mavlink_msg_gps_status.h"
static inline uint16_t mavlink_msg_gps_status_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t satellites_visible,const uint8_t *satellite_prn,const uint8_t *satellite_used,const uint8_t *satellite_elevation,const uint8_t *satellite_azimuth,const uint8_t *satellite_snr)
{
# 113 "./lib/main/mavlink/common/./mavlink_msg_gps_status.h"
 mavlink_gps_status_t packet;
 packet.satellites_visible = satellites_visible;
 mav_array_memcpy(packet.satellite_prn, satellite_prn, sizeof(uint8_t)*20);
 mav_array_memcpy(packet.satellite_used, satellite_used, sizeof(uint8_t)*20);
 mav_array_memcpy(packet.satellite_elevation, satellite_elevation, sizeof(uint8_t)*20);
 mav_array_memcpy(packet.satellite_azimuth, satellite_azimuth, sizeof(uint8_t)*20);
 mav_array_memcpy(packet.satellite_snr, satellite_snr, sizeof(uint8_t)*20);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 101);


 msg->msgid = 25;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 101, 23);



}
# 139 "./lib/main/mavlink/common/./mavlink_msg_gps_status.h"
static inline uint16_t mavlink_msg_gps_status_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_gps_status_t* gps_status)
{
 return mavlink_msg_gps_status_pack(system_id, component_id, msg, gps_status->satellites_visible, gps_status->satellite_prn, gps_status->satellite_used, gps_status->satellite_elevation, gps_status->satellite_azimuth, gps_status->satellite_snr);
}
# 153 "./lib/main/mavlink/common/./mavlink_msg_gps_status.h"
static inline uint16_t mavlink_msg_gps_status_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_gps_status_t* gps_status)
{
 return mavlink_msg_gps_status_pack_chan(system_id, component_id, chan, msg, gps_status->satellites_visible, gps_status->satellite_prn, gps_status->satellite_used, gps_status->satellite_elevation, gps_status->satellite_azimuth, gps_status->satellite_snr);
}
# 252 "./lib/main/mavlink/common/./mavlink_msg_gps_status.h"
static inline uint8_t mavlink_msg_gps_status_get_satellites_visible(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint16_t mavlink_msg_gps_status_get_satellite_prn(const mavlink_message_t* msg, uint8_t *satellite_prn)
{
 return _MAV_RETURN_uint8_t_array(msg, satellite_prn, 20, 1);
}






static inline uint16_t mavlink_msg_gps_status_get_satellite_used(const mavlink_message_t* msg, uint8_t *satellite_used)
{
 return _MAV_RETURN_uint8_t_array(msg, satellite_used, 20, 21);
}






static inline uint16_t mavlink_msg_gps_status_get_satellite_elevation(const mavlink_message_t* msg, uint8_t *satellite_elevation)
{
 return _MAV_RETURN_uint8_t_array(msg, satellite_elevation, 20, 41);
}






static inline uint16_t mavlink_msg_gps_status_get_satellite_azimuth(const mavlink_message_t* msg, uint8_t *satellite_azimuth)
{
 return _MAV_RETURN_uint8_t_array(msg, satellite_azimuth, 20, 61);
}






static inline uint16_t mavlink_msg_gps_status_get_satellite_snr(const mavlink_message_t* msg, uint8_t *satellite_snr)
{
 return _MAV_RETURN_uint8_t_array(msg, satellite_snr, 20, 81);
}







static inline void mavlink_msg_gps_status_decode(const mavlink_message_t* msg, mavlink_gps_status_t* gps_status)
{
# 323 "./lib/main/mavlink/common/./mavlink_msg_gps_status.h"
 memcpy(gps_status, ((const char *)(&((msg)->payload64[0]))), 101);

}
# 671 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_scaled_imu.h" 1


#define MAVLINK_MSG_ID_SCALED_IMU 26

typedef struct __mavlink_scaled_imu_t
{
 uint32_t time_boot_ms;
 int16_t xacc;
 int16_t yacc;
 int16_t zacc;
 int16_t xgyro;
 int16_t ygyro;
 int16_t zgyro;
 int16_t xmag;
 int16_t ymag;
 int16_t zmag;
} mavlink_scaled_imu_t;

#define MAVLINK_MSG_ID_SCALED_IMU_LEN 22
#define MAVLINK_MSG_ID_26_LEN 22

#define MAVLINK_MSG_ID_SCALED_IMU_CRC 170
#define MAVLINK_MSG_ID_26_CRC 170



#define MAVLINK_MESSAGE_INFO_SCALED_IMU { "SCALED_IMU", 10, { { "time_boot_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_scaled_imu_t, time_boot_ms) }, { "xacc", NULL, MAVLINK_TYPE_INT16_T, 0, 4, offsetof(mavlink_scaled_imu_t, xacc) }, { "yacc", NULL, MAVLINK_TYPE_INT16_T, 0, 6, offsetof(mavlink_scaled_imu_t, yacc) }, { "zacc", NULL, MAVLINK_TYPE_INT16_T, 0, 8, offsetof(mavlink_scaled_imu_t, zacc) }, { "xgyro", NULL, MAVLINK_TYPE_INT16_T, 0, 10, offsetof(mavlink_scaled_imu_t, xgyro) }, { "ygyro", NULL, MAVLINK_TYPE_INT16_T, 0, 12, offsetof(mavlink_scaled_imu_t, ygyro) }, { "zgyro", NULL, MAVLINK_TYPE_INT16_T, 0, 14, offsetof(mavlink_scaled_imu_t, zgyro) }, { "xmag", NULL, MAVLINK_TYPE_INT16_T, 0, 16, offsetof(mavlink_scaled_imu_t, xmag) }, { "ymag", NULL, MAVLINK_TYPE_INT16_T, 0, 18, offsetof(mavlink_scaled_imu_t, ymag) }, { "zmag", NULL, MAVLINK_TYPE_INT16_T, 0, 20, offsetof(mavlink_scaled_imu_t, zmag) }, } }
# 62 "./lib/main/mavlink/common/./mavlink_msg_scaled_imu.h"
static inline uint16_t mavlink_msg_scaled_imu_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_boot_ms, int16_t xacc, int16_t yacc, int16_t zacc, int16_t xgyro, int16_t ygyro, int16_t zgyro, int16_t xmag, int16_t ymag, int16_t zmag)
{
# 80 "./lib/main/mavlink/common/./mavlink_msg_scaled_imu.h"
 mavlink_scaled_imu_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.xacc = xacc;
 packet.yacc = yacc;
 packet.zacc = zacc;
 packet.xgyro = xgyro;
 packet.ygyro = ygyro;
 packet.zgyro = zgyro;
 packet.xmag = xmag;
 packet.ymag = ymag;
 packet.zmag = zmag;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


 msg->msgid = 26;

    return mavlink_finalize_message(msg, system_id, component_id, 22, 170);



}
# 121 "./lib/main/mavlink/common/./mavlink_msg_scaled_imu.h"
static inline uint16_t mavlink_msg_scaled_imu_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_boot_ms,int16_t xacc,int16_t yacc,int16_t zacc,int16_t xgyro,int16_t ygyro,int16_t zgyro,int16_t xmag,int16_t ymag,int16_t zmag)
{
# 140 "./lib/main/mavlink/common/./mavlink_msg_scaled_imu.h"
 mavlink_scaled_imu_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.xacc = xacc;
 packet.yacc = yacc;
 packet.zacc = zacc;
 packet.xgyro = xgyro;
 packet.ygyro = ygyro;
 packet.zgyro = zgyro;
 packet.xmag = xmag;
 packet.ymag = ymag;
 packet.zmag = zmag;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


 msg->msgid = 26;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 22, 170);



}
# 171 "./lib/main/mavlink/common/./mavlink_msg_scaled_imu.h"
static inline uint16_t mavlink_msg_scaled_imu_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_scaled_imu_t* scaled_imu)
{
 return mavlink_msg_scaled_imu_pack(system_id, component_id, msg, scaled_imu->time_boot_ms, scaled_imu->xacc, scaled_imu->yacc, scaled_imu->zacc, scaled_imu->xgyro, scaled_imu->ygyro, scaled_imu->zgyro, scaled_imu->xmag, scaled_imu->ymag, scaled_imu->zmag);
}
# 185 "./lib/main/mavlink/common/./mavlink_msg_scaled_imu.h"
static inline uint16_t mavlink_msg_scaled_imu_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_scaled_imu_t* scaled_imu)
{
 return mavlink_msg_scaled_imu_pack_chan(system_id, component_id, chan, msg, scaled_imu->time_boot_ms, scaled_imu->xacc, scaled_imu->yacc, scaled_imu->zacc, scaled_imu->xgyro, scaled_imu->ygyro, scaled_imu->zgyro, scaled_imu->xmag, scaled_imu->ymag, scaled_imu->zmag);
}
# 308 "./lib/main/mavlink/common/./mavlink_msg_scaled_imu.h"
static inline uint32_t mavlink_msg_scaled_imu_get_time_boot_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline int16_t mavlink_msg_scaled_imu_get_xacc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 4);
}






static inline int16_t mavlink_msg_scaled_imu_get_yacc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 6);
}






static inline int16_t mavlink_msg_scaled_imu_get_zacc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 8);
}






static inline int16_t mavlink_msg_scaled_imu_get_xgyro(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 10);
}






static inline int16_t mavlink_msg_scaled_imu_get_ygyro(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 12);
}






static inline int16_t mavlink_msg_scaled_imu_get_zgyro(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 14);
}






static inline int16_t mavlink_msg_scaled_imu_get_xmag(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 16);
}






static inline int16_t mavlink_msg_scaled_imu_get_ymag(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 18);
}






static inline int16_t mavlink_msg_scaled_imu_get_zmag(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 20);
}







static inline void mavlink_msg_scaled_imu_decode(const mavlink_message_t* msg, mavlink_scaled_imu_t* scaled_imu)
{
# 423 "./lib/main/mavlink/common/./mavlink_msg_scaled_imu.h"
 memcpy(scaled_imu, ((const char *)(&((msg)->payload64[0]))), 22);

}
# 672 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_raw_imu.h" 1


#define MAVLINK_MSG_ID_RAW_IMU 27

typedef struct __mavlink_raw_imu_t
{
 uint64_t time_usec;
 int16_t xacc;
 int16_t yacc;
 int16_t zacc;
 int16_t xgyro;
 int16_t ygyro;
 int16_t zgyro;
 int16_t xmag;
 int16_t ymag;
 int16_t zmag;
} mavlink_raw_imu_t;

#define MAVLINK_MSG_ID_RAW_IMU_LEN 26
#define MAVLINK_MSG_ID_27_LEN 26

#define MAVLINK_MSG_ID_RAW_IMU_CRC 144
#define MAVLINK_MSG_ID_27_CRC 144



#define MAVLINK_MESSAGE_INFO_RAW_IMU { "RAW_IMU", 10, { { "time_usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_raw_imu_t, time_usec) }, { "xacc", NULL, MAVLINK_TYPE_INT16_T, 0, 8, offsetof(mavlink_raw_imu_t, xacc) }, { "yacc", NULL, MAVLINK_TYPE_INT16_T, 0, 10, offsetof(mavlink_raw_imu_t, yacc) }, { "zacc", NULL, MAVLINK_TYPE_INT16_T, 0, 12, offsetof(mavlink_raw_imu_t, zacc) }, { "xgyro", NULL, MAVLINK_TYPE_INT16_T, 0, 14, offsetof(mavlink_raw_imu_t, xgyro) }, { "ygyro", NULL, MAVLINK_TYPE_INT16_T, 0, 16, offsetof(mavlink_raw_imu_t, ygyro) }, { "zgyro", NULL, MAVLINK_TYPE_INT16_T, 0, 18, offsetof(mavlink_raw_imu_t, zgyro) }, { "xmag", NULL, MAVLINK_TYPE_INT16_T, 0, 20, offsetof(mavlink_raw_imu_t, xmag) }, { "ymag", NULL, MAVLINK_TYPE_INT16_T, 0, 22, offsetof(mavlink_raw_imu_t, ymag) }, { "zmag", NULL, MAVLINK_TYPE_INT16_T, 0, 24, offsetof(mavlink_raw_imu_t, zmag) }, } }
# 62 "./lib/main/mavlink/common/./mavlink_msg_raw_imu.h"
static inline uint16_t mavlink_msg_raw_imu_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint64_t time_usec, int16_t xacc, int16_t yacc, int16_t zacc, int16_t xgyro, int16_t ygyro, int16_t zgyro, int16_t xmag, int16_t ymag, int16_t zmag)
{
# 80 "./lib/main/mavlink/common/./mavlink_msg_raw_imu.h"
 mavlink_raw_imu_t packet;
 packet.time_usec = time_usec;
 packet.xacc = xacc;
 packet.yacc = yacc;
 packet.zacc = zacc;
 packet.xgyro = xgyro;
 packet.ygyro = ygyro;
 packet.zgyro = zgyro;
 packet.xmag = xmag;
 packet.ymag = ymag;
 packet.zmag = zmag;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 26);


 msg->msgid = 27;

    return mavlink_finalize_message(msg, system_id, component_id, 26, 144);



}
# 121 "./lib/main/mavlink/common/./mavlink_msg_raw_imu.h"
static inline uint16_t mavlink_msg_raw_imu_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint64_t time_usec,int16_t xacc,int16_t yacc,int16_t zacc,int16_t xgyro,int16_t ygyro,int16_t zgyro,int16_t xmag,int16_t ymag,int16_t zmag)
{
# 140 "./lib/main/mavlink/common/./mavlink_msg_raw_imu.h"
 mavlink_raw_imu_t packet;
 packet.time_usec = time_usec;
 packet.xacc = xacc;
 packet.yacc = yacc;
 packet.zacc = zacc;
 packet.xgyro = xgyro;
 packet.ygyro = ygyro;
 packet.zgyro = zgyro;
 packet.xmag = xmag;
 packet.ymag = ymag;
 packet.zmag = zmag;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 26);


 msg->msgid = 27;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 26, 144);



}
# 171 "./lib/main/mavlink/common/./mavlink_msg_raw_imu.h"
static inline uint16_t mavlink_msg_raw_imu_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_raw_imu_t* raw_imu)
{
 return mavlink_msg_raw_imu_pack(system_id, component_id, msg, raw_imu->time_usec, raw_imu->xacc, raw_imu->yacc, raw_imu->zacc, raw_imu->xgyro, raw_imu->ygyro, raw_imu->zgyro, raw_imu->xmag, raw_imu->ymag, raw_imu->zmag);
}
# 185 "./lib/main/mavlink/common/./mavlink_msg_raw_imu.h"
static inline uint16_t mavlink_msg_raw_imu_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_raw_imu_t* raw_imu)
{
 return mavlink_msg_raw_imu_pack_chan(system_id, component_id, chan, msg, raw_imu->time_usec, raw_imu->xacc, raw_imu->yacc, raw_imu->zacc, raw_imu->xgyro, raw_imu->ygyro, raw_imu->zgyro, raw_imu->xmag, raw_imu->ymag, raw_imu->zmag);
}
# 308 "./lib/main/mavlink/common/./mavlink_msg_raw_imu.h"
static inline uint64_t mavlink_msg_raw_imu_get_time_usec(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}






static inline int16_t mavlink_msg_raw_imu_get_xacc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 8);
}






static inline int16_t mavlink_msg_raw_imu_get_yacc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 10);
}






static inline int16_t mavlink_msg_raw_imu_get_zacc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 12);
}






static inline int16_t mavlink_msg_raw_imu_get_xgyro(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 14);
}






static inline int16_t mavlink_msg_raw_imu_get_ygyro(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 16);
}






static inline int16_t mavlink_msg_raw_imu_get_zgyro(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 18);
}






static inline int16_t mavlink_msg_raw_imu_get_xmag(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 20);
}






static inline int16_t mavlink_msg_raw_imu_get_ymag(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 22);
}






static inline int16_t mavlink_msg_raw_imu_get_zmag(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 24);
}







static inline void mavlink_msg_raw_imu_decode(const mavlink_message_t* msg, mavlink_raw_imu_t* raw_imu)
{
# 423 "./lib/main/mavlink/common/./mavlink_msg_raw_imu.h"
 memcpy(raw_imu, ((const char *)(&((msg)->payload64[0]))), 26);

}
# 673 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_raw_pressure.h" 1


#define MAVLINK_MSG_ID_RAW_PRESSURE 28

typedef struct __mavlink_raw_pressure_t
{
 uint64_t time_usec;
 int16_t press_abs;
 int16_t press_diff1;
 int16_t press_diff2;
 int16_t temperature;
} mavlink_raw_pressure_t;

#define MAVLINK_MSG_ID_RAW_PRESSURE_LEN 16
#define MAVLINK_MSG_ID_28_LEN 16

#define MAVLINK_MSG_ID_RAW_PRESSURE_CRC 67
#define MAVLINK_MSG_ID_28_CRC 67



#define MAVLINK_MESSAGE_INFO_RAW_PRESSURE { "RAW_PRESSURE", 5, { { "time_usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_raw_pressure_t, time_usec) }, { "press_abs", NULL, MAVLINK_TYPE_INT16_T, 0, 8, offsetof(mavlink_raw_pressure_t, press_abs) }, { "press_diff1", NULL, MAVLINK_TYPE_INT16_T, 0, 10, offsetof(mavlink_raw_pressure_t, press_diff1) }, { "press_diff2", NULL, MAVLINK_TYPE_INT16_T, 0, 12, offsetof(mavlink_raw_pressure_t, press_diff2) }, { "temperature", NULL, MAVLINK_TYPE_INT16_T, 0, 14, offsetof(mavlink_raw_pressure_t, temperature) }, } }
# 47 "./lib/main/mavlink/common/./mavlink_msg_raw_pressure.h"
static inline uint16_t mavlink_msg_raw_pressure_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint64_t time_usec, int16_t press_abs, int16_t press_diff1, int16_t press_diff2, int16_t temperature)
{
# 60 "./lib/main/mavlink/common/./mavlink_msg_raw_pressure.h"
 mavlink_raw_pressure_t packet;
 packet.time_usec = time_usec;
 packet.press_abs = press_abs;
 packet.press_diff1 = press_diff1;
 packet.press_diff2 = press_diff2;
 packet.temperature = temperature;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 16);


 msg->msgid = 28;

    return mavlink_finalize_message(msg, system_id, component_id, 16, 67);



}
# 91 "./lib/main/mavlink/common/./mavlink_msg_raw_pressure.h"
static inline uint16_t mavlink_msg_raw_pressure_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint64_t time_usec,int16_t press_abs,int16_t press_diff1,int16_t press_diff2,int16_t temperature)
{
# 105 "./lib/main/mavlink/common/./mavlink_msg_raw_pressure.h"
 mavlink_raw_pressure_t packet;
 packet.time_usec = time_usec;
 packet.press_abs = press_abs;
 packet.press_diff1 = press_diff1;
 packet.press_diff2 = press_diff2;
 packet.temperature = temperature;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 16);


 msg->msgid = 28;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 16, 67);



}
# 131 "./lib/main/mavlink/common/./mavlink_msg_raw_pressure.h"
static inline uint16_t mavlink_msg_raw_pressure_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_raw_pressure_t* raw_pressure)
{
 return mavlink_msg_raw_pressure_pack(system_id, component_id, msg, raw_pressure->time_usec, raw_pressure->press_abs, raw_pressure->press_diff1, raw_pressure->press_diff2, raw_pressure->temperature);
}
# 145 "./lib/main/mavlink/common/./mavlink_msg_raw_pressure.h"
static inline uint16_t mavlink_msg_raw_pressure_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_raw_pressure_t* raw_pressure)
{
 return mavlink_msg_raw_pressure_pack_chan(system_id, component_id, chan, msg, raw_pressure->time_usec, raw_pressure->press_abs, raw_pressure->press_diff1, raw_pressure->press_diff2, raw_pressure->temperature);
}
# 243 "./lib/main/mavlink/common/./mavlink_msg_raw_pressure.h"
static inline uint64_t mavlink_msg_raw_pressure_get_time_usec(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}






static inline int16_t mavlink_msg_raw_pressure_get_press_abs(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 8);
}






static inline int16_t mavlink_msg_raw_pressure_get_press_diff1(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 10);
}






static inline int16_t mavlink_msg_raw_pressure_get_press_diff2(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 12);
}






static inline int16_t mavlink_msg_raw_pressure_get_temperature(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 14);
}







static inline void mavlink_msg_raw_pressure_decode(const mavlink_message_t* msg, mavlink_raw_pressure_t* raw_pressure)
{







 memcpy(raw_pressure, ((const char *)(&((msg)->payload64[0]))), 16);

}
# 674 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_scaled_pressure.h" 1


#define MAVLINK_MSG_ID_SCALED_PRESSURE 29

typedef struct __mavlink_scaled_pressure_t
{
 uint32_t time_boot_ms;
 float press_abs;
 float press_diff;
 int16_t temperature;
} mavlink_scaled_pressure_t;

#define MAVLINK_MSG_ID_SCALED_PRESSURE_LEN 14
#define MAVLINK_MSG_ID_29_LEN 14

#define MAVLINK_MSG_ID_SCALED_PRESSURE_CRC 115
#define MAVLINK_MSG_ID_29_CRC 115



#define MAVLINK_MESSAGE_INFO_SCALED_PRESSURE { "SCALED_PRESSURE", 4, { { "time_boot_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_scaled_pressure_t, time_boot_ms) }, { "press_abs", NULL, MAVLINK_TYPE_FLOAT, 0, 4, offsetof(mavlink_scaled_pressure_t, press_abs) }, { "press_diff", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_scaled_pressure_t, press_diff) }, { "temperature", NULL, MAVLINK_TYPE_INT16_T, 0, 12, offsetof(mavlink_scaled_pressure_t, temperature) }, } }
# 44 "./lib/main/mavlink/common/./mavlink_msg_scaled_pressure.h"
static inline uint16_t mavlink_msg_scaled_pressure_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_boot_ms, float press_abs, float press_diff, int16_t temperature)
{
# 56 "./lib/main/mavlink/common/./mavlink_msg_scaled_pressure.h"
 mavlink_scaled_pressure_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.press_abs = press_abs;
 packet.press_diff = press_diff;
 packet.temperature = temperature;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 14);


 msg->msgid = 29;

    return mavlink_finalize_message(msg, system_id, component_id, 14, 115);



}
# 85 "./lib/main/mavlink/common/./mavlink_msg_scaled_pressure.h"
static inline uint16_t mavlink_msg_scaled_pressure_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_boot_ms,float press_abs,float press_diff,int16_t temperature)
{
# 98 "./lib/main/mavlink/common/./mavlink_msg_scaled_pressure.h"
 mavlink_scaled_pressure_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.press_abs = press_abs;
 packet.press_diff = press_diff;
 packet.temperature = temperature;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 14);


 msg->msgid = 29;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 14, 115);



}
# 123 "./lib/main/mavlink/common/./mavlink_msg_scaled_pressure.h"
static inline uint16_t mavlink_msg_scaled_pressure_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_scaled_pressure_t* scaled_pressure)
{
 return mavlink_msg_scaled_pressure_pack(system_id, component_id, msg, scaled_pressure->time_boot_ms, scaled_pressure->press_abs, scaled_pressure->press_diff, scaled_pressure->temperature);
}
# 137 "./lib/main/mavlink/common/./mavlink_msg_scaled_pressure.h"
static inline uint16_t mavlink_msg_scaled_pressure_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_scaled_pressure_t* scaled_pressure)
{
 return mavlink_msg_scaled_pressure_pack_chan(system_id, component_id, chan, msg, scaled_pressure->time_boot_ms, scaled_pressure->press_abs, scaled_pressure->press_diff, scaled_pressure->temperature);
}
# 230 "./lib/main/mavlink/common/./mavlink_msg_scaled_pressure.h"
static inline uint32_t mavlink_msg_scaled_pressure_get_time_boot_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline float mavlink_msg_scaled_pressure_get_press_abs(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_scaled_pressure_get_press_diff(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline int16_t mavlink_msg_scaled_pressure_get_temperature(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 12);
}







static inline void mavlink_msg_scaled_pressure_decode(const mavlink_message_t* msg, mavlink_scaled_pressure_t* scaled_pressure)
{






 memcpy(scaled_pressure, ((const char *)(&((msg)->payload64[0]))), 14);

}
# 675 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_attitude.h" 1


#define MAVLINK_MSG_ID_ATTITUDE 30

typedef struct __mavlink_attitude_t
{
 uint32_t time_boot_ms;
 float roll;
 float pitch;
 float yaw;
 float rollspeed;
 float pitchspeed;
 float yawspeed;
} mavlink_attitude_t;

#define MAVLINK_MSG_ID_ATTITUDE_LEN 28
#define MAVLINK_MSG_ID_30_LEN 28

#define MAVLINK_MSG_ID_ATTITUDE_CRC 39
#define MAVLINK_MSG_ID_30_CRC 39



#define MAVLINK_MESSAGE_INFO_ATTITUDE { "ATTITUDE", 7, { { "time_boot_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_attitude_t, time_boot_ms) }, { "roll", NULL, MAVLINK_TYPE_FLOAT, 0, 4, offsetof(mavlink_attitude_t, roll) }, { "pitch", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_attitude_t, pitch) }, { "yaw", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_attitude_t, yaw) }, { "rollspeed", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_attitude_t, rollspeed) }, { "pitchspeed", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_attitude_t, pitchspeed) }, { "yawspeed", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_attitude_t, yawspeed) }, } }
# 53 "./lib/main/mavlink/common/./mavlink_msg_attitude.h"
static inline uint16_t mavlink_msg_attitude_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_boot_ms, float roll, float pitch, float yaw, float rollspeed, float pitchspeed, float yawspeed)
{
# 68 "./lib/main/mavlink/common/./mavlink_msg_attitude.h"
 mavlink_attitude_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.roll = roll;
 packet.pitch = pitch;
 packet.yaw = yaw;
 packet.rollspeed = rollspeed;
 packet.pitchspeed = pitchspeed;
 packet.yawspeed = yawspeed;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 28);


 msg->msgid = 30;

    return mavlink_finalize_message(msg, system_id, component_id, 28, 39);



}
# 103 "./lib/main/mavlink/common/./mavlink_msg_attitude.h"
static inline uint16_t mavlink_msg_attitude_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_boot_ms,float roll,float pitch,float yaw,float rollspeed,float pitchspeed,float yawspeed)
{
# 119 "./lib/main/mavlink/common/./mavlink_msg_attitude.h"
 mavlink_attitude_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.roll = roll;
 packet.pitch = pitch;
 packet.yaw = yaw;
 packet.rollspeed = rollspeed;
 packet.pitchspeed = pitchspeed;
 packet.yawspeed = yawspeed;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 28);


 msg->msgid = 30;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 28, 39);



}
# 147 "./lib/main/mavlink/common/./mavlink_msg_attitude.h"
static inline uint16_t mavlink_msg_attitude_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_attitude_t* attitude)
{
 return mavlink_msg_attitude_pack(system_id, component_id, msg, attitude->time_boot_ms, attitude->roll, attitude->pitch, attitude->yaw, attitude->rollspeed, attitude->pitchspeed, attitude->yawspeed);
}
# 161 "./lib/main/mavlink/common/./mavlink_msg_attitude.h"
static inline uint16_t mavlink_msg_attitude_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_attitude_t* attitude)
{
 return mavlink_msg_attitude_pack_chan(system_id, component_id, chan, msg, attitude->time_boot_ms, attitude->roll, attitude->pitch, attitude->yaw, attitude->rollspeed, attitude->pitchspeed, attitude->yawspeed);
}
# 269 "./lib/main/mavlink/common/./mavlink_msg_attitude.h"
static inline uint32_t mavlink_msg_attitude_get_time_boot_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline float mavlink_msg_attitude_get_roll(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_attitude_get_pitch(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_attitude_get_yaw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_attitude_get_rollspeed(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_attitude_get_pitchspeed(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_attitude_get_yawspeed(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 24);
}







static inline void mavlink_msg_attitude_decode(const mavlink_message_t* msg, mavlink_attitude_t* attitude)
{
# 351 "./lib/main/mavlink/common/./mavlink_msg_attitude.h"
 memcpy(attitude, ((const char *)(&((msg)->payload64[0]))), 28);

}
# 676 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_attitude_quaternion.h" 1


#define MAVLINK_MSG_ID_ATTITUDE_QUATERNION 31

typedef struct __mavlink_attitude_quaternion_t
{
 uint32_t time_boot_ms;
 float q1;
 float q2;
 float q3;
 float q4;
 float rollspeed;
 float pitchspeed;
 float yawspeed;
} mavlink_attitude_quaternion_t;

#define MAVLINK_MSG_ID_ATTITUDE_QUATERNION_LEN 32
#define MAVLINK_MSG_ID_31_LEN 32

#define MAVLINK_MSG_ID_ATTITUDE_QUATERNION_CRC 246
#define MAVLINK_MSG_ID_31_CRC 246



#define MAVLINK_MESSAGE_INFO_ATTITUDE_QUATERNION { "ATTITUDE_QUATERNION", 8, { { "time_boot_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_attitude_quaternion_t, time_boot_ms) }, { "q1", NULL, MAVLINK_TYPE_FLOAT, 0, 4, offsetof(mavlink_attitude_quaternion_t, q1) }, { "q2", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_attitude_quaternion_t, q2) }, { "q3", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_attitude_quaternion_t, q3) }, { "q4", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_attitude_quaternion_t, q4) }, { "rollspeed", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_attitude_quaternion_t, rollspeed) }, { "pitchspeed", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_attitude_quaternion_t, pitchspeed) }, { "yawspeed", NULL, MAVLINK_TYPE_FLOAT, 0, 28, offsetof(mavlink_attitude_quaternion_t, yawspeed) }, } }
# 56 "./lib/main/mavlink/common/./mavlink_msg_attitude_quaternion.h"
static inline uint16_t mavlink_msg_attitude_quaternion_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_boot_ms, float q1, float q2, float q3, float q4, float rollspeed, float pitchspeed, float yawspeed)
{
# 72 "./lib/main/mavlink/common/./mavlink_msg_attitude_quaternion.h"
 mavlink_attitude_quaternion_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.q1 = q1;
 packet.q2 = q2;
 packet.q3 = q3;
 packet.q4 = q4;
 packet.rollspeed = rollspeed;
 packet.pitchspeed = pitchspeed;
 packet.yawspeed = yawspeed;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 32);


 msg->msgid = 31;

    return mavlink_finalize_message(msg, system_id, component_id, 32, 246);



}
# 109 "./lib/main/mavlink/common/./mavlink_msg_attitude_quaternion.h"
static inline uint16_t mavlink_msg_attitude_quaternion_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_boot_ms,float q1,float q2,float q3,float q4,float rollspeed,float pitchspeed,float yawspeed)
{
# 126 "./lib/main/mavlink/common/./mavlink_msg_attitude_quaternion.h"
 mavlink_attitude_quaternion_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.q1 = q1;
 packet.q2 = q2;
 packet.q3 = q3;
 packet.q4 = q4;
 packet.rollspeed = rollspeed;
 packet.pitchspeed = pitchspeed;
 packet.yawspeed = yawspeed;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 32);


 msg->msgid = 31;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 32, 246);



}
# 155 "./lib/main/mavlink/common/./mavlink_msg_attitude_quaternion.h"
static inline uint16_t mavlink_msg_attitude_quaternion_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_attitude_quaternion_t* attitude_quaternion)
{
 return mavlink_msg_attitude_quaternion_pack(system_id, component_id, msg, attitude_quaternion->time_boot_ms, attitude_quaternion->q1, attitude_quaternion->q2, attitude_quaternion->q3, attitude_quaternion->q4, attitude_quaternion->rollspeed, attitude_quaternion->pitchspeed, attitude_quaternion->yawspeed);
}
# 169 "./lib/main/mavlink/common/./mavlink_msg_attitude_quaternion.h"
static inline uint16_t mavlink_msg_attitude_quaternion_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_attitude_quaternion_t* attitude_quaternion)
{
 return mavlink_msg_attitude_quaternion_pack_chan(system_id, component_id, chan, msg, attitude_quaternion->time_boot_ms, attitude_quaternion->q1, attitude_quaternion->q2, attitude_quaternion->q3, attitude_quaternion->q4, attitude_quaternion->rollspeed, attitude_quaternion->pitchspeed, attitude_quaternion->yawspeed);
}
# 282 "./lib/main/mavlink/common/./mavlink_msg_attitude_quaternion.h"
static inline uint32_t mavlink_msg_attitude_quaternion_get_time_boot_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline float mavlink_msg_attitude_quaternion_get_q1(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_attitude_quaternion_get_q2(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_attitude_quaternion_get_q3(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_attitude_quaternion_get_q4(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_attitude_quaternion_get_rollspeed(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_attitude_quaternion_get_pitchspeed(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_attitude_quaternion_get_yawspeed(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 28);
}







static inline void mavlink_msg_attitude_quaternion_decode(const mavlink_message_t* msg, mavlink_attitude_quaternion_t* attitude_quaternion)
{
# 375 "./lib/main/mavlink/common/./mavlink_msg_attitude_quaternion.h"
 memcpy(attitude_quaternion, ((const char *)(&((msg)->payload64[0]))), 32);

}
# 677 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_local_position_ned.h" 1


#define MAVLINK_MSG_ID_LOCAL_POSITION_NED 32

typedef struct __mavlink_local_position_ned_t
{
 uint32_t time_boot_ms;
 float x;
 float y;
 float z;
 float vx;
 float vy;
 float vz;
} mavlink_local_position_ned_t;

#define MAVLINK_MSG_ID_LOCAL_POSITION_NED_LEN 28
#define MAVLINK_MSG_ID_32_LEN 28

#define MAVLINK_MSG_ID_LOCAL_POSITION_NED_CRC 185
#define MAVLINK_MSG_ID_32_CRC 185



#define MAVLINK_MESSAGE_INFO_LOCAL_POSITION_NED { "LOCAL_POSITION_NED", 7, { { "time_boot_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_local_position_ned_t, time_boot_ms) }, { "x", NULL, MAVLINK_TYPE_FLOAT, 0, 4, offsetof(mavlink_local_position_ned_t, x) }, { "y", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_local_position_ned_t, y) }, { "z", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_local_position_ned_t, z) }, { "vx", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_local_position_ned_t, vx) }, { "vy", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_local_position_ned_t, vy) }, { "vz", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_local_position_ned_t, vz) }, } }
# 53 "./lib/main/mavlink/common/./mavlink_msg_local_position_ned.h"
static inline uint16_t mavlink_msg_local_position_ned_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_boot_ms, float x, float y, float z, float vx, float vy, float vz)
{
# 68 "./lib/main/mavlink/common/./mavlink_msg_local_position_ned.h"
 mavlink_local_position_ned_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.x = x;
 packet.y = y;
 packet.z = z;
 packet.vx = vx;
 packet.vy = vy;
 packet.vz = vz;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 28);


 msg->msgid = 32;

    return mavlink_finalize_message(msg, system_id, component_id, 28, 185);



}
# 103 "./lib/main/mavlink/common/./mavlink_msg_local_position_ned.h"
static inline uint16_t mavlink_msg_local_position_ned_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_boot_ms,float x,float y,float z,float vx,float vy,float vz)
{
# 119 "./lib/main/mavlink/common/./mavlink_msg_local_position_ned.h"
 mavlink_local_position_ned_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.x = x;
 packet.y = y;
 packet.z = z;
 packet.vx = vx;
 packet.vy = vy;
 packet.vz = vz;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 28);


 msg->msgid = 32;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 28, 185);



}
# 147 "./lib/main/mavlink/common/./mavlink_msg_local_position_ned.h"
static inline uint16_t mavlink_msg_local_position_ned_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_local_position_ned_t* local_position_ned)
{
 return mavlink_msg_local_position_ned_pack(system_id, component_id, msg, local_position_ned->time_boot_ms, local_position_ned->x, local_position_ned->y, local_position_ned->z, local_position_ned->vx, local_position_ned->vy, local_position_ned->vz);
}
# 161 "./lib/main/mavlink/common/./mavlink_msg_local_position_ned.h"
static inline uint16_t mavlink_msg_local_position_ned_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_local_position_ned_t* local_position_ned)
{
 return mavlink_msg_local_position_ned_pack_chan(system_id, component_id, chan, msg, local_position_ned->time_boot_ms, local_position_ned->x, local_position_ned->y, local_position_ned->z, local_position_ned->vx, local_position_ned->vy, local_position_ned->vz);
}
# 269 "./lib/main/mavlink/common/./mavlink_msg_local_position_ned.h"
static inline uint32_t mavlink_msg_local_position_ned_get_time_boot_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline float mavlink_msg_local_position_ned_get_x(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_local_position_ned_get_y(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_local_position_ned_get_z(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_local_position_ned_get_vx(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_local_position_ned_get_vy(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_local_position_ned_get_vz(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 24);
}







static inline void mavlink_msg_local_position_ned_decode(const mavlink_message_t* msg, mavlink_local_position_ned_t* local_position_ned)
{
# 351 "./lib/main/mavlink/common/./mavlink_msg_local_position_ned.h"
 memcpy(local_position_ned, ((const char *)(&((msg)->payload64[0]))), 28);

}
# 678 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_global_position_int.h" 1


#define MAVLINK_MSG_ID_GLOBAL_POSITION_INT 33

typedef struct __mavlink_global_position_int_t
{
 uint32_t time_boot_ms;
 int32_t lat;
 int32_t lon;
 int32_t alt;
 int32_t relative_alt;
 int16_t vx;
 int16_t vy;
 int16_t vz;
 uint16_t hdg;
} mavlink_global_position_int_t;

#define MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN 28
#define MAVLINK_MSG_ID_33_LEN 28

#define MAVLINK_MSG_ID_GLOBAL_POSITION_INT_CRC 104
#define MAVLINK_MSG_ID_33_CRC 104



#define MAVLINK_MESSAGE_INFO_GLOBAL_POSITION_INT { "GLOBAL_POSITION_INT", 9, { { "time_boot_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_global_position_int_t, time_boot_ms) }, { "lat", NULL, MAVLINK_TYPE_INT32_T, 0, 4, offsetof(mavlink_global_position_int_t, lat) }, { "lon", NULL, MAVLINK_TYPE_INT32_T, 0, 8, offsetof(mavlink_global_position_int_t, lon) }, { "alt", NULL, MAVLINK_TYPE_INT32_T, 0, 12, offsetof(mavlink_global_position_int_t, alt) }, { "relative_alt", NULL, MAVLINK_TYPE_INT32_T, 0, 16, offsetof(mavlink_global_position_int_t, relative_alt) }, { "vx", NULL, MAVLINK_TYPE_INT16_T, 0, 20, offsetof(mavlink_global_position_int_t, vx) }, { "vy", NULL, MAVLINK_TYPE_INT16_T, 0, 22, offsetof(mavlink_global_position_int_t, vy) }, { "vz", NULL, MAVLINK_TYPE_INT16_T, 0, 24, offsetof(mavlink_global_position_int_t, vz) }, { "hdg", NULL, MAVLINK_TYPE_UINT16_T, 0, 26, offsetof(mavlink_global_position_int_t, hdg) }, } }
# 59 "./lib/main/mavlink/common/./mavlink_msg_global_position_int.h"
static inline uint16_t mavlink_msg_global_position_int_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_boot_ms, int32_t lat, int32_t lon, int32_t alt, int32_t relative_alt, int16_t vx, int16_t vy, int16_t vz, uint16_t hdg)
{
# 76 "./lib/main/mavlink/common/./mavlink_msg_global_position_int.h"
 mavlink_global_position_int_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.lat = lat;
 packet.lon = lon;
 packet.alt = alt;
 packet.relative_alt = relative_alt;
 packet.vx = vx;
 packet.vy = vy;
 packet.vz = vz;
 packet.hdg = hdg;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 28);


 msg->msgid = 33;

    return mavlink_finalize_message(msg, system_id, component_id, 28, 104);



}
# 115 "./lib/main/mavlink/common/./mavlink_msg_global_position_int.h"
static inline uint16_t mavlink_msg_global_position_int_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_boot_ms,int32_t lat,int32_t lon,int32_t alt,int32_t relative_alt,int16_t vx,int16_t vy,int16_t vz,uint16_t hdg)
{
# 133 "./lib/main/mavlink/common/./mavlink_msg_global_position_int.h"
 mavlink_global_position_int_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.lat = lat;
 packet.lon = lon;
 packet.alt = alt;
 packet.relative_alt = relative_alt;
 packet.vx = vx;
 packet.vy = vy;
 packet.vz = vz;
 packet.hdg = hdg;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 28);


 msg->msgid = 33;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 28, 104);



}
# 163 "./lib/main/mavlink/common/./mavlink_msg_global_position_int.h"
static inline uint16_t mavlink_msg_global_position_int_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_global_position_int_t* global_position_int)
{
 return mavlink_msg_global_position_int_pack(system_id, component_id, msg, global_position_int->time_boot_ms, global_position_int->lat, global_position_int->lon, global_position_int->alt, global_position_int->relative_alt, global_position_int->vx, global_position_int->vy, global_position_int->vz, global_position_int->hdg);
}
# 177 "./lib/main/mavlink/common/./mavlink_msg_global_position_int.h"
static inline uint16_t mavlink_msg_global_position_int_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_global_position_int_t* global_position_int)
{
 return mavlink_msg_global_position_int_pack_chan(system_id, component_id, chan, msg, global_position_int->time_boot_ms, global_position_int->lat, global_position_int->lon, global_position_int->alt, global_position_int->relative_alt, global_position_int->vx, global_position_int->vy, global_position_int->vz, global_position_int->hdg);
}
# 295 "./lib/main/mavlink/common/./mavlink_msg_global_position_int.h"
static inline uint32_t mavlink_msg_global_position_int_get_time_boot_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline int32_t mavlink_msg_global_position_int_get_lat(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 4);
}






static inline int32_t mavlink_msg_global_position_int_get_lon(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 8);
}






static inline int32_t mavlink_msg_global_position_int_get_alt(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 12);
}






static inline int32_t mavlink_msg_global_position_int_get_relative_alt(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 16);
}






static inline int16_t mavlink_msg_global_position_int_get_vx(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 20);
}






static inline int16_t mavlink_msg_global_position_int_get_vy(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 22);
}






static inline int16_t mavlink_msg_global_position_int_get_vz(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 24);
}






static inline uint16_t mavlink_msg_global_position_int_get_hdg(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 26);
}







static inline void mavlink_msg_global_position_int_decode(const mavlink_message_t* msg, mavlink_global_position_int_t* global_position_int)
{
# 399 "./lib/main/mavlink/common/./mavlink_msg_global_position_int.h"
 memcpy(global_position_int, ((const char *)(&((msg)->payload64[0]))), 28);

}
# 679 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_rc_channels_scaled.h" 1


#define MAVLINK_MSG_ID_RC_CHANNELS_SCALED 34

typedef struct __mavlink_rc_channels_scaled_t
{
 uint32_t time_boot_ms;
 int16_t chan1_scaled;
 int16_t chan2_scaled;
 int16_t chan3_scaled;
 int16_t chan4_scaled;
 int16_t chan5_scaled;
 int16_t chan6_scaled;
 int16_t chan7_scaled;
 int16_t chan8_scaled;
 uint8_t port;
 uint8_t rssi;
} mavlink_rc_channels_scaled_t;

#define MAVLINK_MSG_ID_RC_CHANNELS_SCALED_LEN 22
#define MAVLINK_MSG_ID_34_LEN 22

#define MAVLINK_MSG_ID_RC_CHANNELS_SCALED_CRC 237
#define MAVLINK_MSG_ID_34_CRC 237



#define MAVLINK_MESSAGE_INFO_RC_CHANNELS_SCALED { "RC_CHANNELS_SCALED", 11, { { "time_boot_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_rc_channels_scaled_t, time_boot_ms) }, { "chan1_scaled", NULL, MAVLINK_TYPE_INT16_T, 0, 4, offsetof(mavlink_rc_channels_scaled_t, chan1_scaled) }, { "chan2_scaled", NULL, MAVLINK_TYPE_INT16_T, 0, 6, offsetof(mavlink_rc_channels_scaled_t, chan2_scaled) }, { "chan3_scaled", NULL, MAVLINK_TYPE_INT16_T, 0, 8, offsetof(mavlink_rc_channels_scaled_t, chan3_scaled) }, { "chan4_scaled", NULL, MAVLINK_TYPE_INT16_T, 0, 10, offsetof(mavlink_rc_channels_scaled_t, chan4_scaled) }, { "chan5_scaled", NULL, MAVLINK_TYPE_INT16_T, 0, 12, offsetof(mavlink_rc_channels_scaled_t, chan5_scaled) }, { "chan6_scaled", NULL, MAVLINK_TYPE_INT16_T, 0, 14, offsetof(mavlink_rc_channels_scaled_t, chan6_scaled) }, { "chan7_scaled", NULL, MAVLINK_TYPE_INT16_T, 0, 16, offsetof(mavlink_rc_channels_scaled_t, chan7_scaled) }, { "chan8_scaled", NULL, MAVLINK_TYPE_INT16_T, 0, 18, offsetof(mavlink_rc_channels_scaled_t, chan8_scaled) }, { "port", NULL, MAVLINK_TYPE_UINT8_T, 0, 20, offsetof(mavlink_rc_channels_scaled_t, port) }, { "rssi", NULL, MAVLINK_TYPE_UINT8_T, 0, 21, offsetof(mavlink_rc_channels_scaled_t, rssi) }, } }
# 65 "./lib/main/mavlink/common/./mavlink_msg_rc_channels_scaled.h"
static inline uint16_t mavlink_msg_rc_channels_scaled_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_boot_ms, uint8_t port, int16_t chan1_scaled, int16_t chan2_scaled, int16_t chan3_scaled, int16_t chan4_scaled, int16_t chan5_scaled, int16_t chan6_scaled, int16_t chan7_scaled, int16_t chan8_scaled, uint8_t rssi)
{
# 84 "./lib/main/mavlink/common/./mavlink_msg_rc_channels_scaled.h"
 mavlink_rc_channels_scaled_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.chan1_scaled = chan1_scaled;
 packet.chan2_scaled = chan2_scaled;
 packet.chan3_scaled = chan3_scaled;
 packet.chan4_scaled = chan4_scaled;
 packet.chan5_scaled = chan5_scaled;
 packet.chan6_scaled = chan6_scaled;
 packet.chan7_scaled = chan7_scaled;
 packet.chan8_scaled = chan8_scaled;
 packet.port = port;
 packet.rssi = rssi;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


 msg->msgid = 34;

    return mavlink_finalize_message(msg, system_id, component_id, 22, 237);



}
# 127 "./lib/main/mavlink/common/./mavlink_msg_rc_channels_scaled.h"
static inline uint16_t mavlink_msg_rc_channels_scaled_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_boot_ms,uint8_t port,int16_t chan1_scaled,int16_t chan2_scaled,int16_t chan3_scaled,int16_t chan4_scaled,int16_t chan5_scaled,int16_t chan6_scaled,int16_t chan7_scaled,int16_t chan8_scaled,uint8_t rssi)
{
# 147 "./lib/main/mavlink/common/./mavlink_msg_rc_channels_scaled.h"
 mavlink_rc_channels_scaled_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.chan1_scaled = chan1_scaled;
 packet.chan2_scaled = chan2_scaled;
 packet.chan3_scaled = chan3_scaled;
 packet.chan4_scaled = chan4_scaled;
 packet.chan5_scaled = chan5_scaled;
 packet.chan6_scaled = chan6_scaled;
 packet.chan7_scaled = chan7_scaled;
 packet.chan8_scaled = chan8_scaled;
 packet.port = port;
 packet.rssi = rssi;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


 msg->msgid = 34;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 22, 237);



}
# 179 "./lib/main/mavlink/common/./mavlink_msg_rc_channels_scaled.h"
static inline uint16_t mavlink_msg_rc_channels_scaled_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_rc_channels_scaled_t* rc_channels_scaled)
{
 return mavlink_msg_rc_channels_scaled_pack(system_id, component_id, msg, rc_channels_scaled->time_boot_ms, rc_channels_scaled->port, rc_channels_scaled->chan1_scaled, rc_channels_scaled->chan2_scaled, rc_channels_scaled->chan3_scaled, rc_channels_scaled->chan4_scaled, rc_channels_scaled->chan5_scaled, rc_channels_scaled->chan6_scaled, rc_channels_scaled->chan7_scaled, rc_channels_scaled->chan8_scaled, rc_channels_scaled->rssi);
}
# 193 "./lib/main/mavlink/common/./mavlink_msg_rc_channels_scaled.h"
static inline uint16_t mavlink_msg_rc_channels_scaled_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_rc_channels_scaled_t* rc_channels_scaled)
{
 return mavlink_msg_rc_channels_scaled_pack_chan(system_id, component_id, chan, msg, rc_channels_scaled->time_boot_ms, rc_channels_scaled->port, rc_channels_scaled->chan1_scaled, rc_channels_scaled->chan2_scaled, rc_channels_scaled->chan3_scaled, rc_channels_scaled->chan4_scaled, rc_channels_scaled->chan5_scaled, rc_channels_scaled->chan6_scaled, rc_channels_scaled->chan7_scaled, rc_channels_scaled->chan8_scaled, rc_channels_scaled->rssi);
}
# 321 "./lib/main/mavlink/common/./mavlink_msg_rc_channels_scaled.h"
static inline uint32_t mavlink_msg_rc_channels_scaled_get_time_boot_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_rc_channels_scaled_get_port(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[20];
}






static inline int16_t mavlink_msg_rc_channels_scaled_get_chan1_scaled(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 4);
}






static inline int16_t mavlink_msg_rc_channels_scaled_get_chan2_scaled(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 6);
}






static inline int16_t mavlink_msg_rc_channels_scaled_get_chan3_scaled(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 8);
}






static inline int16_t mavlink_msg_rc_channels_scaled_get_chan4_scaled(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 10);
}






static inline int16_t mavlink_msg_rc_channels_scaled_get_chan5_scaled(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 12);
}






static inline int16_t mavlink_msg_rc_channels_scaled_get_chan6_scaled(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 14);
}






static inline int16_t mavlink_msg_rc_channels_scaled_get_chan7_scaled(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 16);
}






static inline int16_t mavlink_msg_rc_channels_scaled_get_chan8_scaled(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 18);
}






static inline uint8_t mavlink_msg_rc_channels_scaled_get_rssi(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[21];
}







static inline void mavlink_msg_rc_channels_scaled_decode(const mavlink_message_t* msg, mavlink_rc_channels_scaled_t* rc_channels_scaled)
{
# 447 "./lib/main/mavlink/common/./mavlink_msg_rc_channels_scaled.h"
 memcpy(rc_channels_scaled, ((const char *)(&((msg)->payload64[0]))), 22);

}
# 680 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_rc_channels_raw.h" 1


#define MAVLINK_MSG_ID_RC_CHANNELS_RAW 35

typedef struct __mavlink_rc_channels_raw_t
{
 uint32_t time_boot_ms;
 uint16_t chan1_raw;
 uint16_t chan2_raw;
 uint16_t chan3_raw;
 uint16_t chan4_raw;
 uint16_t chan5_raw;
 uint16_t chan6_raw;
 uint16_t chan7_raw;
 uint16_t chan8_raw;
 uint8_t port;
 uint8_t rssi;
} mavlink_rc_channels_raw_t;

#define MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN 22
#define MAVLINK_MSG_ID_35_LEN 22

#define MAVLINK_MSG_ID_RC_CHANNELS_RAW_CRC 244
#define MAVLINK_MSG_ID_35_CRC 244



#define MAVLINK_MESSAGE_INFO_RC_CHANNELS_RAW { "RC_CHANNELS_RAW", 11, { { "time_boot_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_rc_channels_raw_t, time_boot_ms) }, { "chan1_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 4, offsetof(mavlink_rc_channels_raw_t, chan1_raw) }, { "chan2_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 6, offsetof(mavlink_rc_channels_raw_t, chan2_raw) }, { "chan3_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 8, offsetof(mavlink_rc_channels_raw_t, chan3_raw) }, { "chan4_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 10, offsetof(mavlink_rc_channels_raw_t, chan4_raw) }, { "chan5_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 12, offsetof(mavlink_rc_channels_raw_t, chan5_raw) }, { "chan6_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 14, offsetof(mavlink_rc_channels_raw_t, chan6_raw) }, { "chan7_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 16, offsetof(mavlink_rc_channels_raw_t, chan7_raw) }, { "chan8_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 18, offsetof(mavlink_rc_channels_raw_t, chan8_raw) }, { "port", NULL, MAVLINK_TYPE_UINT8_T, 0, 20, offsetof(mavlink_rc_channels_raw_t, port) }, { "rssi", NULL, MAVLINK_TYPE_UINT8_T, 0, 21, offsetof(mavlink_rc_channels_raw_t, rssi) }, } }
# 65 "./lib/main/mavlink/common/./mavlink_msg_rc_channels_raw.h"
static inline uint16_t mavlink_msg_rc_channels_raw_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_boot_ms, uint8_t port, uint16_t chan1_raw, uint16_t chan2_raw, uint16_t chan3_raw, uint16_t chan4_raw, uint16_t chan5_raw, uint16_t chan6_raw, uint16_t chan7_raw, uint16_t chan8_raw, uint8_t rssi)
{
# 84 "./lib/main/mavlink/common/./mavlink_msg_rc_channels_raw.h"
 mavlink_rc_channels_raw_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.chan1_raw = chan1_raw;
 packet.chan2_raw = chan2_raw;
 packet.chan3_raw = chan3_raw;
 packet.chan4_raw = chan4_raw;
 packet.chan5_raw = chan5_raw;
 packet.chan6_raw = chan6_raw;
 packet.chan7_raw = chan7_raw;
 packet.chan8_raw = chan8_raw;
 packet.port = port;
 packet.rssi = rssi;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


 msg->msgid = 35;

    return mavlink_finalize_message(msg, system_id, component_id, 22, 244);



}
# 127 "./lib/main/mavlink/common/./mavlink_msg_rc_channels_raw.h"
static inline uint16_t mavlink_msg_rc_channels_raw_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_boot_ms,uint8_t port,uint16_t chan1_raw,uint16_t chan2_raw,uint16_t chan3_raw,uint16_t chan4_raw,uint16_t chan5_raw,uint16_t chan6_raw,uint16_t chan7_raw,uint16_t chan8_raw,uint8_t rssi)
{
# 147 "./lib/main/mavlink/common/./mavlink_msg_rc_channels_raw.h"
 mavlink_rc_channels_raw_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.chan1_raw = chan1_raw;
 packet.chan2_raw = chan2_raw;
 packet.chan3_raw = chan3_raw;
 packet.chan4_raw = chan4_raw;
 packet.chan5_raw = chan5_raw;
 packet.chan6_raw = chan6_raw;
 packet.chan7_raw = chan7_raw;
 packet.chan8_raw = chan8_raw;
 packet.port = port;
 packet.rssi = rssi;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


 msg->msgid = 35;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 22, 244);



}
# 179 "./lib/main/mavlink/common/./mavlink_msg_rc_channels_raw.h"
static inline uint16_t mavlink_msg_rc_channels_raw_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_rc_channels_raw_t* rc_channels_raw)
{
 return mavlink_msg_rc_channels_raw_pack(system_id, component_id, msg, rc_channels_raw->time_boot_ms, rc_channels_raw->port, rc_channels_raw->chan1_raw, rc_channels_raw->chan2_raw, rc_channels_raw->chan3_raw, rc_channels_raw->chan4_raw, rc_channels_raw->chan5_raw, rc_channels_raw->chan6_raw, rc_channels_raw->chan7_raw, rc_channels_raw->chan8_raw, rc_channels_raw->rssi);
}
# 193 "./lib/main/mavlink/common/./mavlink_msg_rc_channels_raw.h"
static inline uint16_t mavlink_msg_rc_channels_raw_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_rc_channels_raw_t* rc_channels_raw)
{
 return mavlink_msg_rc_channels_raw_pack_chan(system_id, component_id, chan, msg, rc_channels_raw->time_boot_ms, rc_channels_raw->port, rc_channels_raw->chan1_raw, rc_channels_raw->chan2_raw, rc_channels_raw->chan3_raw, rc_channels_raw->chan4_raw, rc_channels_raw->chan5_raw, rc_channels_raw->chan6_raw, rc_channels_raw->chan7_raw, rc_channels_raw->chan8_raw, rc_channels_raw->rssi);
}
# 321 "./lib/main/mavlink/common/./mavlink_msg_rc_channels_raw.h"
static inline uint32_t mavlink_msg_rc_channels_raw_get_time_boot_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_rc_channels_raw_get_port(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[20];
}






static inline uint16_t mavlink_msg_rc_channels_raw_get_chan1_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 4);
}






static inline uint16_t mavlink_msg_rc_channels_raw_get_chan2_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 6);
}






static inline uint16_t mavlink_msg_rc_channels_raw_get_chan3_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 8);
}






static inline uint16_t mavlink_msg_rc_channels_raw_get_chan4_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 10);
}






static inline uint16_t mavlink_msg_rc_channels_raw_get_chan5_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 12);
}






static inline uint16_t mavlink_msg_rc_channels_raw_get_chan6_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 14);
}






static inline uint16_t mavlink_msg_rc_channels_raw_get_chan7_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 16);
}






static inline uint16_t mavlink_msg_rc_channels_raw_get_chan8_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 18);
}






static inline uint8_t mavlink_msg_rc_channels_raw_get_rssi(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[21];
}







static inline void mavlink_msg_rc_channels_raw_decode(const mavlink_message_t* msg, mavlink_rc_channels_raw_t* rc_channels_raw)
{
# 447 "./lib/main/mavlink/common/./mavlink_msg_rc_channels_raw.h"
 memcpy(rc_channels_raw, ((const char *)(&((msg)->payload64[0]))), 22);

}
# 681 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_servo_output_raw.h" 1


#define MAVLINK_MSG_ID_SERVO_OUTPUT_RAW 36

typedef struct __mavlink_servo_output_raw_t
{
 uint32_t time_usec;
 uint16_t servo1_raw;
 uint16_t servo2_raw;
 uint16_t servo3_raw;
 uint16_t servo4_raw;
 uint16_t servo5_raw;
 uint16_t servo6_raw;
 uint16_t servo7_raw;
 uint16_t servo8_raw;
 uint8_t port;
} mavlink_servo_output_raw_t;

#define MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_LEN 21
#define MAVLINK_MSG_ID_36_LEN 21

#define MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_CRC 222
#define MAVLINK_MSG_ID_36_CRC 222



#define MAVLINK_MESSAGE_INFO_SERVO_OUTPUT_RAW { "SERVO_OUTPUT_RAW", 10, { { "time_usec", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_servo_output_raw_t, time_usec) }, { "servo1_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 4, offsetof(mavlink_servo_output_raw_t, servo1_raw) }, { "servo2_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 6, offsetof(mavlink_servo_output_raw_t, servo2_raw) }, { "servo3_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 8, offsetof(mavlink_servo_output_raw_t, servo3_raw) }, { "servo4_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 10, offsetof(mavlink_servo_output_raw_t, servo4_raw) }, { "servo5_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 12, offsetof(mavlink_servo_output_raw_t, servo5_raw) }, { "servo6_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 14, offsetof(mavlink_servo_output_raw_t, servo6_raw) }, { "servo7_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 16, offsetof(mavlink_servo_output_raw_t, servo7_raw) }, { "servo8_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 18, offsetof(mavlink_servo_output_raw_t, servo8_raw) }, { "port", NULL, MAVLINK_TYPE_UINT8_T, 0, 20, offsetof(mavlink_servo_output_raw_t, port) }, } }
# 62 "./lib/main/mavlink/common/./mavlink_msg_servo_output_raw.h"
static inline uint16_t mavlink_msg_servo_output_raw_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_usec, uint8_t port, uint16_t servo1_raw, uint16_t servo2_raw, uint16_t servo3_raw, uint16_t servo4_raw, uint16_t servo5_raw, uint16_t servo6_raw, uint16_t servo7_raw, uint16_t servo8_raw)
{
# 80 "./lib/main/mavlink/common/./mavlink_msg_servo_output_raw.h"
 mavlink_servo_output_raw_t packet;
 packet.time_usec = time_usec;
 packet.servo1_raw = servo1_raw;
 packet.servo2_raw = servo2_raw;
 packet.servo3_raw = servo3_raw;
 packet.servo4_raw = servo4_raw;
 packet.servo5_raw = servo5_raw;
 packet.servo6_raw = servo6_raw;
 packet.servo7_raw = servo7_raw;
 packet.servo8_raw = servo8_raw;
 packet.port = port;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 21);


 msg->msgid = 36;

    return mavlink_finalize_message(msg, system_id, component_id, 21, 222);



}
# 121 "./lib/main/mavlink/common/./mavlink_msg_servo_output_raw.h"
static inline uint16_t mavlink_msg_servo_output_raw_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_usec,uint8_t port,uint16_t servo1_raw,uint16_t servo2_raw,uint16_t servo3_raw,uint16_t servo4_raw,uint16_t servo5_raw,uint16_t servo6_raw,uint16_t servo7_raw,uint16_t servo8_raw)
{
# 140 "./lib/main/mavlink/common/./mavlink_msg_servo_output_raw.h"
 mavlink_servo_output_raw_t packet;
 packet.time_usec = time_usec;
 packet.servo1_raw = servo1_raw;
 packet.servo2_raw = servo2_raw;
 packet.servo3_raw = servo3_raw;
 packet.servo4_raw = servo4_raw;
 packet.servo5_raw = servo5_raw;
 packet.servo6_raw = servo6_raw;
 packet.servo7_raw = servo7_raw;
 packet.servo8_raw = servo8_raw;
 packet.port = port;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 21);


 msg->msgid = 36;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 21, 222);



}
# 171 "./lib/main/mavlink/common/./mavlink_msg_servo_output_raw.h"
static inline uint16_t mavlink_msg_servo_output_raw_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_servo_output_raw_t* servo_output_raw)
{
 return mavlink_msg_servo_output_raw_pack(system_id, component_id, msg, servo_output_raw->time_usec, servo_output_raw->port, servo_output_raw->servo1_raw, servo_output_raw->servo2_raw, servo_output_raw->servo3_raw, servo_output_raw->servo4_raw, servo_output_raw->servo5_raw, servo_output_raw->servo6_raw, servo_output_raw->servo7_raw, servo_output_raw->servo8_raw);
}
# 185 "./lib/main/mavlink/common/./mavlink_msg_servo_output_raw.h"
static inline uint16_t mavlink_msg_servo_output_raw_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_servo_output_raw_t* servo_output_raw)
{
 return mavlink_msg_servo_output_raw_pack_chan(system_id, component_id, chan, msg, servo_output_raw->time_usec, servo_output_raw->port, servo_output_raw->servo1_raw, servo_output_raw->servo2_raw, servo_output_raw->servo3_raw, servo_output_raw->servo4_raw, servo_output_raw->servo5_raw, servo_output_raw->servo6_raw, servo_output_raw->servo7_raw, servo_output_raw->servo8_raw);
}
# 308 "./lib/main/mavlink/common/./mavlink_msg_servo_output_raw.h"
static inline uint32_t mavlink_msg_servo_output_raw_get_time_usec(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_servo_output_raw_get_port(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[20];
}






static inline uint16_t mavlink_msg_servo_output_raw_get_servo1_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 4);
}






static inline uint16_t mavlink_msg_servo_output_raw_get_servo2_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 6);
}






static inline uint16_t mavlink_msg_servo_output_raw_get_servo3_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 8);
}






static inline uint16_t mavlink_msg_servo_output_raw_get_servo4_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 10);
}






static inline uint16_t mavlink_msg_servo_output_raw_get_servo5_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 12);
}






static inline uint16_t mavlink_msg_servo_output_raw_get_servo6_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 14);
}






static inline uint16_t mavlink_msg_servo_output_raw_get_servo7_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 16);
}






static inline uint16_t mavlink_msg_servo_output_raw_get_servo8_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 18);
}







static inline void mavlink_msg_servo_output_raw_decode(const mavlink_message_t* msg, mavlink_servo_output_raw_t* servo_output_raw)
{
# 423 "./lib/main/mavlink/common/./mavlink_msg_servo_output_raw.h"
 memcpy(servo_output_raw, ((const char *)(&((msg)->payload64[0]))), 21);

}
# 682 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_mission_request_partial_list.h" 1


#define MAVLINK_MSG_ID_MISSION_REQUEST_PARTIAL_LIST 37

typedef struct __mavlink_mission_request_partial_list_t
{
 int16_t start_index;
 int16_t end_index;
 uint8_t target_system;
 uint8_t target_component;
} mavlink_mission_request_partial_list_t;

#define MAVLINK_MSG_ID_MISSION_REQUEST_PARTIAL_LIST_LEN 6
#define MAVLINK_MSG_ID_37_LEN 6

#define MAVLINK_MSG_ID_MISSION_REQUEST_PARTIAL_LIST_CRC 212
#define MAVLINK_MSG_ID_37_CRC 212



#define MAVLINK_MESSAGE_INFO_MISSION_REQUEST_PARTIAL_LIST { "MISSION_REQUEST_PARTIAL_LIST", 4, { { "start_index", NULL, MAVLINK_TYPE_INT16_T, 0, 0, offsetof(mavlink_mission_request_partial_list_t, start_index) }, { "end_index", NULL, MAVLINK_TYPE_INT16_T, 0, 2, offsetof(mavlink_mission_request_partial_list_t, end_index) }, { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 4, offsetof(mavlink_mission_request_partial_list_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 5, offsetof(mavlink_mission_request_partial_list_t, target_component) }, } }
# 44 "./lib/main/mavlink/common/./mavlink_msg_mission_request_partial_list.h"
static inline uint16_t mavlink_msg_mission_request_partial_list_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_system, uint8_t target_component, int16_t start_index, int16_t end_index)
{
# 56 "./lib/main/mavlink/common/./mavlink_msg_mission_request_partial_list.h"
 mavlink_mission_request_partial_list_t packet;
 packet.start_index = start_index;
 packet.end_index = end_index;
 packet.target_system = target_system;
 packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 6);


 msg->msgid = 37;

    return mavlink_finalize_message(msg, system_id, component_id, 6, 212);



}
# 85 "./lib/main/mavlink/common/./mavlink_msg_mission_request_partial_list.h"
static inline uint16_t mavlink_msg_mission_request_partial_list_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_system,uint8_t target_component,int16_t start_index,int16_t end_index)
{
# 98 "./lib/main/mavlink/common/./mavlink_msg_mission_request_partial_list.h"
 mavlink_mission_request_partial_list_t packet;
 packet.start_index = start_index;
 packet.end_index = end_index;
 packet.target_system = target_system;
 packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 6);


 msg->msgid = 37;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 6, 212);



}
# 123 "./lib/main/mavlink/common/./mavlink_msg_mission_request_partial_list.h"
static inline uint16_t mavlink_msg_mission_request_partial_list_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_mission_request_partial_list_t* mission_request_partial_list)
{
 return mavlink_msg_mission_request_partial_list_pack(system_id, component_id, msg, mission_request_partial_list->target_system, mission_request_partial_list->target_component, mission_request_partial_list->start_index, mission_request_partial_list->end_index);
}
# 137 "./lib/main/mavlink/common/./mavlink_msg_mission_request_partial_list.h"
static inline uint16_t mavlink_msg_mission_request_partial_list_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_mission_request_partial_list_t* mission_request_partial_list)
{
 return mavlink_msg_mission_request_partial_list_pack_chan(system_id, component_id, chan, msg, mission_request_partial_list->target_system, mission_request_partial_list->target_component, mission_request_partial_list->start_index, mission_request_partial_list->end_index);
}
# 230 "./lib/main/mavlink/common/./mavlink_msg_mission_request_partial_list.h"
static inline uint8_t mavlink_msg_mission_request_partial_list_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[4];
}






static inline uint8_t mavlink_msg_mission_request_partial_list_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[5];
}






static inline int16_t mavlink_msg_mission_request_partial_list_get_start_index(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 0);
}






static inline int16_t mavlink_msg_mission_request_partial_list_get_end_index(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 2);
}







static inline void mavlink_msg_mission_request_partial_list_decode(const mavlink_message_t* msg, mavlink_mission_request_partial_list_t* mission_request_partial_list)
{






 memcpy(mission_request_partial_list, ((const char *)(&((msg)->payload64[0]))), 6);

}
# 683 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_mission_write_partial_list.h" 1


#define MAVLINK_MSG_ID_MISSION_WRITE_PARTIAL_LIST 38

typedef struct __mavlink_mission_write_partial_list_t
{
 int16_t start_index;
 int16_t end_index;
 uint8_t target_system;
 uint8_t target_component;
} mavlink_mission_write_partial_list_t;

#define MAVLINK_MSG_ID_MISSION_WRITE_PARTIAL_LIST_LEN 6
#define MAVLINK_MSG_ID_38_LEN 6

#define MAVLINK_MSG_ID_MISSION_WRITE_PARTIAL_LIST_CRC 9
#define MAVLINK_MSG_ID_38_CRC 9



#define MAVLINK_MESSAGE_INFO_MISSION_WRITE_PARTIAL_LIST { "MISSION_WRITE_PARTIAL_LIST", 4, { { "start_index", NULL, MAVLINK_TYPE_INT16_T, 0, 0, offsetof(mavlink_mission_write_partial_list_t, start_index) }, { "end_index", NULL, MAVLINK_TYPE_INT16_T, 0, 2, offsetof(mavlink_mission_write_partial_list_t, end_index) }, { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 4, offsetof(mavlink_mission_write_partial_list_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 5, offsetof(mavlink_mission_write_partial_list_t, target_component) }, } }
# 44 "./lib/main/mavlink/common/./mavlink_msg_mission_write_partial_list.h"
static inline uint16_t mavlink_msg_mission_write_partial_list_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_system, uint8_t target_component, int16_t start_index, int16_t end_index)
{
# 56 "./lib/main/mavlink/common/./mavlink_msg_mission_write_partial_list.h"
 mavlink_mission_write_partial_list_t packet;
 packet.start_index = start_index;
 packet.end_index = end_index;
 packet.target_system = target_system;
 packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 6);


 msg->msgid = 38;

    return mavlink_finalize_message(msg, system_id, component_id, 6, 9);



}
# 85 "./lib/main/mavlink/common/./mavlink_msg_mission_write_partial_list.h"
static inline uint16_t mavlink_msg_mission_write_partial_list_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_system,uint8_t target_component,int16_t start_index,int16_t end_index)
{
# 98 "./lib/main/mavlink/common/./mavlink_msg_mission_write_partial_list.h"
 mavlink_mission_write_partial_list_t packet;
 packet.start_index = start_index;
 packet.end_index = end_index;
 packet.target_system = target_system;
 packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 6);


 msg->msgid = 38;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 6, 9);



}
# 123 "./lib/main/mavlink/common/./mavlink_msg_mission_write_partial_list.h"
static inline uint16_t mavlink_msg_mission_write_partial_list_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_mission_write_partial_list_t* mission_write_partial_list)
{
 return mavlink_msg_mission_write_partial_list_pack(system_id, component_id, msg, mission_write_partial_list->target_system, mission_write_partial_list->target_component, mission_write_partial_list->start_index, mission_write_partial_list->end_index);
}
# 137 "./lib/main/mavlink/common/./mavlink_msg_mission_write_partial_list.h"
static inline uint16_t mavlink_msg_mission_write_partial_list_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_mission_write_partial_list_t* mission_write_partial_list)
{
 return mavlink_msg_mission_write_partial_list_pack_chan(system_id, component_id, chan, msg, mission_write_partial_list->target_system, mission_write_partial_list->target_component, mission_write_partial_list->start_index, mission_write_partial_list->end_index);
}
# 230 "./lib/main/mavlink/common/./mavlink_msg_mission_write_partial_list.h"
static inline uint8_t mavlink_msg_mission_write_partial_list_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[4];
}






static inline uint8_t mavlink_msg_mission_write_partial_list_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[5];
}






static inline int16_t mavlink_msg_mission_write_partial_list_get_start_index(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 0);
}






static inline int16_t mavlink_msg_mission_write_partial_list_get_end_index(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 2);
}







static inline void mavlink_msg_mission_write_partial_list_decode(const mavlink_message_t* msg, mavlink_mission_write_partial_list_t* mission_write_partial_list)
{






 memcpy(mission_write_partial_list, ((const char *)(&((msg)->payload64[0]))), 6);

}
# 684 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_mission_item.h" 1


#define MAVLINK_MSG_ID_MISSION_ITEM 39

typedef struct __mavlink_mission_item_t
{
 float param1;
 float param2;
 float param3;
 float param4;
 float x;
 float y;
 float z;
 uint16_t seq;
 uint16_t command;
 uint8_t target_system;
 uint8_t target_component;
 uint8_t frame;
 uint8_t current;
 uint8_t autocontinue;
} mavlink_mission_item_t;

#define MAVLINK_MSG_ID_MISSION_ITEM_LEN 37
#define MAVLINK_MSG_ID_39_LEN 37

#define MAVLINK_MSG_ID_MISSION_ITEM_CRC 254
#define MAVLINK_MSG_ID_39_CRC 254



#define MAVLINK_MESSAGE_INFO_MISSION_ITEM { "MISSION_ITEM", 14, { { "param1", NULL, MAVLINK_TYPE_FLOAT, 0, 0, offsetof(mavlink_mission_item_t, param1) }, { "param2", NULL, MAVLINK_TYPE_FLOAT, 0, 4, offsetof(mavlink_mission_item_t, param2) }, { "param3", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_mission_item_t, param3) }, { "param4", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_mission_item_t, param4) }, { "x", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_mission_item_t, x) }, { "y", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_mission_item_t, y) }, { "z", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_mission_item_t, z) }, { "seq", NULL, MAVLINK_TYPE_UINT16_T, 0, 28, offsetof(mavlink_mission_item_t, seq) }, { "command", NULL, MAVLINK_TYPE_UINT16_T, 0, 30, offsetof(mavlink_mission_item_t, command) }, { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 32, offsetof(mavlink_mission_item_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 33, offsetof(mavlink_mission_item_t, target_component) }, { "frame", NULL, MAVLINK_TYPE_UINT8_T, 0, 34, offsetof(mavlink_mission_item_t, frame) }, { "current", NULL, MAVLINK_TYPE_UINT8_T, 0, 35, offsetof(mavlink_mission_item_t, current) }, { "autocontinue", NULL, MAVLINK_TYPE_UINT8_T, 0, 36, offsetof(mavlink_mission_item_t, autocontinue) }, } }
# 74 "./lib/main/mavlink/common/./mavlink_msg_mission_item.h"
static inline uint16_t mavlink_msg_mission_item_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
{
# 96 "./lib/main/mavlink/common/./mavlink_msg_mission_item.h"
 mavlink_mission_item_t packet;
 packet.param1 = param1;
 packet.param2 = param2;
 packet.param3 = param3;
 packet.param4 = param4;
 packet.x = x;
 packet.y = y;
 packet.z = z;
 packet.seq = seq;
 packet.command = command;
 packet.target_system = target_system;
 packet.target_component = target_component;
 packet.frame = frame;
 packet.current = current;
 packet.autocontinue = autocontinue;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 37);


 msg->msgid = 39;

    return mavlink_finalize_message(msg, system_id, component_id, 37, 254);



}
# 145 "./lib/main/mavlink/common/./mavlink_msg_mission_item.h"
static inline uint16_t mavlink_msg_mission_item_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_system,uint8_t target_component,uint16_t seq,uint8_t frame,uint16_t command,uint8_t current,uint8_t autocontinue,float param1,float param2,float param3,float param4,float x,float y,float z)
{
# 168 "./lib/main/mavlink/common/./mavlink_msg_mission_item.h"
 mavlink_mission_item_t packet;
 packet.param1 = param1;
 packet.param2 = param2;
 packet.param3 = param3;
 packet.param4 = param4;
 packet.x = x;
 packet.y = y;
 packet.z = z;
 packet.seq = seq;
 packet.command = command;
 packet.target_system = target_system;
 packet.target_component = target_component;
 packet.frame = frame;
 packet.current = current;
 packet.autocontinue = autocontinue;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 37);


 msg->msgid = 39;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 37, 254);



}
# 203 "./lib/main/mavlink/common/./mavlink_msg_mission_item.h"
static inline uint16_t mavlink_msg_mission_item_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_mission_item_t* mission_item)
{
 return mavlink_msg_mission_item_pack(system_id, component_id, msg, mission_item->target_system, mission_item->target_component, mission_item->seq, mission_item->frame, mission_item->command, mission_item->current, mission_item->autocontinue, mission_item->param1, mission_item->param2, mission_item->param3, mission_item->param4, mission_item->x, mission_item->y, mission_item->z);
}
# 217 "./lib/main/mavlink/common/./mavlink_msg_mission_item.h"
static inline uint16_t mavlink_msg_mission_item_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_mission_item_t* mission_item)
{
 return mavlink_msg_mission_item_pack_chan(system_id, component_id, chan, msg, mission_item->target_system, mission_item->target_component, mission_item->seq, mission_item->frame, mission_item->command, mission_item->current, mission_item->autocontinue, mission_item->param1, mission_item->param2, mission_item->param3, mission_item->param4, mission_item->x, mission_item->y, mission_item->z);
}
# 360 "./lib/main/mavlink/common/./mavlink_msg_mission_item.h"
static inline uint8_t mavlink_msg_mission_item_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[32];
}






static inline uint8_t mavlink_msg_mission_item_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[33];
}






static inline uint16_t mavlink_msg_mission_item_get_seq(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 28);
}






static inline uint8_t mavlink_msg_mission_item_get_frame(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[34];
}






static inline uint16_t mavlink_msg_mission_item_get_command(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 30);
}






static inline uint8_t mavlink_msg_mission_item_get_current(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[35];
}






static inline uint8_t mavlink_msg_mission_item_get_autocontinue(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[36];
}






static inline float mavlink_msg_mission_item_get_param1(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 0);
}






static inline float mavlink_msg_mission_item_get_param2(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_mission_item_get_param3(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_mission_item_get_param4(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_mission_item_get_x(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_mission_item_get_y(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_mission_item_get_z(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 24);
}







static inline void mavlink_msg_mission_item_decode(const mavlink_message_t* msg, mavlink_mission_item_t* mission_item)
{
# 519 "./lib/main/mavlink/common/./mavlink_msg_mission_item.h"
 memcpy(mission_item, ((const char *)(&((msg)->payload64[0]))), 37);

}
# 685 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_mission_request.h" 1


#define MAVLINK_MSG_ID_MISSION_REQUEST 40

typedef struct __mavlink_mission_request_t
{
 uint16_t seq;
 uint8_t target_system;
 uint8_t target_component;
} mavlink_mission_request_t;

#define MAVLINK_MSG_ID_MISSION_REQUEST_LEN 4
#define MAVLINK_MSG_ID_40_LEN 4

#define MAVLINK_MSG_ID_MISSION_REQUEST_CRC 230
#define MAVLINK_MSG_ID_40_CRC 230



#define MAVLINK_MESSAGE_INFO_MISSION_REQUEST { "MISSION_REQUEST", 3, { { "seq", NULL, MAVLINK_TYPE_UINT16_T, 0, 0, offsetof(mavlink_mission_request_t, seq) }, { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 2, offsetof(mavlink_mission_request_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 3, offsetof(mavlink_mission_request_t, target_component) }, } }
# 41 "./lib/main/mavlink/common/./mavlink_msg_mission_request.h"
static inline uint16_t mavlink_msg_mission_request_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_system, uint8_t target_component, uint16_t seq)
{
# 52 "./lib/main/mavlink/common/./mavlink_msg_mission_request.h"
 mavlink_mission_request_t packet;
 packet.seq = seq;
 packet.target_system = target_system;
 packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 4);


 msg->msgid = 40;

    return mavlink_finalize_message(msg, system_id, component_id, 4, 230);



}
# 79 "./lib/main/mavlink/common/./mavlink_msg_mission_request.h"
static inline uint16_t mavlink_msg_mission_request_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_system,uint8_t target_component,uint16_t seq)
{
# 91 "./lib/main/mavlink/common/./mavlink_msg_mission_request.h"
 mavlink_mission_request_t packet;
 packet.seq = seq;
 packet.target_system = target_system;
 packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 4);


 msg->msgid = 40;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 4, 230);



}
# 115 "./lib/main/mavlink/common/./mavlink_msg_mission_request.h"
static inline uint16_t mavlink_msg_mission_request_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_mission_request_t* mission_request)
{
 return mavlink_msg_mission_request_pack(system_id, component_id, msg, mission_request->target_system, mission_request->target_component, mission_request->seq);
}
# 129 "./lib/main/mavlink/common/./mavlink_msg_mission_request.h"
static inline uint16_t mavlink_msg_mission_request_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_mission_request_t* mission_request)
{
 return mavlink_msg_mission_request_pack_chan(system_id, component_id, chan, msg, mission_request->target_system, mission_request->target_component, mission_request->seq);
}
# 217 "./lib/main/mavlink/common/./mavlink_msg_mission_request.h"
static inline uint8_t mavlink_msg_mission_request_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}






static inline uint8_t mavlink_msg_mission_request_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[3];
}






static inline uint16_t mavlink_msg_mission_request_get_seq(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 0);
}







static inline void mavlink_msg_mission_request_decode(const mavlink_message_t* msg, mavlink_mission_request_t* mission_request)
{





 memcpy(mission_request, ((const char *)(&((msg)->payload64[0]))), 4);

}
# 686 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_mission_set_current.h" 1


#define MAVLINK_MSG_ID_MISSION_SET_CURRENT 41

typedef struct __mavlink_mission_set_current_t
{
 uint16_t seq;
 uint8_t target_system;
 uint8_t target_component;
} mavlink_mission_set_current_t;

#define MAVLINK_MSG_ID_MISSION_SET_CURRENT_LEN 4
#define MAVLINK_MSG_ID_41_LEN 4

#define MAVLINK_MSG_ID_MISSION_SET_CURRENT_CRC 28
#define MAVLINK_MSG_ID_41_CRC 28



#define MAVLINK_MESSAGE_INFO_MISSION_SET_CURRENT { "MISSION_SET_CURRENT", 3, { { "seq", NULL, MAVLINK_TYPE_UINT16_T, 0, 0, offsetof(mavlink_mission_set_current_t, seq) }, { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 2, offsetof(mavlink_mission_set_current_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 3, offsetof(mavlink_mission_set_current_t, target_component) }, } }
# 41 "./lib/main/mavlink/common/./mavlink_msg_mission_set_current.h"
static inline uint16_t mavlink_msg_mission_set_current_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_system, uint8_t target_component, uint16_t seq)
{
# 52 "./lib/main/mavlink/common/./mavlink_msg_mission_set_current.h"
 mavlink_mission_set_current_t packet;
 packet.seq = seq;
 packet.target_system = target_system;
 packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 4);


 msg->msgid = 41;

    return mavlink_finalize_message(msg, system_id, component_id, 4, 28);



}
# 79 "./lib/main/mavlink/common/./mavlink_msg_mission_set_current.h"
static inline uint16_t mavlink_msg_mission_set_current_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_system,uint8_t target_component,uint16_t seq)
{
# 91 "./lib/main/mavlink/common/./mavlink_msg_mission_set_current.h"
 mavlink_mission_set_current_t packet;
 packet.seq = seq;
 packet.target_system = target_system;
 packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 4);


 msg->msgid = 41;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 4, 28);



}
# 115 "./lib/main/mavlink/common/./mavlink_msg_mission_set_current.h"
static inline uint16_t mavlink_msg_mission_set_current_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_mission_set_current_t* mission_set_current)
{
 return mavlink_msg_mission_set_current_pack(system_id, component_id, msg, mission_set_current->target_system, mission_set_current->target_component, mission_set_current->seq);
}
# 129 "./lib/main/mavlink/common/./mavlink_msg_mission_set_current.h"
static inline uint16_t mavlink_msg_mission_set_current_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_mission_set_current_t* mission_set_current)
{
 return mavlink_msg_mission_set_current_pack_chan(system_id, component_id, chan, msg, mission_set_current->target_system, mission_set_current->target_component, mission_set_current->seq);
}
# 217 "./lib/main/mavlink/common/./mavlink_msg_mission_set_current.h"
static inline uint8_t mavlink_msg_mission_set_current_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}






static inline uint8_t mavlink_msg_mission_set_current_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[3];
}






static inline uint16_t mavlink_msg_mission_set_current_get_seq(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 0);
}







static inline void mavlink_msg_mission_set_current_decode(const mavlink_message_t* msg, mavlink_mission_set_current_t* mission_set_current)
{





 memcpy(mission_set_current, ((const char *)(&((msg)->payload64[0]))), 4);

}
# 687 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_mission_current.h" 1


#define MAVLINK_MSG_ID_MISSION_CURRENT 42

typedef struct __mavlink_mission_current_t
{
 uint16_t seq;
} mavlink_mission_current_t;

#define MAVLINK_MSG_ID_MISSION_CURRENT_LEN 2
#define MAVLINK_MSG_ID_42_LEN 2

#define MAVLINK_MSG_ID_MISSION_CURRENT_CRC 28
#define MAVLINK_MSG_ID_42_CRC 28



#define MAVLINK_MESSAGE_INFO_MISSION_CURRENT { "MISSION_CURRENT", 1, { { "seq", NULL, MAVLINK_TYPE_UINT16_T, 0, 0, offsetof(mavlink_mission_current_t, seq) }, } }
# 35 "./lib/main/mavlink/common/./mavlink_msg_mission_current.h"
static inline uint16_t mavlink_msg_mission_current_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint16_t seq)
{






 mavlink_mission_current_t packet;
 packet.seq = seq;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


 msg->msgid = 42;

    return mavlink_finalize_message(msg, system_id, component_id, 2, 28);



}
# 67 "./lib/main/mavlink/common/./mavlink_msg_mission_current.h"
static inline uint16_t mavlink_msg_mission_current_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint16_t seq)
{






 mavlink_mission_current_t packet;
 packet.seq = seq;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


 msg->msgid = 42;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 2, 28);



}
# 99 "./lib/main/mavlink/common/./mavlink_msg_mission_current.h"
static inline uint16_t mavlink_msg_mission_current_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_mission_current_t* mission_current)
{
 return mavlink_msg_mission_current_pack(system_id, component_id, msg, mission_current->seq);
}
# 113 "./lib/main/mavlink/common/./mavlink_msg_mission_current.h"
static inline uint16_t mavlink_msg_mission_current_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_mission_current_t* mission_current)
{
 return mavlink_msg_mission_current_pack_chan(system_id, component_id, chan, msg, mission_current->seq);
}
# 191 "./lib/main/mavlink/common/./mavlink_msg_mission_current.h"
static inline uint16_t mavlink_msg_mission_current_get_seq(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 0);
}







static inline void mavlink_msg_mission_current_decode(const mavlink_message_t* msg, mavlink_mission_current_t* mission_current)
{



 memcpy(mission_current, ((const char *)(&((msg)->payload64[0]))), 2);

}
# 688 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_mission_request_list.h" 1


#define MAVLINK_MSG_ID_MISSION_REQUEST_LIST 43

typedef struct __mavlink_mission_request_list_t
{
 uint8_t target_system;
 uint8_t target_component;
} mavlink_mission_request_list_t;

#define MAVLINK_MSG_ID_MISSION_REQUEST_LIST_LEN 2
#define MAVLINK_MSG_ID_43_LEN 2

#define MAVLINK_MSG_ID_MISSION_REQUEST_LIST_CRC 132
#define MAVLINK_MSG_ID_43_CRC 132



#define MAVLINK_MESSAGE_INFO_MISSION_REQUEST_LIST { "MISSION_REQUEST_LIST", 2, { { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 0, offsetof(mavlink_mission_request_list_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 1, offsetof(mavlink_mission_request_list_t, target_component) }, } }
# 38 "./lib/main/mavlink/common/./mavlink_msg_mission_request_list.h"
static inline uint16_t mavlink_msg_mission_request_list_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_system, uint8_t target_component)
{







 mavlink_mission_request_list_t packet;
 packet.target_system = target_system;
 packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


 msg->msgid = 43;

    return mavlink_finalize_message(msg, system_id, component_id, 2, 132);



}
# 73 "./lib/main/mavlink/common/./mavlink_msg_mission_request_list.h"
static inline uint16_t mavlink_msg_mission_request_list_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_system,uint8_t target_component)
{







 mavlink_mission_request_list_t packet;
 packet.target_system = target_system;
 packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


 msg->msgid = 43;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 2, 132);



}
# 107 "./lib/main/mavlink/common/./mavlink_msg_mission_request_list.h"
static inline uint16_t mavlink_msg_mission_request_list_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_mission_request_list_t* mission_request_list)
{
 return mavlink_msg_mission_request_list_pack(system_id, component_id, msg, mission_request_list->target_system, mission_request_list->target_component);
}
# 121 "./lib/main/mavlink/common/./mavlink_msg_mission_request_list.h"
static inline uint16_t mavlink_msg_mission_request_list_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_mission_request_list_t* mission_request_list)
{
 return mavlink_msg_mission_request_list_pack_chan(system_id, component_id, chan, msg, mission_request_list->target_system, mission_request_list->target_component);
}
# 204 "./lib/main/mavlink/common/./mavlink_msg_mission_request_list.h"
static inline uint8_t mavlink_msg_mission_request_list_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_mission_request_list_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}







static inline void mavlink_msg_mission_request_list_decode(const mavlink_message_t* msg, mavlink_mission_request_list_t* mission_request_list)
{




 memcpy(mission_request_list, ((const char *)(&((msg)->payload64[0]))), 2);

}
# 689 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_mission_count.h" 1


#define MAVLINK_MSG_ID_MISSION_COUNT 44

typedef struct __mavlink_mission_count_t
{
 uint16_t count;
 uint8_t target_system;
 uint8_t target_component;
} mavlink_mission_count_t;

#define MAVLINK_MSG_ID_MISSION_COUNT_LEN 4
#define MAVLINK_MSG_ID_44_LEN 4

#define MAVLINK_MSG_ID_MISSION_COUNT_CRC 221
#define MAVLINK_MSG_ID_44_CRC 221



#define MAVLINK_MESSAGE_INFO_MISSION_COUNT { "MISSION_COUNT", 3, { { "count", NULL, MAVLINK_TYPE_UINT16_T, 0, 0, offsetof(mavlink_mission_count_t, count) }, { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 2, offsetof(mavlink_mission_count_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 3, offsetof(mavlink_mission_count_t, target_component) }, } }
# 41 "./lib/main/mavlink/common/./mavlink_msg_mission_count.h"
static inline uint16_t mavlink_msg_mission_count_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_system, uint8_t target_component, uint16_t count)
{
# 52 "./lib/main/mavlink/common/./mavlink_msg_mission_count.h"
 mavlink_mission_count_t packet;
 packet.count = count;
 packet.target_system = target_system;
 packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 4);


 msg->msgid = 44;

    return mavlink_finalize_message(msg, system_id, component_id, 4, 221);



}
# 79 "./lib/main/mavlink/common/./mavlink_msg_mission_count.h"
static inline uint16_t mavlink_msg_mission_count_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_system,uint8_t target_component,uint16_t count)
{
# 91 "./lib/main/mavlink/common/./mavlink_msg_mission_count.h"
 mavlink_mission_count_t packet;
 packet.count = count;
 packet.target_system = target_system;
 packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 4);


 msg->msgid = 44;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 4, 221);



}
# 115 "./lib/main/mavlink/common/./mavlink_msg_mission_count.h"
static inline uint16_t mavlink_msg_mission_count_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_mission_count_t* mission_count)
{
 return mavlink_msg_mission_count_pack(system_id, component_id, msg, mission_count->target_system, mission_count->target_component, mission_count->count);
}
# 129 "./lib/main/mavlink/common/./mavlink_msg_mission_count.h"
static inline uint16_t mavlink_msg_mission_count_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_mission_count_t* mission_count)
{
 return mavlink_msg_mission_count_pack_chan(system_id, component_id, chan, msg, mission_count->target_system, mission_count->target_component, mission_count->count);
}
# 217 "./lib/main/mavlink/common/./mavlink_msg_mission_count.h"
static inline uint8_t mavlink_msg_mission_count_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}






static inline uint8_t mavlink_msg_mission_count_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[3];
}






static inline uint16_t mavlink_msg_mission_count_get_count(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 0);
}







static inline void mavlink_msg_mission_count_decode(const mavlink_message_t* msg, mavlink_mission_count_t* mission_count)
{





 memcpy(mission_count, ((const char *)(&((msg)->payload64[0]))), 4);

}
# 690 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_mission_clear_all.h" 1


#define MAVLINK_MSG_ID_MISSION_CLEAR_ALL 45

typedef struct __mavlink_mission_clear_all_t
{
 uint8_t target_system;
 uint8_t target_component;
} mavlink_mission_clear_all_t;

#define MAVLINK_MSG_ID_MISSION_CLEAR_ALL_LEN 2
#define MAVLINK_MSG_ID_45_LEN 2

#define MAVLINK_MSG_ID_MISSION_CLEAR_ALL_CRC 232
#define MAVLINK_MSG_ID_45_CRC 232



#define MAVLINK_MESSAGE_INFO_MISSION_CLEAR_ALL { "MISSION_CLEAR_ALL", 2, { { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 0, offsetof(mavlink_mission_clear_all_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 1, offsetof(mavlink_mission_clear_all_t, target_component) }, } }
# 38 "./lib/main/mavlink/common/./mavlink_msg_mission_clear_all.h"
static inline uint16_t mavlink_msg_mission_clear_all_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_system, uint8_t target_component)
{







 mavlink_mission_clear_all_t packet;
 packet.target_system = target_system;
 packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


 msg->msgid = 45;

    return mavlink_finalize_message(msg, system_id, component_id, 2, 232);



}
# 73 "./lib/main/mavlink/common/./mavlink_msg_mission_clear_all.h"
static inline uint16_t mavlink_msg_mission_clear_all_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_system,uint8_t target_component)
{







 mavlink_mission_clear_all_t packet;
 packet.target_system = target_system;
 packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


 msg->msgid = 45;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 2, 232);



}
# 107 "./lib/main/mavlink/common/./mavlink_msg_mission_clear_all.h"
static inline uint16_t mavlink_msg_mission_clear_all_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_mission_clear_all_t* mission_clear_all)
{
 return mavlink_msg_mission_clear_all_pack(system_id, component_id, msg, mission_clear_all->target_system, mission_clear_all->target_component);
}
# 121 "./lib/main/mavlink/common/./mavlink_msg_mission_clear_all.h"
static inline uint16_t mavlink_msg_mission_clear_all_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_mission_clear_all_t* mission_clear_all)
{
 return mavlink_msg_mission_clear_all_pack_chan(system_id, component_id, chan, msg, mission_clear_all->target_system, mission_clear_all->target_component);
}
# 204 "./lib/main/mavlink/common/./mavlink_msg_mission_clear_all.h"
static inline uint8_t mavlink_msg_mission_clear_all_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_mission_clear_all_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}







static inline void mavlink_msg_mission_clear_all_decode(const mavlink_message_t* msg, mavlink_mission_clear_all_t* mission_clear_all)
{




 memcpy(mission_clear_all, ((const char *)(&((msg)->payload64[0]))), 2);

}
# 691 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_mission_item_reached.h" 1


#define MAVLINK_MSG_ID_MISSION_ITEM_REACHED 46

typedef struct __mavlink_mission_item_reached_t
{
 uint16_t seq;
} mavlink_mission_item_reached_t;

#define MAVLINK_MSG_ID_MISSION_ITEM_REACHED_LEN 2
#define MAVLINK_MSG_ID_46_LEN 2

#define MAVLINK_MSG_ID_MISSION_ITEM_REACHED_CRC 11
#define MAVLINK_MSG_ID_46_CRC 11



#define MAVLINK_MESSAGE_INFO_MISSION_ITEM_REACHED { "MISSION_ITEM_REACHED", 1, { { "seq", NULL, MAVLINK_TYPE_UINT16_T, 0, 0, offsetof(mavlink_mission_item_reached_t, seq) }, } }
# 35 "./lib/main/mavlink/common/./mavlink_msg_mission_item_reached.h"
static inline uint16_t mavlink_msg_mission_item_reached_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint16_t seq)
{






 mavlink_mission_item_reached_t packet;
 packet.seq = seq;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


 msg->msgid = 46;

    return mavlink_finalize_message(msg, system_id, component_id, 2, 11);



}
# 67 "./lib/main/mavlink/common/./mavlink_msg_mission_item_reached.h"
static inline uint16_t mavlink_msg_mission_item_reached_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint16_t seq)
{






 mavlink_mission_item_reached_t packet;
 packet.seq = seq;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


 msg->msgid = 46;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 2, 11);



}
# 99 "./lib/main/mavlink/common/./mavlink_msg_mission_item_reached.h"
static inline uint16_t mavlink_msg_mission_item_reached_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_mission_item_reached_t* mission_item_reached)
{
 return mavlink_msg_mission_item_reached_pack(system_id, component_id, msg, mission_item_reached->seq);
}
# 113 "./lib/main/mavlink/common/./mavlink_msg_mission_item_reached.h"
static inline uint16_t mavlink_msg_mission_item_reached_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_mission_item_reached_t* mission_item_reached)
{
 return mavlink_msg_mission_item_reached_pack_chan(system_id, component_id, chan, msg, mission_item_reached->seq);
}
# 191 "./lib/main/mavlink/common/./mavlink_msg_mission_item_reached.h"
static inline uint16_t mavlink_msg_mission_item_reached_get_seq(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 0);
}







static inline void mavlink_msg_mission_item_reached_decode(const mavlink_message_t* msg, mavlink_mission_item_reached_t* mission_item_reached)
{



 memcpy(mission_item_reached, ((const char *)(&((msg)->payload64[0]))), 2);

}
# 692 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_mission_ack.h" 1


#define MAVLINK_MSG_ID_MISSION_ACK 47

typedef struct __mavlink_mission_ack_t
{
 uint8_t target_system;
 uint8_t target_component;
 uint8_t type;
} mavlink_mission_ack_t;

#define MAVLINK_MSG_ID_MISSION_ACK_LEN 3
#define MAVLINK_MSG_ID_47_LEN 3

#define MAVLINK_MSG_ID_MISSION_ACK_CRC 153
#define MAVLINK_MSG_ID_47_CRC 153



#define MAVLINK_MESSAGE_INFO_MISSION_ACK { "MISSION_ACK", 3, { { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 0, offsetof(mavlink_mission_ack_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 1, offsetof(mavlink_mission_ack_t, target_component) }, { "type", NULL, MAVLINK_TYPE_UINT8_T, 0, 2, offsetof(mavlink_mission_ack_t, type) }, } }
# 41 "./lib/main/mavlink/common/./mavlink_msg_mission_ack.h"
static inline uint16_t mavlink_msg_mission_ack_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_system, uint8_t target_component, uint8_t type)
{
# 52 "./lib/main/mavlink/common/./mavlink_msg_mission_ack.h"
 mavlink_mission_ack_t packet;
 packet.target_system = target_system;
 packet.target_component = target_component;
 packet.type = type;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 3);


 msg->msgid = 47;

    return mavlink_finalize_message(msg, system_id, component_id, 3, 153);



}
# 79 "./lib/main/mavlink/common/./mavlink_msg_mission_ack.h"
static inline uint16_t mavlink_msg_mission_ack_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_system,uint8_t target_component,uint8_t type)
{
# 91 "./lib/main/mavlink/common/./mavlink_msg_mission_ack.h"
 mavlink_mission_ack_t packet;
 packet.target_system = target_system;
 packet.target_component = target_component;
 packet.type = type;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 3);


 msg->msgid = 47;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 3, 153);



}
# 115 "./lib/main/mavlink/common/./mavlink_msg_mission_ack.h"
static inline uint16_t mavlink_msg_mission_ack_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_mission_ack_t* mission_ack)
{
 return mavlink_msg_mission_ack_pack(system_id, component_id, msg, mission_ack->target_system, mission_ack->target_component, mission_ack->type);
}
# 129 "./lib/main/mavlink/common/./mavlink_msg_mission_ack.h"
static inline uint16_t mavlink_msg_mission_ack_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_mission_ack_t* mission_ack)
{
 return mavlink_msg_mission_ack_pack_chan(system_id, component_id, chan, msg, mission_ack->target_system, mission_ack->target_component, mission_ack->type);
}
# 217 "./lib/main/mavlink/common/./mavlink_msg_mission_ack.h"
static inline uint8_t mavlink_msg_mission_ack_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_mission_ack_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}






static inline uint8_t mavlink_msg_mission_ack_get_type(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}







static inline void mavlink_msg_mission_ack_decode(const mavlink_message_t* msg, mavlink_mission_ack_t* mission_ack)
{





 memcpy(mission_ack, ((const char *)(&((msg)->payload64[0]))), 3);

}
# 693 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_set_gps_global_origin.h" 1


#define MAVLINK_MSG_ID_SET_GPS_GLOBAL_ORIGIN 48

typedef struct __mavlink_set_gps_global_origin_t
{
 int32_t latitude;
 int32_t longitude;
 int32_t altitude;
 uint8_t target_system;
} mavlink_set_gps_global_origin_t;

#define MAVLINK_MSG_ID_SET_GPS_GLOBAL_ORIGIN_LEN 13
#define MAVLINK_MSG_ID_48_LEN 13

#define MAVLINK_MSG_ID_SET_GPS_GLOBAL_ORIGIN_CRC 41
#define MAVLINK_MSG_ID_48_CRC 41



#define MAVLINK_MESSAGE_INFO_SET_GPS_GLOBAL_ORIGIN { "SET_GPS_GLOBAL_ORIGIN", 4, { { "latitude", NULL, MAVLINK_TYPE_INT32_T, 0, 0, offsetof(mavlink_set_gps_global_origin_t, latitude) }, { "longitude", NULL, MAVLINK_TYPE_INT32_T, 0, 4, offsetof(mavlink_set_gps_global_origin_t, longitude) }, { "altitude", NULL, MAVLINK_TYPE_INT32_T, 0, 8, offsetof(mavlink_set_gps_global_origin_t, altitude) }, { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 12, offsetof(mavlink_set_gps_global_origin_t, target_system) }, } }
# 44 "./lib/main/mavlink/common/./mavlink_msg_set_gps_global_origin.h"
static inline uint16_t mavlink_msg_set_gps_global_origin_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_system, int32_t latitude, int32_t longitude, int32_t altitude)
{
# 56 "./lib/main/mavlink/common/./mavlink_msg_set_gps_global_origin.h"
 mavlink_set_gps_global_origin_t packet;
 packet.latitude = latitude;
 packet.longitude = longitude;
 packet.altitude = altitude;
 packet.target_system = target_system;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 13);


 msg->msgid = 48;

    return mavlink_finalize_message(msg, system_id, component_id, 13, 41);



}
# 85 "./lib/main/mavlink/common/./mavlink_msg_set_gps_global_origin.h"
static inline uint16_t mavlink_msg_set_gps_global_origin_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_system,int32_t latitude,int32_t longitude,int32_t altitude)
{
# 98 "./lib/main/mavlink/common/./mavlink_msg_set_gps_global_origin.h"
 mavlink_set_gps_global_origin_t packet;
 packet.latitude = latitude;
 packet.longitude = longitude;
 packet.altitude = altitude;
 packet.target_system = target_system;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 13);


 msg->msgid = 48;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 13, 41);



}
# 123 "./lib/main/mavlink/common/./mavlink_msg_set_gps_global_origin.h"
static inline uint16_t mavlink_msg_set_gps_global_origin_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_set_gps_global_origin_t* set_gps_global_origin)
{
 return mavlink_msg_set_gps_global_origin_pack(system_id, component_id, msg, set_gps_global_origin->target_system, set_gps_global_origin->latitude, set_gps_global_origin->longitude, set_gps_global_origin->altitude);
}
# 137 "./lib/main/mavlink/common/./mavlink_msg_set_gps_global_origin.h"
static inline uint16_t mavlink_msg_set_gps_global_origin_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_set_gps_global_origin_t* set_gps_global_origin)
{
 return mavlink_msg_set_gps_global_origin_pack_chan(system_id, component_id, chan, msg, set_gps_global_origin->target_system, set_gps_global_origin->latitude, set_gps_global_origin->longitude, set_gps_global_origin->altitude);
}
# 230 "./lib/main/mavlink/common/./mavlink_msg_set_gps_global_origin.h"
static inline uint8_t mavlink_msg_set_gps_global_origin_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[12];
}






static inline int32_t mavlink_msg_set_gps_global_origin_get_latitude(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 0);
}






static inline int32_t mavlink_msg_set_gps_global_origin_get_longitude(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 4);
}






static inline int32_t mavlink_msg_set_gps_global_origin_get_altitude(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 8);
}







static inline void mavlink_msg_set_gps_global_origin_decode(const mavlink_message_t* msg, mavlink_set_gps_global_origin_t* set_gps_global_origin)
{






 memcpy(set_gps_global_origin, ((const char *)(&((msg)->payload64[0]))), 13);

}
# 694 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_gps_global_origin.h" 1


#define MAVLINK_MSG_ID_GPS_GLOBAL_ORIGIN 49

typedef struct __mavlink_gps_global_origin_t
{
 int32_t latitude;
 int32_t longitude;
 int32_t altitude;
} mavlink_gps_global_origin_t;

#define MAVLINK_MSG_ID_GPS_GLOBAL_ORIGIN_LEN 12
#define MAVLINK_MSG_ID_49_LEN 12

#define MAVLINK_MSG_ID_GPS_GLOBAL_ORIGIN_CRC 39
#define MAVLINK_MSG_ID_49_CRC 39



#define MAVLINK_MESSAGE_INFO_GPS_GLOBAL_ORIGIN { "GPS_GLOBAL_ORIGIN", 3, { { "latitude", NULL, MAVLINK_TYPE_INT32_T, 0, 0, offsetof(mavlink_gps_global_origin_t, latitude) }, { "longitude", NULL, MAVLINK_TYPE_INT32_T, 0, 4, offsetof(mavlink_gps_global_origin_t, longitude) }, { "altitude", NULL, MAVLINK_TYPE_INT32_T, 0, 8, offsetof(mavlink_gps_global_origin_t, altitude) }, } }
# 41 "./lib/main/mavlink/common/./mavlink_msg_gps_global_origin.h"
static inline uint16_t mavlink_msg_gps_global_origin_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             int32_t latitude, int32_t longitude, int32_t altitude)
{
# 52 "./lib/main/mavlink/common/./mavlink_msg_gps_global_origin.h"
 mavlink_gps_global_origin_t packet;
 packet.latitude = latitude;
 packet.longitude = longitude;
 packet.altitude = altitude;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 12);


 msg->msgid = 49;

    return mavlink_finalize_message(msg, system_id, component_id, 12, 39);



}
# 79 "./lib/main/mavlink/common/./mavlink_msg_gps_global_origin.h"
static inline uint16_t mavlink_msg_gps_global_origin_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 int32_t latitude,int32_t longitude,int32_t altitude)
{
# 91 "./lib/main/mavlink/common/./mavlink_msg_gps_global_origin.h"
 mavlink_gps_global_origin_t packet;
 packet.latitude = latitude;
 packet.longitude = longitude;
 packet.altitude = altitude;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 12);


 msg->msgid = 49;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 12, 39);



}
# 115 "./lib/main/mavlink/common/./mavlink_msg_gps_global_origin.h"
static inline uint16_t mavlink_msg_gps_global_origin_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_gps_global_origin_t* gps_global_origin)
{
 return mavlink_msg_gps_global_origin_pack(system_id, component_id, msg, gps_global_origin->latitude, gps_global_origin->longitude, gps_global_origin->altitude);
}
# 129 "./lib/main/mavlink/common/./mavlink_msg_gps_global_origin.h"
static inline uint16_t mavlink_msg_gps_global_origin_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_gps_global_origin_t* gps_global_origin)
{
 return mavlink_msg_gps_global_origin_pack_chan(system_id, component_id, chan, msg, gps_global_origin->latitude, gps_global_origin->longitude, gps_global_origin->altitude);
}
# 217 "./lib/main/mavlink/common/./mavlink_msg_gps_global_origin.h"
static inline int32_t mavlink_msg_gps_global_origin_get_latitude(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 0);
}






static inline int32_t mavlink_msg_gps_global_origin_get_longitude(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 4);
}






static inline int32_t mavlink_msg_gps_global_origin_get_altitude(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 8);
}







static inline void mavlink_msg_gps_global_origin_decode(const mavlink_message_t* msg, mavlink_gps_global_origin_t* gps_global_origin)
{





 memcpy(gps_global_origin, ((const char *)(&((msg)->payload64[0]))), 12);

}
# 695 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_param_map_rc.h" 1


#define MAVLINK_MSG_ID_PARAM_MAP_RC 50

typedef struct __mavlink_param_map_rc_t
{
 float param_value0;
 float scale;
 float param_value_min;
 float param_value_max;
 int16_t param_index;
 uint8_t target_system;
 uint8_t target_component;
 char param_id[16];
 uint8_t parameter_rc_channel_index;
} mavlink_param_map_rc_t;

#define MAVLINK_MSG_ID_PARAM_MAP_RC_LEN 37
#define MAVLINK_MSG_ID_50_LEN 37

#define MAVLINK_MSG_ID_PARAM_MAP_RC_CRC 78
#define MAVLINK_MSG_ID_50_CRC 78

#define MAVLINK_MSG_PARAM_MAP_RC_FIELD_PARAM_ID_LEN 16

#define MAVLINK_MESSAGE_INFO_PARAM_MAP_RC { "PARAM_MAP_RC", 9, { { "param_value0", NULL, MAVLINK_TYPE_FLOAT, 0, 0, offsetof(mavlink_param_map_rc_t, param_value0) }, { "scale", NULL, MAVLINK_TYPE_FLOAT, 0, 4, offsetof(mavlink_param_map_rc_t, scale) }, { "param_value_min", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_param_map_rc_t, param_value_min) }, { "param_value_max", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_param_map_rc_t, param_value_max) }, { "param_index", NULL, MAVLINK_TYPE_INT16_T, 0, 16, offsetof(mavlink_param_map_rc_t, param_index) }, { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 18, offsetof(mavlink_param_map_rc_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 19, offsetof(mavlink_param_map_rc_t, target_component) }, { "param_id", NULL, MAVLINK_TYPE_CHAR, 16, 20, offsetof(mavlink_param_map_rc_t, param_id) }, { "parameter_rc_channel_index", NULL, MAVLINK_TYPE_UINT8_T, 0, 36, offsetof(mavlink_param_map_rc_t, parameter_rc_channel_index) }, } }
# 59 "./lib/main/mavlink/common/./mavlink_msg_param_map_rc.h"
static inline uint16_t mavlink_msg_param_map_rc_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_system, uint8_t target_component, const char *param_id, int16_t param_index, uint8_t parameter_rc_channel_index, float param_value0, float scale, float param_value_min, float param_value_max)
{
# 75 "./lib/main/mavlink/common/./mavlink_msg_param_map_rc.h"
 mavlink_param_map_rc_t packet;
 packet.param_value0 = param_value0;
 packet.scale = scale;
 packet.param_value_min = param_value_min;
 packet.param_value_max = param_value_max;
 packet.param_index = param_index;
 packet.target_system = target_system;
 packet.target_component = target_component;
 packet.parameter_rc_channel_index = parameter_rc_channel_index;
 mav_array_memcpy(packet.param_id, param_id, sizeof(char)*16);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 37);


 msg->msgid = 50;

    return mavlink_finalize_message(msg, system_id, component_id, 37, 78);



}
# 113 "./lib/main/mavlink/common/./mavlink_msg_param_map_rc.h"
static inline uint16_t mavlink_msg_param_map_rc_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_system,uint8_t target_component,const char *param_id,int16_t param_index,uint8_t parameter_rc_channel_index,float param_value0,float scale,float param_value_min,float param_value_max)
{
# 130 "./lib/main/mavlink/common/./mavlink_msg_param_map_rc.h"
 mavlink_param_map_rc_t packet;
 packet.param_value0 = param_value0;
 packet.scale = scale;
 packet.param_value_min = param_value_min;
 packet.param_value_max = param_value_max;
 packet.param_index = param_index;
 packet.target_system = target_system;
 packet.target_component = target_component;
 packet.parameter_rc_channel_index = parameter_rc_channel_index;
 mav_array_memcpy(packet.param_id, param_id, sizeof(char)*16);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 37);


 msg->msgid = 50;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 37, 78);



}
# 159 "./lib/main/mavlink/common/./mavlink_msg_param_map_rc.h"
static inline uint16_t mavlink_msg_param_map_rc_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_param_map_rc_t* param_map_rc)
{
 return mavlink_msg_param_map_rc_pack(system_id, component_id, msg, param_map_rc->target_system, param_map_rc->target_component, param_map_rc->param_id, param_map_rc->param_index, param_map_rc->parameter_rc_channel_index, param_map_rc->param_value0, param_map_rc->scale, param_map_rc->param_value_min, param_map_rc->param_value_max);
}
# 173 "./lib/main/mavlink/common/./mavlink_msg_param_map_rc.h"
static inline uint16_t mavlink_msg_param_map_rc_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_param_map_rc_t* param_map_rc)
{
 return mavlink_msg_param_map_rc_pack_chan(system_id, component_id, chan, msg, param_map_rc->target_system, param_map_rc->target_component, param_map_rc->param_id, param_map_rc->param_index, param_map_rc->parameter_rc_channel_index, param_map_rc->param_value0, param_map_rc->scale, param_map_rc->param_value_min, param_map_rc->param_value_max);
}
# 287 "./lib/main/mavlink/common/./mavlink_msg_param_map_rc.h"
static inline uint8_t mavlink_msg_param_map_rc_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[18];
}






static inline uint8_t mavlink_msg_param_map_rc_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[19];
}






static inline uint16_t mavlink_msg_param_map_rc_get_param_id(const mavlink_message_t* msg, char *param_id)
{
 return _MAV_RETURN_char_array(msg, param_id, 16, 20);
}






static inline int16_t mavlink_msg_param_map_rc_get_param_index(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 16);
}






static inline uint8_t mavlink_msg_param_map_rc_get_parameter_rc_channel_index(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[36];
}






static inline float mavlink_msg_param_map_rc_get_param_value0(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 0);
}






static inline float mavlink_msg_param_map_rc_get_scale(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_param_map_rc_get_param_value_min(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_param_map_rc_get_param_value_max(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}







static inline void mavlink_msg_param_map_rc_decode(const mavlink_message_t* msg, mavlink_param_map_rc_t* param_map_rc)
{
# 391 "./lib/main/mavlink/common/./mavlink_msg_param_map_rc.h"
 memcpy(param_map_rc, ((const char *)(&((msg)->payload64[0]))), 37);

}
# 696 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_safety_set_allowed_area.h" 1


#define MAVLINK_MSG_ID_SAFETY_SET_ALLOWED_AREA 54

typedef struct __mavlink_safety_set_allowed_area_t
{
 float p1x;
 float p1y;
 float p1z;
 float p2x;
 float p2y;
 float p2z;
 uint8_t target_system;
 uint8_t target_component;
 uint8_t frame;
} mavlink_safety_set_allowed_area_t;

#define MAVLINK_MSG_ID_SAFETY_SET_ALLOWED_AREA_LEN 27
#define MAVLINK_MSG_ID_54_LEN 27

#define MAVLINK_MSG_ID_SAFETY_SET_ALLOWED_AREA_CRC 15
#define MAVLINK_MSG_ID_54_CRC 15



#define MAVLINK_MESSAGE_INFO_SAFETY_SET_ALLOWED_AREA { "SAFETY_SET_ALLOWED_AREA", 9, { { "p1x", NULL, MAVLINK_TYPE_FLOAT, 0, 0, offsetof(mavlink_safety_set_allowed_area_t, p1x) }, { "p1y", NULL, MAVLINK_TYPE_FLOAT, 0, 4, offsetof(mavlink_safety_set_allowed_area_t, p1y) }, { "p1z", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_safety_set_allowed_area_t, p1z) }, { "p2x", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_safety_set_allowed_area_t, p2x) }, { "p2y", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_safety_set_allowed_area_t, p2y) }, { "p2z", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_safety_set_allowed_area_t, p2z) }, { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 24, offsetof(mavlink_safety_set_allowed_area_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 25, offsetof(mavlink_safety_set_allowed_area_t, target_component) }, { "frame", NULL, MAVLINK_TYPE_UINT8_T, 0, 26, offsetof(mavlink_safety_set_allowed_area_t, frame) }, } }
# 59 "./lib/main/mavlink/common/./mavlink_msg_safety_set_allowed_area.h"
static inline uint16_t mavlink_msg_safety_set_allowed_area_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_system, uint8_t target_component, uint8_t frame, float p1x, float p1y, float p1z, float p2x, float p2y, float p2z)
{
# 76 "./lib/main/mavlink/common/./mavlink_msg_safety_set_allowed_area.h"
 mavlink_safety_set_allowed_area_t packet;
 packet.p1x = p1x;
 packet.p1y = p1y;
 packet.p1z = p1z;
 packet.p2x = p2x;
 packet.p2y = p2y;
 packet.p2z = p2z;
 packet.target_system = target_system;
 packet.target_component = target_component;
 packet.frame = frame;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 27);


 msg->msgid = 54;

    return mavlink_finalize_message(msg, system_id, component_id, 27, 15);



}
# 115 "./lib/main/mavlink/common/./mavlink_msg_safety_set_allowed_area.h"
static inline uint16_t mavlink_msg_safety_set_allowed_area_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_system,uint8_t target_component,uint8_t frame,float p1x,float p1y,float p1z,float p2x,float p2y,float p2z)
{
# 133 "./lib/main/mavlink/common/./mavlink_msg_safety_set_allowed_area.h"
 mavlink_safety_set_allowed_area_t packet;
 packet.p1x = p1x;
 packet.p1y = p1y;
 packet.p1z = p1z;
 packet.p2x = p2x;
 packet.p2y = p2y;
 packet.p2z = p2z;
 packet.target_system = target_system;
 packet.target_component = target_component;
 packet.frame = frame;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 27);


 msg->msgid = 54;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 27, 15);



}
# 163 "./lib/main/mavlink/common/./mavlink_msg_safety_set_allowed_area.h"
static inline uint16_t mavlink_msg_safety_set_allowed_area_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_safety_set_allowed_area_t* safety_set_allowed_area)
{
 return mavlink_msg_safety_set_allowed_area_pack(system_id, component_id, msg, safety_set_allowed_area->target_system, safety_set_allowed_area->target_component, safety_set_allowed_area->frame, safety_set_allowed_area->p1x, safety_set_allowed_area->p1y, safety_set_allowed_area->p1z, safety_set_allowed_area->p2x, safety_set_allowed_area->p2y, safety_set_allowed_area->p2z);
}
# 177 "./lib/main/mavlink/common/./mavlink_msg_safety_set_allowed_area.h"
static inline uint16_t mavlink_msg_safety_set_allowed_area_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_safety_set_allowed_area_t* safety_set_allowed_area)
{
 return mavlink_msg_safety_set_allowed_area_pack_chan(system_id, component_id, chan, msg, safety_set_allowed_area->target_system, safety_set_allowed_area->target_component, safety_set_allowed_area->frame, safety_set_allowed_area->p1x, safety_set_allowed_area->p1y, safety_set_allowed_area->p1z, safety_set_allowed_area->p2x, safety_set_allowed_area->p2y, safety_set_allowed_area->p2z);
}
# 295 "./lib/main/mavlink/common/./mavlink_msg_safety_set_allowed_area.h"
static inline uint8_t mavlink_msg_safety_set_allowed_area_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[24];
}






static inline uint8_t mavlink_msg_safety_set_allowed_area_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[25];
}






static inline uint8_t mavlink_msg_safety_set_allowed_area_get_frame(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[26];
}






static inline float mavlink_msg_safety_set_allowed_area_get_p1x(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 0);
}






static inline float mavlink_msg_safety_set_allowed_area_get_p1y(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_safety_set_allowed_area_get_p1z(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_safety_set_allowed_area_get_p2x(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_safety_set_allowed_area_get_p2y(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_safety_set_allowed_area_get_p2z(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 20);
}







static inline void mavlink_msg_safety_set_allowed_area_decode(const mavlink_message_t* msg, mavlink_safety_set_allowed_area_t* safety_set_allowed_area)
{
# 399 "./lib/main/mavlink/common/./mavlink_msg_safety_set_allowed_area.h"
 memcpy(safety_set_allowed_area, ((const char *)(&((msg)->payload64[0]))), 27);

}
# 697 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_safety_allowed_area.h" 1


#define MAVLINK_MSG_ID_SAFETY_ALLOWED_AREA 55

typedef struct __mavlink_safety_allowed_area_t
{
 float p1x;
 float p1y;
 float p1z;
 float p2x;
 float p2y;
 float p2z;
 uint8_t frame;
} mavlink_safety_allowed_area_t;

#define MAVLINK_MSG_ID_SAFETY_ALLOWED_AREA_LEN 25
#define MAVLINK_MSG_ID_55_LEN 25

#define MAVLINK_MSG_ID_SAFETY_ALLOWED_AREA_CRC 3
#define MAVLINK_MSG_ID_55_CRC 3



#define MAVLINK_MESSAGE_INFO_SAFETY_ALLOWED_AREA { "SAFETY_ALLOWED_AREA", 7, { { "p1x", NULL, MAVLINK_TYPE_FLOAT, 0, 0, offsetof(mavlink_safety_allowed_area_t, p1x) }, { "p1y", NULL, MAVLINK_TYPE_FLOAT, 0, 4, offsetof(mavlink_safety_allowed_area_t, p1y) }, { "p1z", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_safety_allowed_area_t, p1z) }, { "p2x", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_safety_allowed_area_t, p2x) }, { "p2y", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_safety_allowed_area_t, p2y) }, { "p2z", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_safety_allowed_area_t, p2z) }, { "frame", NULL, MAVLINK_TYPE_UINT8_T, 0, 24, offsetof(mavlink_safety_allowed_area_t, frame) }, } }
# 53 "./lib/main/mavlink/common/./mavlink_msg_safety_allowed_area.h"
static inline uint16_t mavlink_msg_safety_allowed_area_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t frame, float p1x, float p1y, float p1z, float p2x, float p2y, float p2z)
{
# 68 "./lib/main/mavlink/common/./mavlink_msg_safety_allowed_area.h"
 mavlink_safety_allowed_area_t packet;
 packet.p1x = p1x;
 packet.p1y = p1y;
 packet.p1z = p1z;
 packet.p2x = p2x;
 packet.p2y = p2y;
 packet.p2z = p2z;
 packet.frame = frame;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 25);


 msg->msgid = 55;

    return mavlink_finalize_message(msg, system_id, component_id, 25, 3);



}
# 103 "./lib/main/mavlink/common/./mavlink_msg_safety_allowed_area.h"
static inline uint16_t mavlink_msg_safety_allowed_area_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t frame,float p1x,float p1y,float p1z,float p2x,float p2y,float p2z)
{
# 119 "./lib/main/mavlink/common/./mavlink_msg_safety_allowed_area.h"
 mavlink_safety_allowed_area_t packet;
 packet.p1x = p1x;
 packet.p1y = p1y;
 packet.p1z = p1z;
 packet.p2x = p2x;
 packet.p2y = p2y;
 packet.p2z = p2z;
 packet.frame = frame;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 25);


 msg->msgid = 55;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 25, 3);



}
# 147 "./lib/main/mavlink/common/./mavlink_msg_safety_allowed_area.h"
static inline uint16_t mavlink_msg_safety_allowed_area_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_safety_allowed_area_t* safety_allowed_area)
{
 return mavlink_msg_safety_allowed_area_pack(system_id, component_id, msg, safety_allowed_area->frame, safety_allowed_area->p1x, safety_allowed_area->p1y, safety_allowed_area->p1z, safety_allowed_area->p2x, safety_allowed_area->p2y, safety_allowed_area->p2z);
}
# 161 "./lib/main/mavlink/common/./mavlink_msg_safety_allowed_area.h"
static inline uint16_t mavlink_msg_safety_allowed_area_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_safety_allowed_area_t* safety_allowed_area)
{
 return mavlink_msg_safety_allowed_area_pack_chan(system_id, component_id, chan, msg, safety_allowed_area->frame, safety_allowed_area->p1x, safety_allowed_area->p1y, safety_allowed_area->p1z, safety_allowed_area->p2x, safety_allowed_area->p2y, safety_allowed_area->p2z);
}
# 269 "./lib/main/mavlink/common/./mavlink_msg_safety_allowed_area.h"
static inline uint8_t mavlink_msg_safety_allowed_area_get_frame(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[24];
}






static inline float mavlink_msg_safety_allowed_area_get_p1x(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 0);
}






static inline float mavlink_msg_safety_allowed_area_get_p1y(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_safety_allowed_area_get_p1z(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_safety_allowed_area_get_p2x(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_safety_allowed_area_get_p2y(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_safety_allowed_area_get_p2z(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 20);
}







static inline void mavlink_msg_safety_allowed_area_decode(const mavlink_message_t* msg, mavlink_safety_allowed_area_t* safety_allowed_area)
{
# 351 "./lib/main/mavlink/common/./mavlink_msg_safety_allowed_area.h"
 memcpy(safety_allowed_area, ((const char *)(&((msg)->payload64[0]))), 25);

}
# 698 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_attitude_quaternion_cov.h" 1


#define MAVLINK_MSG_ID_ATTITUDE_QUATERNION_COV 61

typedef struct __mavlink_attitude_quaternion_cov_t
{
 uint32_t time_boot_ms;
 float q[4];
 float rollspeed;
 float pitchspeed;
 float yawspeed;
 float covariance[9];
} mavlink_attitude_quaternion_cov_t;

#define MAVLINK_MSG_ID_ATTITUDE_QUATERNION_COV_LEN 68
#define MAVLINK_MSG_ID_61_LEN 68

#define MAVLINK_MSG_ID_ATTITUDE_QUATERNION_COV_CRC 153
#define MAVLINK_MSG_ID_61_CRC 153

#define MAVLINK_MSG_ATTITUDE_QUATERNION_COV_FIELD_Q_LEN 4
#define MAVLINK_MSG_ATTITUDE_QUATERNION_COV_FIELD_COVARIANCE_LEN 9

#define MAVLINK_MESSAGE_INFO_ATTITUDE_QUATERNION_COV { "ATTITUDE_QUATERNION_COV", 6, { { "time_boot_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_attitude_quaternion_cov_t, time_boot_ms) }, { "q", NULL, MAVLINK_TYPE_FLOAT, 4, 4, offsetof(mavlink_attitude_quaternion_cov_t, q) }, { "rollspeed", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_attitude_quaternion_cov_t, rollspeed) }, { "pitchspeed", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_attitude_quaternion_cov_t, pitchspeed) }, { "yawspeed", NULL, MAVLINK_TYPE_FLOAT, 0, 28, offsetof(mavlink_attitude_quaternion_cov_t, yawspeed) }, { "covariance", NULL, MAVLINK_TYPE_FLOAT, 9, 32, offsetof(mavlink_attitude_quaternion_cov_t, covariance) }, } }
# 51 "./lib/main/mavlink/common/./mavlink_msg_attitude_quaternion_cov.h"
static inline uint16_t mavlink_msg_attitude_quaternion_cov_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_boot_ms, const float *q, float rollspeed, float pitchspeed, float yawspeed, const float *covariance)
{
# 64 "./lib/main/mavlink/common/./mavlink_msg_attitude_quaternion_cov.h"
 mavlink_attitude_quaternion_cov_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.rollspeed = rollspeed;
 packet.pitchspeed = pitchspeed;
 packet.yawspeed = yawspeed;
 mav_array_memcpy(packet.q, q, sizeof(float)*4);
 mav_array_memcpy(packet.covariance, covariance, sizeof(float)*9);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 68);


 msg->msgid = 61;

    return mavlink_finalize_message(msg, system_id, component_id, 68, 153);



}
# 96 "./lib/main/mavlink/common/./mavlink_msg_attitude_quaternion_cov.h"
static inline uint16_t mavlink_msg_attitude_quaternion_cov_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_boot_ms,const float *q,float rollspeed,float pitchspeed,float yawspeed,const float *covariance)
{
# 110 "./lib/main/mavlink/common/./mavlink_msg_attitude_quaternion_cov.h"
 mavlink_attitude_quaternion_cov_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.rollspeed = rollspeed;
 packet.pitchspeed = pitchspeed;
 packet.yawspeed = yawspeed;
 mav_array_memcpy(packet.q, q, sizeof(float)*4);
 mav_array_memcpy(packet.covariance, covariance, sizeof(float)*9);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 68);


 msg->msgid = 61;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 68, 153);



}
# 136 "./lib/main/mavlink/common/./mavlink_msg_attitude_quaternion_cov.h"
static inline uint16_t mavlink_msg_attitude_quaternion_cov_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_attitude_quaternion_cov_t* attitude_quaternion_cov)
{
 return mavlink_msg_attitude_quaternion_cov_pack(system_id, component_id, msg, attitude_quaternion_cov->time_boot_ms, attitude_quaternion_cov->q, attitude_quaternion_cov->rollspeed, attitude_quaternion_cov->pitchspeed, attitude_quaternion_cov->yawspeed, attitude_quaternion_cov->covariance);
}
# 150 "./lib/main/mavlink/common/./mavlink_msg_attitude_quaternion_cov.h"
static inline uint16_t mavlink_msg_attitude_quaternion_cov_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_attitude_quaternion_cov_t* attitude_quaternion_cov)
{
 return mavlink_msg_attitude_quaternion_cov_pack_chan(system_id, component_id, chan, msg, attitude_quaternion_cov->time_boot_ms, attitude_quaternion_cov->q, attitude_quaternion_cov->rollspeed, attitude_quaternion_cov->pitchspeed, attitude_quaternion_cov->yawspeed, attitude_quaternion_cov->covariance);
}
# 249 "./lib/main/mavlink/common/./mavlink_msg_attitude_quaternion_cov.h"
static inline uint32_t mavlink_msg_attitude_quaternion_cov_get_time_boot_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint16_t mavlink_msg_attitude_quaternion_cov_get_q(const mavlink_message_t* msg, float *q)
{
 return _MAV_RETURN_float_array(msg, q, 4, 4);
}






static inline float mavlink_msg_attitude_quaternion_cov_get_rollspeed(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_attitude_quaternion_cov_get_pitchspeed(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_attitude_quaternion_cov_get_yawspeed(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 28);
}






static inline uint16_t mavlink_msg_attitude_quaternion_cov_get_covariance(const mavlink_message_t* msg, float *covariance)
{
 return _MAV_RETURN_float_array(msg, covariance, 9, 32);
}







static inline void mavlink_msg_attitude_quaternion_cov_decode(const mavlink_message_t* msg, mavlink_attitude_quaternion_cov_t* attitude_quaternion_cov)
{
# 320 "./lib/main/mavlink/common/./mavlink_msg_attitude_quaternion_cov.h"
 memcpy(attitude_quaternion_cov, ((const char *)(&((msg)->payload64[0]))), 68);

}
# 699 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_nav_controller_output.h" 1


#define MAVLINK_MSG_ID_NAV_CONTROLLER_OUTPUT 62

typedef struct __mavlink_nav_controller_output_t
{
 float nav_roll;
 float nav_pitch;
 float alt_error;
 float aspd_error;
 float xtrack_error;
 int16_t nav_bearing;
 int16_t target_bearing;
 uint16_t wp_dist;
} mavlink_nav_controller_output_t;

#define MAVLINK_MSG_ID_NAV_CONTROLLER_OUTPUT_LEN 26
#define MAVLINK_MSG_ID_62_LEN 26

#define MAVLINK_MSG_ID_NAV_CONTROLLER_OUTPUT_CRC 183
#define MAVLINK_MSG_ID_62_CRC 183



#define MAVLINK_MESSAGE_INFO_NAV_CONTROLLER_OUTPUT { "NAV_CONTROLLER_OUTPUT", 8, { { "nav_roll", NULL, MAVLINK_TYPE_FLOAT, 0, 0, offsetof(mavlink_nav_controller_output_t, nav_roll) }, { "nav_pitch", NULL, MAVLINK_TYPE_FLOAT, 0, 4, offsetof(mavlink_nav_controller_output_t, nav_pitch) }, { "alt_error", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_nav_controller_output_t, alt_error) }, { "aspd_error", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_nav_controller_output_t, aspd_error) }, { "xtrack_error", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_nav_controller_output_t, xtrack_error) }, { "nav_bearing", NULL, MAVLINK_TYPE_INT16_T, 0, 20, offsetof(mavlink_nav_controller_output_t, nav_bearing) }, { "target_bearing", NULL, MAVLINK_TYPE_INT16_T, 0, 22, offsetof(mavlink_nav_controller_output_t, target_bearing) }, { "wp_dist", NULL, MAVLINK_TYPE_UINT16_T, 0, 24, offsetof(mavlink_nav_controller_output_t, wp_dist) }, } }
# 56 "./lib/main/mavlink/common/./mavlink_msg_nav_controller_output.h"
static inline uint16_t mavlink_msg_nav_controller_output_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             float nav_roll, float nav_pitch, int16_t nav_bearing, int16_t target_bearing, uint16_t wp_dist, float alt_error, float aspd_error, float xtrack_error)
{
# 72 "./lib/main/mavlink/common/./mavlink_msg_nav_controller_output.h"
 mavlink_nav_controller_output_t packet;
 packet.nav_roll = nav_roll;
 packet.nav_pitch = nav_pitch;
 packet.alt_error = alt_error;
 packet.aspd_error = aspd_error;
 packet.xtrack_error = xtrack_error;
 packet.nav_bearing = nav_bearing;
 packet.target_bearing = target_bearing;
 packet.wp_dist = wp_dist;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 26);


 msg->msgid = 62;

    return mavlink_finalize_message(msg, system_id, component_id, 26, 183);



}
# 109 "./lib/main/mavlink/common/./mavlink_msg_nav_controller_output.h"
static inline uint16_t mavlink_msg_nav_controller_output_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 float nav_roll,float nav_pitch,int16_t nav_bearing,int16_t target_bearing,uint16_t wp_dist,float alt_error,float aspd_error,float xtrack_error)
{
# 126 "./lib/main/mavlink/common/./mavlink_msg_nav_controller_output.h"
 mavlink_nav_controller_output_t packet;
 packet.nav_roll = nav_roll;
 packet.nav_pitch = nav_pitch;
 packet.alt_error = alt_error;
 packet.aspd_error = aspd_error;
 packet.xtrack_error = xtrack_error;
 packet.nav_bearing = nav_bearing;
 packet.target_bearing = target_bearing;
 packet.wp_dist = wp_dist;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 26);


 msg->msgid = 62;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 26, 183);



}
# 155 "./lib/main/mavlink/common/./mavlink_msg_nav_controller_output.h"
static inline uint16_t mavlink_msg_nav_controller_output_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_nav_controller_output_t* nav_controller_output)
{
 return mavlink_msg_nav_controller_output_pack(system_id, component_id, msg, nav_controller_output->nav_roll, nav_controller_output->nav_pitch, nav_controller_output->nav_bearing, nav_controller_output->target_bearing, nav_controller_output->wp_dist, nav_controller_output->alt_error, nav_controller_output->aspd_error, nav_controller_output->xtrack_error);
}
# 169 "./lib/main/mavlink/common/./mavlink_msg_nav_controller_output.h"
static inline uint16_t mavlink_msg_nav_controller_output_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_nav_controller_output_t* nav_controller_output)
{
 return mavlink_msg_nav_controller_output_pack_chan(system_id, component_id, chan, msg, nav_controller_output->nav_roll, nav_controller_output->nav_pitch, nav_controller_output->nav_bearing, nav_controller_output->target_bearing, nav_controller_output->wp_dist, nav_controller_output->alt_error, nav_controller_output->aspd_error, nav_controller_output->xtrack_error);
}
# 282 "./lib/main/mavlink/common/./mavlink_msg_nav_controller_output.h"
static inline float mavlink_msg_nav_controller_output_get_nav_roll(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 0);
}






static inline float mavlink_msg_nav_controller_output_get_nav_pitch(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 4);
}






static inline int16_t mavlink_msg_nav_controller_output_get_nav_bearing(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 20);
}






static inline int16_t mavlink_msg_nav_controller_output_get_target_bearing(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 22);
}






static inline uint16_t mavlink_msg_nav_controller_output_get_wp_dist(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 24);
}






static inline float mavlink_msg_nav_controller_output_get_alt_error(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_nav_controller_output_get_aspd_error(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_nav_controller_output_get_xtrack_error(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 16);
}







static inline void mavlink_msg_nav_controller_output_decode(const mavlink_message_t* msg, mavlink_nav_controller_output_t* nav_controller_output)
{
# 375 "./lib/main/mavlink/common/./mavlink_msg_nav_controller_output.h"
 memcpy(nav_controller_output, ((const char *)(&((msg)->payload64[0]))), 26);

}
# 700 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_global_position_int_cov.h" 1


#define MAVLINK_MSG_ID_GLOBAL_POSITION_INT_COV 63

typedef struct __mavlink_global_position_int_cov_t
{
 uint64_t time_utc;
 uint32_t time_boot_ms;
 int32_t lat;
 int32_t lon;
 int32_t alt;
 int32_t relative_alt;
 float vx;
 float vy;
 float vz;
 float covariance[36];
 uint8_t estimator_type;
} mavlink_global_position_int_cov_t;

#define MAVLINK_MSG_ID_GLOBAL_POSITION_INT_COV_LEN 185
#define MAVLINK_MSG_ID_63_LEN 185

#define MAVLINK_MSG_ID_GLOBAL_POSITION_INT_COV_CRC 51
#define MAVLINK_MSG_ID_63_CRC 51

#define MAVLINK_MSG_GLOBAL_POSITION_INT_COV_FIELD_COVARIANCE_LEN 36

#define MAVLINK_MESSAGE_INFO_GLOBAL_POSITION_INT_COV { "GLOBAL_POSITION_INT_COV", 11, { { "time_utc", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_global_position_int_cov_t, time_utc) }, { "time_boot_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 8, offsetof(mavlink_global_position_int_cov_t, time_boot_ms) }, { "lat", NULL, MAVLINK_TYPE_INT32_T, 0, 12, offsetof(mavlink_global_position_int_cov_t, lat) }, { "lon", NULL, MAVLINK_TYPE_INT32_T, 0, 16, offsetof(mavlink_global_position_int_cov_t, lon) }, { "alt", NULL, MAVLINK_TYPE_INT32_T, 0, 20, offsetof(mavlink_global_position_int_cov_t, alt) }, { "relative_alt", NULL, MAVLINK_TYPE_INT32_T, 0, 24, offsetof(mavlink_global_position_int_cov_t, relative_alt) }, { "vx", NULL, MAVLINK_TYPE_FLOAT, 0, 28, offsetof(mavlink_global_position_int_cov_t, vx) }, { "vy", NULL, MAVLINK_TYPE_FLOAT, 0, 32, offsetof(mavlink_global_position_int_cov_t, vy) }, { "vz", NULL, MAVLINK_TYPE_FLOAT, 0, 36, offsetof(mavlink_global_position_int_cov_t, vz) }, { "covariance", NULL, MAVLINK_TYPE_FLOAT, 36, 40, offsetof(mavlink_global_position_int_cov_t, covariance) }, { "estimator_type", NULL, MAVLINK_TYPE_UINT8_T, 0, 184, offsetof(mavlink_global_position_int_cov_t, estimator_type) }, } }
# 65 "./lib/main/mavlink/common/./mavlink_msg_global_position_int_cov.h"
static inline uint16_t mavlink_msg_global_position_int_cov_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_boot_ms, uint64_t time_utc, uint8_t estimator_type, int32_t lat, int32_t lon, int32_t alt, int32_t relative_alt, float vx, float vy, float vz, const float *covariance)
{
# 83 "./lib/main/mavlink/common/./mavlink_msg_global_position_int_cov.h"
 mavlink_global_position_int_cov_t packet;
 packet.time_utc = time_utc;
 packet.time_boot_ms = time_boot_ms;
 packet.lat = lat;
 packet.lon = lon;
 packet.alt = alt;
 packet.relative_alt = relative_alt;
 packet.vx = vx;
 packet.vy = vy;
 packet.vz = vz;
 packet.estimator_type = estimator_type;
 mav_array_memcpy(packet.covariance, covariance, sizeof(float)*36);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 185);


 msg->msgid = 63;

    return mavlink_finalize_message(msg, system_id, component_id, 185, 51);



}
# 125 "./lib/main/mavlink/common/./mavlink_msg_global_position_int_cov.h"
static inline uint16_t mavlink_msg_global_position_int_cov_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_boot_ms,uint64_t time_utc,uint8_t estimator_type,int32_t lat,int32_t lon,int32_t alt,int32_t relative_alt,float vx,float vy,float vz,const float *covariance)
{
# 144 "./lib/main/mavlink/common/./mavlink_msg_global_position_int_cov.h"
 mavlink_global_position_int_cov_t packet;
 packet.time_utc = time_utc;
 packet.time_boot_ms = time_boot_ms;
 packet.lat = lat;
 packet.lon = lon;
 packet.alt = alt;
 packet.relative_alt = relative_alt;
 packet.vx = vx;
 packet.vy = vy;
 packet.vz = vz;
 packet.estimator_type = estimator_type;
 mav_array_memcpy(packet.covariance, covariance, sizeof(float)*36);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 185);


 msg->msgid = 63;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 185, 51);



}
# 175 "./lib/main/mavlink/common/./mavlink_msg_global_position_int_cov.h"
static inline uint16_t mavlink_msg_global_position_int_cov_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_global_position_int_cov_t* global_position_int_cov)
{
 return mavlink_msg_global_position_int_cov_pack(system_id, component_id, msg, global_position_int_cov->time_boot_ms, global_position_int_cov->time_utc, global_position_int_cov->estimator_type, global_position_int_cov->lat, global_position_int_cov->lon, global_position_int_cov->alt, global_position_int_cov->relative_alt, global_position_int_cov->vx, global_position_int_cov->vy, global_position_int_cov->vz, global_position_int_cov->covariance);
}
# 189 "./lib/main/mavlink/common/./mavlink_msg_global_position_int_cov.h"
static inline uint16_t mavlink_msg_global_position_int_cov_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_global_position_int_cov_t* global_position_int_cov)
{
 return mavlink_msg_global_position_int_cov_pack_chan(system_id, component_id, chan, msg, global_position_int_cov->time_boot_ms, global_position_int_cov->time_utc, global_position_int_cov->estimator_type, global_position_int_cov->lat, global_position_int_cov->lon, global_position_int_cov->alt, global_position_int_cov->relative_alt, global_position_int_cov->vx, global_position_int_cov->vy, global_position_int_cov->vz, global_position_int_cov->covariance);
}
# 313 "./lib/main/mavlink/common/./mavlink_msg_global_position_int_cov.h"
static inline uint32_t mavlink_msg_global_position_int_cov_get_time_boot_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 8);
}






static inline uint64_t mavlink_msg_global_position_int_cov_get_time_utc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint8_t mavlink_msg_global_position_int_cov_get_estimator_type(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[184];
}






static inline int32_t mavlink_msg_global_position_int_cov_get_lat(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 12);
}






static inline int32_t mavlink_msg_global_position_int_cov_get_lon(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 16);
}






static inline int32_t mavlink_msg_global_position_int_cov_get_alt(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 20);
}






static inline int32_t mavlink_msg_global_position_int_cov_get_relative_alt(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 24);
}






static inline float mavlink_msg_global_position_int_cov_get_vx(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_global_position_int_cov_get_vy(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 32);
}






static inline float mavlink_msg_global_position_int_cov_get_vz(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 36);
}






static inline uint16_t mavlink_msg_global_position_int_cov_get_covariance(const mavlink_message_t* msg, float *covariance)
{
 return _MAV_RETURN_float_array(msg, covariance, 36, 40);
}







static inline void mavlink_msg_global_position_int_cov_decode(const mavlink_message_t* msg, mavlink_global_position_int_cov_t* global_position_int_cov)
{
# 439 "./lib/main/mavlink/common/./mavlink_msg_global_position_int_cov.h"
 memcpy(global_position_int_cov, ((const char *)(&((msg)->payload64[0]))), 185);

}
# 701 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_local_position_ned_cov.h" 1


#define MAVLINK_MSG_ID_LOCAL_POSITION_NED_COV 64

typedef struct __mavlink_local_position_ned_cov_t
{
 uint64_t time_utc;
 uint32_t time_boot_ms;
 float x;
 float y;
 float z;
 float vx;
 float vy;
 float vz;
 float ax;
 float ay;
 float az;
 float covariance[45];
 uint8_t estimator_type;
} mavlink_local_position_ned_cov_t;

#define MAVLINK_MSG_ID_LOCAL_POSITION_NED_COV_LEN 229
#define MAVLINK_MSG_ID_64_LEN 229

#define MAVLINK_MSG_ID_LOCAL_POSITION_NED_COV_CRC 59
#define MAVLINK_MSG_ID_64_CRC 59

#define MAVLINK_MSG_LOCAL_POSITION_NED_COV_FIELD_COVARIANCE_LEN 45

#define MAVLINK_MESSAGE_INFO_LOCAL_POSITION_NED_COV { "LOCAL_POSITION_NED_COV", 13, { { "time_utc", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_local_position_ned_cov_t, time_utc) }, { "time_boot_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 8, offsetof(mavlink_local_position_ned_cov_t, time_boot_ms) }, { "x", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_local_position_ned_cov_t, x) }, { "y", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_local_position_ned_cov_t, y) }, { "z", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_local_position_ned_cov_t, z) }, { "vx", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_local_position_ned_cov_t, vx) }, { "vy", NULL, MAVLINK_TYPE_FLOAT, 0, 28, offsetof(mavlink_local_position_ned_cov_t, vy) }, { "vz", NULL, MAVLINK_TYPE_FLOAT, 0, 32, offsetof(mavlink_local_position_ned_cov_t, vz) }, { "ax", NULL, MAVLINK_TYPE_FLOAT, 0, 36, offsetof(mavlink_local_position_ned_cov_t, ax) }, { "ay", NULL, MAVLINK_TYPE_FLOAT, 0, 40, offsetof(mavlink_local_position_ned_cov_t, ay) }, { "az", NULL, MAVLINK_TYPE_FLOAT, 0, 44, offsetof(mavlink_local_position_ned_cov_t, az) }, { "covariance", NULL, MAVLINK_TYPE_FLOAT, 45, 48, offsetof(mavlink_local_position_ned_cov_t, covariance) }, { "estimator_type", NULL, MAVLINK_TYPE_UINT8_T, 0, 228, offsetof(mavlink_local_position_ned_cov_t, estimator_type) }, } }
# 71 "./lib/main/mavlink/common/./mavlink_msg_local_position_ned_cov.h"
static inline uint16_t mavlink_msg_local_position_ned_cov_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_boot_ms, uint64_t time_utc, uint8_t estimator_type, float x, float y, float z, float vx, float vy, float vz, float ax, float ay, float az, const float *covariance)
{
# 91 "./lib/main/mavlink/common/./mavlink_msg_local_position_ned_cov.h"
 mavlink_local_position_ned_cov_t packet;
 packet.time_utc = time_utc;
 packet.time_boot_ms = time_boot_ms;
 packet.x = x;
 packet.y = y;
 packet.z = z;
 packet.vx = vx;
 packet.vy = vy;
 packet.vz = vz;
 packet.ax = ax;
 packet.ay = ay;
 packet.az = az;
 packet.estimator_type = estimator_type;
 mav_array_memcpy(packet.covariance, covariance, sizeof(float)*45);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 229);


 msg->msgid = 64;

    return mavlink_finalize_message(msg, system_id, component_id, 229, 59);



}
# 137 "./lib/main/mavlink/common/./mavlink_msg_local_position_ned_cov.h"
static inline uint16_t mavlink_msg_local_position_ned_cov_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_boot_ms,uint64_t time_utc,uint8_t estimator_type,float x,float y,float z,float vx,float vy,float vz,float ax,float ay,float az,const float *covariance)
{
# 158 "./lib/main/mavlink/common/./mavlink_msg_local_position_ned_cov.h"
 mavlink_local_position_ned_cov_t packet;
 packet.time_utc = time_utc;
 packet.time_boot_ms = time_boot_ms;
 packet.x = x;
 packet.y = y;
 packet.z = z;
 packet.vx = vx;
 packet.vy = vy;
 packet.vz = vz;
 packet.ax = ax;
 packet.ay = ay;
 packet.az = az;
 packet.estimator_type = estimator_type;
 mav_array_memcpy(packet.covariance, covariance, sizeof(float)*45);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 229);


 msg->msgid = 64;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 229, 59);



}
# 191 "./lib/main/mavlink/common/./mavlink_msg_local_position_ned_cov.h"
static inline uint16_t mavlink_msg_local_position_ned_cov_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_local_position_ned_cov_t* local_position_ned_cov)
{
 return mavlink_msg_local_position_ned_cov_pack(system_id, component_id, msg, local_position_ned_cov->time_boot_ms, local_position_ned_cov->time_utc, local_position_ned_cov->estimator_type, local_position_ned_cov->x, local_position_ned_cov->y, local_position_ned_cov->z, local_position_ned_cov->vx, local_position_ned_cov->vy, local_position_ned_cov->vz, local_position_ned_cov->ax, local_position_ned_cov->ay, local_position_ned_cov->az, local_position_ned_cov->covariance);
}
# 205 "./lib/main/mavlink/common/./mavlink_msg_local_position_ned_cov.h"
static inline uint16_t mavlink_msg_local_position_ned_cov_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_local_position_ned_cov_t* local_position_ned_cov)
{
 return mavlink_msg_local_position_ned_cov_pack_chan(system_id, component_id, chan, msg, local_position_ned_cov->time_boot_ms, local_position_ned_cov->time_utc, local_position_ned_cov->estimator_type, local_position_ned_cov->x, local_position_ned_cov->y, local_position_ned_cov->z, local_position_ned_cov->vx, local_position_ned_cov->vy, local_position_ned_cov->vz, local_position_ned_cov->ax, local_position_ned_cov->ay, local_position_ned_cov->az, local_position_ned_cov->covariance);
}
# 339 "./lib/main/mavlink/common/./mavlink_msg_local_position_ned_cov.h"
static inline uint32_t mavlink_msg_local_position_ned_cov_get_time_boot_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 8);
}






static inline uint64_t mavlink_msg_local_position_ned_cov_get_time_utc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint8_t mavlink_msg_local_position_ned_cov_get_estimator_type(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[228];
}






static inline float mavlink_msg_local_position_ned_cov_get_x(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_local_position_ned_cov_get_y(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_local_position_ned_cov_get_z(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_local_position_ned_cov_get_vx(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_local_position_ned_cov_get_vy(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_local_position_ned_cov_get_vz(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 32);
}






static inline float mavlink_msg_local_position_ned_cov_get_ax(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 36);
}






static inline float mavlink_msg_local_position_ned_cov_get_ay(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 40);
}






static inline float mavlink_msg_local_position_ned_cov_get_az(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 44);
}






static inline uint16_t mavlink_msg_local_position_ned_cov_get_covariance(const mavlink_message_t* msg, float *covariance)
{
 return _MAV_RETURN_float_array(msg, covariance, 45, 48);
}







static inline void mavlink_msg_local_position_ned_cov_decode(const mavlink_message_t* msg, mavlink_local_position_ned_cov_t* local_position_ned_cov)
{
# 487 "./lib/main/mavlink/common/./mavlink_msg_local_position_ned_cov.h"
 memcpy(local_position_ned_cov, ((const char *)(&((msg)->payload64[0]))), 229);

}
# 702 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_rc_channels.h" 1


#define MAVLINK_MSG_ID_RC_CHANNELS 65

typedef struct __mavlink_rc_channels_t
{
 uint32_t time_boot_ms;
 uint16_t chan1_raw;
 uint16_t chan2_raw;
 uint16_t chan3_raw;
 uint16_t chan4_raw;
 uint16_t chan5_raw;
 uint16_t chan6_raw;
 uint16_t chan7_raw;
 uint16_t chan8_raw;
 uint16_t chan9_raw;
 uint16_t chan10_raw;
 uint16_t chan11_raw;
 uint16_t chan12_raw;
 uint16_t chan13_raw;
 uint16_t chan14_raw;
 uint16_t chan15_raw;
 uint16_t chan16_raw;
 uint16_t chan17_raw;
 uint16_t chan18_raw;
 uint8_t chancount;
 uint8_t rssi;
} mavlink_rc_channels_t;

#define MAVLINK_MSG_ID_RC_CHANNELS_LEN 42
#define MAVLINK_MSG_ID_65_LEN 42

#define MAVLINK_MSG_ID_RC_CHANNELS_CRC 118
#define MAVLINK_MSG_ID_65_CRC 118



#define MAVLINK_MESSAGE_INFO_RC_CHANNELS { "RC_CHANNELS", 21, { { "time_boot_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_rc_channels_t, time_boot_ms) }, { "chan1_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 4, offsetof(mavlink_rc_channels_t, chan1_raw) }, { "chan2_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 6, offsetof(mavlink_rc_channels_t, chan2_raw) }, { "chan3_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 8, offsetof(mavlink_rc_channels_t, chan3_raw) }, { "chan4_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 10, offsetof(mavlink_rc_channels_t, chan4_raw) }, { "chan5_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 12, offsetof(mavlink_rc_channels_t, chan5_raw) }, { "chan6_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 14, offsetof(mavlink_rc_channels_t, chan6_raw) }, { "chan7_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 16, offsetof(mavlink_rc_channels_t, chan7_raw) }, { "chan8_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 18, offsetof(mavlink_rc_channels_t, chan8_raw) }, { "chan9_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 20, offsetof(mavlink_rc_channels_t, chan9_raw) }, { "chan10_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 22, offsetof(mavlink_rc_channels_t, chan10_raw) }, { "chan11_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 24, offsetof(mavlink_rc_channels_t, chan11_raw) }, { "chan12_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 26, offsetof(mavlink_rc_channels_t, chan12_raw) }, { "chan13_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 28, offsetof(mavlink_rc_channels_t, chan13_raw) }, { "chan14_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 30, offsetof(mavlink_rc_channels_t, chan14_raw) }, { "chan15_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 32, offsetof(mavlink_rc_channels_t, chan15_raw) }, { "chan16_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 34, offsetof(mavlink_rc_channels_t, chan16_raw) }, { "chan17_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 36, offsetof(mavlink_rc_channels_t, chan17_raw) }, { "chan18_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 38, offsetof(mavlink_rc_channels_t, chan18_raw) }, { "chancount", NULL, MAVLINK_TYPE_UINT8_T, 0, 40, offsetof(mavlink_rc_channels_t, chancount) }, { "rssi", NULL, MAVLINK_TYPE_UINT8_T, 0, 41, offsetof(mavlink_rc_channels_t, rssi) }, } }
# 95 "./lib/main/mavlink/common/./mavlink_msg_rc_channels.h"
static inline uint16_t mavlink_msg_rc_channels_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_boot_ms, uint8_t chancount, uint16_t chan1_raw, uint16_t chan2_raw, uint16_t chan3_raw, uint16_t chan4_raw, uint16_t chan5_raw, uint16_t chan6_raw, uint16_t chan7_raw, uint16_t chan8_raw, uint16_t chan9_raw, uint16_t chan10_raw, uint16_t chan11_raw, uint16_t chan12_raw, uint16_t chan13_raw, uint16_t chan14_raw, uint16_t chan15_raw, uint16_t chan16_raw, uint16_t chan17_raw, uint16_t chan18_raw, uint8_t rssi)
{
# 124 "./lib/main/mavlink/common/./mavlink_msg_rc_channels.h"
 mavlink_rc_channels_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.chan1_raw = chan1_raw;
 packet.chan2_raw = chan2_raw;
 packet.chan3_raw = chan3_raw;
 packet.chan4_raw = chan4_raw;
 packet.chan5_raw = chan5_raw;
 packet.chan6_raw = chan6_raw;
 packet.chan7_raw = chan7_raw;
 packet.chan8_raw = chan8_raw;
 packet.chan9_raw = chan9_raw;
 packet.chan10_raw = chan10_raw;
 packet.chan11_raw = chan11_raw;
 packet.chan12_raw = chan12_raw;
 packet.chan13_raw = chan13_raw;
 packet.chan14_raw = chan14_raw;
 packet.chan15_raw = chan15_raw;
 packet.chan16_raw = chan16_raw;
 packet.chan17_raw = chan17_raw;
 packet.chan18_raw = chan18_raw;
 packet.chancount = chancount;
 packet.rssi = rssi;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 42);


 msg->msgid = 65;

    return mavlink_finalize_message(msg, system_id, component_id, 42, 118);



}
# 187 "./lib/main/mavlink/common/./mavlink_msg_rc_channels.h"
static inline uint16_t mavlink_msg_rc_channels_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_boot_ms,uint8_t chancount,uint16_t chan1_raw,uint16_t chan2_raw,uint16_t chan3_raw,uint16_t chan4_raw,uint16_t chan5_raw,uint16_t chan6_raw,uint16_t chan7_raw,uint16_t chan8_raw,uint16_t chan9_raw,uint16_t chan10_raw,uint16_t chan11_raw,uint16_t chan12_raw,uint16_t chan13_raw,uint16_t chan14_raw,uint16_t chan15_raw,uint16_t chan16_raw,uint16_t chan17_raw,uint16_t chan18_raw,uint8_t rssi)
{
# 217 "./lib/main/mavlink/common/./mavlink_msg_rc_channels.h"
 mavlink_rc_channels_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.chan1_raw = chan1_raw;
 packet.chan2_raw = chan2_raw;
 packet.chan3_raw = chan3_raw;
 packet.chan4_raw = chan4_raw;
 packet.chan5_raw = chan5_raw;
 packet.chan6_raw = chan6_raw;
 packet.chan7_raw = chan7_raw;
 packet.chan8_raw = chan8_raw;
 packet.chan9_raw = chan9_raw;
 packet.chan10_raw = chan10_raw;
 packet.chan11_raw = chan11_raw;
 packet.chan12_raw = chan12_raw;
 packet.chan13_raw = chan13_raw;
 packet.chan14_raw = chan14_raw;
 packet.chan15_raw = chan15_raw;
 packet.chan16_raw = chan16_raw;
 packet.chan17_raw = chan17_raw;
 packet.chan18_raw = chan18_raw;
 packet.chancount = chancount;
 packet.rssi = rssi;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 42);


 msg->msgid = 65;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 42, 118);



}
# 259 "./lib/main/mavlink/common/./mavlink_msg_rc_channels.h"
static inline uint16_t mavlink_msg_rc_channels_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_rc_channels_t* rc_channels)
{
 return mavlink_msg_rc_channels_pack(system_id, component_id, msg, rc_channels->time_boot_ms, rc_channels->chancount, rc_channels->chan1_raw, rc_channels->chan2_raw, rc_channels->chan3_raw, rc_channels->chan4_raw, rc_channels->chan5_raw, rc_channels->chan6_raw, rc_channels->chan7_raw, rc_channels->chan8_raw, rc_channels->chan9_raw, rc_channels->chan10_raw, rc_channels->chan11_raw, rc_channels->chan12_raw, rc_channels->chan13_raw, rc_channels->chan14_raw, rc_channels->chan15_raw, rc_channels->chan16_raw, rc_channels->chan17_raw, rc_channels->chan18_raw, rc_channels->rssi);
}
# 273 "./lib/main/mavlink/common/./mavlink_msg_rc_channels.h"
static inline uint16_t mavlink_msg_rc_channels_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_rc_channels_t* rc_channels)
{
 return mavlink_msg_rc_channels_pack_chan(system_id, component_id, chan, msg, rc_channels->time_boot_ms, rc_channels->chancount, rc_channels->chan1_raw, rc_channels->chan2_raw, rc_channels->chan3_raw, rc_channels->chan4_raw, rc_channels->chan5_raw, rc_channels->chan6_raw, rc_channels->chan7_raw, rc_channels->chan8_raw, rc_channels->chan9_raw, rc_channels->chan10_raw, rc_channels->chan11_raw, rc_channels->chan12_raw, rc_channels->chan13_raw, rc_channels->chan14_raw, rc_channels->chan15_raw, rc_channels->chan16_raw, rc_channels->chan17_raw, rc_channels->chan18_raw, rc_channels->rssi);
}
# 451 "./lib/main/mavlink/common/./mavlink_msg_rc_channels.h"
static inline uint32_t mavlink_msg_rc_channels_get_time_boot_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_rc_channels_get_chancount(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[40];
}






static inline uint16_t mavlink_msg_rc_channels_get_chan1_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 4);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan2_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 6);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan3_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 8);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan4_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 10);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan5_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 12);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan6_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 14);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan7_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 16);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan8_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 18);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan9_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 20);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan10_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 22);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan11_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 24);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan12_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 26);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan13_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 28);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan14_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 30);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan15_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 32);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan16_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 34);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan17_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 36);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan18_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 38);
}






static inline uint8_t mavlink_msg_rc_channels_get_rssi(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[41];
}







static inline void mavlink_msg_rc_channels_decode(const mavlink_message_t* msg, mavlink_rc_channels_t* rc_channels)
{
# 687 "./lib/main/mavlink/common/./mavlink_msg_rc_channels.h"
 memcpy(rc_channels, ((const char *)(&((msg)->payload64[0]))), 42);

}
# 703 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_request_data_stream.h" 1


#define MAVLINK_MSG_ID_REQUEST_DATA_STREAM 66

typedef struct __mavlink_request_data_stream_t
{
 uint16_t req_message_rate;
 uint8_t target_system;
 uint8_t target_component;
 uint8_t req_stream_id;
 uint8_t start_stop;
} mavlink_request_data_stream_t;

#define MAVLINK_MSG_ID_REQUEST_DATA_STREAM_LEN 6
#define MAVLINK_MSG_ID_66_LEN 6

#define MAVLINK_MSG_ID_REQUEST_DATA_STREAM_CRC 148
#define MAVLINK_MSG_ID_66_CRC 148



#define MAVLINK_MESSAGE_INFO_REQUEST_DATA_STREAM { "REQUEST_DATA_STREAM", 5, { { "req_message_rate", NULL, MAVLINK_TYPE_UINT16_T, 0, 0, offsetof(mavlink_request_data_stream_t, req_message_rate) }, { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 2, offsetof(mavlink_request_data_stream_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 3, offsetof(mavlink_request_data_stream_t, target_component) }, { "req_stream_id", NULL, MAVLINK_TYPE_UINT8_T, 0, 4, offsetof(mavlink_request_data_stream_t, req_stream_id) }, { "start_stop", NULL, MAVLINK_TYPE_UINT8_T, 0, 5, offsetof(mavlink_request_data_stream_t, start_stop) }, } }
# 47 "./lib/main/mavlink/common/./mavlink_msg_request_data_stream.h"
static inline uint16_t mavlink_msg_request_data_stream_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_system, uint8_t target_component, uint8_t req_stream_id, uint16_t req_message_rate, uint8_t start_stop)
{
# 60 "./lib/main/mavlink/common/./mavlink_msg_request_data_stream.h"
 mavlink_request_data_stream_t packet;
 packet.req_message_rate = req_message_rate;
 packet.target_system = target_system;
 packet.target_component = target_component;
 packet.req_stream_id = req_stream_id;
 packet.start_stop = start_stop;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 6);


 msg->msgid = 66;

    return mavlink_finalize_message(msg, system_id, component_id, 6, 148);



}
# 91 "./lib/main/mavlink/common/./mavlink_msg_request_data_stream.h"
static inline uint16_t mavlink_msg_request_data_stream_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_system,uint8_t target_component,uint8_t req_stream_id,uint16_t req_message_rate,uint8_t start_stop)
{
# 105 "./lib/main/mavlink/common/./mavlink_msg_request_data_stream.h"
 mavlink_request_data_stream_t packet;
 packet.req_message_rate = req_message_rate;
 packet.target_system = target_system;
 packet.target_component = target_component;
 packet.req_stream_id = req_stream_id;
 packet.start_stop = start_stop;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 6);


 msg->msgid = 66;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 6, 148);



}
# 131 "./lib/main/mavlink/common/./mavlink_msg_request_data_stream.h"
static inline uint16_t mavlink_msg_request_data_stream_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_request_data_stream_t* request_data_stream)
{
 return mavlink_msg_request_data_stream_pack(system_id, component_id, msg, request_data_stream->target_system, request_data_stream->target_component, request_data_stream->req_stream_id, request_data_stream->req_message_rate, request_data_stream->start_stop);
}
# 145 "./lib/main/mavlink/common/./mavlink_msg_request_data_stream.h"
static inline uint16_t mavlink_msg_request_data_stream_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_request_data_stream_t* request_data_stream)
{
 return mavlink_msg_request_data_stream_pack_chan(system_id, component_id, chan, msg, request_data_stream->target_system, request_data_stream->target_component, request_data_stream->req_stream_id, request_data_stream->req_message_rate, request_data_stream->start_stop);
}
# 243 "./lib/main/mavlink/common/./mavlink_msg_request_data_stream.h"
static inline uint8_t mavlink_msg_request_data_stream_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}






static inline uint8_t mavlink_msg_request_data_stream_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[3];
}






static inline uint8_t mavlink_msg_request_data_stream_get_req_stream_id(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[4];
}






static inline uint16_t mavlink_msg_request_data_stream_get_req_message_rate(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 0);
}






static inline uint8_t mavlink_msg_request_data_stream_get_start_stop(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[5];
}







static inline void mavlink_msg_request_data_stream_decode(const mavlink_message_t* msg, mavlink_request_data_stream_t* request_data_stream)
{







 memcpy(request_data_stream, ((const char *)(&((msg)->payload64[0]))), 6);

}
# 704 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_data_stream.h" 1


#define MAVLINK_MSG_ID_DATA_STREAM 67

typedef struct __mavlink_data_stream_t
{
 uint16_t message_rate;
 uint8_t stream_id;
 uint8_t on_off;
} mavlink_data_stream_t;

#define MAVLINK_MSG_ID_DATA_STREAM_LEN 4
#define MAVLINK_MSG_ID_67_LEN 4

#define MAVLINK_MSG_ID_DATA_STREAM_CRC 21
#define MAVLINK_MSG_ID_67_CRC 21



#define MAVLINK_MESSAGE_INFO_DATA_STREAM { "DATA_STREAM", 3, { { "message_rate", NULL, MAVLINK_TYPE_UINT16_T, 0, 0, offsetof(mavlink_data_stream_t, message_rate) }, { "stream_id", NULL, MAVLINK_TYPE_UINT8_T, 0, 2, offsetof(mavlink_data_stream_t, stream_id) }, { "on_off", NULL, MAVLINK_TYPE_UINT8_T, 0, 3, offsetof(mavlink_data_stream_t, on_off) }, } }
# 41 "./lib/main/mavlink/common/./mavlink_msg_data_stream.h"
static inline uint16_t mavlink_msg_data_stream_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t stream_id, uint16_t message_rate, uint8_t on_off)
{
# 52 "./lib/main/mavlink/common/./mavlink_msg_data_stream.h"
 mavlink_data_stream_t packet;
 packet.message_rate = message_rate;
 packet.stream_id = stream_id;
 packet.on_off = on_off;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 4);


 msg->msgid = 67;

    return mavlink_finalize_message(msg, system_id, component_id, 4, 21);



}
# 79 "./lib/main/mavlink/common/./mavlink_msg_data_stream.h"
static inline uint16_t mavlink_msg_data_stream_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t stream_id,uint16_t message_rate,uint8_t on_off)
{
# 91 "./lib/main/mavlink/common/./mavlink_msg_data_stream.h"
 mavlink_data_stream_t packet;
 packet.message_rate = message_rate;
 packet.stream_id = stream_id;
 packet.on_off = on_off;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 4);


 msg->msgid = 67;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 4, 21);



}
# 115 "./lib/main/mavlink/common/./mavlink_msg_data_stream.h"
static inline uint16_t mavlink_msg_data_stream_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_data_stream_t* data_stream)
{
 return mavlink_msg_data_stream_pack(system_id, component_id, msg, data_stream->stream_id, data_stream->message_rate, data_stream->on_off);
}
# 129 "./lib/main/mavlink/common/./mavlink_msg_data_stream.h"
static inline uint16_t mavlink_msg_data_stream_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_data_stream_t* data_stream)
{
 return mavlink_msg_data_stream_pack_chan(system_id, component_id, chan, msg, data_stream->stream_id, data_stream->message_rate, data_stream->on_off);
}
# 217 "./lib/main/mavlink/common/./mavlink_msg_data_stream.h"
static inline uint8_t mavlink_msg_data_stream_get_stream_id(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}






static inline uint16_t mavlink_msg_data_stream_get_message_rate(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 0);
}






static inline uint8_t mavlink_msg_data_stream_get_on_off(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[3];
}







static inline void mavlink_msg_data_stream_decode(const mavlink_message_t* msg, mavlink_data_stream_t* data_stream)
{





 memcpy(data_stream, ((const char *)(&((msg)->payload64[0]))), 4);

}
# 705 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_manual_control.h" 1


#define MAVLINK_MSG_ID_MANUAL_CONTROL 69

typedef struct __mavlink_manual_control_t
{
 int16_t x;
 int16_t y;
 int16_t z;
 int16_t r;
 uint16_t buttons;
 uint8_t target;
} mavlink_manual_control_t;

#define MAVLINK_MSG_ID_MANUAL_CONTROL_LEN 11
#define MAVLINK_MSG_ID_69_LEN 11

#define MAVLINK_MSG_ID_MANUAL_CONTROL_CRC 243
#define MAVLINK_MSG_ID_69_CRC 243



#define MAVLINK_MESSAGE_INFO_MANUAL_CONTROL { "MANUAL_CONTROL", 6, { { "x", NULL, MAVLINK_TYPE_INT16_T, 0, 0, offsetof(mavlink_manual_control_t, x) }, { "y", NULL, MAVLINK_TYPE_INT16_T, 0, 2, offsetof(mavlink_manual_control_t, y) }, { "z", NULL, MAVLINK_TYPE_INT16_T, 0, 4, offsetof(mavlink_manual_control_t, z) }, { "r", NULL, MAVLINK_TYPE_INT16_T, 0, 6, offsetof(mavlink_manual_control_t, r) }, { "buttons", NULL, MAVLINK_TYPE_UINT16_T, 0, 8, offsetof(mavlink_manual_control_t, buttons) }, { "target", NULL, MAVLINK_TYPE_UINT8_T, 0, 10, offsetof(mavlink_manual_control_t, target) }, } }
# 50 "./lib/main/mavlink/common/./mavlink_msg_manual_control.h"
static inline uint16_t mavlink_msg_manual_control_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target, int16_t x, int16_t y, int16_t z, int16_t r, uint16_t buttons)
{
# 64 "./lib/main/mavlink/common/./mavlink_msg_manual_control.h"
 mavlink_manual_control_t packet;
 packet.x = x;
 packet.y = y;
 packet.z = z;
 packet.r = r;
 packet.buttons = buttons;
 packet.target = target;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 11);


 msg->msgid = 69;

    return mavlink_finalize_message(msg, system_id, component_id, 11, 243);



}
# 97 "./lib/main/mavlink/common/./mavlink_msg_manual_control.h"
static inline uint16_t mavlink_msg_manual_control_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target,int16_t x,int16_t y,int16_t z,int16_t r,uint16_t buttons)
{
# 112 "./lib/main/mavlink/common/./mavlink_msg_manual_control.h"
 mavlink_manual_control_t packet;
 packet.x = x;
 packet.y = y;
 packet.z = z;
 packet.r = r;
 packet.buttons = buttons;
 packet.target = target;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 11);


 msg->msgid = 69;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 11, 243);



}
# 139 "./lib/main/mavlink/common/./mavlink_msg_manual_control.h"
static inline uint16_t mavlink_msg_manual_control_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_manual_control_t* manual_control)
{
 return mavlink_msg_manual_control_pack(system_id, component_id, msg, manual_control->target, manual_control->x, manual_control->y, manual_control->z, manual_control->r, manual_control->buttons);
}
# 153 "./lib/main/mavlink/common/./mavlink_msg_manual_control.h"
static inline uint16_t mavlink_msg_manual_control_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_manual_control_t* manual_control)
{
 return mavlink_msg_manual_control_pack_chan(system_id, component_id, chan, msg, manual_control->target, manual_control->x, manual_control->y, manual_control->z, manual_control->r, manual_control->buttons);
}
# 256 "./lib/main/mavlink/common/./mavlink_msg_manual_control.h"
static inline uint8_t mavlink_msg_manual_control_get_target(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[10];
}






static inline int16_t mavlink_msg_manual_control_get_x(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 0);
}






static inline int16_t mavlink_msg_manual_control_get_y(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 2);
}






static inline int16_t mavlink_msg_manual_control_get_z(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 4);
}






static inline int16_t mavlink_msg_manual_control_get_r(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 6);
}






static inline uint16_t mavlink_msg_manual_control_get_buttons(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 8);
}







static inline void mavlink_msg_manual_control_decode(const mavlink_message_t* msg, mavlink_manual_control_t* manual_control)
{
# 327 "./lib/main/mavlink/common/./mavlink_msg_manual_control.h"
 memcpy(manual_control, ((const char *)(&((msg)->payload64[0]))), 11);

}
# 706 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_rc_channels_override.h" 1


#define MAVLINK_MSG_ID_RC_CHANNELS_OVERRIDE 70

typedef struct __mavlink_rc_channels_override_t
{
 uint16_t chan1_raw;
 uint16_t chan2_raw;
 uint16_t chan3_raw;
 uint16_t chan4_raw;
 uint16_t chan5_raw;
 uint16_t chan6_raw;
 uint16_t chan7_raw;
 uint16_t chan8_raw;
 uint8_t target_system;
 uint8_t target_component;
} mavlink_rc_channels_override_t;

#define MAVLINK_MSG_ID_RC_CHANNELS_OVERRIDE_LEN 18
#define MAVLINK_MSG_ID_70_LEN 18

#define MAVLINK_MSG_ID_RC_CHANNELS_OVERRIDE_CRC 124
#define MAVLINK_MSG_ID_70_CRC 124



#define MAVLINK_MESSAGE_INFO_RC_CHANNELS_OVERRIDE { "RC_CHANNELS_OVERRIDE", 10, { { "chan1_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 0, offsetof(mavlink_rc_channels_override_t, chan1_raw) }, { "chan2_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 2, offsetof(mavlink_rc_channels_override_t, chan2_raw) }, { "chan3_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 4, offsetof(mavlink_rc_channels_override_t, chan3_raw) }, { "chan4_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 6, offsetof(mavlink_rc_channels_override_t, chan4_raw) }, { "chan5_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 8, offsetof(mavlink_rc_channels_override_t, chan5_raw) }, { "chan6_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 10, offsetof(mavlink_rc_channels_override_t, chan6_raw) }, { "chan7_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 12, offsetof(mavlink_rc_channels_override_t, chan7_raw) }, { "chan8_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 14, offsetof(mavlink_rc_channels_override_t, chan8_raw) }, { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 16, offsetof(mavlink_rc_channels_override_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 17, offsetof(mavlink_rc_channels_override_t, target_component) }, } }
# 62 "./lib/main/mavlink/common/./mavlink_msg_rc_channels_override.h"
static inline uint16_t mavlink_msg_rc_channels_override_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_system, uint8_t target_component, uint16_t chan1_raw, uint16_t chan2_raw, uint16_t chan3_raw, uint16_t chan4_raw, uint16_t chan5_raw, uint16_t chan6_raw, uint16_t chan7_raw, uint16_t chan8_raw)
{
# 80 "./lib/main/mavlink/common/./mavlink_msg_rc_channels_override.h"
 mavlink_rc_channels_override_t packet;
 packet.chan1_raw = chan1_raw;
 packet.chan2_raw = chan2_raw;
 packet.chan3_raw = chan3_raw;
 packet.chan4_raw = chan4_raw;
 packet.chan5_raw = chan5_raw;
 packet.chan6_raw = chan6_raw;
 packet.chan7_raw = chan7_raw;
 packet.chan8_raw = chan8_raw;
 packet.target_system = target_system;
 packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 18);


 msg->msgid = 70;

    return mavlink_finalize_message(msg, system_id, component_id, 18, 124);



}
# 121 "./lib/main/mavlink/common/./mavlink_msg_rc_channels_override.h"
static inline uint16_t mavlink_msg_rc_channels_override_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_system,uint8_t target_component,uint16_t chan1_raw,uint16_t chan2_raw,uint16_t chan3_raw,uint16_t chan4_raw,uint16_t chan5_raw,uint16_t chan6_raw,uint16_t chan7_raw,uint16_t chan8_raw)
{
# 140 "./lib/main/mavlink/common/./mavlink_msg_rc_channels_override.h"
 mavlink_rc_channels_override_t packet;
 packet.chan1_raw = chan1_raw;
 packet.chan2_raw = chan2_raw;
 packet.chan3_raw = chan3_raw;
 packet.chan4_raw = chan4_raw;
 packet.chan5_raw = chan5_raw;
 packet.chan6_raw = chan6_raw;
 packet.chan7_raw = chan7_raw;
 packet.chan8_raw = chan8_raw;
 packet.target_system = target_system;
 packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 18);


 msg->msgid = 70;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 18, 124);



}
# 171 "./lib/main/mavlink/common/./mavlink_msg_rc_channels_override.h"
static inline uint16_t mavlink_msg_rc_channels_override_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_rc_channels_override_t* rc_channels_override)
{
 return mavlink_msg_rc_channels_override_pack(system_id, component_id, msg, rc_channels_override->target_system, rc_channels_override->target_component, rc_channels_override->chan1_raw, rc_channels_override->chan2_raw, rc_channels_override->chan3_raw, rc_channels_override->chan4_raw, rc_channels_override->chan5_raw, rc_channels_override->chan6_raw, rc_channels_override->chan7_raw, rc_channels_override->chan8_raw);
}
# 185 "./lib/main/mavlink/common/./mavlink_msg_rc_channels_override.h"
static inline uint16_t mavlink_msg_rc_channels_override_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_rc_channels_override_t* rc_channels_override)
{
 return mavlink_msg_rc_channels_override_pack_chan(system_id, component_id, chan, msg, rc_channels_override->target_system, rc_channels_override->target_component, rc_channels_override->chan1_raw, rc_channels_override->chan2_raw, rc_channels_override->chan3_raw, rc_channels_override->chan4_raw, rc_channels_override->chan5_raw, rc_channels_override->chan6_raw, rc_channels_override->chan7_raw, rc_channels_override->chan8_raw);
}
# 308 "./lib/main/mavlink/common/./mavlink_msg_rc_channels_override.h"
static inline uint8_t mavlink_msg_rc_channels_override_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[16];
}






static inline uint8_t mavlink_msg_rc_channels_override_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[17];
}






static inline uint16_t mavlink_msg_rc_channels_override_get_chan1_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 0);
}






static inline uint16_t mavlink_msg_rc_channels_override_get_chan2_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 2);
}






static inline uint16_t mavlink_msg_rc_channels_override_get_chan3_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 4);
}






static inline uint16_t mavlink_msg_rc_channels_override_get_chan4_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 6);
}






static inline uint16_t mavlink_msg_rc_channels_override_get_chan5_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 8);
}






static inline uint16_t mavlink_msg_rc_channels_override_get_chan6_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 10);
}






static inline uint16_t mavlink_msg_rc_channels_override_get_chan7_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 12);
}






static inline uint16_t mavlink_msg_rc_channels_override_get_chan8_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 14);
}







static inline void mavlink_msg_rc_channels_override_decode(const mavlink_message_t* msg, mavlink_rc_channels_override_t* rc_channels_override)
{
# 423 "./lib/main/mavlink/common/./mavlink_msg_rc_channels_override.h"
 memcpy(rc_channels_override, ((const char *)(&((msg)->payload64[0]))), 18);

}
# 707 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_mission_item_int.h" 1


#define MAVLINK_MSG_ID_MISSION_ITEM_INT 73

typedef struct __mavlink_mission_item_int_t
{
 float param1;
 float param2;
 float param3;
 float param4;
 int32_t x;
 int32_t y;
 float z;
 uint16_t seq;
 uint16_t command;
 uint8_t target_system;
 uint8_t target_component;
 uint8_t frame;
 uint8_t current;
 uint8_t autocontinue;
} mavlink_mission_item_int_t;

#define MAVLINK_MSG_ID_MISSION_ITEM_INT_LEN 37
#define MAVLINK_MSG_ID_73_LEN 37

#define MAVLINK_MSG_ID_MISSION_ITEM_INT_CRC 38
#define MAVLINK_MSG_ID_73_CRC 38



#define MAVLINK_MESSAGE_INFO_MISSION_ITEM_INT { "MISSION_ITEM_INT", 14, { { "param1", NULL, MAVLINK_TYPE_FLOAT, 0, 0, offsetof(mavlink_mission_item_int_t, param1) }, { "param2", NULL, MAVLINK_TYPE_FLOAT, 0, 4, offsetof(mavlink_mission_item_int_t, param2) }, { "param3", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_mission_item_int_t, param3) }, { "param4", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_mission_item_int_t, param4) }, { "x", NULL, MAVLINK_TYPE_INT32_T, 0, 16, offsetof(mavlink_mission_item_int_t, x) }, { "y", NULL, MAVLINK_TYPE_INT32_T, 0, 20, offsetof(mavlink_mission_item_int_t, y) }, { "z", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_mission_item_int_t, z) }, { "seq", NULL, MAVLINK_TYPE_UINT16_T, 0, 28, offsetof(mavlink_mission_item_int_t, seq) }, { "command", NULL, MAVLINK_TYPE_UINT16_T, 0, 30, offsetof(mavlink_mission_item_int_t, command) }, { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 32, offsetof(mavlink_mission_item_int_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 33, offsetof(mavlink_mission_item_int_t, target_component) }, { "frame", NULL, MAVLINK_TYPE_UINT8_T, 0, 34, offsetof(mavlink_mission_item_int_t, frame) }, { "current", NULL, MAVLINK_TYPE_UINT8_T, 0, 35, offsetof(mavlink_mission_item_int_t, current) }, { "autocontinue", NULL, MAVLINK_TYPE_UINT8_T, 0, 36, offsetof(mavlink_mission_item_int_t, autocontinue) }, } }
# 74 "./lib/main/mavlink/common/./mavlink_msg_mission_item_int.h"
static inline uint16_t mavlink_msg_mission_item_int_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, int32_t x, int32_t y, float z)
{
# 96 "./lib/main/mavlink/common/./mavlink_msg_mission_item_int.h"
 mavlink_mission_item_int_t packet;
 packet.param1 = param1;
 packet.param2 = param2;
 packet.param3 = param3;
 packet.param4 = param4;
 packet.x = x;
 packet.y = y;
 packet.z = z;
 packet.seq = seq;
 packet.command = command;
 packet.target_system = target_system;
 packet.target_component = target_component;
 packet.frame = frame;
 packet.current = current;
 packet.autocontinue = autocontinue;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 37);


 msg->msgid = 73;

    return mavlink_finalize_message(msg, system_id, component_id, 37, 38);



}
# 145 "./lib/main/mavlink/common/./mavlink_msg_mission_item_int.h"
static inline uint16_t mavlink_msg_mission_item_int_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_system,uint8_t target_component,uint16_t seq,uint8_t frame,uint16_t command,uint8_t current,uint8_t autocontinue,float param1,float param2,float param3,float param4,int32_t x,int32_t y,float z)
{
# 168 "./lib/main/mavlink/common/./mavlink_msg_mission_item_int.h"
 mavlink_mission_item_int_t packet;
 packet.param1 = param1;
 packet.param2 = param2;
 packet.param3 = param3;
 packet.param4 = param4;
 packet.x = x;
 packet.y = y;
 packet.z = z;
 packet.seq = seq;
 packet.command = command;
 packet.target_system = target_system;
 packet.target_component = target_component;
 packet.frame = frame;
 packet.current = current;
 packet.autocontinue = autocontinue;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 37);


 msg->msgid = 73;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 37, 38);



}
# 203 "./lib/main/mavlink/common/./mavlink_msg_mission_item_int.h"
static inline uint16_t mavlink_msg_mission_item_int_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_mission_item_int_t* mission_item_int)
{
 return mavlink_msg_mission_item_int_pack(system_id, component_id, msg, mission_item_int->target_system, mission_item_int->target_component, mission_item_int->seq, mission_item_int->frame, mission_item_int->command, mission_item_int->current, mission_item_int->autocontinue, mission_item_int->param1, mission_item_int->param2, mission_item_int->param3, mission_item_int->param4, mission_item_int->x, mission_item_int->y, mission_item_int->z);
}
# 217 "./lib/main/mavlink/common/./mavlink_msg_mission_item_int.h"
static inline uint16_t mavlink_msg_mission_item_int_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_mission_item_int_t* mission_item_int)
{
 return mavlink_msg_mission_item_int_pack_chan(system_id, component_id, chan, msg, mission_item_int->target_system, mission_item_int->target_component, mission_item_int->seq, mission_item_int->frame, mission_item_int->command, mission_item_int->current, mission_item_int->autocontinue, mission_item_int->param1, mission_item_int->param2, mission_item_int->param3, mission_item_int->param4, mission_item_int->x, mission_item_int->y, mission_item_int->z);
}
# 360 "./lib/main/mavlink/common/./mavlink_msg_mission_item_int.h"
static inline uint8_t mavlink_msg_mission_item_int_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[32];
}






static inline uint8_t mavlink_msg_mission_item_int_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[33];
}






static inline uint16_t mavlink_msg_mission_item_int_get_seq(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 28);
}






static inline uint8_t mavlink_msg_mission_item_int_get_frame(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[34];
}






static inline uint16_t mavlink_msg_mission_item_int_get_command(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 30);
}






static inline uint8_t mavlink_msg_mission_item_int_get_current(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[35];
}






static inline uint8_t mavlink_msg_mission_item_int_get_autocontinue(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[36];
}






static inline float mavlink_msg_mission_item_int_get_param1(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 0);
}






static inline float mavlink_msg_mission_item_int_get_param2(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_mission_item_int_get_param3(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_mission_item_int_get_param4(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline int32_t mavlink_msg_mission_item_int_get_x(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 16);
}






static inline int32_t mavlink_msg_mission_item_int_get_y(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 20);
}






static inline float mavlink_msg_mission_item_int_get_z(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 24);
}







static inline void mavlink_msg_mission_item_int_decode(const mavlink_message_t* msg, mavlink_mission_item_int_t* mission_item_int)
{
# 519 "./lib/main/mavlink/common/./mavlink_msg_mission_item_int.h"
 memcpy(mission_item_int, ((const char *)(&((msg)->payload64[0]))), 37);

}
# 708 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_vfr_hud.h" 1


#define MAVLINK_MSG_ID_VFR_HUD 74

typedef struct __mavlink_vfr_hud_t
{
 float airspeed;
 float groundspeed;
 float alt;
 float climb;
 int16_t heading;
 uint16_t throttle;
} mavlink_vfr_hud_t;

#define MAVLINK_MSG_ID_VFR_HUD_LEN 20
#define MAVLINK_MSG_ID_74_LEN 20

#define MAVLINK_MSG_ID_VFR_HUD_CRC 20
#define MAVLINK_MSG_ID_74_CRC 20



#define MAVLINK_MESSAGE_INFO_VFR_HUD { "VFR_HUD", 6, { { "airspeed", NULL, MAVLINK_TYPE_FLOAT, 0, 0, offsetof(mavlink_vfr_hud_t, airspeed) }, { "groundspeed", NULL, MAVLINK_TYPE_FLOAT, 0, 4, offsetof(mavlink_vfr_hud_t, groundspeed) }, { "alt", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_vfr_hud_t, alt) }, { "climb", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_vfr_hud_t, climb) }, { "heading", NULL, MAVLINK_TYPE_INT16_T, 0, 16, offsetof(mavlink_vfr_hud_t, heading) }, { "throttle", NULL, MAVLINK_TYPE_UINT16_T, 0, 18, offsetof(mavlink_vfr_hud_t, throttle) }, } }
# 50 "./lib/main/mavlink/common/./mavlink_msg_vfr_hud.h"
static inline uint16_t mavlink_msg_vfr_hud_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             float airspeed, float groundspeed, int16_t heading, uint16_t throttle, float alt, float climb)
{
# 64 "./lib/main/mavlink/common/./mavlink_msg_vfr_hud.h"
 mavlink_vfr_hud_t packet;
 packet.airspeed = airspeed;
 packet.groundspeed = groundspeed;
 packet.alt = alt;
 packet.climb = climb;
 packet.heading = heading;
 packet.throttle = throttle;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 20);


 msg->msgid = 74;

    return mavlink_finalize_message(msg, system_id, component_id, 20, 20);



}
# 97 "./lib/main/mavlink/common/./mavlink_msg_vfr_hud.h"
static inline uint16_t mavlink_msg_vfr_hud_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 float airspeed,float groundspeed,int16_t heading,uint16_t throttle,float alt,float climb)
{
# 112 "./lib/main/mavlink/common/./mavlink_msg_vfr_hud.h"
 mavlink_vfr_hud_t packet;
 packet.airspeed = airspeed;
 packet.groundspeed = groundspeed;
 packet.alt = alt;
 packet.climb = climb;
 packet.heading = heading;
 packet.throttle = throttle;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 20);


 msg->msgid = 74;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 20, 20);



}
# 139 "./lib/main/mavlink/common/./mavlink_msg_vfr_hud.h"
static inline uint16_t mavlink_msg_vfr_hud_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_vfr_hud_t* vfr_hud)
{
 return mavlink_msg_vfr_hud_pack(system_id, component_id, msg, vfr_hud->airspeed, vfr_hud->groundspeed, vfr_hud->heading, vfr_hud->throttle, vfr_hud->alt, vfr_hud->climb);
}
# 153 "./lib/main/mavlink/common/./mavlink_msg_vfr_hud.h"
static inline uint16_t mavlink_msg_vfr_hud_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_vfr_hud_t* vfr_hud)
{
 return mavlink_msg_vfr_hud_pack_chan(system_id, component_id, chan, msg, vfr_hud->airspeed, vfr_hud->groundspeed, vfr_hud->heading, vfr_hud->throttle, vfr_hud->alt, vfr_hud->climb);
}
# 256 "./lib/main/mavlink/common/./mavlink_msg_vfr_hud.h"
static inline float mavlink_msg_vfr_hud_get_airspeed(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 0);
}






static inline float mavlink_msg_vfr_hud_get_groundspeed(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 4);
}






static inline int16_t mavlink_msg_vfr_hud_get_heading(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 16);
}






static inline uint16_t mavlink_msg_vfr_hud_get_throttle(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 18);
}






static inline float mavlink_msg_vfr_hud_get_alt(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_vfr_hud_get_climb(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}







static inline void mavlink_msg_vfr_hud_decode(const mavlink_message_t* msg, mavlink_vfr_hud_t* vfr_hud)
{
# 327 "./lib/main/mavlink/common/./mavlink_msg_vfr_hud.h"
 memcpy(vfr_hud, ((const char *)(&((msg)->payload64[0]))), 20);

}
# 709 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_command_int.h" 1


#define MAVLINK_MSG_ID_COMMAND_INT 75

typedef struct __mavlink_command_int_t
{
 float param1;
 float param2;
 float param3;
 float param4;
 int32_t x;
 int32_t y;
 float z;
 uint16_t command;
 uint8_t target_system;
 uint8_t target_component;
 uint8_t frame;
 uint8_t current;
 uint8_t autocontinue;
} mavlink_command_int_t;

#define MAVLINK_MSG_ID_COMMAND_INT_LEN 35
#define MAVLINK_MSG_ID_75_LEN 35

#define MAVLINK_MSG_ID_COMMAND_INT_CRC 158
#define MAVLINK_MSG_ID_75_CRC 158



#define MAVLINK_MESSAGE_INFO_COMMAND_INT { "COMMAND_INT", 13, { { "param1", NULL, MAVLINK_TYPE_FLOAT, 0, 0, offsetof(mavlink_command_int_t, param1) }, { "param2", NULL, MAVLINK_TYPE_FLOAT, 0, 4, offsetof(mavlink_command_int_t, param2) }, { "param3", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_command_int_t, param3) }, { "param4", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_command_int_t, param4) }, { "x", NULL, MAVLINK_TYPE_INT32_T, 0, 16, offsetof(mavlink_command_int_t, x) }, { "y", NULL, MAVLINK_TYPE_INT32_T, 0, 20, offsetof(mavlink_command_int_t, y) }, { "z", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_command_int_t, z) }, { "command", NULL, MAVLINK_TYPE_UINT16_T, 0, 28, offsetof(mavlink_command_int_t, command) }, { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 30, offsetof(mavlink_command_int_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 31, offsetof(mavlink_command_int_t, target_component) }, { "frame", NULL, MAVLINK_TYPE_UINT8_T, 0, 32, offsetof(mavlink_command_int_t, frame) }, { "current", NULL, MAVLINK_TYPE_UINT8_T, 0, 33, offsetof(mavlink_command_int_t, current) }, { "autocontinue", NULL, MAVLINK_TYPE_UINT8_T, 0, 34, offsetof(mavlink_command_int_t, autocontinue) }, } }
# 71 "./lib/main/mavlink/common/./mavlink_msg_command_int.h"
static inline uint16_t mavlink_msg_command_int_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_system, uint8_t target_component, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, int32_t x, int32_t y, float z)
{
# 92 "./lib/main/mavlink/common/./mavlink_msg_command_int.h"
 mavlink_command_int_t packet;
 packet.param1 = param1;
 packet.param2 = param2;
 packet.param3 = param3;
 packet.param4 = param4;
 packet.x = x;
 packet.y = y;
 packet.z = z;
 packet.command = command;
 packet.target_system = target_system;
 packet.target_component = target_component;
 packet.frame = frame;
 packet.current = current;
 packet.autocontinue = autocontinue;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 35);


 msg->msgid = 75;

    return mavlink_finalize_message(msg, system_id, component_id, 35, 158);



}
# 139 "./lib/main/mavlink/common/./mavlink_msg_command_int.h"
static inline uint16_t mavlink_msg_command_int_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_system,uint8_t target_component,uint8_t frame,uint16_t command,uint8_t current,uint8_t autocontinue,float param1,float param2,float param3,float param4,int32_t x,int32_t y,float z)
{
# 161 "./lib/main/mavlink/common/./mavlink_msg_command_int.h"
 mavlink_command_int_t packet;
 packet.param1 = param1;
 packet.param2 = param2;
 packet.param3 = param3;
 packet.param4 = param4;
 packet.x = x;
 packet.y = y;
 packet.z = z;
 packet.command = command;
 packet.target_system = target_system;
 packet.target_component = target_component;
 packet.frame = frame;
 packet.current = current;
 packet.autocontinue = autocontinue;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 35);


 msg->msgid = 75;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 35, 158);



}
# 195 "./lib/main/mavlink/common/./mavlink_msg_command_int.h"
static inline uint16_t mavlink_msg_command_int_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_command_int_t* command_int)
{
 return mavlink_msg_command_int_pack(system_id, component_id, msg, command_int->target_system, command_int->target_component, command_int->frame, command_int->command, command_int->current, command_int->autocontinue, command_int->param1, command_int->param2, command_int->param3, command_int->param4, command_int->x, command_int->y, command_int->z);
}
# 209 "./lib/main/mavlink/common/./mavlink_msg_command_int.h"
static inline uint16_t mavlink_msg_command_int_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_command_int_t* command_int)
{
 return mavlink_msg_command_int_pack_chan(system_id, component_id, chan, msg, command_int->target_system, command_int->target_component, command_int->frame, command_int->command, command_int->current, command_int->autocontinue, command_int->param1, command_int->param2, command_int->param3, command_int->param4, command_int->x, command_int->y, command_int->z);
}
# 347 "./lib/main/mavlink/common/./mavlink_msg_command_int.h"
static inline uint8_t mavlink_msg_command_int_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[30];
}






static inline uint8_t mavlink_msg_command_int_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[31];
}






static inline uint8_t mavlink_msg_command_int_get_frame(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[32];
}






static inline uint16_t mavlink_msg_command_int_get_command(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 28);
}






static inline uint8_t mavlink_msg_command_int_get_current(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[33];
}






static inline uint8_t mavlink_msg_command_int_get_autocontinue(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[34];
}






static inline float mavlink_msg_command_int_get_param1(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 0);
}






static inline float mavlink_msg_command_int_get_param2(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_command_int_get_param3(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_command_int_get_param4(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline int32_t mavlink_msg_command_int_get_x(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 16);
}






static inline int32_t mavlink_msg_command_int_get_y(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 20);
}






static inline float mavlink_msg_command_int_get_z(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 24);
}







static inline void mavlink_msg_command_int_decode(const mavlink_message_t* msg, mavlink_command_int_t* command_int)
{
# 495 "./lib/main/mavlink/common/./mavlink_msg_command_int.h"
 memcpy(command_int, ((const char *)(&((msg)->payload64[0]))), 35);

}
# 710 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_command_long.h" 1


#define MAVLINK_MSG_ID_COMMAND_LONG 76

typedef struct __mavlink_command_long_t
{
 float param1;
 float param2;
 float param3;
 float param4;
 float param5;
 float param6;
 float param7;
 uint16_t command;
 uint8_t target_system;
 uint8_t target_component;
 uint8_t confirmation;
} mavlink_command_long_t;

#define MAVLINK_MSG_ID_COMMAND_LONG_LEN 33
#define MAVLINK_MSG_ID_76_LEN 33

#define MAVLINK_MSG_ID_COMMAND_LONG_CRC 152
#define MAVLINK_MSG_ID_76_CRC 152



#define MAVLINK_MESSAGE_INFO_COMMAND_LONG { "COMMAND_LONG", 11, { { "param1", NULL, MAVLINK_TYPE_FLOAT, 0, 0, offsetof(mavlink_command_long_t, param1) }, { "param2", NULL, MAVLINK_TYPE_FLOAT, 0, 4, offsetof(mavlink_command_long_t, param2) }, { "param3", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_command_long_t, param3) }, { "param4", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_command_long_t, param4) }, { "param5", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_command_long_t, param5) }, { "param6", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_command_long_t, param6) }, { "param7", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_command_long_t, param7) }, { "command", NULL, MAVLINK_TYPE_UINT16_T, 0, 28, offsetof(mavlink_command_long_t, command) }, { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 30, offsetof(mavlink_command_long_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 31, offsetof(mavlink_command_long_t, target_component) }, { "confirmation", NULL, MAVLINK_TYPE_UINT8_T, 0, 32, offsetof(mavlink_command_long_t, confirmation) }, } }
# 65 "./lib/main/mavlink/common/./mavlink_msg_command_long.h"
static inline uint16_t mavlink_msg_command_long_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_system, uint8_t target_component, uint16_t command, uint8_t confirmation, float param1, float param2, float param3, float param4, float param5, float param6, float param7)
{
# 84 "./lib/main/mavlink/common/./mavlink_msg_command_long.h"
 mavlink_command_long_t packet;
 packet.param1 = param1;
 packet.param2 = param2;
 packet.param3 = param3;
 packet.param4 = param4;
 packet.param5 = param5;
 packet.param6 = param6;
 packet.param7 = param7;
 packet.command = command;
 packet.target_system = target_system;
 packet.target_component = target_component;
 packet.confirmation = confirmation;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 33);


 msg->msgid = 76;

    return mavlink_finalize_message(msg, system_id, component_id, 33, 152);



}
# 127 "./lib/main/mavlink/common/./mavlink_msg_command_long.h"
static inline uint16_t mavlink_msg_command_long_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_system,uint8_t target_component,uint16_t command,uint8_t confirmation,float param1,float param2,float param3,float param4,float param5,float param6,float param7)
{
# 147 "./lib/main/mavlink/common/./mavlink_msg_command_long.h"
 mavlink_command_long_t packet;
 packet.param1 = param1;
 packet.param2 = param2;
 packet.param3 = param3;
 packet.param4 = param4;
 packet.param5 = param5;
 packet.param6 = param6;
 packet.param7 = param7;
 packet.command = command;
 packet.target_system = target_system;
 packet.target_component = target_component;
 packet.confirmation = confirmation;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 33);


 msg->msgid = 76;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 33, 152);



}
# 179 "./lib/main/mavlink/common/./mavlink_msg_command_long.h"
static inline uint16_t mavlink_msg_command_long_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_command_long_t* command_long)
{
 return mavlink_msg_command_long_pack(system_id, component_id, msg, command_long->target_system, command_long->target_component, command_long->command, command_long->confirmation, command_long->param1, command_long->param2, command_long->param3, command_long->param4, command_long->param5, command_long->param6, command_long->param7);
}
# 193 "./lib/main/mavlink/common/./mavlink_msg_command_long.h"
static inline uint16_t mavlink_msg_command_long_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_command_long_t* command_long)
{
 return mavlink_msg_command_long_pack_chan(system_id, component_id, chan, msg, command_long->target_system, command_long->target_component, command_long->command, command_long->confirmation, command_long->param1, command_long->param2, command_long->param3, command_long->param4, command_long->param5, command_long->param6, command_long->param7);
}
# 321 "./lib/main/mavlink/common/./mavlink_msg_command_long.h"
static inline uint8_t mavlink_msg_command_long_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[30];
}






static inline uint8_t mavlink_msg_command_long_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[31];
}






static inline uint16_t mavlink_msg_command_long_get_command(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 28);
}






static inline uint8_t mavlink_msg_command_long_get_confirmation(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[32];
}






static inline float mavlink_msg_command_long_get_param1(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 0);
}






static inline float mavlink_msg_command_long_get_param2(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_command_long_get_param3(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_command_long_get_param4(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_command_long_get_param5(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_command_long_get_param6(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_command_long_get_param7(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 24);
}







static inline void mavlink_msg_command_long_decode(const mavlink_message_t* msg, mavlink_command_long_t* command_long)
{
# 447 "./lib/main/mavlink/common/./mavlink_msg_command_long.h"
 memcpy(command_long, ((const char *)(&((msg)->payload64[0]))), 33);

}
# 711 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_command_ack.h" 1


#define MAVLINK_MSG_ID_COMMAND_ACK 77

typedef struct __mavlink_command_ack_t
{
 uint16_t command;
 uint8_t result;
} mavlink_command_ack_t;

#define MAVLINK_MSG_ID_COMMAND_ACK_LEN 3
#define MAVLINK_MSG_ID_77_LEN 3

#define MAVLINK_MSG_ID_COMMAND_ACK_CRC 143
#define MAVLINK_MSG_ID_77_CRC 143



#define MAVLINK_MESSAGE_INFO_COMMAND_ACK { "COMMAND_ACK", 2, { { "command", NULL, MAVLINK_TYPE_UINT16_T, 0, 0, offsetof(mavlink_command_ack_t, command) }, { "result", NULL, MAVLINK_TYPE_UINT8_T, 0, 2, offsetof(mavlink_command_ack_t, result) }, } }
# 38 "./lib/main/mavlink/common/./mavlink_msg_command_ack.h"
static inline uint16_t mavlink_msg_command_ack_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint16_t command, uint8_t result)
{







 mavlink_command_ack_t packet;
 packet.command = command;
 packet.result = result;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 3);


 msg->msgid = 77;

    return mavlink_finalize_message(msg, system_id, component_id, 3, 143);



}
# 73 "./lib/main/mavlink/common/./mavlink_msg_command_ack.h"
static inline uint16_t mavlink_msg_command_ack_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint16_t command,uint8_t result)
{







 mavlink_command_ack_t packet;
 packet.command = command;
 packet.result = result;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 3);


 msg->msgid = 77;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 3, 143);



}
# 107 "./lib/main/mavlink/common/./mavlink_msg_command_ack.h"
static inline uint16_t mavlink_msg_command_ack_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_command_ack_t* command_ack)
{
 return mavlink_msg_command_ack_pack(system_id, component_id, msg, command_ack->command, command_ack->result);
}
# 121 "./lib/main/mavlink/common/./mavlink_msg_command_ack.h"
static inline uint16_t mavlink_msg_command_ack_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_command_ack_t* command_ack)
{
 return mavlink_msg_command_ack_pack_chan(system_id, component_id, chan, msg, command_ack->command, command_ack->result);
}
# 204 "./lib/main/mavlink/common/./mavlink_msg_command_ack.h"
static inline uint16_t mavlink_msg_command_ack_get_command(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 0);
}






static inline uint8_t mavlink_msg_command_ack_get_result(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}







static inline void mavlink_msg_command_ack_decode(const mavlink_message_t* msg, mavlink_command_ack_t* command_ack)
{




 memcpy(command_ack, ((const char *)(&((msg)->payload64[0]))), 3);

}
# 712 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_manual_setpoint.h" 1


#define MAVLINK_MSG_ID_MANUAL_SETPOINT 81

typedef struct __mavlink_manual_setpoint_t
{
 uint32_t time_boot_ms;
 float roll;
 float pitch;
 float yaw;
 float thrust;
 uint8_t mode_switch;
 uint8_t manual_override_switch;
} mavlink_manual_setpoint_t;

#define MAVLINK_MSG_ID_MANUAL_SETPOINT_LEN 22
#define MAVLINK_MSG_ID_81_LEN 22

#define MAVLINK_MSG_ID_MANUAL_SETPOINT_CRC 106
#define MAVLINK_MSG_ID_81_CRC 106



#define MAVLINK_MESSAGE_INFO_MANUAL_SETPOINT { "MANUAL_SETPOINT", 7, { { "time_boot_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_manual_setpoint_t, time_boot_ms) }, { "roll", NULL, MAVLINK_TYPE_FLOAT, 0, 4, offsetof(mavlink_manual_setpoint_t, roll) }, { "pitch", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_manual_setpoint_t, pitch) }, { "yaw", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_manual_setpoint_t, yaw) }, { "thrust", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_manual_setpoint_t, thrust) }, { "mode_switch", NULL, MAVLINK_TYPE_UINT8_T, 0, 20, offsetof(mavlink_manual_setpoint_t, mode_switch) }, { "manual_override_switch", NULL, MAVLINK_TYPE_UINT8_T, 0, 21, offsetof(mavlink_manual_setpoint_t, manual_override_switch) }, } }
# 53 "./lib/main/mavlink/common/./mavlink_msg_manual_setpoint.h"
static inline uint16_t mavlink_msg_manual_setpoint_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_boot_ms, float roll, float pitch, float yaw, float thrust, uint8_t mode_switch, uint8_t manual_override_switch)
{
# 68 "./lib/main/mavlink/common/./mavlink_msg_manual_setpoint.h"
 mavlink_manual_setpoint_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.roll = roll;
 packet.pitch = pitch;
 packet.yaw = yaw;
 packet.thrust = thrust;
 packet.mode_switch = mode_switch;
 packet.manual_override_switch = manual_override_switch;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


 msg->msgid = 81;

    return mavlink_finalize_message(msg, system_id, component_id, 22, 106);



}
# 103 "./lib/main/mavlink/common/./mavlink_msg_manual_setpoint.h"
static inline uint16_t mavlink_msg_manual_setpoint_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_boot_ms,float roll,float pitch,float yaw,float thrust,uint8_t mode_switch,uint8_t manual_override_switch)
{
# 119 "./lib/main/mavlink/common/./mavlink_msg_manual_setpoint.h"
 mavlink_manual_setpoint_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.roll = roll;
 packet.pitch = pitch;
 packet.yaw = yaw;
 packet.thrust = thrust;
 packet.mode_switch = mode_switch;
 packet.manual_override_switch = manual_override_switch;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


 msg->msgid = 81;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 22, 106);



}
# 147 "./lib/main/mavlink/common/./mavlink_msg_manual_setpoint.h"
static inline uint16_t mavlink_msg_manual_setpoint_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_manual_setpoint_t* manual_setpoint)
{
 return mavlink_msg_manual_setpoint_pack(system_id, component_id, msg, manual_setpoint->time_boot_ms, manual_setpoint->roll, manual_setpoint->pitch, manual_setpoint->yaw, manual_setpoint->thrust, manual_setpoint->mode_switch, manual_setpoint->manual_override_switch);
}
# 161 "./lib/main/mavlink/common/./mavlink_msg_manual_setpoint.h"
static inline uint16_t mavlink_msg_manual_setpoint_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_manual_setpoint_t* manual_setpoint)
{
 return mavlink_msg_manual_setpoint_pack_chan(system_id, component_id, chan, msg, manual_setpoint->time_boot_ms, manual_setpoint->roll, manual_setpoint->pitch, manual_setpoint->yaw, manual_setpoint->thrust, manual_setpoint->mode_switch, manual_setpoint->manual_override_switch);
}
# 269 "./lib/main/mavlink/common/./mavlink_msg_manual_setpoint.h"
static inline uint32_t mavlink_msg_manual_setpoint_get_time_boot_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline float mavlink_msg_manual_setpoint_get_roll(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_manual_setpoint_get_pitch(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_manual_setpoint_get_yaw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_manual_setpoint_get_thrust(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 16);
}






static inline uint8_t mavlink_msg_manual_setpoint_get_mode_switch(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[20];
}






static inline uint8_t mavlink_msg_manual_setpoint_get_manual_override_switch(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[21];
}







static inline void mavlink_msg_manual_setpoint_decode(const mavlink_message_t* msg, mavlink_manual_setpoint_t* manual_setpoint)
{
# 351 "./lib/main/mavlink/common/./mavlink_msg_manual_setpoint.h"
 memcpy(manual_setpoint, ((const char *)(&((msg)->payload64[0]))), 22);

}
# 713 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_set_attitude_target.h" 1


#define MAVLINK_MSG_ID_SET_ATTITUDE_TARGET 82

typedef struct __mavlink_set_attitude_target_t
{
 uint32_t time_boot_ms;
 float q[4];
 float body_roll_rate;
 float body_pitch_rate;
 float body_yaw_rate;
 float thrust;
 uint8_t target_system;
 uint8_t target_component;
 uint8_t type_mask;
} mavlink_set_attitude_target_t;

#define MAVLINK_MSG_ID_SET_ATTITUDE_TARGET_LEN 39
#define MAVLINK_MSG_ID_82_LEN 39

#define MAVLINK_MSG_ID_SET_ATTITUDE_TARGET_CRC 49
#define MAVLINK_MSG_ID_82_CRC 49

#define MAVLINK_MSG_SET_ATTITUDE_TARGET_FIELD_Q_LEN 4

#define MAVLINK_MESSAGE_INFO_SET_ATTITUDE_TARGET { "SET_ATTITUDE_TARGET", 9, { { "time_boot_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_set_attitude_target_t, time_boot_ms) }, { "q", NULL, MAVLINK_TYPE_FLOAT, 4, 4, offsetof(mavlink_set_attitude_target_t, q) }, { "body_roll_rate", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_set_attitude_target_t, body_roll_rate) }, { "body_pitch_rate", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_set_attitude_target_t, body_pitch_rate) }, { "body_yaw_rate", NULL, MAVLINK_TYPE_FLOAT, 0, 28, offsetof(mavlink_set_attitude_target_t, body_yaw_rate) }, { "thrust", NULL, MAVLINK_TYPE_FLOAT, 0, 32, offsetof(mavlink_set_attitude_target_t, thrust) }, { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 36, offsetof(mavlink_set_attitude_target_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 37, offsetof(mavlink_set_attitude_target_t, target_component) }, { "type_mask", NULL, MAVLINK_TYPE_UINT8_T, 0, 38, offsetof(mavlink_set_attitude_target_t, type_mask) }, } }
# 59 "./lib/main/mavlink/common/./mavlink_msg_set_attitude_target.h"
static inline uint16_t mavlink_msg_set_attitude_target_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_boot_ms, uint8_t target_system, uint8_t target_component, uint8_t type_mask, const float *q, float body_roll_rate, float body_pitch_rate, float body_yaw_rate, float thrust)
{
# 75 "./lib/main/mavlink/common/./mavlink_msg_set_attitude_target.h"
 mavlink_set_attitude_target_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.body_roll_rate = body_roll_rate;
 packet.body_pitch_rate = body_pitch_rate;
 packet.body_yaw_rate = body_yaw_rate;
 packet.thrust = thrust;
 packet.target_system = target_system;
 packet.target_component = target_component;
 packet.type_mask = type_mask;
 mav_array_memcpy(packet.q, q, sizeof(float)*4);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 39);


 msg->msgid = 82;

    return mavlink_finalize_message(msg, system_id, component_id, 39, 49);



}
# 113 "./lib/main/mavlink/common/./mavlink_msg_set_attitude_target.h"
static inline uint16_t mavlink_msg_set_attitude_target_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_boot_ms,uint8_t target_system,uint8_t target_component,uint8_t type_mask,const float *q,float body_roll_rate,float body_pitch_rate,float body_yaw_rate,float thrust)
{
# 130 "./lib/main/mavlink/common/./mavlink_msg_set_attitude_target.h"
 mavlink_set_attitude_target_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.body_roll_rate = body_roll_rate;
 packet.body_pitch_rate = body_pitch_rate;
 packet.body_yaw_rate = body_yaw_rate;
 packet.thrust = thrust;
 packet.target_system = target_system;
 packet.target_component = target_component;
 packet.type_mask = type_mask;
 mav_array_memcpy(packet.q, q, sizeof(float)*4);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 39);


 msg->msgid = 82;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 39, 49);



}
# 159 "./lib/main/mavlink/common/./mavlink_msg_set_attitude_target.h"
static inline uint16_t mavlink_msg_set_attitude_target_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_set_attitude_target_t* set_attitude_target)
{
 return mavlink_msg_set_attitude_target_pack(system_id, component_id, msg, set_attitude_target->time_boot_ms, set_attitude_target->target_system, set_attitude_target->target_component, set_attitude_target->type_mask, set_attitude_target->q, set_attitude_target->body_roll_rate, set_attitude_target->body_pitch_rate, set_attitude_target->body_yaw_rate, set_attitude_target->thrust);
}
# 173 "./lib/main/mavlink/common/./mavlink_msg_set_attitude_target.h"
static inline uint16_t mavlink_msg_set_attitude_target_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_set_attitude_target_t* set_attitude_target)
{
 return mavlink_msg_set_attitude_target_pack_chan(system_id, component_id, chan, msg, set_attitude_target->time_boot_ms, set_attitude_target->target_system, set_attitude_target->target_component, set_attitude_target->type_mask, set_attitude_target->q, set_attitude_target->body_roll_rate, set_attitude_target->body_pitch_rate, set_attitude_target->body_yaw_rate, set_attitude_target->thrust);
}
# 287 "./lib/main/mavlink/common/./mavlink_msg_set_attitude_target.h"
static inline uint32_t mavlink_msg_set_attitude_target_get_time_boot_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_set_attitude_target_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[36];
}






static inline uint8_t mavlink_msg_set_attitude_target_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[37];
}






static inline uint8_t mavlink_msg_set_attitude_target_get_type_mask(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[38];
}






static inline uint16_t mavlink_msg_set_attitude_target_get_q(const mavlink_message_t* msg, float *q)
{
 return _MAV_RETURN_float_array(msg, q, 4, 4);
}






static inline float mavlink_msg_set_attitude_target_get_body_roll_rate(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_set_attitude_target_get_body_pitch_rate(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_set_attitude_target_get_body_yaw_rate(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_set_attitude_target_get_thrust(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 32);
}







static inline void mavlink_msg_set_attitude_target_decode(const mavlink_message_t* msg, mavlink_set_attitude_target_t* set_attitude_target)
{
# 391 "./lib/main/mavlink/common/./mavlink_msg_set_attitude_target.h"
 memcpy(set_attitude_target, ((const char *)(&((msg)->payload64[0]))), 39);

}
# 714 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_attitude_target.h" 1


#define MAVLINK_MSG_ID_ATTITUDE_TARGET 83

typedef struct __mavlink_attitude_target_t
{
 uint32_t time_boot_ms;
 float q[4];
 float body_roll_rate;
 float body_pitch_rate;
 float body_yaw_rate;
 float thrust;
 uint8_t type_mask;
} mavlink_attitude_target_t;

#define MAVLINK_MSG_ID_ATTITUDE_TARGET_LEN 37
#define MAVLINK_MSG_ID_83_LEN 37

#define MAVLINK_MSG_ID_ATTITUDE_TARGET_CRC 22
#define MAVLINK_MSG_ID_83_CRC 22

#define MAVLINK_MSG_ATTITUDE_TARGET_FIELD_Q_LEN 4

#define MAVLINK_MESSAGE_INFO_ATTITUDE_TARGET { "ATTITUDE_TARGET", 7, { { "time_boot_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_attitude_target_t, time_boot_ms) }, { "q", NULL, MAVLINK_TYPE_FLOAT, 4, 4, offsetof(mavlink_attitude_target_t, q) }, { "body_roll_rate", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_attitude_target_t, body_roll_rate) }, { "body_pitch_rate", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_attitude_target_t, body_pitch_rate) }, { "body_yaw_rate", NULL, MAVLINK_TYPE_FLOAT, 0, 28, offsetof(mavlink_attitude_target_t, body_yaw_rate) }, { "thrust", NULL, MAVLINK_TYPE_FLOAT, 0, 32, offsetof(mavlink_attitude_target_t, thrust) }, { "type_mask", NULL, MAVLINK_TYPE_UINT8_T, 0, 36, offsetof(mavlink_attitude_target_t, type_mask) }, } }
# 53 "./lib/main/mavlink/common/./mavlink_msg_attitude_target.h"
static inline uint16_t mavlink_msg_attitude_target_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_boot_ms, uint8_t type_mask, const float *q, float body_roll_rate, float body_pitch_rate, float body_yaw_rate, float thrust)
{
# 67 "./lib/main/mavlink/common/./mavlink_msg_attitude_target.h"
 mavlink_attitude_target_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.body_roll_rate = body_roll_rate;
 packet.body_pitch_rate = body_pitch_rate;
 packet.body_yaw_rate = body_yaw_rate;
 packet.thrust = thrust;
 packet.type_mask = type_mask;
 mav_array_memcpy(packet.q, q, sizeof(float)*4);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 37);


 msg->msgid = 83;

    return mavlink_finalize_message(msg, system_id, component_id, 37, 22);



}
# 101 "./lib/main/mavlink/common/./mavlink_msg_attitude_target.h"
static inline uint16_t mavlink_msg_attitude_target_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_boot_ms,uint8_t type_mask,const float *q,float body_roll_rate,float body_pitch_rate,float body_yaw_rate,float thrust)
{
# 116 "./lib/main/mavlink/common/./mavlink_msg_attitude_target.h"
 mavlink_attitude_target_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.body_roll_rate = body_roll_rate;
 packet.body_pitch_rate = body_pitch_rate;
 packet.body_yaw_rate = body_yaw_rate;
 packet.thrust = thrust;
 packet.type_mask = type_mask;
 mav_array_memcpy(packet.q, q, sizeof(float)*4);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 37);


 msg->msgid = 83;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 37, 22);



}
# 143 "./lib/main/mavlink/common/./mavlink_msg_attitude_target.h"
static inline uint16_t mavlink_msg_attitude_target_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_attitude_target_t* attitude_target)
{
 return mavlink_msg_attitude_target_pack(system_id, component_id, msg, attitude_target->time_boot_ms, attitude_target->type_mask, attitude_target->q, attitude_target->body_roll_rate, attitude_target->body_pitch_rate, attitude_target->body_yaw_rate, attitude_target->thrust);
}
# 157 "./lib/main/mavlink/common/./mavlink_msg_attitude_target.h"
static inline uint16_t mavlink_msg_attitude_target_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_attitude_target_t* attitude_target)
{
 return mavlink_msg_attitude_target_pack_chan(system_id, component_id, chan, msg, attitude_target->time_boot_ms, attitude_target->type_mask, attitude_target->q, attitude_target->body_roll_rate, attitude_target->body_pitch_rate, attitude_target->body_yaw_rate, attitude_target->thrust);
}
# 261 "./lib/main/mavlink/common/./mavlink_msg_attitude_target.h"
static inline uint32_t mavlink_msg_attitude_target_get_time_boot_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_attitude_target_get_type_mask(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[36];
}






static inline uint16_t mavlink_msg_attitude_target_get_q(const mavlink_message_t* msg, float *q)
{
 return _MAV_RETURN_float_array(msg, q, 4, 4);
}






static inline float mavlink_msg_attitude_target_get_body_roll_rate(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_attitude_target_get_body_pitch_rate(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_attitude_target_get_body_yaw_rate(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_attitude_target_get_thrust(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 32);
}







static inline void mavlink_msg_attitude_target_decode(const mavlink_message_t* msg, mavlink_attitude_target_t* attitude_target)
{
# 343 "./lib/main/mavlink/common/./mavlink_msg_attitude_target.h"
 memcpy(attitude_target, ((const char *)(&((msg)->payload64[0]))), 37);

}
# 715 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_set_position_target_local_ned.h" 1


#define MAVLINK_MSG_ID_SET_POSITION_TARGET_LOCAL_NED 84

typedef struct __mavlink_set_position_target_local_ned_t
{
 uint32_t time_boot_ms;
 float x;
 float y;
 float z;
 float vx;
 float vy;
 float vz;
 float afx;
 float afy;
 float afz;
 float yaw;
 float yaw_rate;
 uint16_t type_mask;
 uint8_t target_system;
 uint8_t target_component;
 uint8_t coordinate_frame;
} mavlink_set_position_target_local_ned_t;

#define MAVLINK_MSG_ID_SET_POSITION_TARGET_LOCAL_NED_LEN 53
#define MAVLINK_MSG_ID_84_LEN 53

#define MAVLINK_MSG_ID_SET_POSITION_TARGET_LOCAL_NED_CRC 143
#define MAVLINK_MSG_ID_84_CRC 143



#define MAVLINK_MESSAGE_INFO_SET_POSITION_TARGET_LOCAL_NED { "SET_POSITION_TARGET_LOCAL_NED", 16, { { "time_boot_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_set_position_target_local_ned_t, time_boot_ms) }, { "x", NULL, MAVLINK_TYPE_FLOAT, 0, 4, offsetof(mavlink_set_position_target_local_ned_t, x) }, { "y", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_set_position_target_local_ned_t, y) }, { "z", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_set_position_target_local_ned_t, z) }, { "vx", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_set_position_target_local_ned_t, vx) }, { "vy", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_set_position_target_local_ned_t, vy) }, { "vz", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_set_position_target_local_ned_t, vz) }, { "afx", NULL, MAVLINK_TYPE_FLOAT, 0, 28, offsetof(mavlink_set_position_target_local_ned_t, afx) }, { "afy", NULL, MAVLINK_TYPE_FLOAT, 0, 32, offsetof(mavlink_set_position_target_local_ned_t, afy) }, { "afz", NULL, MAVLINK_TYPE_FLOAT, 0, 36, offsetof(mavlink_set_position_target_local_ned_t, afz) }, { "yaw", NULL, MAVLINK_TYPE_FLOAT, 0, 40, offsetof(mavlink_set_position_target_local_ned_t, yaw) }, { "yaw_rate", NULL, MAVLINK_TYPE_FLOAT, 0, 44, offsetof(mavlink_set_position_target_local_ned_t, yaw_rate) }, { "type_mask", NULL, MAVLINK_TYPE_UINT16_T, 0, 48, offsetof(mavlink_set_position_target_local_ned_t, type_mask) }, { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 50, offsetof(mavlink_set_position_target_local_ned_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 51, offsetof(mavlink_set_position_target_local_ned_t, target_component) }, { "coordinate_frame", NULL, MAVLINK_TYPE_UINT8_T, 0, 52, offsetof(mavlink_set_position_target_local_ned_t, coordinate_frame) }, } }
# 80 "./lib/main/mavlink/common/./mavlink_msg_set_position_target_local_ned.h"
static inline uint16_t mavlink_msg_set_position_target_local_ned_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_boot_ms, uint8_t target_system, uint8_t target_component, uint8_t coordinate_frame, uint16_t type_mask, float x, float y, float z, float vx, float vy, float vz, float afx, float afy, float afz, float yaw, float yaw_rate)
{
# 104 "./lib/main/mavlink/common/./mavlink_msg_set_position_target_local_ned.h"
 mavlink_set_position_target_local_ned_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.x = x;
 packet.y = y;
 packet.z = z;
 packet.vx = vx;
 packet.vy = vy;
 packet.vz = vz;
 packet.afx = afx;
 packet.afy = afy;
 packet.afz = afz;
 packet.yaw = yaw;
 packet.yaw_rate = yaw_rate;
 packet.type_mask = type_mask;
 packet.target_system = target_system;
 packet.target_component = target_component;
 packet.coordinate_frame = coordinate_frame;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 53);


 msg->msgid = 84;

    return mavlink_finalize_message(msg, system_id, component_id, 53, 143);



}
# 157 "./lib/main/mavlink/common/./mavlink_msg_set_position_target_local_ned.h"
static inline uint16_t mavlink_msg_set_position_target_local_ned_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_boot_ms,uint8_t target_system,uint8_t target_component,uint8_t coordinate_frame,uint16_t type_mask,float x,float y,float z,float vx,float vy,float vz,float afx,float afy,float afz,float yaw,float yaw_rate)
{
# 182 "./lib/main/mavlink/common/./mavlink_msg_set_position_target_local_ned.h"
 mavlink_set_position_target_local_ned_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.x = x;
 packet.y = y;
 packet.z = z;
 packet.vx = vx;
 packet.vy = vy;
 packet.vz = vz;
 packet.afx = afx;
 packet.afy = afy;
 packet.afz = afz;
 packet.yaw = yaw;
 packet.yaw_rate = yaw_rate;
 packet.type_mask = type_mask;
 packet.target_system = target_system;
 packet.target_component = target_component;
 packet.coordinate_frame = coordinate_frame;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 53);


 msg->msgid = 84;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 53, 143);



}
# 219 "./lib/main/mavlink/common/./mavlink_msg_set_position_target_local_ned.h"
static inline uint16_t mavlink_msg_set_position_target_local_ned_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_set_position_target_local_ned_t* set_position_target_local_ned)
{
 return mavlink_msg_set_position_target_local_ned_pack(system_id, component_id, msg, set_position_target_local_ned->time_boot_ms, set_position_target_local_ned->target_system, set_position_target_local_ned->target_component, set_position_target_local_ned->coordinate_frame, set_position_target_local_ned->type_mask, set_position_target_local_ned->x, set_position_target_local_ned->y, set_position_target_local_ned->z, set_position_target_local_ned->vx, set_position_target_local_ned->vy, set_position_target_local_ned->vz, set_position_target_local_ned->afx, set_position_target_local_ned->afy, set_position_target_local_ned->afz, set_position_target_local_ned->yaw, set_position_target_local_ned->yaw_rate);
}
# 233 "./lib/main/mavlink/common/./mavlink_msg_set_position_target_local_ned.h"
static inline uint16_t mavlink_msg_set_position_target_local_ned_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_set_position_target_local_ned_t* set_position_target_local_ned)
{
 return mavlink_msg_set_position_target_local_ned_pack_chan(system_id, component_id, chan, msg, set_position_target_local_ned->time_boot_ms, set_position_target_local_ned->target_system, set_position_target_local_ned->target_component, set_position_target_local_ned->coordinate_frame, set_position_target_local_ned->type_mask, set_position_target_local_ned->x, set_position_target_local_ned->y, set_position_target_local_ned->z, set_position_target_local_ned->vx, set_position_target_local_ned->vy, set_position_target_local_ned->vz, set_position_target_local_ned->afx, set_position_target_local_ned->afy, set_position_target_local_ned->afz, set_position_target_local_ned->yaw, set_position_target_local_ned->yaw_rate);
}
# 386 "./lib/main/mavlink/common/./mavlink_msg_set_position_target_local_ned.h"
static inline uint32_t mavlink_msg_set_position_target_local_ned_get_time_boot_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_set_position_target_local_ned_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[50];
}






static inline uint8_t mavlink_msg_set_position_target_local_ned_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[51];
}






static inline uint8_t mavlink_msg_set_position_target_local_ned_get_coordinate_frame(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[52];
}






static inline uint16_t mavlink_msg_set_position_target_local_ned_get_type_mask(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 48);
}






static inline float mavlink_msg_set_position_target_local_ned_get_x(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_set_position_target_local_ned_get_y(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_set_position_target_local_ned_get_z(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_set_position_target_local_ned_get_vx(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_set_position_target_local_ned_get_vy(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_set_position_target_local_ned_get_vz(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_set_position_target_local_ned_get_afx(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_set_position_target_local_ned_get_afy(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 32);
}






static inline float mavlink_msg_set_position_target_local_ned_get_afz(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 36);
}






static inline float mavlink_msg_set_position_target_local_ned_get_yaw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 40);
}






static inline float mavlink_msg_set_position_target_local_ned_get_yaw_rate(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 44);
}







static inline void mavlink_msg_set_position_target_local_ned_decode(const mavlink_message_t* msg, mavlink_set_position_target_local_ned_t* set_position_target_local_ned)
{
# 567 "./lib/main/mavlink/common/./mavlink_msg_set_position_target_local_ned.h"
 memcpy(set_position_target_local_ned, ((const char *)(&((msg)->payload64[0]))), 53);

}
# 716 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_position_target_local_ned.h" 1


#define MAVLINK_MSG_ID_POSITION_TARGET_LOCAL_NED 85

typedef struct __mavlink_position_target_local_ned_t
{
 uint32_t time_boot_ms;
 float x;
 float y;
 float z;
 float vx;
 float vy;
 float vz;
 float afx;
 float afy;
 float afz;
 float yaw;
 float yaw_rate;
 uint16_t type_mask;
 uint8_t coordinate_frame;
} mavlink_position_target_local_ned_t;

#define MAVLINK_MSG_ID_POSITION_TARGET_LOCAL_NED_LEN 51
#define MAVLINK_MSG_ID_85_LEN 51

#define MAVLINK_MSG_ID_POSITION_TARGET_LOCAL_NED_CRC 140
#define MAVLINK_MSG_ID_85_CRC 140



#define MAVLINK_MESSAGE_INFO_POSITION_TARGET_LOCAL_NED { "POSITION_TARGET_LOCAL_NED", 14, { { "time_boot_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_position_target_local_ned_t, time_boot_ms) }, { "x", NULL, MAVLINK_TYPE_FLOAT, 0, 4, offsetof(mavlink_position_target_local_ned_t, x) }, { "y", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_position_target_local_ned_t, y) }, { "z", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_position_target_local_ned_t, z) }, { "vx", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_position_target_local_ned_t, vx) }, { "vy", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_position_target_local_ned_t, vy) }, { "vz", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_position_target_local_ned_t, vz) }, { "afx", NULL, MAVLINK_TYPE_FLOAT, 0, 28, offsetof(mavlink_position_target_local_ned_t, afx) }, { "afy", NULL, MAVLINK_TYPE_FLOAT, 0, 32, offsetof(mavlink_position_target_local_ned_t, afy) }, { "afz", NULL, MAVLINK_TYPE_FLOAT, 0, 36, offsetof(mavlink_position_target_local_ned_t, afz) }, { "yaw", NULL, MAVLINK_TYPE_FLOAT, 0, 40, offsetof(mavlink_position_target_local_ned_t, yaw) }, { "yaw_rate", NULL, MAVLINK_TYPE_FLOAT, 0, 44, offsetof(mavlink_position_target_local_ned_t, yaw_rate) }, { "type_mask", NULL, MAVLINK_TYPE_UINT16_T, 0, 48, offsetof(mavlink_position_target_local_ned_t, type_mask) }, { "coordinate_frame", NULL, MAVLINK_TYPE_UINT8_T, 0, 50, offsetof(mavlink_position_target_local_ned_t, coordinate_frame) }, } }
# 74 "./lib/main/mavlink/common/./mavlink_msg_position_target_local_ned.h"
static inline uint16_t mavlink_msg_position_target_local_ned_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_boot_ms, uint8_t coordinate_frame, uint16_t type_mask, float x, float y, float z, float vx, float vy, float vz, float afx, float afy, float afz, float yaw, float yaw_rate)
{
# 96 "./lib/main/mavlink/common/./mavlink_msg_position_target_local_ned.h"
 mavlink_position_target_local_ned_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.x = x;
 packet.y = y;
 packet.z = z;
 packet.vx = vx;
 packet.vy = vy;
 packet.vz = vz;
 packet.afx = afx;
 packet.afy = afy;
 packet.afz = afz;
 packet.yaw = yaw;
 packet.yaw_rate = yaw_rate;
 packet.type_mask = type_mask;
 packet.coordinate_frame = coordinate_frame;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 51);


 msg->msgid = 85;

    return mavlink_finalize_message(msg, system_id, component_id, 51, 140);



}
# 145 "./lib/main/mavlink/common/./mavlink_msg_position_target_local_ned.h"
static inline uint16_t mavlink_msg_position_target_local_ned_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_boot_ms,uint8_t coordinate_frame,uint16_t type_mask,float x,float y,float z,float vx,float vy,float vz,float afx,float afy,float afz,float yaw,float yaw_rate)
{
# 168 "./lib/main/mavlink/common/./mavlink_msg_position_target_local_ned.h"
 mavlink_position_target_local_ned_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.x = x;
 packet.y = y;
 packet.z = z;
 packet.vx = vx;
 packet.vy = vy;
 packet.vz = vz;
 packet.afx = afx;
 packet.afy = afy;
 packet.afz = afz;
 packet.yaw = yaw;
 packet.yaw_rate = yaw_rate;
 packet.type_mask = type_mask;
 packet.coordinate_frame = coordinate_frame;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 51);


 msg->msgid = 85;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 51, 140);



}
# 203 "./lib/main/mavlink/common/./mavlink_msg_position_target_local_ned.h"
static inline uint16_t mavlink_msg_position_target_local_ned_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_position_target_local_ned_t* position_target_local_ned)
{
 return mavlink_msg_position_target_local_ned_pack(system_id, component_id, msg, position_target_local_ned->time_boot_ms, position_target_local_ned->coordinate_frame, position_target_local_ned->type_mask, position_target_local_ned->x, position_target_local_ned->y, position_target_local_ned->z, position_target_local_ned->vx, position_target_local_ned->vy, position_target_local_ned->vz, position_target_local_ned->afx, position_target_local_ned->afy, position_target_local_ned->afz, position_target_local_ned->yaw, position_target_local_ned->yaw_rate);
}
# 217 "./lib/main/mavlink/common/./mavlink_msg_position_target_local_ned.h"
static inline uint16_t mavlink_msg_position_target_local_ned_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_position_target_local_ned_t* position_target_local_ned)
{
 return mavlink_msg_position_target_local_ned_pack_chan(system_id, component_id, chan, msg, position_target_local_ned->time_boot_ms, position_target_local_ned->coordinate_frame, position_target_local_ned->type_mask, position_target_local_ned->x, position_target_local_ned->y, position_target_local_ned->z, position_target_local_ned->vx, position_target_local_ned->vy, position_target_local_ned->vz, position_target_local_ned->afx, position_target_local_ned->afy, position_target_local_ned->afz, position_target_local_ned->yaw, position_target_local_ned->yaw_rate);
}
# 360 "./lib/main/mavlink/common/./mavlink_msg_position_target_local_ned.h"
static inline uint32_t mavlink_msg_position_target_local_ned_get_time_boot_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_position_target_local_ned_get_coordinate_frame(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[50];
}






static inline uint16_t mavlink_msg_position_target_local_ned_get_type_mask(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 48);
}






static inline float mavlink_msg_position_target_local_ned_get_x(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_position_target_local_ned_get_y(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_position_target_local_ned_get_z(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_position_target_local_ned_get_vx(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_position_target_local_ned_get_vy(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_position_target_local_ned_get_vz(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_position_target_local_ned_get_afx(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_position_target_local_ned_get_afy(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 32);
}






static inline float mavlink_msg_position_target_local_ned_get_afz(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 36);
}






static inline float mavlink_msg_position_target_local_ned_get_yaw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 40);
}






static inline float mavlink_msg_position_target_local_ned_get_yaw_rate(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 44);
}







static inline void mavlink_msg_position_target_local_ned_decode(const mavlink_message_t* msg, mavlink_position_target_local_ned_t* position_target_local_ned)
{
# 519 "./lib/main/mavlink/common/./mavlink_msg_position_target_local_ned.h"
 memcpy(position_target_local_ned, ((const char *)(&((msg)->payload64[0]))), 51);

}
# 717 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_set_position_target_global_int.h" 1


#define MAVLINK_MSG_ID_SET_POSITION_TARGET_GLOBAL_INT 86

typedef struct __mavlink_set_position_target_global_int_t
{
 uint32_t time_boot_ms;
 int32_t lat_int;
 int32_t lon_int;
 float alt;
 float vx;
 float vy;
 float vz;
 float afx;
 float afy;
 float afz;
 float yaw;
 float yaw_rate;
 uint16_t type_mask;
 uint8_t target_system;
 uint8_t target_component;
 uint8_t coordinate_frame;
} mavlink_set_position_target_global_int_t;

#define MAVLINK_MSG_ID_SET_POSITION_TARGET_GLOBAL_INT_LEN 53
#define MAVLINK_MSG_ID_86_LEN 53

#define MAVLINK_MSG_ID_SET_POSITION_TARGET_GLOBAL_INT_CRC 5
#define MAVLINK_MSG_ID_86_CRC 5



#define MAVLINK_MESSAGE_INFO_SET_POSITION_TARGET_GLOBAL_INT { "SET_POSITION_TARGET_GLOBAL_INT", 16, { { "time_boot_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_set_position_target_global_int_t, time_boot_ms) }, { "lat_int", NULL, MAVLINK_TYPE_INT32_T, 0, 4, offsetof(mavlink_set_position_target_global_int_t, lat_int) }, { "lon_int", NULL, MAVLINK_TYPE_INT32_T, 0, 8, offsetof(mavlink_set_position_target_global_int_t, lon_int) }, { "alt", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_set_position_target_global_int_t, alt) }, { "vx", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_set_position_target_global_int_t, vx) }, { "vy", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_set_position_target_global_int_t, vy) }, { "vz", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_set_position_target_global_int_t, vz) }, { "afx", NULL, MAVLINK_TYPE_FLOAT, 0, 28, offsetof(mavlink_set_position_target_global_int_t, afx) }, { "afy", NULL, MAVLINK_TYPE_FLOAT, 0, 32, offsetof(mavlink_set_position_target_global_int_t, afy) }, { "afz", NULL, MAVLINK_TYPE_FLOAT, 0, 36, offsetof(mavlink_set_position_target_global_int_t, afz) }, { "yaw", NULL, MAVLINK_TYPE_FLOAT, 0, 40, offsetof(mavlink_set_position_target_global_int_t, yaw) }, { "yaw_rate", NULL, MAVLINK_TYPE_FLOAT, 0, 44, offsetof(mavlink_set_position_target_global_int_t, yaw_rate) }, { "type_mask", NULL, MAVLINK_TYPE_UINT16_T, 0, 48, offsetof(mavlink_set_position_target_global_int_t, type_mask) }, { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 50, offsetof(mavlink_set_position_target_global_int_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 51, offsetof(mavlink_set_position_target_global_int_t, target_component) }, { "coordinate_frame", NULL, MAVLINK_TYPE_UINT8_T, 0, 52, offsetof(mavlink_set_position_target_global_int_t, coordinate_frame) }, } }
# 80 "./lib/main/mavlink/common/./mavlink_msg_set_position_target_global_int.h"
static inline uint16_t mavlink_msg_set_position_target_global_int_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_boot_ms, uint8_t target_system, uint8_t target_component, uint8_t coordinate_frame, uint16_t type_mask, int32_t lat_int, int32_t lon_int, float alt, float vx, float vy, float vz, float afx, float afy, float afz, float yaw, float yaw_rate)
{
# 104 "./lib/main/mavlink/common/./mavlink_msg_set_position_target_global_int.h"
 mavlink_set_position_target_global_int_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.lat_int = lat_int;
 packet.lon_int = lon_int;
 packet.alt = alt;
 packet.vx = vx;
 packet.vy = vy;
 packet.vz = vz;
 packet.afx = afx;
 packet.afy = afy;
 packet.afz = afz;
 packet.yaw = yaw;
 packet.yaw_rate = yaw_rate;
 packet.type_mask = type_mask;
 packet.target_system = target_system;
 packet.target_component = target_component;
 packet.coordinate_frame = coordinate_frame;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 53);


 msg->msgid = 86;

    return mavlink_finalize_message(msg, system_id, component_id, 53, 5);



}
# 157 "./lib/main/mavlink/common/./mavlink_msg_set_position_target_global_int.h"
static inline uint16_t mavlink_msg_set_position_target_global_int_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_boot_ms,uint8_t target_system,uint8_t target_component,uint8_t coordinate_frame,uint16_t type_mask,int32_t lat_int,int32_t lon_int,float alt,float vx,float vy,float vz,float afx,float afy,float afz,float yaw,float yaw_rate)
{
# 182 "./lib/main/mavlink/common/./mavlink_msg_set_position_target_global_int.h"
 mavlink_set_position_target_global_int_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.lat_int = lat_int;
 packet.lon_int = lon_int;
 packet.alt = alt;
 packet.vx = vx;
 packet.vy = vy;
 packet.vz = vz;
 packet.afx = afx;
 packet.afy = afy;
 packet.afz = afz;
 packet.yaw = yaw;
 packet.yaw_rate = yaw_rate;
 packet.type_mask = type_mask;
 packet.target_system = target_system;
 packet.target_component = target_component;
 packet.coordinate_frame = coordinate_frame;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 53);


 msg->msgid = 86;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 53, 5);



}
# 219 "./lib/main/mavlink/common/./mavlink_msg_set_position_target_global_int.h"
static inline uint16_t mavlink_msg_set_position_target_global_int_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_set_position_target_global_int_t* set_position_target_global_int)
{
 return mavlink_msg_set_position_target_global_int_pack(system_id, component_id, msg, set_position_target_global_int->time_boot_ms, set_position_target_global_int->target_system, set_position_target_global_int->target_component, set_position_target_global_int->coordinate_frame, set_position_target_global_int->type_mask, set_position_target_global_int->lat_int, set_position_target_global_int->lon_int, set_position_target_global_int->alt, set_position_target_global_int->vx, set_position_target_global_int->vy, set_position_target_global_int->vz, set_position_target_global_int->afx, set_position_target_global_int->afy, set_position_target_global_int->afz, set_position_target_global_int->yaw, set_position_target_global_int->yaw_rate);
}
# 233 "./lib/main/mavlink/common/./mavlink_msg_set_position_target_global_int.h"
static inline uint16_t mavlink_msg_set_position_target_global_int_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_set_position_target_global_int_t* set_position_target_global_int)
{
 return mavlink_msg_set_position_target_global_int_pack_chan(system_id, component_id, chan, msg, set_position_target_global_int->time_boot_ms, set_position_target_global_int->target_system, set_position_target_global_int->target_component, set_position_target_global_int->coordinate_frame, set_position_target_global_int->type_mask, set_position_target_global_int->lat_int, set_position_target_global_int->lon_int, set_position_target_global_int->alt, set_position_target_global_int->vx, set_position_target_global_int->vy, set_position_target_global_int->vz, set_position_target_global_int->afx, set_position_target_global_int->afy, set_position_target_global_int->afz, set_position_target_global_int->yaw, set_position_target_global_int->yaw_rate);
}
# 386 "./lib/main/mavlink/common/./mavlink_msg_set_position_target_global_int.h"
static inline uint32_t mavlink_msg_set_position_target_global_int_get_time_boot_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_set_position_target_global_int_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[50];
}






static inline uint8_t mavlink_msg_set_position_target_global_int_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[51];
}






static inline uint8_t mavlink_msg_set_position_target_global_int_get_coordinate_frame(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[52];
}






static inline uint16_t mavlink_msg_set_position_target_global_int_get_type_mask(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 48);
}






static inline int32_t mavlink_msg_set_position_target_global_int_get_lat_int(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 4);
}






static inline int32_t mavlink_msg_set_position_target_global_int_get_lon_int(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 8);
}






static inline float mavlink_msg_set_position_target_global_int_get_alt(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_set_position_target_global_int_get_vx(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_set_position_target_global_int_get_vy(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_set_position_target_global_int_get_vz(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_set_position_target_global_int_get_afx(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_set_position_target_global_int_get_afy(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 32);
}






static inline float mavlink_msg_set_position_target_global_int_get_afz(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 36);
}






static inline float mavlink_msg_set_position_target_global_int_get_yaw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 40);
}






static inline float mavlink_msg_set_position_target_global_int_get_yaw_rate(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 44);
}







static inline void mavlink_msg_set_position_target_global_int_decode(const mavlink_message_t* msg, mavlink_set_position_target_global_int_t* set_position_target_global_int)
{
# 567 "./lib/main/mavlink/common/./mavlink_msg_set_position_target_global_int.h"
 memcpy(set_position_target_global_int, ((const char *)(&((msg)->payload64[0]))), 53);

}
# 718 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_position_target_global_int.h" 1


#define MAVLINK_MSG_ID_POSITION_TARGET_GLOBAL_INT 87

typedef struct __mavlink_position_target_global_int_t
{
 uint32_t time_boot_ms;
 int32_t lat_int;
 int32_t lon_int;
 float alt;
 float vx;
 float vy;
 float vz;
 float afx;
 float afy;
 float afz;
 float yaw;
 float yaw_rate;
 uint16_t type_mask;
 uint8_t coordinate_frame;
} mavlink_position_target_global_int_t;

#define MAVLINK_MSG_ID_POSITION_TARGET_GLOBAL_INT_LEN 51
#define MAVLINK_MSG_ID_87_LEN 51

#define MAVLINK_MSG_ID_POSITION_TARGET_GLOBAL_INT_CRC 150
#define MAVLINK_MSG_ID_87_CRC 150



#define MAVLINK_MESSAGE_INFO_POSITION_TARGET_GLOBAL_INT { "POSITION_TARGET_GLOBAL_INT", 14, { { "time_boot_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_position_target_global_int_t, time_boot_ms) }, { "lat_int", NULL, MAVLINK_TYPE_INT32_T, 0, 4, offsetof(mavlink_position_target_global_int_t, lat_int) }, { "lon_int", NULL, MAVLINK_TYPE_INT32_T, 0, 8, offsetof(mavlink_position_target_global_int_t, lon_int) }, { "alt", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_position_target_global_int_t, alt) }, { "vx", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_position_target_global_int_t, vx) }, { "vy", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_position_target_global_int_t, vy) }, { "vz", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_position_target_global_int_t, vz) }, { "afx", NULL, MAVLINK_TYPE_FLOAT, 0, 28, offsetof(mavlink_position_target_global_int_t, afx) }, { "afy", NULL, MAVLINK_TYPE_FLOAT, 0, 32, offsetof(mavlink_position_target_global_int_t, afy) }, { "afz", NULL, MAVLINK_TYPE_FLOAT, 0, 36, offsetof(mavlink_position_target_global_int_t, afz) }, { "yaw", NULL, MAVLINK_TYPE_FLOAT, 0, 40, offsetof(mavlink_position_target_global_int_t, yaw) }, { "yaw_rate", NULL, MAVLINK_TYPE_FLOAT, 0, 44, offsetof(mavlink_position_target_global_int_t, yaw_rate) }, { "type_mask", NULL, MAVLINK_TYPE_UINT16_T, 0, 48, offsetof(mavlink_position_target_global_int_t, type_mask) }, { "coordinate_frame", NULL, MAVLINK_TYPE_UINT8_T, 0, 50, offsetof(mavlink_position_target_global_int_t, coordinate_frame) }, } }
# 74 "./lib/main/mavlink/common/./mavlink_msg_position_target_global_int.h"
static inline uint16_t mavlink_msg_position_target_global_int_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_boot_ms, uint8_t coordinate_frame, uint16_t type_mask, int32_t lat_int, int32_t lon_int, float alt, float vx, float vy, float vz, float afx, float afy, float afz, float yaw, float yaw_rate)
{
# 96 "./lib/main/mavlink/common/./mavlink_msg_position_target_global_int.h"
 mavlink_position_target_global_int_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.lat_int = lat_int;
 packet.lon_int = lon_int;
 packet.alt = alt;
 packet.vx = vx;
 packet.vy = vy;
 packet.vz = vz;
 packet.afx = afx;
 packet.afy = afy;
 packet.afz = afz;
 packet.yaw = yaw;
 packet.yaw_rate = yaw_rate;
 packet.type_mask = type_mask;
 packet.coordinate_frame = coordinate_frame;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 51);


 msg->msgid = 87;

    return mavlink_finalize_message(msg, system_id, component_id, 51, 150);



}
# 145 "./lib/main/mavlink/common/./mavlink_msg_position_target_global_int.h"
static inline uint16_t mavlink_msg_position_target_global_int_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_boot_ms,uint8_t coordinate_frame,uint16_t type_mask,int32_t lat_int,int32_t lon_int,float alt,float vx,float vy,float vz,float afx,float afy,float afz,float yaw,float yaw_rate)
{
# 168 "./lib/main/mavlink/common/./mavlink_msg_position_target_global_int.h"
 mavlink_position_target_global_int_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.lat_int = lat_int;
 packet.lon_int = lon_int;
 packet.alt = alt;
 packet.vx = vx;
 packet.vy = vy;
 packet.vz = vz;
 packet.afx = afx;
 packet.afy = afy;
 packet.afz = afz;
 packet.yaw = yaw;
 packet.yaw_rate = yaw_rate;
 packet.type_mask = type_mask;
 packet.coordinate_frame = coordinate_frame;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 51);


 msg->msgid = 87;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 51, 150);



}
# 203 "./lib/main/mavlink/common/./mavlink_msg_position_target_global_int.h"
static inline uint16_t mavlink_msg_position_target_global_int_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_position_target_global_int_t* position_target_global_int)
{
 return mavlink_msg_position_target_global_int_pack(system_id, component_id, msg, position_target_global_int->time_boot_ms, position_target_global_int->coordinate_frame, position_target_global_int->type_mask, position_target_global_int->lat_int, position_target_global_int->lon_int, position_target_global_int->alt, position_target_global_int->vx, position_target_global_int->vy, position_target_global_int->vz, position_target_global_int->afx, position_target_global_int->afy, position_target_global_int->afz, position_target_global_int->yaw, position_target_global_int->yaw_rate);
}
# 217 "./lib/main/mavlink/common/./mavlink_msg_position_target_global_int.h"
static inline uint16_t mavlink_msg_position_target_global_int_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_position_target_global_int_t* position_target_global_int)
{
 return mavlink_msg_position_target_global_int_pack_chan(system_id, component_id, chan, msg, position_target_global_int->time_boot_ms, position_target_global_int->coordinate_frame, position_target_global_int->type_mask, position_target_global_int->lat_int, position_target_global_int->lon_int, position_target_global_int->alt, position_target_global_int->vx, position_target_global_int->vy, position_target_global_int->vz, position_target_global_int->afx, position_target_global_int->afy, position_target_global_int->afz, position_target_global_int->yaw, position_target_global_int->yaw_rate);
}
# 360 "./lib/main/mavlink/common/./mavlink_msg_position_target_global_int.h"
static inline uint32_t mavlink_msg_position_target_global_int_get_time_boot_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_position_target_global_int_get_coordinate_frame(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[50];
}






static inline uint16_t mavlink_msg_position_target_global_int_get_type_mask(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 48);
}






static inline int32_t mavlink_msg_position_target_global_int_get_lat_int(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 4);
}






static inline int32_t mavlink_msg_position_target_global_int_get_lon_int(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 8);
}






static inline float mavlink_msg_position_target_global_int_get_alt(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_position_target_global_int_get_vx(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_position_target_global_int_get_vy(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_position_target_global_int_get_vz(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_position_target_global_int_get_afx(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_position_target_global_int_get_afy(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 32);
}






static inline float mavlink_msg_position_target_global_int_get_afz(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 36);
}






static inline float mavlink_msg_position_target_global_int_get_yaw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 40);
}






static inline float mavlink_msg_position_target_global_int_get_yaw_rate(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 44);
}







static inline void mavlink_msg_position_target_global_int_decode(const mavlink_message_t* msg, mavlink_position_target_global_int_t* position_target_global_int)
{
# 519 "./lib/main/mavlink/common/./mavlink_msg_position_target_global_int.h"
 memcpy(position_target_global_int, ((const char *)(&((msg)->payload64[0]))), 51);

}
# 719 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_local_position_ned_system_global_offset.h" 1


#define MAVLINK_MSG_ID_LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET 89

typedef struct __mavlink_local_position_ned_system_global_offset_t
{
 uint32_t time_boot_ms;
 float x;
 float y;
 float z;
 float roll;
 float pitch;
 float yaw;
} mavlink_local_position_ned_system_global_offset_t;

#define MAVLINK_MSG_ID_LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET_LEN 28
#define MAVLINK_MSG_ID_89_LEN 28

#define MAVLINK_MSG_ID_LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET_CRC 231
#define MAVLINK_MSG_ID_89_CRC 231



#define MAVLINK_MESSAGE_INFO_LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET { "LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET", 7, { { "time_boot_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_local_position_ned_system_global_offset_t, time_boot_ms) }, { "x", NULL, MAVLINK_TYPE_FLOAT, 0, 4, offsetof(mavlink_local_position_ned_system_global_offset_t, x) }, { "y", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_local_position_ned_system_global_offset_t, y) }, { "z", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_local_position_ned_system_global_offset_t, z) }, { "roll", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_local_position_ned_system_global_offset_t, roll) }, { "pitch", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_local_position_ned_system_global_offset_t, pitch) }, { "yaw", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_local_position_ned_system_global_offset_t, yaw) }, } }
# 53 "./lib/main/mavlink/common/./mavlink_msg_local_position_ned_system_global_offset.h"
static inline uint16_t mavlink_msg_local_position_ned_system_global_offset_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_boot_ms, float x, float y, float z, float roll, float pitch, float yaw)
{
# 68 "./lib/main/mavlink/common/./mavlink_msg_local_position_ned_system_global_offset.h"
 mavlink_local_position_ned_system_global_offset_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.x = x;
 packet.y = y;
 packet.z = z;
 packet.roll = roll;
 packet.pitch = pitch;
 packet.yaw = yaw;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 28);


 msg->msgid = 89;

    return mavlink_finalize_message(msg, system_id, component_id, 28, 231);



}
# 103 "./lib/main/mavlink/common/./mavlink_msg_local_position_ned_system_global_offset.h"
static inline uint16_t mavlink_msg_local_position_ned_system_global_offset_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_boot_ms,float x,float y,float z,float roll,float pitch,float yaw)
{
# 119 "./lib/main/mavlink/common/./mavlink_msg_local_position_ned_system_global_offset.h"
 mavlink_local_position_ned_system_global_offset_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.x = x;
 packet.y = y;
 packet.z = z;
 packet.roll = roll;
 packet.pitch = pitch;
 packet.yaw = yaw;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 28);


 msg->msgid = 89;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 28, 231);



}
# 147 "./lib/main/mavlink/common/./mavlink_msg_local_position_ned_system_global_offset.h"
static inline uint16_t mavlink_msg_local_position_ned_system_global_offset_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_local_position_ned_system_global_offset_t* local_position_ned_system_global_offset)
{
 return mavlink_msg_local_position_ned_system_global_offset_pack(system_id, component_id, msg, local_position_ned_system_global_offset->time_boot_ms, local_position_ned_system_global_offset->x, local_position_ned_system_global_offset->y, local_position_ned_system_global_offset->z, local_position_ned_system_global_offset->roll, local_position_ned_system_global_offset->pitch, local_position_ned_system_global_offset->yaw);
}
# 161 "./lib/main/mavlink/common/./mavlink_msg_local_position_ned_system_global_offset.h"
static inline uint16_t mavlink_msg_local_position_ned_system_global_offset_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_local_position_ned_system_global_offset_t* local_position_ned_system_global_offset)
{
 return mavlink_msg_local_position_ned_system_global_offset_pack_chan(system_id, component_id, chan, msg, local_position_ned_system_global_offset->time_boot_ms, local_position_ned_system_global_offset->x, local_position_ned_system_global_offset->y, local_position_ned_system_global_offset->z, local_position_ned_system_global_offset->roll, local_position_ned_system_global_offset->pitch, local_position_ned_system_global_offset->yaw);
}
# 269 "./lib/main/mavlink/common/./mavlink_msg_local_position_ned_system_global_offset.h"
static inline uint32_t mavlink_msg_local_position_ned_system_global_offset_get_time_boot_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline float mavlink_msg_local_position_ned_system_global_offset_get_x(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_local_position_ned_system_global_offset_get_y(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_local_position_ned_system_global_offset_get_z(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_local_position_ned_system_global_offset_get_roll(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_local_position_ned_system_global_offset_get_pitch(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_local_position_ned_system_global_offset_get_yaw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 24);
}







static inline void mavlink_msg_local_position_ned_system_global_offset_decode(const mavlink_message_t* msg, mavlink_local_position_ned_system_global_offset_t* local_position_ned_system_global_offset)
{
# 351 "./lib/main/mavlink/common/./mavlink_msg_local_position_ned_system_global_offset.h"
 memcpy(local_position_ned_system_global_offset, ((const char *)(&((msg)->payload64[0]))), 28);

}
# 720 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_hil_state.h" 1


#define MAVLINK_MSG_ID_HIL_STATE 90

typedef struct __mavlink_hil_state_t
{
 uint64_t time_usec;
 float roll;
 float pitch;
 float yaw;
 float rollspeed;
 float pitchspeed;
 float yawspeed;
 int32_t lat;
 int32_t lon;
 int32_t alt;
 int16_t vx;
 int16_t vy;
 int16_t vz;
 int16_t xacc;
 int16_t yacc;
 int16_t zacc;
} mavlink_hil_state_t;

#define MAVLINK_MSG_ID_HIL_STATE_LEN 56
#define MAVLINK_MSG_ID_90_LEN 56

#define MAVLINK_MSG_ID_HIL_STATE_CRC 183
#define MAVLINK_MSG_ID_90_CRC 183



#define MAVLINK_MESSAGE_INFO_HIL_STATE { "HIL_STATE", 16, { { "time_usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_hil_state_t, time_usec) }, { "roll", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_hil_state_t, roll) }, { "pitch", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_hil_state_t, pitch) }, { "yaw", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_hil_state_t, yaw) }, { "rollspeed", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_hil_state_t, rollspeed) }, { "pitchspeed", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_hil_state_t, pitchspeed) }, { "yawspeed", NULL, MAVLINK_TYPE_FLOAT, 0, 28, offsetof(mavlink_hil_state_t, yawspeed) }, { "lat", NULL, MAVLINK_TYPE_INT32_T, 0, 32, offsetof(mavlink_hil_state_t, lat) }, { "lon", NULL, MAVLINK_TYPE_INT32_T, 0, 36, offsetof(mavlink_hil_state_t, lon) }, { "alt", NULL, MAVLINK_TYPE_INT32_T, 0, 40, offsetof(mavlink_hil_state_t, alt) }, { "vx", NULL, MAVLINK_TYPE_INT16_T, 0, 44, offsetof(mavlink_hil_state_t, vx) }, { "vy", NULL, MAVLINK_TYPE_INT16_T, 0, 46, offsetof(mavlink_hil_state_t, vy) }, { "vz", NULL, MAVLINK_TYPE_INT16_T, 0, 48, offsetof(mavlink_hil_state_t, vz) }, { "xacc", NULL, MAVLINK_TYPE_INT16_T, 0, 50, offsetof(mavlink_hil_state_t, xacc) }, { "yacc", NULL, MAVLINK_TYPE_INT16_T, 0, 52, offsetof(mavlink_hil_state_t, yacc) }, { "zacc", NULL, MAVLINK_TYPE_INT16_T, 0, 54, offsetof(mavlink_hil_state_t, zacc) }, } }
# 80 "./lib/main/mavlink/common/./mavlink_msg_hil_state.h"
static inline uint16_t mavlink_msg_hil_state_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint64_t time_usec, float roll, float pitch, float yaw, float rollspeed, float pitchspeed, float yawspeed, int32_t lat, int32_t lon, int32_t alt, int16_t vx, int16_t vy, int16_t vz, int16_t xacc, int16_t yacc, int16_t zacc)
{
# 104 "./lib/main/mavlink/common/./mavlink_msg_hil_state.h"
 mavlink_hil_state_t packet;
 packet.time_usec = time_usec;
 packet.roll = roll;
 packet.pitch = pitch;
 packet.yaw = yaw;
 packet.rollspeed = rollspeed;
 packet.pitchspeed = pitchspeed;
 packet.yawspeed = yawspeed;
 packet.lat = lat;
 packet.lon = lon;
 packet.alt = alt;
 packet.vx = vx;
 packet.vy = vy;
 packet.vz = vz;
 packet.xacc = xacc;
 packet.yacc = yacc;
 packet.zacc = zacc;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 56);


 msg->msgid = 90;

    return mavlink_finalize_message(msg, system_id, component_id, 56, 183);



}
# 157 "./lib/main/mavlink/common/./mavlink_msg_hil_state.h"
static inline uint16_t mavlink_msg_hil_state_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint64_t time_usec,float roll,float pitch,float yaw,float rollspeed,float pitchspeed,float yawspeed,int32_t lat,int32_t lon,int32_t alt,int16_t vx,int16_t vy,int16_t vz,int16_t xacc,int16_t yacc,int16_t zacc)
{
# 182 "./lib/main/mavlink/common/./mavlink_msg_hil_state.h"
 mavlink_hil_state_t packet;
 packet.time_usec = time_usec;
 packet.roll = roll;
 packet.pitch = pitch;
 packet.yaw = yaw;
 packet.rollspeed = rollspeed;
 packet.pitchspeed = pitchspeed;
 packet.yawspeed = yawspeed;
 packet.lat = lat;
 packet.lon = lon;
 packet.alt = alt;
 packet.vx = vx;
 packet.vy = vy;
 packet.vz = vz;
 packet.xacc = xacc;
 packet.yacc = yacc;
 packet.zacc = zacc;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 56);


 msg->msgid = 90;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 56, 183);



}
# 219 "./lib/main/mavlink/common/./mavlink_msg_hil_state.h"
static inline uint16_t mavlink_msg_hil_state_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_hil_state_t* hil_state)
{
 return mavlink_msg_hil_state_pack(system_id, component_id, msg, hil_state->time_usec, hil_state->roll, hil_state->pitch, hil_state->yaw, hil_state->rollspeed, hil_state->pitchspeed, hil_state->yawspeed, hil_state->lat, hil_state->lon, hil_state->alt, hil_state->vx, hil_state->vy, hil_state->vz, hil_state->xacc, hil_state->yacc, hil_state->zacc);
}
# 233 "./lib/main/mavlink/common/./mavlink_msg_hil_state.h"
static inline uint16_t mavlink_msg_hil_state_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_hil_state_t* hil_state)
{
 return mavlink_msg_hil_state_pack_chan(system_id, component_id, chan, msg, hil_state->time_usec, hil_state->roll, hil_state->pitch, hil_state->yaw, hil_state->rollspeed, hil_state->pitchspeed, hil_state->yawspeed, hil_state->lat, hil_state->lon, hil_state->alt, hil_state->vx, hil_state->vy, hil_state->vz, hil_state->xacc, hil_state->yacc, hil_state->zacc);
}
# 386 "./lib/main/mavlink/common/./mavlink_msg_hil_state.h"
static inline uint64_t mavlink_msg_hil_state_get_time_usec(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}






static inline float mavlink_msg_hil_state_get_roll(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_hil_state_get_pitch(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_hil_state_get_yaw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_hil_state_get_rollspeed(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_hil_state_get_pitchspeed(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_hil_state_get_yawspeed(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 28);
}






static inline int32_t mavlink_msg_hil_state_get_lat(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 32);
}






static inline int32_t mavlink_msg_hil_state_get_lon(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 36);
}






static inline int32_t mavlink_msg_hil_state_get_alt(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 40);
}






static inline int16_t mavlink_msg_hil_state_get_vx(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 44);
}






static inline int16_t mavlink_msg_hil_state_get_vy(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 46);
}






static inline int16_t mavlink_msg_hil_state_get_vz(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 48);
}






static inline int16_t mavlink_msg_hil_state_get_xacc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 50);
}






static inline int16_t mavlink_msg_hil_state_get_yacc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 52);
}






static inline int16_t mavlink_msg_hil_state_get_zacc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 54);
}







static inline void mavlink_msg_hil_state_decode(const mavlink_message_t* msg, mavlink_hil_state_t* hil_state)
{
# 567 "./lib/main/mavlink/common/./mavlink_msg_hil_state.h"
 memcpy(hil_state, ((const char *)(&((msg)->payload64[0]))), 56);

}
# 721 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_hil_controls.h" 1


#define MAVLINK_MSG_ID_HIL_CONTROLS 91

typedef struct __mavlink_hil_controls_t
{
 uint64_t time_usec;
 float roll_ailerons;
 float pitch_elevator;
 float yaw_rudder;
 float throttle;
 float aux1;
 float aux2;
 float aux3;
 float aux4;
 uint8_t mode;
 uint8_t nav_mode;
} mavlink_hil_controls_t;

#define MAVLINK_MSG_ID_HIL_CONTROLS_LEN 42
#define MAVLINK_MSG_ID_91_LEN 42

#define MAVLINK_MSG_ID_HIL_CONTROLS_CRC 63
#define MAVLINK_MSG_ID_91_CRC 63



#define MAVLINK_MESSAGE_INFO_HIL_CONTROLS { "HIL_CONTROLS", 11, { { "time_usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_hil_controls_t, time_usec) }, { "roll_ailerons", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_hil_controls_t, roll_ailerons) }, { "pitch_elevator", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_hil_controls_t, pitch_elevator) }, { "yaw_rudder", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_hil_controls_t, yaw_rudder) }, { "throttle", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_hil_controls_t, throttle) }, { "aux1", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_hil_controls_t, aux1) }, { "aux2", NULL, MAVLINK_TYPE_FLOAT, 0, 28, offsetof(mavlink_hil_controls_t, aux2) }, { "aux3", NULL, MAVLINK_TYPE_FLOAT, 0, 32, offsetof(mavlink_hil_controls_t, aux3) }, { "aux4", NULL, MAVLINK_TYPE_FLOAT, 0, 36, offsetof(mavlink_hil_controls_t, aux4) }, { "mode", NULL, MAVLINK_TYPE_UINT8_T, 0, 40, offsetof(mavlink_hil_controls_t, mode) }, { "nav_mode", NULL, MAVLINK_TYPE_UINT8_T, 0, 41, offsetof(mavlink_hil_controls_t, nav_mode) }, } }
# 65 "./lib/main/mavlink/common/./mavlink_msg_hil_controls.h"
static inline uint16_t mavlink_msg_hil_controls_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint64_t time_usec, float roll_ailerons, float pitch_elevator, float yaw_rudder, float throttle, float aux1, float aux2, float aux3, float aux4, uint8_t mode, uint8_t nav_mode)
{
# 84 "./lib/main/mavlink/common/./mavlink_msg_hil_controls.h"
 mavlink_hil_controls_t packet;
 packet.time_usec = time_usec;
 packet.roll_ailerons = roll_ailerons;
 packet.pitch_elevator = pitch_elevator;
 packet.yaw_rudder = yaw_rudder;
 packet.throttle = throttle;
 packet.aux1 = aux1;
 packet.aux2 = aux2;
 packet.aux3 = aux3;
 packet.aux4 = aux4;
 packet.mode = mode;
 packet.nav_mode = nav_mode;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 42);


 msg->msgid = 91;

    return mavlink_finalize_message(msg, system_id, component_id, 42, 63);



}
# 127 "./lib/main/mavlink/common/./mavlink_msg_hil_controls.h"
static inline uint16_t mavlink_msg_hil_controls_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint64_t time_usec,float roll_ailerons,float pitch_elevator,float yaw_rudder,float throttle,float aux1,float aux2,float aux3,float aux4,uint8_t mode,uint8_t nav_mode)
{
# 147 "./lib/main/mavlink/common/./mavlink_msg_hil_controls.h"
 mavlink_hil_controls_t packet;
 packet.time_usec = time_usec;
 packet.roll_ailerons = roll_ailerons;
 packet.pitch_elevator = pitch_elevator;
 packet.yaw_rudder = yaw_rudder;
 packet.throttle = throttle;
 packet.aux1 = aux1;
 packet.aux2 = aux2;
 packet.aux3 = aux3;
 packet.aux4 = aux4;
 packet.mode = mode;
 packet.nav_mode = nav_mode;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 42);


 msg->msgid = 91;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 42, 63);



}
# 179 "./lib/main/mavlink/common/./mavlink_msg_hil_controls.h"
static inline uint16_t mavlink_msg_hil_controls_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_hil_controls_t* hil_controls)
{
 return mavlink_msg_hil_controls_pack(system_id, component_id, msg, hil_controls->time_usec, hil_controls->roll_ailerons, hil_controls->pitch_elevator, hil_controls->yaw_rudder, hil_controls->throttle, hil_controls->aux1, hil_controls->aux2, hil_controls->aux3, hil_controls->aux4, hil_controls->mode, hil_controls->nav_mode);
}
# 193 "./lib/main/mavlink/common/./mavlink_msg_hil_controls.h"
static inline uint16_t mavlink_msg_hil_controls_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_hil_controls_t* hil_controls)
{
 return mavlink_msg_hil_controls_pack_chan(system_id, component_id, chan, msg, hil_controls->time_usec, hil_controls->roll_ailerons, hil_controls->pitch_elevator, hil_controls->yaw_rudder, hil_controls->throttle, hil_controls->aux1, hil_controls->aux2, hil_controls->aux3, hil_controls->aux4, hil_controls->mode, hil_controls->nav_mode);
}
# 321 "./lib/main/mavlink/common/./mavlink_msg_hil_controls.h"
static inline uint64_t mavlink_msg_hil_controls_get_time_usec(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}






static inline float mavlink_msg_hil_controls_get_roll_ailerons(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_hil_controls_get_pitch_elevator(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_hil_controls_get_yaw_rudder(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_hil_controls_get_throttle(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_hil_controls_get_aux1(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_hil_controls_get_aux2(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_hil_controls_get_aux3(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 32);
}






static inline float mavlink_msg_hil_controls_get_aux4(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 36);
}






static inline uint8_t mavlink_msg_hil_controls_get_mode(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[40];
}






static inline uint8_t mavlink_msg_hil_controls_get_nav_mode(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[41];
}







static inline void mavlink_msg_hil_controls_decode(const mavlink_message_t* msg, mavlink_hil_controls_t* hil_controls)
{
# 447 "./lib/main/mavlink/common/./mavlink_msg_hil_controls.h"
 memcpy(hil_controls, ((const char *)(&((msg)->payload64[0]))), 42);

}
# 722 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_hil_rc_inputs_raw.h" 1


#define MAVLINK_MSG_ID_HIL_RC_INPUTS_RAW 92

typedef struct __mavlink_hil_rc_inputs_raw_t
{
 uint64_t time_usec;
 uint16_t chan1_raw;
 uint16_t chan2_raw;
 uint16_t chan3_raw;
 uint16_t chan4_raw;
 uint16_t chan5_raw;
 uint16_t chan6_raw;
 uint16_t chan7_raw;
 uint16_t chan8_raw;
 uint16_t chan9_raw;
 uint16_t chan10_raw;
 uint16_t chan11_raw;
 uint16_t chan12_raw;
 uint8_t rssi;
} mavlink_hil_rc_inputs_raw_t;

#define MAVLINK_MSG_ID_HIL_RC_INPUTS_RAW_LEN 33
#define MAVLINK_MSG_ID_92_LEN 33

#define MAVLINK_MSG_ID_HIL_RC_INPUTS_RAW_CRC 54
#define MAVLINK_MSG_ID_92_CRC 54



#define MAVLINK_MESSAGE_INFO_HIL_RC_INPUTS_RAW { "HIL_RC_INPUTS_RAW", 14, { { "time_usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_hil_rc_inputs_raw_t, time_usec) }, { "chan1_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 8, offsetof(mavlink_hil_rc_inputs_raw_t, chan1_raw) }, { "chan2_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 10, offsetof(mavlink_hil_rc_inputs_raw_t, chan2_raw) }, { "chan3_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 12, offsetof(mavlink_hil_rc_inputs_raw_t, chan3_raw) }, { "chan4_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 14, offsetof(mavlink_hil_rc_inputs_raw_t, chan4_raw) }, { "chan5_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 16, offsetof(mavlink_hil_rc_inputs_raw_t, chan5_raw) }, { "chan6_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 18, offsetof(mavlink_hil_rc_inputs_raw_t, chan6_raw) }, { "chan7_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 20, offsetof(mavlink_hil_rc_inputs_raw_t, chan7_raw) }, { "chan8_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 22, offsetof(mavlink_hil_rc_inputs_raw_t, chan8_raw) }, { "chan9_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 24, offsetof(mavlink_hil_rc_inputs_raw_t, chan9_raw) }, { "chan10_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 26, offsetof(mavlink_hil_rc_inputs_raw_t, chan10_raw) }, { "chan11_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 28, offsetof(mavlink_hil_rc_inputs_raw_t, chan11_raw) }, { "chan12_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 30, offsetof(mavlink_hil_rc_inputs_raw_t, chan12_raw) }, { "rssi", NULL, MAVLINK_TYPE_UINT8_T, 0, 32, offsetof(mavlink_hil_rc_inputs_raw_t, rssi) }, } }
# 74 "./lib/main/mavlink/common/./mavlink_msg_hil_rc_inputs_raw.h"
static inline uint16_t mavlink_msg_hil_rc_inputs_raw_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint64_t time_usec, uint16_t chan1_raw, uint16_t chan2_raw, uint16_t chan3_raw, uint16_t chan4_raw, uint16_t chan5_raw, uint16_t chan6_raw, uint16_t chan7_raw, uint16_t chan8_raw, uint16_t chan9_raw, uint16_t chan10_raw, uint16_t chan11_raw, uint16_t chan12_raw, uint8_t rssi)
{
# 96 "./lib/main/mavlink/common/./mavlink_msg_hil_rc_inputs_raw.h"
 mavlink_hil_rc_inputs_raw_t packet;
 packet.time_usec = time_usec;
 packet.chan1_raw = chan1_raw;
 packet.chan2_raw = chan2_raw;
 packet.chan3_raw = chan3_raw;
 packet.chan4_raw = chan4_raw;
 packet.chan5_raw = chan5_raw;
 packet.chan6_raw = chan6_raw;
 packet.chan7_raw = chan7_raw;
 packet.chan8_raw = chan8_raw;
 packet.chan9_raw = chan9_raw;
 packet.chan10_raw = chan10_raw;
 packet.chan11_raw = chan11_raw;
 packet.chan12_raw = chan12_raw;
 packet.rssi = rssi;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 33);


 msg->msgid = 92;

    return mavlink_finalize_message(msg, system_id, component_id, 33, 54);



}
# 145 "./lib/main/mavlink/common/./mavlink_msg_hil_rc_inputs_raw.h"
static inline uint16_t mavlink_msg_hil_rc_inputs_raw_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint64_t time_usec,uint16_t chan1_raw,uint16_t chan2_raw,uint16_t chan3_raw,uint16_t chan4_raw,uint16_t chan5_raw,uint16_t chan6_raw,uint16_t chan7_raw,uint16_t chan8_raw,uint16_t chan9_raw,uint16_t chan10_raw,uint16_t chan11_raw,uint16_t chan12_raw,uint8_t rssi)
{
# 168 "./lib/main/mavlink/common/./mavlink_msg_hil_rc_inputs_raw.h"
 mavlink_hil_rc_inputs_raw_t packet;
 packet.time_usec = time_usec;
 packet.chan1_raw = chan1_raw;
 packet.chan2_raw = chan2_raw;
 packet.chan3_raw = chan3_raw;
 packet.chan4_raw = chan4_raw;
 packet.chan5_raw = chan5_raw;
 packet.chan6_raw = chan6_raw;
 packet.chan7_raw = chan7_raw;
 packet.chan8_raw = chan8_raw;
 packet.chan9_raw = chan9_raw;
 packet.chan10_raw = chan10_raw;
 packet.chan11_raw = chan11_raw;
 packet.chan12_raw = chan12_raw;
 packet.rssi = rssi;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 33);


 msg->msgid = 92;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 33, 54);



}
# 203 "./lib/main/mavlink/common/./mavlink_msg_hil_rc_inputs_raw.h"
static inline uint16_t mavlink_msg_hil_rc_inputs_raw_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_hil_rc_inputs_raw_t* hil_rc_inputs_raw)
{
 return mavlink_msg_hil_rc_inputs_raw_pack(system_id, component_id, msg, hil_rc_inputs_raw->time_usec, hil_rc_inputs_raw->chan1_raw, hil_rc_inputs_raw->chan2_raw, hil_rc_inputs_raw->chan3_raw, hil_rc_inputs_raw->chan4_raw, hil_rc_inputs_raw->chan5_raw, hil_rc_inputs_raw->chan6_raw, hil_rc_inputs_raw->chan7_raw, hil_rc_inputs_raw->chan8_raw, hil_rc_inputs_raw->chan9_raw, hil_rc_inputs_raw->chan10_raw, hil_rc_inputs_raw->chan11_raw, hil_rc_inputs_raw->chan12_raw, hil_rc_inputs_raw->rssi);
}
# 217 "./lib/main/mavlink/common/./mavlink_msg_hil_rc_inputs_raw.h"
static inline uint16_t mavlink_msg_hil_rc_inputs_raw_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_hil_rc_inputs_raw_t* hil_rc_inputs_raw)
{
 return mavlink_msg_hil_rc_inputs_raw_pack_chan(system_id, component_id, chan, msg, hil_rc_inputs_raw->time_usec, hil_rc_inputs_raw->chan1_raw, hil_rc_inputs_raw->chan2_raw, hil_rc_inputs_raw->chan3_raw, hil_rc_inputs_raw->chan4_raw, hil_rc_inputs_raw->chan5_raw, hil_rc_inputs_raw->chan6_raw, hil_rc_inputs_raw->chan7_raw, hil_rc_inputs_raw->chan8_raw, hil_rc_inputs_raw->chan9_raw, hil_rc_inputs_raw->chan10_raw, hil_rc_inputs_raw->chan11_raw, hil_rc_inputs_raw->chan12_raw, hil_rc_inputs_raw->rssi);
}
# 360 "./lib/main/mavlink/common/./mavlink_msg_hil_rc_inputs_raw.h"
static inline uint64_t mavlink_msg_hil_rc_inputs_raw_get_time_usec(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint16_t mavlink_msg_hil_rc_inputs_raw_get_chan1_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 8);
}






static inline uint16_t mavlink_msg_hil_rc_inputs_raw_get_chan2_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 10);
}






static inline uint16_t mavlink_msg_hil_rc_inputs_raw_get_chan3_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 12);
}






static inline uint16_t mavlink_msg_hil_rc_inputs_raw_get_chan4_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 14);
}






static inline uint16_t mavlink_msg_hil_rc_inputs_raw_get_chan5_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 16);
}






static inline uint16_t mavlink_msg_hil_rc_inputs_raw_get_chan6_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 18);
}






static inline uint16_t mavlink_msg_hil_rc_inputs_raw_get_chan7_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 20);
}






static inline uint16_t mavlink_msg_hil_rc_inputs_raw_get_chan8_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 22);
}






static inline uint16_t mavlink_msg_hil_rc_inputs_raw_get_chan9_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 24);
}






static inline uint16_t mavlink_msg_hil_rc_inputs_raw_get_chan10_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 26);
}






static inline uint16_t mavlink_msg_hil_rc_inputs_raw_get_chan11_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 28);
}






static inline uint16_t mavlink_msg_hil_rc_inputs_raw_get_chan12_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 30);
}






static inline uint8_t mavlink_msg_hil_rc_inputs_raw_get_rssi(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[32];
}







static inline void mavlink_msg_hil_rc_inputs_raw_decode(const mavlink_message_t* msg, mavlink_hil_rc_inputs_raw_t* hil_rc_inputs_raw)
{
# 519 "./lib/main/mavlink/common/./mavlink_msg_hil_rc_inputs_raw.h"
 memcpy(hil_rc_inputs_raw, ((const char *)(&((msg)->payload64[0]))), 33);

}
# 723 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_optical_flow.h" 1


#define MAVLINK_MSG_ID_OPTICAL_FLOW 100

typedef struct __mavlink_optical_flow_t
{
 uint64_t time_usec;
 float flow_comp_m_x;
 float flow_comp_m_y;
 float ground_distance;
 int16_t flow_x;
 int16_t flow_y;
 uint8_t sensor_id;
 uint8_t quality;
} mavlink_optical_flow_t;

#define MAVLINK_MSG_ID_OPTICAL_FLOW_LEN 26
#define MAVLINK_MSG_ID_100_LEN 26

#define MAVLINK_MSG_ID_OPTICAL_FLOW_CRC 175
#define MAVLINK_MSG_ID_100_CRC 175



#define MAVLINK_MESSAGE_INFO_OPTICAL_FLOW { "OPTICAL_FLOW", 8, { { "time_usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_optical_flow_t, time_usec) }, { "flow_comp_m_x", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_optical_flow_t, flow_comp_m_x) }, { "flow_comp_m_y", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_optical_flow_t, flow_comp_m_y) }, { "ground_distance", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_optical_flow_t, ground_distance) }, { "flow_x", NULL, MAVLINK_TYPE_INT16_T, 0, 20, offsetof(mavlink_optical_flow_t, flow_x) }, { "flow_y", NULL, MAVLINK_TYPE_INT16_T, 0, 22, offsetof(mavlink_optical_flow_t, flow_y) }, { "sensor_id", NULL, MAVLINK_TYPE_UINT8_T, 0, 24, offsetof(mavlink_optical_flow_t, sensor_id) }, { "quality", NULL, MAVLINK_TYPE_UINT8_T, 0, 25, offsetof(mavlink_optical_flow_t, quality) }, } }
# 56 "./lib/main/mavlink/common/./mavlink_msg_optical_flow.h"
static inline uint16_t mavlink_msg_optical_flow_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint64_t time_usec, uint8_t sensor_id, int16_t flow_x, int16_t flow_y, float flow_comp_m_x, float flow_comp_m_y, uint8_t quality, float ground_distance)
{
# 72 "./lib/main/mavlink/common/./mavlink_msg_optical_flow.h"
 mavlink_optical_flow_t packet;
 packet.time_usec = time_usec;
 packet.flow_comp_m_x = flow_comp_m_x;
 packet.flow_comp_m_y = flow_comp_m_y;
 packet.ground_distance = ground_distance;
 packet.flow_x = flow_x;
 packet.flow_y = flow_y;
 packet.sensor_id = sensor_id;
 packet.quality = quality;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 26);


 msg->msgid = 100;

    return mavlink_finalize_message(msg, system_id, component_id, 26, 175);



}
# 109 "./lib/main/mavlink/common/./mavlink_msg_optical_flow.h"
static inline uint16_t mavlink_msg_optical_flow_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint64_t time_usec,uint8_t sensor_id,int16_t flow_x,int16_t flow_y,float flow_comp_m_x,float flow_comp_m_y,uint8_t quality,float ground_distance)
{
# 126 "./lib/main/mavlink/common/./mavlink_msg_optical_flow.h"
 mavlink_optical_flow_t packet;
 packet.time_usec = time_usec;
 packet.flow_comp_m_x = flow_comp_m_x;
 packet.flow_comp_m_y = flow_comp_m_y;
 packet.ground_distance = ground_distance;
 packet.flow_x = flow_x;
 packet.flow_y = flow_y;
 packet.sensor_id = sensor_id;
 packet.quality = quality;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 26);


 msg->msgid = 100;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 26, 175);



}
# 155 "./lib/main/mavlink/common/./mavlink_msg_optical_flow.h"
static inline uint16_t mavlink_msg_optical_flow_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_optical_flow_t* optical_flow)
{
 return mavlink_msg_optical_flow_pack(system_id, component_id, msg, optical_flow->time_usec, optical_flow->sensor_id, optical_flow->flow_x, optical_flow->flow_y, optical_flow->flow_comp_m_x, optical_flow->flow_comp_m_y, optical_flow->quality, optical_flow->ground_distance);
}
# 169 "./lib/main/mavlink/common/./mavlink_msg_optical_flow.h"
static inline uint16_t mavlink_msg_optical_flow_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_optical_flow_t* optical_flow)
{
 return mavlink_msg_optical_flow_pack_chan(system_id, component_id, chan, msg, optical_flow->time_usec, optical_flow->sensor_id, optical_flow->flow_x, optical_flow->flow_y, optical_flow->flow_comp_m_x, optical_flow->flow_comp_m_y, optical_flow->quality, optical_flow->ground_distance);
}
# 282 "./lib/main/mavlink/common/./mavlink_msg_optical_flow.h"
static inline uint64_t mavlink_msg_optical_flow_get_time_usec(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint8_t mavlink_msg_optical_flow_get_sensor_id(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[24];
}






static inline int16_t mavlink_msg_optical_flow_get_flow_x(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 20);
}






static inline int16_t mavlink_msg_optical_flow_get_flow_y(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 22);
}






static inline float mavlink_msg_optical_flow_get_flow_comp_m_x(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_optical_flow_get_flow_comp_m_y(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline uint8_t mavlink_msg_optical_flow_get_quality(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[25];
}






static inline float mavlink_msg_optical_flow_get_ground_distance(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 16);
}







static inline void mavlink_msg_optical_flow_decode(const mavlink_message_t* msg, mavlink_optical_flow_t* optical_flow)
{
# 375 "./lib/main/mavlink/common/./mavlink_msg_optical_flow.h"
 memcpy(optical_flow, ((const char *)(&((msg)->payload64[0]))), 26);

}
# 724 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_global_vision_position_estimate.h" 1


#define MAVLINK_MSG_ID_GLOBAL_VISION_POSITION_ESTIMATE 101

typedef struct __mavlink_global_vision_position_estimate_t
{
 uint64_t usec;
 float x;
 float y;
 float z;
 float roll;
 float pitch;
 float yaw;
} mavlink_global_vision_position_estimate_t;

#define MAVLINK_MSG_ID_GLOBAL_VISION_POSITION_ESTIMATE_LEN 32
#define MAVLINK_MSG_ID_101_LEN 32

#define MAVLINK_MSG_ID_GLOBAL_VISION_POSITION_ESTIMATE_CRC 102
#define MAVLINK_MSG_ID_101_CRC 102



#define MAVLINK_MESSAGE_INFO_GLOBAL_VISION_POSITION_ESTIMATE { "GLOBAL_VISION_POSITION_ESTIMATE", 7, { { "usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_global_vision_position_estimate_t, usec) }, { "x", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_global_vision_position_estimate_t, x) }, { "y", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_global_vision_position_estimate_t, y) }, { "z", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_global_vision_position_estimate_t, z) }, { "roll", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_global_vision_position_estimate_t, roll) }, { "pitch", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_global_vision_position_estimate_t, pitch) }, { "yaw", NULL, MAVLINK_TYPE_FLOAT, 0, 28, offsetof(mavlink_global_vision_position_estimate_t, yaw) }, } }
# 53 "./lib/main/mavlink/common/./mavlink_msg_global_vision_position_estimate.h"
static inline uint16_t mavlink_msg_global_vision_position_estimate_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint64_t usec, float x, float y, float z, float roll, float pitch, float yaw)
{
# 68 "./lib/main/mavlink/common/./mavlink_msg_global_vision_position_estimate.h"
 mavlink_global_vision_position_estimate_t packet;
 packet.usec = usec;
 packet.x = x;
 packet.y = y;
 packet.z = z;
 packet.roll = roll;
 packet.pitch = pitch;
 packet.yaw = yaw;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 32);


 msg->msgid = 101;

    return mavlink_finalize_message(msg, system_id, component_id, 32, 102);



}
# 103 "./lib/main/mavlink/common/./mavlink_msg_global_vision_position_estimate.h"
static inline uint16_t mavlink_msg_global_vision_position_estimate_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint64_t usec,float x,float y,float z,float roll,float pitch,float yaw)
{
# 119 "./lib/main/mavlink/common/./mavlink_msg_global_vision_position_estimate.h"
 mavlink_global_vision_position_estimate_t packet;
 packet.usec = usec;
 packet.x = x;
 packet.y = y;
 packet.z = z;
 packet.roll = roll;
 packet.pitch = pitch;
 packet.yaw = yaw;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 32);


 msg->msgid = 101;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 32, 102);



}
# 147 "./lib/main/mavlink/common/./mavlink_msg_global_vision_position_estimate.h"
static inline uint16_t mavlink_msg_global_vision_position_estimate_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_global_vision_position_estimate_t* global_vision_position_estimate)
{
 return mavlink_msg_global_vision_position_estimate_pack(system_id, component_id, msg, global_vision_position_estimate->usec, global_vision_position_estimate->x, global_vision_position_estimate->y, global_vision_position_estimate->z, global_vision_position_estimate->roll, global_vision_position_estimate->pitch, global_vision_position_estimate->yaw);
}
# 161 "./lib/main/mavlink/common/./mavlink_msg_global_vision_position_estimate.h"
static inline uint16_t mavlink_msg_global_vision_position_estimate_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_global_vision_position_estimate_t* global_vision_position_estimate)
{
 return mavlink_msg_global_vision_position_estimate_pack_chan(system_id, component_id, chan, msg, global_vision_position_estimate->usec, global_vision_position_estimate->x, global_vision_position_estimate->y, global_vision_position_estimate->z, global_vision_position_estimate->roll, global_vision_position_estimate->pitch, global_vision_position_estimate->yaw);
}
# 269 "./lib/main/mavlink/common/./mavlink_msg_global_vision_position_estimate.h"
static inline uint64_t mavlink_msg_global_vision_position_estimate_get_usec(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}






static inline float mavlink_msg_global_vision_position_estimate_get_x(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_global_vision_position_estimate_get_y(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_global_vision_position_estimate_get_z(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_global_vision_position_estimate_get_roll(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_global_vision_position_estimate_get_pitch(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_global_vision_position_estimate_get_yaw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 28);
}







static inline void mavlink_msg_global_vision_position_estimate_decode(const mavlink_message_t* msg, mavlink_global_vision_position_estimate_t* global_vision_position_estimate)
{
# 351 "./lib/main/mavlink/common/./mavlink_msg_global_vision_position_estimate.h"
 memcpy(global_vision_position_estimate, ((const char *)(&((msg)->payload64[0]))), 32);

}
# 725 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_vision_position_estimate.h" 1


#define MAVLINK_MSG_ID_VISION_POSITION_ESTIMATE 102

typedef struct __mavlink_vision_position_estimate_t
{
 uint64_t usec;
 float x;
 float y;
 float z;
 float roll;
 float pitch;
 float yaw;
} mavlink_vision_position_estimate_t;

#define MAVLINK_MSG_ID_VISION_POSITION_ESTIMATE_LEN 32
#define MAVLINK_MSG_ID_102_LEN 32

#define MAVLINK_MSG_ID_VISION_POSITION_ESTIMATE_CRC 158
#define MAVLINK_MSG_ID_102_CRC 158



#define MAVLINK_MESSAGE_INFO_VISION_POSITION_ESTIMATE { "VISION_POSITION_ESTIMATE", 7, { { "usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_vision_position_estimate_t, usec) }, { "x", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_vision_position_estimate_t, x) }, { "y", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_vision_position_estimate_t, y) }, { "z", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_vision_position_estimate_t, z) }, { "roll", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_vision_position_estimate_t, roll) }, { "pitch", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_vision_position_estimate_t, pitch) }, { "yaw", NULL, MAVLINK_TYPE_FLOAT, 0, 28, offsetof(mavlink_vision_position_estimate_t, yaw) }, } }
# 53 "./lib/main/mavlink/common/./mavlink_msg_vision_position_estimate.h"
static inline uint16_t mavlink_msg_vision_position_estimate_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint64_t usec, float x, float y, float z, float roll, float pitch, float yaw)
{
# 68 "./lib/main/mavlink/common/./mavlink_msg_vision_position_estimate.h"
 mavlink_vision_position_estimate_t packet;
 packet.usec = usec;
 packet.x = x;
 packet.y = y;
 packet.z = z;
 packet.roll = roll;
 packet.pitch = pitch;
 packet.yaw = yaw;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 32);


 msg->msgid = 102;

    return mavlink_finalize_message(msg, system_id, component_id, 32, 158);



}
# 103 "./lib/main/mavlink/common/./mavlink_msg_vision_position_estimate.h"
static inline uint16_t mavlink_msg_vision_position_estimate_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint64_t usec,float x,float y,float z,float roll,float pitch,float yaw)
{
# 119 "./lib/main/mavlink/common/./mavlink_msg_vision_position_estimate.h"
 mavlink_vision_position_estimate_t packet;
 packet.usec = usec;
 packet.x = x;
 packet.y = y;
 packet.z = z;
 packet.roll = roll;
 packet.pitch = pitch;
 packet.yaw = yaw;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 32);


 msg->msgid = 102;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 32, 158);



}
# 147 "./lib/main/mavlink/common/./mavlink_msg_vision_position_estimate.h"
static inline uint16_t mavlink_msg_vision_position_estimate_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_vision_position_estimate_t* vision_position_estimate)
{
 return mavlink_msg_vision_position_estimate_pack(system_id, component_id, msg, vision_position_estimate->usec, vision_position_estimate->x, vision_position_estimate->y, vision_position_estimate->z, vision_position_estimate->roll, vision_position_estimate->pitch, vision_position_estimate->yaw);
}
# 161 "./lib/main/mavlink/common/./mavlink_msg_vision_position_estimate.h"
static inline uint16_t mavlink_msg_vision_position_estimate_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_vision_position_estimate_t* vision_position_estimate)
{
 return mavlink_msg_vision_position_estimate_pack_chan(system_id, component_id, chan, msg, vision_position_estimate->usec, vision_position_estimate->x, vision_position_estimate->y, vision_position_estimate->z, vision_position_estimate->roll, vision_position_estimate->pitch, vision_position_estimate->yaw);
}
# 269 "./lib/main/mavlink/common/./mavlink_msg_vision_position_estimate.h"
static inline uint64_t mavlink_msg_vision_position_estimate_get_usec(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}






static inline float mavlink_msg_vision_position_estimate_get_x(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_vision_position_estimate_get_y(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_vision_position_estimate_get_z(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_vision_position_estimate_get_roll(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_vision_position_estimate_get_pitch(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_vision_position_estimate_get_yaw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 28);
}







static inline void mavlink_msg_vision_position_estimate_decode(const mavlink_message_t* msg, mavlink_vision_position_estimate_t* vision_position_estimate)
{
# 351 "./lib/main/mavlink/common/./mavlink_msg_vision_position_estimate.h"
 memcpy(vision_position_estimate, ((const char *)(&((msg)->payload64[0]))), 32);

}
# 726 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_vision_speed_estimate.h" 1


#define MAVLINK_MSG_ID_VISION_SPEED_ESTIMATE 103

typedef struct __mavlink_vision_speed_estimate_t
{
 uint64_t usec;
 float x;
 float y;
 float z;
} mavlink_vision_speed_estimate_t;

#define MAVLINK_MSG_ID_VISION_SPEED_ESTIMATE_LEN 20
#define MAVLINK_MSG_ID_103_LEN 20

#define MAVLINK_MSG_ID_VISION_SPEED_ESTIMATE_CRC 208
#define MAVLINK_MSG_ID_103_CRC 208



#define MAVLINK_MESSAGE_INFO_VISION_SPEED_ESTIMATE { "VISION_SPEED_ESTIMATE", 4, { { "usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_vision_speed_estimate_t, usec) }, { "x", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_vision_speed_estimate_t, x) }, { "y", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_vision_speed_estimate_t, y) }, { "z", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_vision_speed_estimate_t, z) }, } }
# 44 "./lib/main/mavlink/common/./mavlink_msg_vision_speed_estimate.h"
static inline uint16_t mavlink_msg_vision_speed_estimate_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint64_t usec, float x, float y, float z)
{
# 56 "./lib/main/mavlink/common/./mavlink_msg_vision_speed_estimate.h"
 mavlink_vision_speed_estimate_t packet;
 packet.usec = usec;
 packet.x = x;
 packet.y = y;
 packet.z = z;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 20);


 msg->msgid = 103;

    return mavlink_finalize_message(msg, system_id, component_id, 20, 208);



}
# 85 "./lib/main/mavlink/common/./mavlink_msg_vision_speed_estimate.h"
static inline uint16_t mavlink_msg_vision_speed_estimate_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint64_t usec,float x,float y,float z)
{
# 98 "./lib/main/mavlink/common/./mavlink_msg_vision_speed_estimate.h"
 mavlink_vision_speed_estimate_t packet;
 packet.usec = usec;
 packet.x = x;
 packet.y = y;
 packet.z = z;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 20);


 msg->msgid = 103;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 20, 208);



}
# 123 "./lib/main/mavlink/common/./mavlink_msg_vision_speed_estimate.h"
static inline uint16_t mavlink_msg_vision_speed_estimate_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_vision_speed_estimate_t* vision_speed_estimate)
{
 return mavlink_msg_vision_speed_estimate_pack(system_id, component_id, msg, vision_speed_estimate->usec, vision_speed_estimate->x, vision_speed_estimate->y, vision_speed_estimate->z);
}
# 137 "./lib/main/mavlink/common/./mavlink_msg_vision_speed_estimate.h"
static inline uint16_t mavlink_msg_vision_speed_estimate_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_vision_speed_estimate_t* vision_speed_estimate)
{
 return mavlink_msg_vision_speed_estimate_pack_chan(system_id, component_id, chan, msg, vision_speed_estimate->usec, vision_speed_estimate->x, vision_speed_estimate->y, vision_speed_estimate->z);
}
# 230 "./lib/main/mavlink/common/./mavlink_msg_vision_speed_estimate.h"
static inline uint64_t mavlink_msg_vision_speed_estimate_get_usec(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}






static inline float mavlink_msg_vision_speed_estimate_get_x(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_vision_speed_estimate_get_y(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_vision_speed_estimate_get_z(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 16);
}







static inline void mavlink_msg_vision_speed_estimate_decode(const mavlink_message_t* msg, mavlink_vision_speed_estimate_t* vision_speed_estimate)
{






 memcpy(vision_speed_estimate, ((const char *)(&((msg)->payload64[0]))), 20);

}
# 727 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_vicon_position_estimate.h" 1


#define MAVLINK_MSG_ID_VICON_POSITION_ESTIMATE 104

typedef struct __mavlink_vicon_position_estimate_t
{
 uint64_t usec;
 float x;
 float y;
 float z;
 float roll;
 float pitch;
 float yaw;
} mavlink_vicon_position_estimate_t;

#define MAVLINK_MSG_ID_VICON_POSITION_ESTIMATE_LEN 32
#define MAVLINK_MSG_ID_104_LEN 32

#define MAVLINK_MSG_ID_VICON_POSITION_ESTIMATE_CRC 56
#define MAVLINK_MSG_ID_104_CRC 56



#define MAVLINK_MESSAGE_INFO_VICON_POSITION_ESTIMATE { "VICON_POSITION_ESTIMATE", 7, { { "usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_vicon_position_estimate_t, usec) }, { "x", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_vicon_position_estimate_t, x) }, { "y", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_vicon_position_estimate_t, y) }, { "z", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_vicon_position_estimate_t, z) }, { "roll", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_vicon_position_estimate_t, roll) }, { "pitch", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_vicon_position_estimate_t, pitch) }, { "yaw", NULL, MAVLINK_TYPE_FLOAT, 0, 28, offsetof(mavlink_vicon_position_estimate_t, yaw) }, } }
# 53 "./lib/main/mavlink/common/./mavlink_msg_vicon_position_estimate.h"
static inline uint16_t mavlink_msg_vicon_position_estimate_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint64_t usec, float x, float y, float z, float roll, float pitch, float yaw)
{
# 68 "./lib/main/mavlink/common/./mavlink_msg_vicon_position_estimate.h"
 mavlink_vicon_position_estimate_t packet;
 packet.usec = usec;
 packet.x = x;
 packet.y = y;
 packet.z = z;
 packet.roll = roll;
 packet.pitch = pitch;
 packet.yaw = yaw;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 32);


 msg->msgid = 104;

    return mavlink_finalize_message(msg, system_id, component_id, 32, 56);



}
# 103 "./lib/main/mavlink/common/./mavlink_msg_vicon_position_estimate.h"
static inline uint16_t mavlink_msg_vicon_position_estimate_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint64_t usec,float x,float y,float z,float roll,float pitch,float yaw)
{
# 119 "./lib/main/mavlink/common/./mavlink_msg_vicon_position_estimate.h"
 mavlink_vicon_position_estimate_t packet;
 packet.usec = usec;
 packet.x = x;
 packet.y = y;
 packet.z = z;
 packet.roll = roll;
 packet.pitch = pitch;
 packet.yaw = yaw;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 32);


 msg->msgid = 104;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 32, 56);



}
# 147 "./lib/main/mavlink/common/./mavlink_msg_vicon_position_estimate.h"
static inline uint16_t mavlink_msg_vicon_position_estimate_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_vicon_position_estimate_t* vicon_position_estimate)
{
 return mavlink_msg_vicon_position_estimate_pack(system_id, component_id, msg, vicon_position_estimate->usec, vicon_position_estimate->x, vicon_position_estimate->y, vicon_position_estimate->z, vicon_position_estimate->roll, vicon_position_estimate->pitch, vicon_position_estimate->yaw);
}
# 161 "./lib/main/mavlink/common/./mavlink_msg_vicon_position_estimate.h"
static inline uint16_t mavlink_msg_vicon_position_estimate_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_vicon_position_estimate_t* vicon_position_estimate)
{
 return mavlink_msg_vicon_position_estimate_pack_chan(system_id, component_id, chan, msg, vicon_position_estimate->usec, vicon_position_estimate->x, vicon_position_estimate->y, vicon_position_estimate->z, vicon_position_estimate->roll, vicon_position_estimate->pitch, vicon_position_estimate->yaw);
}
# 269 "./lib/main/mavlink/common/./mavlink_msg_vicon_position_estimate.h"
static inline uint64_t mavlink_msg_vicon_position_estimate_get_usec(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}






static inline float mavlink_msg_vicon_position_estimate_get_x(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_vicon_position_estimate_get_y(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_vicon_position_estimate_get_z(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_vicon_position_estimate_get_roll(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_vicon_position_estimate_get_pitch(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_vicon_position_estimate_get_yaw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 28);
}







static inline void mavlink_msg_vicon_position_estimate_decode(const mavlink_message_t* msg, mavlink_vicon_position_estimate_t* vicon_position_estimate)
{
# 351 "./lib/main/mavlink/common/./mavlink_msg_vicon_position_estimate.h"
 memcpy(vicon_position_estimate, ((const char *)(&((msg)->payload64[0]))), 32);

}
# 728 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_highres_imu.h" 1


#define MAVLINK_MSG_ID_HIGHRES_IMU 105

typedef struct __mavlink_highres_imu_t
{
 uint64_t time_usec;
 float xacc;
 float yacc;
 float zacc;
 float xgyro;
 float ygyro;
 float zgyro;
 float xmag;
 float ymag;
 float zmag;
 float abs_pressure;
 float diff_pressure;
 float pressure_alt;
 float temperature;
 uint16_t fields_updated;
} mavlink_highres_imu_t;

#define MAVLINK_MSG_ID_HIGHRES_IMU_LEN 62
#define MAVLINK_MSG_ID_105_LEN 62

#define MAVLINK_MSG_ID_HIGHRES_IMU_CRC 93
#define MAVLINK_MSG_ID_105_CRC 93



#define MAVLINK_MESSAGE_INFO_HIGHRES_IMU { "HIGHRES_IMU", 15, { { "time_usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_highres_imu_t, time_usec) }, { "xacc", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_highres_imu_t, xacc) }, { "yacc", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_highres_imu_t, yacc) }, { "zacc", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_highres_imu_t, zacc) }, { "xgyro", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_highres_imu_t, xgyro) }, { "ygyro", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_highres_imu_t, ygyro) }, { "zgyro", NULL, MAVLINK_TYPE_FLOAT, 0, 28, offsetof(mavlink_highres_imu_t, zgyro) }, { "xmag", NULL, MAVLINK_TYPE_FLOAT, 0, 32, offsetof(mavlink_highres_imu_t, xmag) }, { "ymag", NULL, MAVLINK_TYPE_FLOAT, 0, 36, offsetof(mavlink_highres_imu_t, ymag) }, { "zmag", NULL, MAVLINK_TYPE_FLOAT, 0, 40, offsetof(mavlink_highres_imu_t, zmag) }, { "abs_pressure", NULL, MAVLINK_TYPE_FLOAT, 0, 44, offsetof(mavlink_highres_imu_t, abs_pressure) }, { "diff_pressure", NULL, MAVLINK_TYPE_FLOAT, 0, 48, offsetof(mavlink_highres_imu_t, diff_pressure) }, { "pressure_alt", NULL, MAVLINK_TYPE_FLOAT, 0, 52, offsetof(mavlink_highres_imu_t, pressure_alt) }, { "temperature", NULL, MAVLINK_TYPE_FLOAT, 0, 56, offsetof(mavlink_highres_imu_t, temperature) }, { "fields_updated", NULL, MAVLINK_TYPE_UINT16_T, 0, 60, offsetof(mavlink_highres_imu_t, fields_updated) }, } }
# 77 "./lib/main/mavlink/common/./mavlink_msg_highres_imu.h"
static inline uint16_t mavlink_msg_highres_imu_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint64_t time_usec, float xacc, float yacc, float zacc, float xgyro, float ygyro, float zgyro, float xmag, float ymag, float zmag, float abs_pressure, float diff_pressure, float pressure_alt, float temperature, uint16_t fields_updated)
{
# 100 "./lib/main/mavlink/common/./mavlink_msg_highres_imu.h"
 mavlink_highres_imu_t packet;
 packet.time_usec = time_usec;
 packet.xacc = xacc;
 packet.yacc = yacc;
 packet.zacc = zacc;
 packet.xgyro = xgyro;
 packet.ygyro = ygyro;
 packet.zgyro = zgyro;
 packet.xmag = xmag;
 packet.ymag = ymag;
 packet.zmag = zmag;
 packet.abs_pressure = abs_pressure;
 packet.diff_pressure = diff_pressure;
 packet.pressure_alt = pressure_alt;
 packet.temperature = temperature;
 packet.fields_updated = fields_updated;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 62);


 msg->msgid = 105;

    return mavlink_finalize_message(msg, system_id, component_id, 62, 93);



}
# 151 "./lib/main/mavlink/common/./mavlink_msg_highres_imu.h"
static inline uint16_t mavlink_msg_highres_imu_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint64_t time_usec,float xacc,float yacc,float zacc,float xgyro,float ygyro,float zgyro,float xmag,float ymag,float zmag,float abs_pressure,float diff_pressure,float pressure_alt,float temperature,uint16_t fields_updated)
{
# 175 "./lib/main/mavlink/common/./mavlink_msg_highres_imu.h"
 mavlink_highres_imu_t packet;
 packet.time_usec = time_usec;
 packet.xacc = xacc;
 packet.yacc = yacc;
 packet.zacc = zacc;
 packet.xgyro = xgyro;
 packet.ygyro = ygyro;
 packet.zgyro = zgyro;
 packet.xmag = xmag;
 packet.ymag = ymag;
 packet.zmag = zmag;
 packet.abs_pressure = abs_pressure;
 packet.diff_pressure = diff_pressure;
 packet.pressure_alt = pressure_alt;
 packet.temperature = temperature;
 packet.fields_updated = fields_updated;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 62);


 msg->msgid = 105;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 62, 93);



}
# 211 "./lib/main/mavlink/common/./mavlink_msg_highres_imu.h"
static inline uint16_t mavlink_msg_highres_imu_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_highres_imu_t* highres_imu)
{
 return mavlink_msg_highres_imu_pack(system_id, component_id, msg, highres_imu->time_usec, highres_imu->xacc, highres_imu->yacc, highres_imu->zacc, highres_imu->xgyro, highres_imu->ygyro, highres_imu->zgyro, highres_imu->xmag, highres_imu->ymag, highres_imu->zmag, highres_imu->abs_pressure, highres_imu->diff_pressure, highres_imu->pressure_alt, highres_imu->temperature, highres_imu->fields_updated);
}
# 225 "./lib/main/mavlink/common/./mavlink_msg_highres_imu.h"
static inline uint16_t mavlink_msg_highres_imu_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_highres_imu_t* highres_imu)
{
 return mavlink_msg_highres_imu_pack_chan(system_id, component_id, chan, msg, highres_imu->time_usec, highres_imu->xacc, highres_imu->yacc, highres_imu->zacc, highres_imu->xgyro, highres_imu->ygyro, highres_imu->zgyro, highres_imu->xmag, highres_imu->ymag, highres_imu->zmag, highres_imu->abs_pressure, highres_imu->diff_pressure, highres_imu->pressure_alt, highres_imu->temperature, highres_imu->fields_updated);
}
# 373 "./lib/main/mavlink/common/./mavlink_msg_highres_imu.h"
static inline uint64_t mavlink_msg_highres_imu_get_time_usec(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}






static inline float mavlink_msg_highres_imu_get_xacc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_highres_imu_get_yacc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_highres_imu_get_zacc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_highres_imu_get_xgyro(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_highres_imu_get_ygyro(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_highres_imu_get_zgyro(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_highres_imu_get_xmag(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 32);
}






static inline float mavlink_msg_highres_imu_get_ymag(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 36);
}






static inline float mavlink_msg_highres_imu_get_zmag(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 40);
}






static inline float mavlink_msg_highres_imu_get_abs_pressure(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 44);
}






static inline float mavlink_msg_highres_imu_get_diff_pressure(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 48);
}






static inline float mavlink_msg_highres_imu_get_pressure_alt(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 52);
}






static inline float mavlink_msg_highres_imu_get_temperature(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 56);
}






static inline uint16_t mavlink_msg_highres_imu_get_fields_updated(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 60);
}







static inline void mavlink_msg_highres_imu_decode(const mavlink_message_t* msg, mavlink_highres_imu_t* highres_imu)
{
# 543 "./lib/main/mavlink/common/./mavlink_msg_highres_imu.h"
 memcpy(highres_imu, ((const char *)(&((msg)->payload64[0]))), 62);

}
# 729 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_optical_flow_rad.h" 1


#define MAVLINK_MSG_ID_OPTICAL_FLOW_RAD 106

typedef struct __mavlink_optical_flow_rad_t
{
 uint64_t time_usec;
 uint32_t integration_time_us;
 float integrated_x;
 float integrated_y;
 float integrated_xgyro;
 float integrated_ygyro;
 float integrated_zgyro;
 uint32_t time_delta_distance_us;
 float distance;
 int16_t temperature;
 uint8_t sensor_id;
 uint8_t quality;
} mavlink_optical_flow_rad_t;

#define MAVLINK_MSG_ID_OPTICAL_FLOW_RAD_LEN 44
#define MAVLINK_MSG_ID_106_LEN 44

#define MAVLINK_MSG_ID_OPTICAL_FLOW_RAD_CRC 138
#define MAVLINK_MSG_ID_106_CRC 138



#define MAVLINK_MESSAGE_INFO_OPTICAL_FLOW_RAD { "OPTICAL_FLOW_RAD", 12, { { "time_usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_optical_flow_rad_t, time_usec) }, { "integration_time_us", NULL, MAVLINK_TYPE_UINT32_T, 0, 8, offsetof(mavlink_optical_flow_rad_t, integration_time_us) }, { "integrated_x", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_optical_flow_rad_t, integrated_x) }, { "integrated_y", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_optical_flow_rad_t, integrated_y) }, { "integrated_xgyro", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_optical_flow_rad_t, integrated_xgyro) }, { "integrated_ygyro", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_optical_flow_rad_t, integrated_ygyro) }, { "integrated_zgyro", NULL, MAVLINK_TYPE_FLOAT, 0, 28, offsetof(mavlink_optical_flow_rad_t, integrated_zgyro) }, { "time_delta_distance_us", NULL, MAVLINK_TYPE_UINT32_T, 0, 32, offsetof(mavlink_optical_flow_rad_t, time_delta_distance_us) }, { "distance", NULL, MAVLINK_TYPE_FLOAT, 0, 36, offsetof(mavlink_optical_flow_rad_t, distance) }, { "temperature", NULL, MAVLINK_TYPE_INT16_T, 0, 40, offsetof(mavlink_optical_flow_rad_t, temperature) }, { "sensor_id", NULL, MAVLINK_TYPE_UINT8_T, 0, 42, offsetof(mavlink_optical_flow_rad_t, sensor_id) }, { "quality", NULL, MAVLINK_TYPE_UINT8_T, 0, 43, offsetof(mavlink_optical_flow_rad_t, quality) }, } }
# 68 "./lib/main/mavlink/common/./mavlink_msg_optical_flow_rad.h"
static inline uint16_t mavlink_msg_optical_flow_rad_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint64_t time_usec, uint8_t sensor_id, uint32_t integration_time_us, float integrated_x, float integrated_y, float integrated_xgyro, float integrated_ygyro, float integrated_zgyro, int16_t temperature, uint8_t quality, uint32_t time_delta_distance_us, float distance)
{
# 88 "./lib/main/mavlink/common/./mavlink_msg_optical_flow_rad.h"
 mavlink_optical_flow_rad_t packet;
 packet.time_usec = time_usec;
 packet.integration_time_us = integration_time_us;
 packet.integrated_x = integrated_x;
 packet.integrated_y = integrated_y;
 packet.integrated_xgyro = integrated_xgyro;
 packet.integrated_ygyro = integrated_ygyro;
 packet.integrated_zgyro = integrated_zgyro;
 packet.time_delta_distance_us = time_delta_distance_us;
 packet.distance = distance;
 packet.temperature = temperature;
 packet.sensor_id = sensor_id;
 packet.quality = quality;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 44);


 msg->msgid = 106;

    return mavlink_finalize_message(msg, system_id, component_id, 44, 138);



}
# 133 "./lib/main/mavlink/common/./mavlink_msg_optical_flow_rad.h"
static inline uint16_t mavlink_msg_optical_flow_rad_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint64_t time_usec,uint8_t sensor_id,uint32_t integration_time_us,float integrated_x,float integrated_y,float integrated_xgyro,float integrated_ygyro,float integrated_zgyro,int16_t temperature,uint8_t quality,uint32_t time_delta_distance_us,float distance)
{
# 154 "./lib/main/mavlink/common/./mavlink_msg_optical_flow_rad.h"
 mavlink_optical_flow_rad_t packet;
 packet.time_usec = time_usec;
 packet.integration_time_us = integration_time_us;
 packet.integrated_x = integrated_x;
 packet.integrated_y = integrated_y;
 packet.integrated_xgyro = integrated_xgyro;
 packet.integrated_ygyro = integrated_ygyro;
 packet.integrated_zgyro = integrated_zgyro;
 packet.time_delta_distance_us = time_delta_distance_us;
 packet.distance = distance;
 packet.temperature = temperature;
 packet.sensor_id = sensor_id;
 packet.quality = quality;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 44);


 msg->msgid = 106;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 44, 138);



}
# 187 "./lib/main/mavlink/common/./mavlink_msg_optical_flow_rad.h"
static inline uint16_t mavlink_msg_optical_flow_rad_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_optical_flow_rad_t* optical_flow_rad)
{
 return mavlink_msg_optical_flow_rad_pack(system_id, component_id, msg, optical_flow_rad->time_usec, optical_flow_rad->sensor_id, optical_flow_rad->integration_time_us, optical_flow_rad->integrated_x, optical_flow_rad->integrated_y, optical_flow_rad->integrated_xgyro, optical_flow_rad->integrated_ygyro, optical_flow_rad->integrated_zgyro, optical_flow_rad->temperature, optical_flow_rad->quality, optical_flow_rad->time_delta_distance_us, optical_flow_rad->distance);
}
# 201 "./lib/main/mavlink/common/./mavlink_msg_optical_flow_rad.h"
static inline uint16_t mavlink_msg_optical_flow_rad_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_optical_flow_rad_t* optical_flow_rad)
{
 return mavlink_msg_optical_flow_rad_pack_chan(system_id, component_id, chan, msg, optical_flow_rad->time_usec, optical_flow_rad->sensor_id, optical_flow_rad->integration_time_us, optical_flow_rad->integrated_x, optical_flow_rad->integrated_y, optical_flow_rad->integrated_xgyro, optical_flow_rad->integrated_ygyro, optical_flow_rad->integrated_zgyro, optical_flow_rad->temperature, optical_flow_rad->quality, optical_flow_rad->time_delta_distance_us, optical_flow_rad->distance);
}
# 334 "./lib/main/mavlink/common/./mavlink_msg_optical_flow_rad.h"
static inline uint64_t mavlink_msg_optical_flow_rad_get_time_usec(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint8_t mavlink_msg_optical_flow_rad_get_sensor_id(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[42];
}






static inline uint32_t mavlink_msg_optical_flow_rad_get_integration_time_us(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 8);
}






static inline float mavlink_msg_optical_flow_rad_get_integrated_x(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_optical_flow_rad_get_integrated_y(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_optical_flow_rad_get_integrated_xgyro(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_optical_flow_rad_get_integrated_ygyro(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_optical_flow_rad_get_integrated_zgyro(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 28);
}






static inline int16_t mavlink_msg_optical_flow_rad_get_temperature(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 40);
}






static inline uint8_t mavlink_msg_optical_flow_rad_get_quality(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[43];
}






static inline uint32_t mavlink_msg_optical_flow_rad_get_time_delta_distance_us(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 32);
}






static inline float mavlink_msg_optical_flow_rad_get_distance(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 36);
}







static inline void mavlink_msg_optical_flow_rad_decode(const mavlink_message_t* msg, mavlink_optical_flow_rad_t* optical_flow_rad)
{
# 471 "./lib/main/mavlink/common/./mavlink_msg_optical_flow_rad.h"
 memcpy(optical_flow_rad, ((const char *)(&((msg)->payload64[0]))), 44);

}
# 730 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_hil_sensor.h" 1


#define MAVLINK_MSG_ID_HIL_SENSOR 107

typedef struct __mavlink_hil_sensor_t
{
 uint64_t time_usec;
 float xacc;
 float yacc;
 float zacc;
 float xgyro;
 float ygyro;
 float zgyro;
 float xmag;
 float ymag;
 float zmag;
 float abs_pressure;
 float diff_pressure;
 float pressure_alt;
 float temperature;
 uint32_t fields_updated;
} mavlink_hil_sensor_t;

#define MAVLINK_MSG_ID_HIL_SENSOR_LEN 64
#define MAVLINK_MSG_ID_107_LEN 64

#define MAVLINK_MSG_ID_HIL_SENSOR_CRC 108
#define MAVLINK_MSG_ID_107_CRC 108



#define MAVLINK_MESSAGE_INFO_HIL_SENSOR { "HIL_SENSOR", 15, { { "time_usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_hil_sensor_t, time_usec) }, { "xacc", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_hil_sensor_t, xacc) }, { "yacc", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_hil_sensor_t, yacc) }, { "zacc", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_hil_sensor_t, zacc) }, { "xgyro", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_hil_sensor_t, xgyro) }, { "ygyro", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_hil_sensor_t, ygyro) }, { "zgyro", NULL, MAVLINK_TYPE_FLOAT, 0, 28, offsetof(mavlink_hil_sensor_t, zgyro) }, { "xmag", NULL, MAVLINK_TYPE_FLOAT, 0, 32, offsetof(mavlink_hil_sensor_t, xmag) }, { "ymag", NULL, MAVLINK_TYPE_FLOAT, 0, 36, offsetof(mavlink_hil_sensor_t, ymag) }, { "zmag", NULL, MAVLINK_TYPE_FLOAT, 0, 40, offsetof(mavlink_hil_sensor_t, zmag) }, { "abs_pressure", NULL, MAVLINK_TYPE_FLOAT, 0, 44, offsetof(mavlink_hil_sensor_t, abs_pressure) }, { "diff_pressure", NULL, MAVLINK_TYPE_FLOAT, 0, 48, offsetof(mavlink_hil_sensor_t, diff_pressure) }, { "pressure_alt", NULL, MAVLINK_TYPE_FLOAT, 0, 52, offsetof(mavlink_hil_sensor_t, pressure_alt) }, { "temperature", NULL, MAVLINK_TYPE_FLOAT, 0, 56, offsetof(mavlink_hil_sensor_t, temperature) }, { "fields_updated", NULL, MAVLINK_TYPE_UINT32_T, 0, 60, offsetof(mavlink_hil_sensor_t, fields_updated) }, } }
# 77 "./lib/main/mavlink/common/./mavlink_msg_hil_sensor.h"
static inline uint16_t mavlink_msg_hil_sensor_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint64_t time_usec, float xacc, float yacc, float zacc, float xgyro, float ygyro, float zgyro, float xmag, float ymag, float zmag, float abs_pressure, float diff_pressure, float pressure_alt, float temperature, uint32_t fields_updated)
{
# 100 "./lib/main/mavlink/common/./mavlink_msg_hil_sensor.h"
 mavlink_hil_sensor_t packet;
 packet.time_usec = time_usec;
 packet.xacc = xacc;
 packet.yacc = yacc;
 packet.zacc = zacc;
 packet.xgyro = xgyro;
 packet.ygyro = ygyro;
 packet.zgyro = zgyro;
 packet.xmag = xmag;
 packet.ymag = ymag;
 packet.zmag = zmag;
 packet.abs_pressure = abs_pressure;
 packet.diff_pressure = diff_pressure;
 packet.pressure_alt = pressure_alt;
 packet.temperature = temperature;
 packet.fields_updated = fields_updated;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 64);


 msg->msgid = 107;

    return mavlink_finalize_message(msg, system_id, component_id, 64, 108);



}
# 151 "./lib/main/mavlink/common/./mavlink_msg_hil_sensor.h"
static inline uint16_t mavlink_msg_hil_sensor_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint64_t time_usec,float xacc,float yacc,float zacc,float xgyro,float ygyro,float zgyro,float xmag,float ymag,float zmag,float abs_pressure,float diff_pressure,float pressure_alt,float temperature,uint32_t fields_updated)
{
# 175 "./lib/main/mavlink/common/./mavlink_msg_hil_sensor.h"
 mavlink_hil_sensor_t packet;
 packet.time_usec = time_usec;
 packet.xacc = xacc;
 packet.yacc = yacc;
 packet.zacc = zacc;
 packet.xgyro = xgyro;
 packet.ygyro = ygyro;
 packet.zgyro = zgyro;
 packet.xmag = xmag;
 packet.ymag = ymag;
 packet.zmag = zmag;
 packet.abs_pressure = abs_pressure;
 packet.diff_pressure = diff_pressure;
 packet.pressure_alt = pressure_alt;
 packet.temperature = temperature;
 packet.fields_updated = fields_updated;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 64);


 msg->msgid = 107;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 64, 108);



}
# 211 "./lib/main/mavlink/common/./mavlink_msg_hil_sensor.h"
static inline uint16_t mavlink_msg_hil_sensor_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_hil_sensor_t* hil_sensor)
{
 return mavlink_msg_hil_sensor_pack(system_id, component_id, msg, hil_sensor->time_usec, hil_sensor->xacc, hil_sensor->yacc, hil_sensor->zacc, hil_sensor->xgyro, hil_sensor->ygyro, hil_sensor->zgyro, hil_sensor->xmag, hil_sensor->ymag, hil_sensor->zmag, hil_sensor->abs_pressure, hil_sensor->diff_pressure, hil_sensor->pressure_alt, hil_sensor->temperature, hil_sensor->fields_updated);
}
# 225 "./lib/main/mavlink/common/./mavlink_msg_hil_sensor.h"
static inline uint16_t mavlink_msg_hil_sensor_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_hil_sensor_t* hil_sensor)
{
 return mavlink_msg_hil_sensor_pack_chan(system_id, component_id, chan, msg, hil_sensor->time_usec, hil_sensor->xacc, hil_sensor->yacc, hil_sensor->zacc, hil_sensor->xgyro, hil_sensor->ygyro, hil_sensor->zgyro, hil_sensor->xmag, hil_sensor->ymag, hil_sensor->zmag, hil_sensor->abs_pressure, hil_sensor->diff_pressure, hil_sensor->pressure_alt, hil_sensor->temperature, hil_sensor->fields_updated);
}
# 373 "./lib/main/mavlink/common/./mavlink_msg_hil_sensor.h"
static inline uint64_t mavlink_msg_hil_sensor_get_time_usec(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}






static inline float mavlink_msg_hil_sensor_get_xacc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_hil_sensor_get_yacc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_hil_sensor_get_zacc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_hil_sensor_get_xgyro(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_hil_sensor_get_ygyro(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_hil_sensor_get_zgyro(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_hil_sensor_get_xmag(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 32);
}






static inline float mavlink_msg_hil_sensor_get_ymag(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 36);
}






static inline float mavlink_msg_hil_sensor_get_zmag(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 40);
}






static inline float mavlink_msg_hil_sensor_get_abs_pressure(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 44);
}






static inline float mavlink_msg_hil_sensor_get_diff_pressure(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 48);
}






static inline float mavlink_msg_hil_sensor_get_pressure_alt(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 52);
}






static inline float mavlink_msg_hil_sensor_get_temperature(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 56);
}






static inline uint32_t mavlink_msg_hil_sensor_get_fields_updated(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 60);
}







static inline void mavlink_msg_hil_sensor_decode(const mavlink_message_t* msg, mavlink_hil_sensor_t* hil_sensor)
{
# 543 "./lib/main/mavlink/common/./mavlink_msg_hil_sensor.h"
 memcpy(hil_sensor, ((const char *)(&((msg)->payload64[0]))), 64);

}
# 731 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_sim_state.h" 1


#define MAVLINK_MSG_ID_SIM_STATE 108

typedef struct __mavlink_sim_state_t
{
 float q1;
 float q2;
 float q3;
 float q4;
 float roll;
 float pitch;
 float yaw;
 float xacc;
 float yacc;
 float zacc;
 float xgyro;
 float ygyro;
 float zgyro;
 float lat;
 float lon;
 float alt;
 float std_dev_horz;
 float std_dev_vert;
 float vn;
 float ve;
 float vd;
} mavlink_sim_state_t;

#define MAVLINK_MSG_ID_SIM_STATE_LEN 84
#define MAVLINK_MSG_ID_108_LEN 84

#define MAVLINK_MSG_ID_SIM_STATE_CRC 32
#define MAVLINK_MSG_ID_108_CRC 32



#define MAVLINK_MESSAGE_INFO_SIM_STATE { "SIM_STATE", 21, { { "q1", NULL, MAVLINK_TYPE_FLOAT, 0, 0, offsetof(mavlink_sim_state_t, q1) }, { "q2", NULL, MAVLINK_TYPE_FLOAT, 0, 4, offsetof(mavlink_sim_state_t, q2) }, { "q3", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_sim_state_t, q3) }, { "q4", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_sim_state_t, q4) }, { "roll", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_sim_state_t, roll) }, { "pitch", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_sim_state_t, pitch) }, { "yaw", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_sim_state_t, yaw) }, { "xacc", NULL, MAVLINK_TYPE_FLOAT, 0, 28, offsetof(mavlink_sim_state_t, xacc) }, { "yacc", NULL, MAVLINK_TYPE_FLOAT, 0, 32, offsetof(mavlink_sim_state_t, yacc) }, { "zacc", NULL, MAVLINK_TYPE_FLOAT, 0, 36, offsetof(mavlink_sim_state_t, zacc) }, { "xgyro", NULL, MAVLINK_TYPE_FLOAT, 0, 40, offsetof(mavlink_sim_state_t, xgyro) }, { "ygyro", NULL, MAVLINK_TYPE_FLOAT, 0, 44, offsetof(mavlink_sim_state_t, ygyro) }, { "zgyro", NULL, MAVLINK_TYPE_FLOAT, 0, 48, offsetof(mavlink_sim_state_t, zgyro) }, { "lat", NULL, MAVLINK_TYPE_FLOAT, 0, 52, offsetof(mavlink_sim_state_t, lat) }, { "lon", NULL, MAVLINK_TYPE_FLOAT, 0, 56, offsetof(mavlink_sim_state_t, lon) }, { "alt", NULL, MAVLINK_TYPE_FLOAT, 0, 60, offsetof(mavlink_sim_state_t, alt) }, { "std_dev_horz", NULL, MAVLINK_TYPE_FLOAT, 0, 64, offsetof(mavlink_sim_state_t, std_dev_horz) }, { "std_dev_vert", NULL, MAVLINK_TYPE_FLOAT, 0, 68, offsetof(mavlink_sim_state_t, std_dev_vert) }, { "vn", NULL, MAVLINK_TYPE_FLOAT, 0, 72, offsetof(mavlink_sim_state_t, vn) }, { "ve", NULL, MAVLINK_TYPE_FLOAT, 0, 76, offsetof(mavlink_sim_state_t, ve) }, { "vd", NULL, MAVLINK_TYPE_FLOAT, 0, 80, offsetof(mavlink_sim_state_t, vd) }, } }
# 95 "./lib/main/mavlink/common/./mavlink_msg_sim_state.h"
static inline uint16_t mavlink_msg_sim_state_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             float q1, float q2, float q3, float q4, float roll, float pitch, float yaw, float xacc, float yacc, float zacc, float xgyro, float ygyro, float zgyro, float lat, float lon, float alt, float std_dev_horz, float std_dev_vert, float vn, float ve, float vd)
{
# 124 "./lib/main/mavlink/common/./mavlink_msg_sim_state.h"
 mavlink_sim_state_t packet;
 packet.q1 = q1;
 packet.q2 = q2;
 packet.q3 = q3;
 packet.q4 = q4;
 packet.roll = roll;
 packet.pitch = pitch;
 packet.yaw = yaw;
 packet.xacc = xacc;
 packet.yacc = yacc;
 packet.zacc = zacc;
 packet.xgyro = xgyro;
 packet.ygyro = ygyro;
 packet.zgyro = zgyro;
 packet.lat = lat;
 packet.lon = lon;
 packet.alt = alt;
 packet.std_dev_horz = std_dev_horz;
 packet.std_dev_vert = std_dev_vert;
 packet.vn = vn;
 packet.ve = ve;
 packet.vd = vd;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 84);


 msg->msgid = 108;

    return mavlink_finalize_message(msg, system_id, component_id, 84, 32);



}
# 187 "./lib/main/mavlink/common/./mavlink_msg_sim_state.h"
static inline uint16_t mavlink_msg_sim_state_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 float q1,float q2,float q3,float q4,float roll,float pitch,float yaw,float xacc,float yacc,float zacc,float xgyro,float ygyro,float zgyro,float lat,float lon,float alt,float std_dev_horz,float std_dev_vert,float vn,float ve,float vd)
{
# 217 "./lib/main/mavlink/common/./mavlink_msg_sim_state.h"
 mavlink_sim_state_t packet;
 packet.q1 = q1;
 packet.q2 = q2;
 packet.q3 = q3;
 packet.q4 = q4;
 packet.roll = roll;
 packet.pitch = pitch;
 packet.yaw = yaw;
 packet.xacc = xacc;
 packet.yacc = yacc;
 packet.zacc = zacc;
 packet.xgyro = xgyro;
 packet.ygyro = ygyro;
 packet.zgyro = zgyro;
 packet.lat = lat;
 packet.lon = lon;
 packet.alt = alt;
 packet.std_dev_horz = std_dev_horz;
 packet.std_dev_vert = std_dev_vert;
 packet.vn = vn;
 packet.ve = ve;
 packet.vd = vd;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 84);


 msg->msgid = 108;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 84, 32);



}
# 259 "./lib/main/mavlink/common/./mavlink_msg_sim_state.h"
static inline uint16_t mavlink_msg_sim_state_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_sim_state_t* sim_state)
{
 return mavlink_msg_sim_state_pack(system_id, component_id, msg, sim_state->q1, sim_state->q2, sim_state->q3, sim_state->q4, sim_state->roll, sim_state->pitch, sim_state->yaw, sim_state->xacc, sim_state->yacc, sim_state->zacc, sim_state->xgyro, sim_state->ygyro, sim_state->zgyro, sim_state->lat, sim_state->lon, sim_state->alt, sim_state->std_dev_horz, sim_state->std_dev_vert, sim_state->vn, sim_state->ve, sim_state->vd);
}
# 273 "./lib/main/mavlink/common/./mavlink_msg_sim_state.h"
static inline uint16_t mavlink_msg_sim_state_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_sim_state_t* sim_state)
{
 return mavlink_msg_sim_state_pack_chan(system_id, component_id, chan, msg, sim_state->q1, sim_state->q2, sim_state->q3, sim_state->q4, sim_state->roll, sim_state->pitch, sim_state->yaw, sim_state->xacc, sim_state->yacc, sim_state->zacc, sim_state->xgyro, sim_state->ygyro, sim_state->zgyro, sim_state->lat, sim_state->lon, sim_state->alt, sim_state->std_dev_horz, sim_state->std_dev_vert, sim_state->vn, sim_state->ve, sim_state->vd);
}
# 451 "./lib/main/mavlink/common/./mavlink_msg_sim_state.h"
static inline float mavlink_msg_sim_state_get_q1(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 0);
}






static inline float mavlink_msg_sim_state_get_q2(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_sim_state_get_q3(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_sim_state_get_q4(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_sim_state_get_roll(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_sim_state_get_pitch(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_sim_state_get_yaw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_sim_state_get_xacc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_sim_state_get_yacc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 32);
}






static inline float mavlink_msg_sim_state_get_zacc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 36);
}






static inline float mavlink_msg_sim_state_get_xgyro(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 40);
}






static inline float mavlink_msg_sim_state_get_ygyro(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 44);
}






static inline float mavlink_msg_sim_state_get_zgyro(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 48);
}






static inline float mavlink_msg_sim_state_get_lat(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 52);
}






static inline float mavlink_msg_sim_state_get_lon(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 56);
}






static inline float mavlink_msg_sim_state_get_alt(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 60);
}






static inline float mavlink_msg_sim_state_get_std_dev_horz(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 64);
}






static inline float mavlink_msg_sim_state_get_std_dev_vert(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 68);
}






static inline float mavlink_msg_sim_state_get_vn(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 72);
}






static inline float mavlink_msg_sim_state_get_ve(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 76);
}






static inline float mavlink_msg_sim_state_get_vd(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 80);
}







static inline void mavlink_msg_sim_state_decode(const mavlink_message_t* msg, mavlink_sim_state_t* sim_state)
{
# 687 "./lib/main/mavlink/common/./mavlink_msg_sim_state.h"
 memcpy(sim_state, ((const char *)(&((msg)->payload64[0]))), 84);

}
# 732 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_radio_status.h" 1


#define MAVLINK_MSG_ID_RADIO_STATUS 109

typedef struct __mavlink_radio_status_t
{
 uint16_t rxerrors;
 uint16_t fixed;
 uint8_t rssi;
 uint8_t remrssi;
 uint8_t txbuf;
 uint8_t noise;
 uint8_t remnoise;
} mavlink_radio_status_t;

#define MAVLINK_MSG_ID_RADIO_STATUS_LEN 9
#define MAVLINK_MSG_ID_109_LEN 9

#define MAVLINK_MSG_ID_RADIO_STATUS_CRC 185
#define MAVLINK_MSG_ID_109_CRC 185



#define MAVLINK_MESSAGE_INFO_RADIO_STATUS { "RADIO_STATUS", 7, { { "rxerrors", NULL, MAVLINK_TYPE_UINT16_T, 0, 0, offsetof(mavlink_radio_status_t, rxerrors) }, { "fixed", NULL, MAVLINK_TYPE_UINT16_T, 0, 2, offsetof(mavlink_radio_status_t, fixed) }, { "rssi", NULL, MAVLINK_TYPE_UINT8_T, 0, 4, offsetof(mavlink_radio_status_t, rssi) }, { "remrssi", NULL, MAVLINK_TYPE_UINT8_T, 0, 5, offsetof(mavlink_radio_status_t, remrssi) }, { "txbuf", NULL, MAVLINK_TYPE_UINT8_T, 0, 6, offsetof(mavlink_radio_status_t, txbuf) }, { "noise", NULL, MAVLINK_TYPE_UINT8_T, 0, 7, offsetof(mavlink_radio_status_t, noise) }, { "remnoise", NULL, MAVLINK_TYPE_UINT8_T, 0, 8, offsetof(mavlink_radio_status_t, remnoise) }, } }
# 53 "./lib/main/mavlink/common/./mavlink_msg_radio_status.h"
static inline uint16_t mavlink_msg_radio_status_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t rssi, uint8_t remrssi, uint8_t txbuf, uint8_t noise, uint8_t remnoise, uint16_t rxerrors, uint16_t fixed)
{
# 68 "./lib/main/mavlink/common/./mavlink_msg_radio_status.h"
 mavlink_radio_status_t packet;
 packet.rxerrors = rxerrors;
 packet.fixed = fixed;
 packet.rssi = rssi;
 packet.remrssi = remrssi;
 packet.txbuf = txbuf;
 packet.noise = noise;
 packet.remnoise = remnoise;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 9);


 msg->msgid = 109;

    return mavlink_finalize_message(msg, system_id, component_id, 9, 185);



}
# 103 "./lib/main/mavlink/common/./mavlink_msg_radio_status.h"
static inline uint16_t mavlink_msg_radio_status_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t rssi,uint8_t remrssi,uint8_t txbuf,uint8_t noise,uint8_t remnoise,uint16_t rxerrors,uint16_t fixed)
{
# 119 "./lib/main/mavlink/common/./mavlink_msg_radio_status.h"
 mavlink_radio_status_t packet;
 packet.rxerrors = rxerrors;
 packet.fixed = fixed;
 packet.rssi = rssi;
 packet.remrssi = remrssi;
 packet.txbuf = txbuf;
 packet.noise = noise;
 packet.remnoise = remnoise;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 9);


 msg->msgid = 109;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 9, 185);



}
# 147 "./lib/main/mavlink/common/./mavlink_msg_radio_status.h"
static inline uint16_t mavlink_msg_radio_status_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_radio_status_t* radio_status)
{
 return mavlink_msg_radio_status_pack(system_id, component_id, msg, radio_status->rssi, radio_status->remrssi, radio_status->txbuf, radio_status->noise, radio_status->remnoise, radio_status->rxerrors, radio_status->fixed);
}
# 161 "./lib/main/mavlink/common/./mavlink_msg_radio_status.h"
static inline uint16_t mavlink_msg_radio_status_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_radio_status_t* radio_status)
{
 return mavlink_msg_radio_status_pack_chan(system_id, component_id, chan, msg, radio_status->rssi, radio_status->remrssi, radio_status->txbuf, radio_status->noise, radio_status->remnoise, radio_status->rxerrors, radio_status->fixed);
}
# 269 "./lib/main/mavlink/common/./mavlink_msg_radio_status.h"
static inline uint8_t mavlink_msg_radio_status_get_rssi(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[4];
}






static inline uint8_t mavlink_msg_radio_status_get_remrssi(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[5];
}






static inline uint8_t mavlink_msg_radio_status_get_txbuf(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[6];
}






static inline uint8_t mavlink_msg_radio_status_get_noise(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[7];
}






static inline uint8_t mavlink_msg_radio_status_get_remnoise(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[8];
}






static inline uint16_t mavlink_msg_radio_status_get_rxerrors(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 0);
}






static inline uint16_t mavlink_msg_radio_status_get_fixed(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 2);
}







static inline void mavlink_msg_radio_status_decode(const mavlink_message_t* msg, mavlink_radio_status_t* radio_status)
{
# 351 "./lib/main/mavlink/common/./mavlink_msg_radio_status.h"
 memcpy(radio_status, ((const char *)(&((msg)->payload64[0]))), 9);

}
# 733 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_file_transfer_protocol.h" 1


#define MAVLINK_MSG_ID_FILE_TRANSFER_PROTOCOL 110

typedef struct __mavlink_file_transfer_protocol_t
{
 uint8_t target_network;
 uint8_t target_system;
 uint8_t target_component;
 uint8_t payload[251];
} mavlink_file_transfer_protocol_t;

#define MAVLINK_MSG_ID_FILE_TRANSFER_PROTOCOL_LEN 254
#define MAVLINK_MSG_ID_110_LEN 254

#define MAVLINK_MSG_ID_FILE_TRANSFER_PROTOCOL_CRC 84
#define MAVLINK_MSG_ID_110_CRC 84

#define MAVLINK_MSG_FILE_TRANSFER_PROTOCOL_FIELD_PAYLOAD_LEN 251

#define MAVLINK_MESSAGE_INFO_FILE_TRANSFER_PROTOCOL { "FILE_TRANSFER_PROTOCOL", 4, { { "target_network", NULL, MAVLINK_TYPE_UINT8_T, 0, 0, offsetof(mavlink_file_transfer_protocol_t, target_network) }, { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 1, offsetof(mavlink_file_transfer_protocol_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 2, offsetof(mavlink_file_transfer_protocol_t, target_component) }, { "payload", NULL, MAVLINK_TYPE_UINT8_T, 251, 3, offsetof(mavlink_file_transfer_protocol_t, payload) }, } }
# 44 "./lib/main/mavlink/common/./mavlink_msg_file_transfer_protocol.h"
static inline uint16_t mavlink_msg_file_transfer_protocol_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_network, uint8_t target_system, uint8_t target_component, const uint8_t *payload)
{
# 55 "./lib/main/mavlink/common/./mavlink_msg_file_transfer_protocol.h"
 mavlink_file_transfer_protocol_t packet;
 packet.target_network = target_network;
 packet.target_system = target_system;
 packet.target_component = target_component;
 mav_array_memcpy(packet.payload, payload, sizeof(uint8_t)*251);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 254);


 msg->msgid = 110;

    return mavlink_finalize_message(msg, system_id, component_id, 254, 84);



}
# 83 "./lib/main/mavlink/common/./mavlink_msg_file_transfer_protocol.h"
static inline uint16_t mavlink_msg_file_transfer_protocol_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_network,uint8_t target_system,uint8_t target_component,const uint8_t *payload)
{
# 95 "./lib/main/mavlink/common/./mavlink_msg_file_transfer_protocol.h"
 mavlink_file_transfer_protocol_t packet;
 packet.target_network = target_network;
 packet.target_system = target_system;
 packet.target_component = target_component;
 mav_array_memcpy(packet.payload, payload, sizeof(uint8_t)*251);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 254);


 msg->msgid = 110;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 254, 84);



}
# 119 "./lib/main/mavlink/common/./mavlink_msg_file_transfer_protocol.h"
static inline uint16_t mavlink_msg_file_transfer_protocol_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_file_transfer_protocol_t* file_transfer_protocol)
{
 return mavlink_msg_file_transfer_protocol_pack(system_id, component_id, msg, file_transfer_protocol->target_network, file_transfer_protocol->target_system, file_transfer_protocol->target_component, file_transfer_protocol->payload);
}
# 133 "./lib/main/mavlink/common/./mavlink_msg_file_transfer_protocol.h"
static inline uint16_t mavlink_msg_file_transfer_protocol_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_file_transfer_protocol_t* file_transfer_protocol)
{
 return mavlink_msg_file_transfer_protocol_pack_chan(system_id, component_id, chan, msg, file_transfer_protocol->target_network, file_transfer_protocol->target_system, file_transfer_protocol->target_component, file_transfer_protocol->payload);
}
# 222 "./lib/main/mavlink/common/./mavlink_msg_file_transfer_protocol.h"
static inline uint8_t mavlink_msg_file_transfer_protocol_get_target_network(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_file_transfer_protocol_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}






static inline uint8_t mavlink_msg_file_transfer_protocol_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}






static inline uint16_t mavlink_msg_file_transfer_protocol_get_payload(const mavlink_message_t* msg, uint8_t *payload)
{
 return _MAV_RETURN_uint8_t_array(msg, payload, 251, 3);
}







static inline void mavlink_msg_file_transfer_protocol_decode(const mavlink_message_t* msg, mavlink_file_transfer_protocol_t* file_transfer_protocol)
{






 memcpy(file_transfer_protocol, ((const char *)(&((msg)->payload64[0]))), 254);

}
# 734 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_timesync.h" 1


#define MAVLINK_MSG_ID_TIMESYNC 111

typedef struct __mavlink_timesync_t
{
 int64_t tc1;
 int64_t ts1;
} mavlink_timesync_t;

#define MAVLINK_MSG_ID_TIMESYNC_LEN 16
#define MAVLINK_MSG_ID_111_LEN 16

#define MAVLINK_MSG_ID_TIMESYNC_CRC 34
#define MAVLINK_MSG_ID_111_CRC 34



#define MAVLINK_MESSAGE_INFO_TIMESYNC { "TIMESYNC", 2, { { "tc1", NULL, MAVLINK_TYPE_INT64_T, 0, 0, offsetof(mavlink_timesync_t, tc1) }, { "ts1", NULL, MAVLINK_TYPE_INT64_T, 0, 8, offsetof(mavlink_timesync_t, ts1) }, } }
# 38 "./lib/main/mavlink/common/./mavlink_msg_timesync.h"
static inline uint16_t mavlink_msg_timesync_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             int64_t tc1, int64_t ts1)
{







 mavlink_timesync_t packet;
 packet.tc1 = tc1;
 packet.ts1 = ts1;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 16);


 msg->msgid = 111;

    return mavlink_finalize_message(msg, system_id, component_id, 16, 34);



}
# 73 "./lib/main/mavlink/common/./mavlink_msg_timesync.h"
static inline uint16_t mavlink_msg_timesync_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 int64_t tc1,int64_t ts1)
{







 mavlink_timesync_t packet;
 packet.tc1 = tc1;
 packet.ts1 = ts1;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 16);


 msg->msgid = 111;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 16, 34);



}
# 107 "./lib/main/mavlink/common/./mavlink_msg_timesync.h"
static inline uint16_t mavlink_msg_timesync_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_timesync_t* timesync)
{
 return mavlink_msg_timesync_pack(system_id, component_id, msg, timesync->tc1, timesync->ts1);
}
# 121 "./lib/main/mavlink/common/./mavlink_msg_timesync.h"
static inline uint16_t mavlink_msg_timesync_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_timesync_t* timesync)
{
 return mavlink_msg_timesync_pack_chan(system_id, component_id, chan, msg, timesync->tc1, timesync->ts1);
}
# 204 "./lib/main/mavlink/common/./mavlink_msg_timesync.h"
static inline int64_t mavlink_msg_timesync_get_tc1(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int64_t(msg, 0);
}






static inline int64_t mavlink_msg_timesync_get_ts1(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int64_t(msg, 8);
}







static inline void mavlink_msg_timesync_decode(const mavlink_message_t* msg, mavlink_timesync_t* timesync)
{




 memcpy(timesync, ((const char *)(&((msg)->payload64[0]))), 16);

}
# 735 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_camera_trigger.h" 1


#define MAVLINK_MSG_ID_CAMERA_TRIGGER 112

typedef struct __mavlink_camera_trigger_t
{
 uint64_t time_usec;
 uint32_t seq;
} mavlink_camera_trigger_t;

#define MAVLINK_MSG_ID_CAMERA_TRIGGER_LEN 12
#define MAVLINK_MSG_ID_112_LEN 12

#define MAVLINK_MSG_ID_CAMERA_TRIGGER_CRC 174
#define MAVLINK_MSG_ID_112_CRC 174



#define MAVLINK_MESSAGE_INFO_CAMERA_TRIGGER { "CAMERA_TRIGGER", 2, { { "time_usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_camera_trigger_t, time_usec) }, { "seq", NULL, MAVLINK_TYPE_UINT32_T, 0, 8, offsetof(mavlink_camera_trigger_t, seq) }, } }
# 38 "./lib/main/mavlink/common/./mavlink_msg_camera_trigger.h"
static inline uint16_t mavlink_msg_camera_trigger_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint64_t time_usec, uint32_t seq)
{







 mavlink_camera_trigger_t packet;
 packet.time_usec = time_usec;
 packet.seq = seq;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 12);


 msg->msgid = 112;

    return mavlink_finalize_message(msg, system_id, component_id, 12, 174);



}
# 73 "./lib/main/mavlink/common/./mavlink_msg_camera_trigger.h"
static inline uint16_t mavlink_msg_camera_trigger_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint64_t time_usec,uint32_t seq)
{







 mavlink_camera_trigger_t packet;
 packet.time_usec = time_usec;
 packet.seq = seq;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 12);


 msg->msgid = 112;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 12, 174);



}
# 107 "./lib/main/mavlink/common/./mavlink_msg_camera_trigger.h"
static inline uint16_t mavlink_msg_camera_trigger_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_camera_trigger_t* camera_trigger)
{
 return mavlink_msg_camera_trigger_pack(system_id, component_id, msg, camera_trigger->time_usec, camera_trigger->seq);
}
# 121 "./lib/main/mavlink/common/./mavlink_msg_camera_trigger.h"
static inline uint16_t mavlink_msg_camera_trigger_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_camera_trigger_t* camera_trigger)
{
 return mavlink_msg_camera_trigger_pack_chan(system_id, component_id, chan, msg, camera_trigger->time_usec, camera_trigger->seq);
}
# 204 "./lib/main/mavlink/common/./mavlink_msg_camera_trigger.h"
static inline uint64_t mavlink_msg_camera_trigger_get_time_usec(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint32_t mavlink_msg_camera_trigger_get_seq(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 8);
}







static inline void mavlink_msg_camera_trigger_decode(const mavlink_message_t* msg, mavlink_camera_trigger_t* camera_trigger)
{




 memcpy(camera_trigger, ((const char *)(&((msg)->payload64[0]))), 12);

}
# 736 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_hil_gps.h" 1


#define MAVLINK_MSG_ID_HIL_GPS 113

typedef struct __mavlink_hil_gps_t
{
 uint64_t time_usec;
 int32_t lat;
 int32_t lon;
 int32_t alt;
 uint16_t eph;
 uint16_t epv;
 uint16_t vel;
 int16_t vn;
 int16_t ve;
 int16_t vd;
 uint16_t cog;
 uint8_t fix_type;
 uint8_t satellites_visible;
} mavlink_hil_gps_t;

#define MAVLINK_MSG_ID_HIL_GPS_LEN 36
#define MAVLINK_MSG_ID_113_LEN 36

#define MAVLINK_MSG_ID_HIL_GPS_CRC 124
#define MAVLINK_MSG_ID_113_CRC 124



#define MAVLINK_MESSAGE_INFO_HIL_GPS { "HIL_GPS", 13, { { "time_usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_hil_gps_t, time_usec) }, { "lat", NULL, MAVLINK_TYPE_INT32_T, 0, 8, offsetof(mavlink_hil_gps_t, lat) }, { "lon", NULL, MAVLINK_TYPE_INT32_T, 0, 12, offsetof(mavlink_hil_gps_t, lon) }, { "alt", NULL, MAVLINK_TYPE_INT32_T, 0, 16, offsetof(mavlink_hil_gps_t, alt) }, { "eph", NULL, MAVLINK_TYPE_UINT16_T, 0, 20, offsetof(mavlink_hil_gps_t, eph) }, { "epv", NULL, MAVLINK_TYPE_UINT16_T, 0, 22, offsetof(mavlink_hil_gps_t, epv) }, { "vel", NULL, MAVLINK_TYPE_UINT16_T, 0, 24, offsetof(mavlink_hil_gps_t, vel) }, { "vn", NULL, MAVLINK_TYPE_INT16_T, 0, 26, offsetof(mavlink_hil_gps_t, vn) }, { "ve", NULL, MAVLINK_TYPE_INT16_T, 0, 28, offsetof(mavlink_hil_gps_t, ve) }, { "vd", NULL, MAVLINK_TYPE_INT16_T, 0, 30, offsetof(mavlink_hil_gps_t, vd) }, { "cog", NULL, MAVLINK_TYPE_UINT16_T, 0, 32, offsetof(mavlink_hil_gps_t, cog) }, { "fix_type", NULL, MAVLINK_TYPE_UINT8_T, 0, 34, offsetof(mavlink_hil_gps_t, fix_type) }, { "satellites_visible", NULL, MAVLINK_TYPE_UINT8_T, 0, 35, offsetof(mavlink_hil_gps_t, satellites_visible) }, } }
# 71 "./lib/main/mavlink/common/./mavlink_msg_hil_gps.h"
static inline uint16_t mavlink_msg_hil_gps_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint64_t time_usec, uint8_t fix_type, int32_t lat, int32_t lon, int32_t alt, uint16_t eph, uint16_t epv, uint16_t vel, int16_t vn, int16_t ve, int16_t vd, uint16_t cog, uint8_t satellites_visible)
{
# 92 "./lib/main/mavlink/common/./mavlink_msg_hil_gps.h"
 mavlink_hil_gps_t packet;
 packet.time_usec = time_usec;
 packet.lat = lat;
 packet.lon = lon;
 packet.alt = alt;
 packet.eph = eph;
 packet.epv = epv;
 packet.vel = vel;
 packet.vn = vn;
 packet.ve = ve;
 packet.vd = vd;
 packet.cog = cog;
 packet.fix_type = fix_type;
 packet.satellites_visible = satellites_visible;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 36);


 msg->msgid = 113;

    return mavlink_finalize_message(msg, system_id, component_id, 36, 124);



}
# 139 "./lib/main/mavlink/common/./mavlink_msg_hil_gps.h"
static inline uint16_t mavlink_msg_hil_gps_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint64_t time_usec,uint8_t fix_type,int32_t lat,int32_t lon,int32_t alt,uint16_t eph,uint16_t epv,uint16_t vel,int16_t vn,int16_t ve,int16_t vd,uint16_t cog,uint8_t satellites_visible)
{
# 161 "./lib/main/mavlink/common/./mavlink_msg_hil_gps.h"
 mavlink_hil_gps_t packet;
 packet.time_usec = time_usec;
 packet.lat = lat;
 packet.lon = lon;
 packet.alt = alt;
 packet.eph = eph;
 packet.epv = epv;
 packet.vel = vel;
 packet.vn = vn;
 packet.ve = ve;
 packet.vd = vd;
 packet.cog = cog;
 packet.fix_type = fix_type;
 packet.satellites_visible = satellites_visible;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 36);


 msg->msgid = 113;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 36, 124);



}
# 195 "./lib/main/mavlink/common/./mavlink_msg_hil_gps.h"
static inline uint16_t mavlink_msg_hil_gps_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_hil_gps_t* hil_gps)
{
 return mavlink_msg_hil_gps_pack(system_id, component_id, msg, hil_gps->time_usec, hil_gps->fix_type, hil_gps->lat, hil_gps->lon, hil_gps->alt, hil_gps->eph, hil_gps->epv, hil_gps->vel, hil_gps->vn, hil_gps->ve, hil_gps->vd, hil_gps->cog, hil_gps->satellites_visible);
}
# 209 "./lib/main/mavlink/common/./mavlink_msg_hil_gps.h"
static inline uint16_t mavlink_msg_hil_gps_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_hil_gps_t* hil_gps)
{
 return mavlink_msg_hil_gps_pack_chan(system_id, component_id, chan, msg, hil_gps->time_usec, hil_gps->fix_type, hil_gps->lat, hil_gps->lon, hil_gps->alt, hil_gps->eph, hil_gps->epv, hil_gps->vel, hil_gps->vn, hil_gps->ve, hil_gps->vd, hil_gps->cog, hil_gps->satellites_visible);
}
# 347 "./lib/main/mavlink/common/./mavlink_msg_hil_gps.h"
static inline uint64_t mavlink_msg_hil_gps_get_time_usec(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint8_t mavlink_msg_hil_gps_get_fix_type(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[34];
}






static inline int32_t mavlink_msg_hil_gps_get_lat(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 8);
}






static inline int32_t mavlink_msg_hil_gps_get_lon(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 12);
}






static inline int32_t mavlink_msg_hil_gps_get_alt(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 16);
}






static inline uint16_t mavlink_msg_hil_gps_get_eph(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 20);
}






static inline uint16_t mavlink_msg_hil_gps_get_epv(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 22);
}






static inline uint16_t mavlink_msg_hil_gps_get_vel(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 24);
}






static inline int16_t mavlink_msg_hil_gps_get_vn(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 26);
}






static inline int16_t mavlink_msg_hil_gps_get_ve(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 28);
}






static inline int16_t mavlink_msg_hil_gps_get_vd(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 30);
}






static inline uint16_t mavlink_msg_hil_gps_get_cog(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 32);
}






static inline uint8_t mavlink_msg_hil_gps_get_satellites_visible(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[35];
}







static inline void mavlink_msg_hil_gps_decode(const mavlink_message_t* msg, mavlink_hil_gps_t* hil_gps)
{
# 495 "./lib/main/mavlink/common/./mavlink_msg_hil_gps.h"
 memcpy(hil_gps, ((const char *)(&((msg)->payload64[0]))), 36);

}
# 737 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_hil_optical_flow.h" 1


#define MAVLINK_MSG_ID_HIL_OPTICAL_FLOW 114

typedef struct __mavlink_hil_optical_flow_t
{
 uint64_t time_usec;
 uint32_t integration_time_us;
 float integrated_x;
 float integrated_y;
 float integrated_xgyro;
 float integrated_ygyro;
 float integrated_zgyro;
 uint32_t time_delta_distance_us;
 float distance;
 int16_t temperature;
 uint8_t sensor_id;
 uint8_t quality;
} mavlink_hil_optical_flow_t;

#define MAVLINK_MSG_ID_HIL_OPTICAL_FLOW_LEN 44
#define MAVLINK_MSG_ID_114_LEN 44

#define MAVLINK_MSG_ID_HIL_OPTICAL_FLOW_CRC 237
#define MAVLINK_MSG_ID_114_CRC 237



#define MAVLINK_MESSAGE_INFO_HIL_OPTICAL_FLOW { "HIL_OPTICAL_FLOW", 12, { { "time_usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_hil_optical_flow_t, time_usec) }, { "integration_time_us", NULL, MAVLINK_TYPE_UINT32_T, 0, 8, offsetof(mavlink_hil_optical_flow_t, integration_time_us) }, { "integrated_x", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_hil_optical_flow_t, integrated_x) }, { "integrated_y", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_hil_optical_flow_t, integrated_y) }, { "integrated_xgyro", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_hil_optical_flow_t, integrated_xgyro) }, { "integrated_ygyro", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_hil_optical_flow_t, integrated_ygyro) }, { "integrated_zgyro", NULL, MAVLINK_TYPE_FLOAT, 0, 28, offsetof(mavlink_hil_optical_flow_t, integrated_zgyro) }, { "time_delta_distance_us", NULL, MAVLINK_TYPE_UINT32_T, 0, 32, offsetof(mavlink_hil_optical_flow_t, time_delta_distance_us) }, { "distance", NULL, MAVLINK_TYPE_FLOAT, 0, 36, offsetof(mavlink_hil_optical_flow_t, distance) }, { "temperature", NULL, MAVLINK_TYPE_INT16_T, 0, 40, offsetof(mavlink_hil_optical_flow_t, temperature) }, { "sensor_id", NULL, MAVLINK_TYPE_UINT8_T, 0, 42, offsetof(mavlink_hil_optical_flow_t, sensor_id) }, { "quality", NULL, MAVLINK_TYPE_UINT8_T, 0, 43, offsetof(mavlink_hil_optical_flow_t, quality) }, } }
# 68 "./lib/main/mavlink/common/./mavlink_msg_hil_optical_flow.h"
static inline uint16_t mavlink_msg_hil_optical_flow_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint64_t time_usec, uint8_t sensor_id, uint32_t integration_time_us, float integrated_x, float integrated_y, float integrated_xgyro, float integrated_ygyro, float integrated_zgyro, int16_t temperature, uint8_t quality, uint32_t time_delta_distance_us, float distance)
{
# 88 "./lib/main/mavlink/common/./mavlink_msg_hil_optical_flow.h"
 mavlink_hil_optical_flow_t packet;
 packet.time_usec = time_usec;
 packet.integration_time_us = integration_time_us;
 packet.integrated_x = integrated_x;
 packet.integrated_y = integrated_y;
 packet.integrated_xgyro = integrated_xgyro;
 packet.integrated_ygyro = integrated_ygyro;
 packet.integrated_zgyro = integrated_zgyro;
 packet.time_delta_distance_us = time_delta_distance_us;
 packet.distance = distance;
 packet.temperature = temperature;
 packet.sensor_id = sensor_id;
 packet.quality = quality;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 44);


 msg->msgid = 114;

    return mavlink_finalize_message(msg, system_id, component_id, 44, 237);



}
# 133 "./lib/main/mavlink/common/./mavlink_msg_hil_optical_flow.h"
static inline uint16_t mavlink_msg_hil_optical_flow_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint64_t time_usec,uint8_t sensor_id,uint32_t integration_time_us,float integrated_x,float integrated_y,float integrated_xgyro,float integrated_ygyro,float integrated_zgyro,int16_t temperature,uint8_t quality,uint32_t time_delta_distance_us,float distance)
{
# 154 "./lib/main/mavlink/common/./mavlink_msg_hil_optical_flow.h"
 mavlink_hil_optical_flow_t packet;
 packet.time_usec = time_usec;
 packet.integration_time_us = integration_time_us;
 packet.integrated_x = integrated_x;
 packet.integrated_y = integrated_y;
 packet.integrated_xgyro = integrated_xgyro;
 packet.integrated_ygyro = integrated_ygyro;
 packet.integrated_zgyro = integrated_zgyro;
 packet.time_delta_distance_us = time_delta_distance_us;
 packet.distance = distance;
 packet.temperature = temperature;
 packet.sensor_id = sensor_id;
 packet.quality = quality;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 44);


 msg->msgid = 114;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 44, 237);



}
# 187 "./lib/main/mavlink/common/./mavlink_msg_hil_optical_flow.h"
static inline uint16_t mavlink_msg_hil_optical_flow_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_hil_optical_flow_t* hil_optical_flow)
{
 return mavlink_msg_hil_optical_flow_pack(system_id, component_id, msg, hil_optical_flow->time_usec, hil_optical_flow->sensor_id, hil_optical_flow->integration_time_us, hil_optical_flow->integrated_x, hil_optical_flow->integrated_y, hil_optical_flow->integrated_xgyro, hil_optical_flow->integrated_ygyro, hil_optical_flow->integrated_zgyro, hil_optical_flow->temperature, hil_optical_flow->quality, hil_optical_flow->time_delta_distance_us, hil_optical_flow->distance);
}
# 201 "./lib/main/mavlink/common/./mavlink_msg_hil_optical_flow.h"
static inline uint16_t mavlink_msg_hil_optical_flow_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_hil_optical_flow_t* hil_optical_flow)
{
 return mavlink_msg_hil_optical_flow_pack_chan(system_id, component_id, chan, msg, hil_optical_flow->time_usec, hil_optical_flow->sensor_id, hil_optical_flow->integration_time_us, hil_optical_flow->integrated_x, hil_optical_flow->integrated_y, hil_optical_flow->integrated_xgyro, hil_optical_flow->integrated_ygyro, hil_optical_flow->integrated_zgyro, hil_optical_flow->temperature, hil_optical_flow->quality, hil_optical_flow->time_delta_distance_us, hil_optical_flow->distance);
}
# 334 "./lib/main/mavlink/common/./mavlink_msg_hil_optical_flow.h"
static inline uint64_t mavlink_msg_hil_optical_flow_get_time_usec(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint8_t mavlink_msg_hil_optical_flow_get_sensor_id(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[42];
}






static inline uint32_t mavlink_msg_hil_optical_flow_get_integration_time_us(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 8);
}






static inline float mavlink_msg_hil_optical_flow_get_integrated_x(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_hil_optical_flow_get_integrated_y(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_hil_optical_flow_get_integrated_xgyro(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_hil_optical_flow_get_integrated_ygyro(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_hil_optical_flow_get_integrated_zgyro(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 28);
}






static inline int16_t mavlink_msg_hil_optical_flow_get_temperature(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 40);
}






static inline uint8_t mavlink_msg_hil_optical_flow_get_quality(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[43];
}






static inline uint32_t mavlink_msg_hil_optical_flow_get_time_delta_distance_us(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 32);
}






static inline float mavlink_msg_hil_optical_flow_get_distance(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 36);
}







static inline void mavlink_msg_hil_optical_flow_decode(const mavlink_message_t* msg, mavlink_hil_optical_flow_t* hil_optical_flow)
{
# 471 "./lib/main/mavlink/common/./mavlink_msg_hil_optical_flow.h"
 memcpy(hil_optical_flow, ((const char *)(&((msg)->payload64[0]))), 44);

}
# 738 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_hil_state_quaternion.h" 1


#define MAVLINK_MSG_ID_HIL_STATE_QUATERNION 115

typedef struct __mavlink_hil_state_quaternion_t
{
 uint64_t time_usec;
 float attitude_quaternion[4];
 float rollspeed;
 float pitchspeed;
 float yawspeed;
 int32_t lat;
 int32_t lon;
 int32_t alt;
 int16_t vx;
 int16_t vy;
 int16_t vz;
 uint16_t ind_airspeed;
 uint16_t true_airspeed;
 int16_t xacc;
 int16_t yacc;
 int16_t zacc;
} mavlink_hil_state_quaternion_t;

#define MAVLINK_MSG_ID_HIL_STATE_QUATERNION_LEN 64
#define MAVLINK_MSG_ID_115_LEN 64

#define MAVLINK_MSG_ID_HIL_STATE_QUATERNION_CRC 4
#define MAVLINK_MSG_ID_115_CRC 4

#define MAVLINK_MSG_HIL_STATE_QUATERNION_FIELD_ATTITUDE_QUATERNION_LEN 4

#define MAVLINK_MESSAGE_INFO_HIL_STATE_QUATERNION { "HIL_STATE_QUATERNION", 16, { { "time_usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_hil_state_quaternion_t, time_usec) }, { "attitude_quaternion", NULL, MAVLINK_TYPE_FLOAT, 4, 8, offsetof(mavlink_hil_state_quaternion_t, attitude_quaternion) }, { "rollspeed", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_hil_state_quaternion_t, rollspeed) }, { "pitchspeed", NULL, MAVLINK_TYPE_FLOAT, 0, 28, offsetof(mavlink_hil_state_quaternion_t, pitchspeed) }, { "yawspeed", NULL, MAVLINK_TYPE_FLOAT, 0, 32, offsetof(mavlink_hil_state_quaternion_t, yawspeed) }, { "lat", NULL, MAVLINK_TYPE_INT32_T, 0, 36, offsetof(mavlink_hil_state_quaternion_t, lat) }, { "lon", NULL, MAVLINK_TYPE_INT32_T, 0, 40, offsetof(mavlink_hil_state_quaternion_t, lon) }, { "alt", NULL, MAVLINK_TYPE_INT32_T, 0, 44, offsetof(mavlink_hil_state_quaternion_t, alt) }, { "vx", NULL, MAVLINK_TYPE_INT16_T, 0, 48, offsetof(mavlink_hil_state_quaternion_t, vx) }, { "vy", NULL, MAVLINK_TYPE_INT16_T, 0, 50, offsetof(mavlink_hil_state_quaternion_t, vy) }, { "vz", NULL, MAVLINK_TYPE_INT16_T, 0, 52, offsetof(mavlink_hil_state_quaternion_t, vz) }, { "ind_airspeed", NULL, MAVLINK_TYPE_UINT16_T, 0, 54, offsetof(mavlink_hil_state_quaternion_t, ind_airspeed) }, { "true_airspeed", NULL, MAVLINK_TYPE_UINT16_T, 0, 56, offsetof(mavlink_hil_state_quaternion_t, true_airspeed) }, { "xacc", NULL, MAVLINK_TYPE_INT16_T, 0, 58, offsetof(mavlink_hil_state_quaternion_t, xacc) }, { "yacc", NULL, MAVLINK_TYPE_INT16_T, 0, 60, offsetof(mavlink_hil_state_quaternion_t, yacc) }, { "zacc", NULL, MAVLINK_TYPE_INT16_T, 0, 62, offsetof(mavlink_hil_state_quaternion_t, zacc) }, } }
# 80 "./lib/main/mavlink/common/./mavlink_msg_hil_state_quaternion.h"
static inline uint16_t mavlink_msg_hil_state_quaternion_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint64_t time_usec, const float *attitude_quaternion, float rollspeed, float pitchspeed, float yawspeed, int32_t lat, int32_t lon, int32_t alt, int16_t vx, int16_t vy, int16_t vz, uint16_t ind_airspeed, uint16_t true_airspeed, int16_t xacc, int16_t yacc, int16_t zacc)
{
# 103 "./lib/main/mavlink/common/./mavlink_msg_hil_state_quaternion.h"
 mavlink_hil_state_quaternion_t packet;
 packet.time_usec = time_usec;
 packet.rollspeed = rollspeed;
 packet.pitchspeed = pitchspeed;
 packet.yawspeed = yawspeed;
 packet.lat = lat;
 packet.lon = lon;
 packet.alt = alt;
 packet.vx = vx;
 packet.vy = vy;
 packet.vz = vz;
 packet.ind_airspeed = ind_airspeed;
 packet.true_airspeed = true_airspeed;
 packet.xacc = xacc;
 packet.yacc = yacc;
 packet.zacc = zacc;
 mav_array_memcpy(packet.attitude_quaternion, attitude_quaternion, sizeof(float)*4);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 64);


 msg->msgid = 115;

    return mavlink_finalize_message(msg, system_id, component_id, 64, 4);



}
# 155 "./lib/main/mavlink/common/./mavlink_msg_hil_state_quaternion.h"
static inline uint16_t mavlink_msg_hil_state_quaternion_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint64_t time_usec,const float *attitude_quaternion,float rollspeed,float pitchspeed,float yawspeed,int32_t lat,int32_t lon,int32_t alt,int16_t vx,int16_t vy,int16_t vz,uint16_t ind_airspeed,uint16_t true_airspeed,int16_t xacc,int16_t yacc,int16_t zacc)
{
# 179 "./lib/main/mavlink/common/./mavlink_msg_hil_state_quaternion.h"
 mavlink_hil_state_quaternion_t packet;
 packet.time_usec = time_usec;
 packet.rollspeed = rollspeed;
 packet.pitchspeed = pitchspeed;
 packet.yawspeed = yawspeed;
 packet.lat = lat;
 packet.lon = lon;
 packet.alt = alt;
 packet.vx = vx;
 packet.vy = vy;
 packet.vz = vz;
 packet.ind_airspeed = ind_airspeed;
 packet.true_airspeed = true_airspeed;
 packet.xacc = xacc;
 packet.yacc = yacc;
 packet.zacc = zacc;
 mav_array_memcpy(packet.attitude_quaternion, attitude_quaternion, sizeof(float)*4);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 64);


 msg->msgid = 115;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 64, 4);



}
# 215 "./lib/main/mavlink/common/./mavlink_msg_hil_state_quaternion.h"
static inline uint16_t mavlink_msg_hil_state_quaternion_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_hil_state_quaternion_t* hil_state_quaternion)
{
 return mavlink_msg_hil_state_quaternion_pack(system_id, component_id, msg, hil_state_quaternion->time_usec, hil_state_quaternion->attitude_quaternion, hil_state_quaternion->rollspeed, hil_state_quaternion->pitchspeed, hil_state_quaternion->yawspeed, hil_state_quaternion->lat, hil_state_quaternion->lon, hil_state_quaternion->alt, hil_state_quaternion->vx, hil_state_quaternion->vy, hil_state_quaternion->vz, hil_state_quaternion->ind_airspeed, hil_state_quaternion->true_airspeed, hil_state_quaternion->xacc, hil_state_quaternion->yacc, hil_state_quaternion->zacc);
}
# 229 "./lib/main/mavlink/common/./mavlink_msg_hil_state_quaternion.h"
static inline uint16_t mavlink_msg_hil_state_quaternion_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_hil_state_quaternion_t* hil_state_quaternion)
{
 return mavlink_msg_hil_state_quaternion_pack_chan(system_id, component_id, chan, msg, hil_state_quaternion->time_usec, hil_state_quaternion->attitude_quaternion, hil_state_quaternion->rollspeed, hil_state_quaternion->pitchspeed, hil_state_quaternion->yawspeed, hil_state_quaternion->lat, hil_state_quaternion->lon, hil_state_quaternion->alt, hil_state_quaternion->vx, hil_state_quaternion->vy, hil_state_quaternion->vz, hil_state_quaternion->ind_airspeed, hil_state_quaternion->true_airspeed, hil_state_quaternion->xacc, hil_state_quaternion->yacc, hil_state_quaternion->zacc);
}
# 378 "./lib/main/mavlink/common/./mavlink_msg_hil_state_quaternion.h"
static inline uint64_t mavlink_msg_hil_state_quaternion_get_time_usec(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint16_t mavlink_msg_hil_state_quaternion_get_attitude_quaternion(const mavlink_message_t* msg, float *attitude_quaternion)
{
 return _MAV_RETURN_float_array(msg, attitude_quaternion, 4, 8);
}






static inline float mavlink_msg_hil_state_quaternion_get_rollspeed(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_hil_state_quaternion_get_pitchspeed(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_hil_state_quaternion_get_yawspeed(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 32);
}






static inline int32_t mavlink_msg_hil_state_quaternion_get_lat(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 36);
}






static inline int32_t mavlink_msg_hil_state_quaternion_get_lon(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 40);
}






static inline int32_t mavlink_msg_hil_state_quaternion_get_alt(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 44);
}






static inline int16_t mavlink_msg_hil_state_quaternion_get_vx(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 48);
}






static inline int16_t mavlink_msg_hil_state_quaternion_get_vy(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 50);
}






static inline int16_t mavlink_msg_hil_state_quaternion_get_vz(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 52);
}






static inline uint16_t mavlink_msg_hil_state_quaternion_get_ind_airspeed(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 54);
}






static inline uint16_t mavlink_msg_hil_state_quaternion_get_true_airspeed(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 56);
}






static inline int16_t mavlink_msg_hil_state_quaternion_get_xacc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 58);
}






static inline int16_t mavlink_msg_hil_state_quaternion_get_yacc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 60);
}






static inline int16_t mavlink_msg_hil_state_quaternion_get_zacc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 62);
}







static inline void mavlink_msg_hil_state_quaternion_decode(const mavlink_message_t* msg, mavlink_hil_state_quaternion_t* hil_state_quaternion)
{
# 559 "./lib/main/mavlink/common/./mavlink_msg_hil_state_quaternion.h"
 memcpy(hil_state_quaternion, ((const char *)(&((msg)->payload64[0]))), 64);

}
# 739 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_scaled_imu2.h" 1


#define MAVLINK_MSG_ID_SCALED_IMU2 116

typedef struct __mavlink_scaled_imu2_t
{
 uint32_t time_boot_ms;
 int16_t xacc;
 int16_t yacc;
 int16_t zacc;
 int16_t xgyro;
 int16_t ygyro;
 int16_t zgyro;
 int16_t xmag;
 int16_t ymag;
 int16_t zmag;
} mavlink_scaled_imu2_t;

#define MAVLINK_MSG_ID_SCALED_IMU2_LEN 22
#define MAVLINK_MSG_ID_116_LEN 22

#define MAVLINK_MSG_ID_SCALED_IMU2_CRC 76
#define MAVLINK_MSG_ID_116_CRC 76



#define MAVLINK_MESSAGE_INFO_SCALED_IMU2 { "SCALED_IMU2", 10, { { "time_boot_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_scaled_imu2_t, time_boot_ms) }, { "xacc", NULL, MAVLINK_TYPE_INT16_T, 0, 4, offsetof(mavlink_scaled_imu2_t, xacc) }, { "yacc", NULL, MAVLINK_TYPE_INT16_T, 0, 6, offsetof(mavlink_scaled_imu2_t, yacc) }, { "zacc", NULL, MAVLINK_TYPE_INT16_T, 0, 8, offsetof(mavlink_scaled_imu2_t, zacc) }, { "xgyro", NULL, MAVLINK_TYPE_INT16_T, 0, 10, offsetof(mavlink_scaled_imu2_t, xgyro) }, { "ygyro", NULL, MAVLINK_TYPE_INT16_T, 0, 12, offsetof(mavlink_scaled_imu2_t, ygyro) }, { "zgyro", NULL, MAVLINK_TYPE_INT16_T, 0, 14, offsetof(mavlink_scaled_imu2_t, zgyro) }, { "xmag", NULL, MAVLINK_TYPE_INT16_T, 0, 16, offsetof(mavlink_scaled_imu2_t, xmag) }, { "ymag", NULL, MAVLINK_TYPE_INT16_T, 0, 18, offsetof(mavlink_scaled_imu2_t, ymag) }, { "zmag", NULL, MAVLINK_TYPE_INT16_T, 0, 20, offsetof(mavlink_scaled_imu2_t, zmag) }, } }
# 62 "./lib/main/mavlink/common/./mavlink_msg_scaled_imu2.h"
static inline uint16_t mavlink_msg_scaled_imu2_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_boot_ms, int16_t xacc, int16_t yacc, int16_t zacc, int16_t xgyro, int16_t ygyro, int16_t zgyro, int16_t xmag, int16_t ymag, int16_t zmag)
{
# 80 "./lib/main/mavlink/common/./mavlink_msg_scaled_imu2.h"
 mavlink_scaled_imu2_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.xacc = xacc;
 packet.yacc = yacc;
 packet.zacc = zacc;
 packet.xgyro = xgyro;
 packet.ygyro = ygyro;
 packet.zgyro = zgyro;
 packet.xmag = xmag;
 packet.ymag = ymag;
 packet.zmag = zmag;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


 msg->msgid = 116;

    return mavlink_finalize_message(msg, system_id, component_id, 22, 76);



}
# 121 "./lib/main/mavlink/common/./mavlink_msg_scaled_imu2.h"
static inline uint16_t mavlink_msg_scaled_imu2_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_boot_ms,int16_t xacc,int16_t yacc,int16_t zacc,int16_t xgyro,int16_t ygyro,int16_t zgyro,int16_t xmag,int16_t ymag,int16_t zmag)
{
# 140 "./lib/main/mavlink/common/./mavlink_msg_scaled_imu2.h"
 mavlink_scaled_imu2_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.xacc = xacc;
 packet.yacc = yacc;
 packet.zacc = zacc;
 packet.xgyro = xgyro;
 packet.ygyro = ygyro;
 packet.zgyro = zgyro;
 packet.xmag = xmag;
 packet.ymag = ymag;
 packet.zmag = zmag;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


 msg->msgid = 116;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 22, 76);



}
# 171 "./lib/main/mavlink/common/./mavlink_msg_scaled_imu2.h"
static inline uint16_t mavlink_msg_scaled_imu2_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_scaled_imu2_t* scaled_imu2)
{
 return mavlink_msg_scaled_imu2_pack(system_id, component_id, msg, scaled_imu2->time_boot_ms, scaled_imu2->xacc, scaled_imu2->yacc, scaled_imu2->zacc, scaled_imu2->xgyro, scaled_imu2->ygyro, scaled_imu2->zgyro, scaled_imu2->xmag, scaled_imu2->ymag, scaled_imu2->zmag);
}
# 185 "./lib/main/mavlink/common/./mavlink_msg_scaled_imu2.h"
static inline uint16_t mavlink_msg_scaled_imu2_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_scaled_imu2_t* scaled_imu2)
{
 return mavlink_msg_scaled_imu2_pack_chan(system_id, component_id, chan, msg, scaled_imu2->time_boot_ms, scaled_imu2->xacc, scaled_imu2->yacc, scaled_imu2->zacc, scaled_imu2->xgyro, scaled_imu2->ygyro, scaled_imu2->zgyro, scaled_imu2->xmag, scaled_imu2->ymag, scaled_imu2->zmag);
}
# 308 "./lib/main/mavlink/common/./mavlink_msg_scaled_imu2.h"
static inline uint32_t mavlink_msg_scaled_imu2_get_time_boot_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline int16_t mavlink_msg_scaled_imu2_get_xacc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 4);
}






static inline int16_t mavlink_msg_scaled_imu2_get_yacc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 6);
}






static inline int16_t mavlink_msg_scaled_imu2_get_zacc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 8);
}






static inline int16_t mavlink_msg_scaled_imu2_get_xgyro(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 10);
}






static inline int16_t mavlink_msg_scaled_imu2_get_ygyro(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 12);
}






static inline int16_t mavlink_msg_scaled_imu2_get_zgyro(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 14);
}






static inline int16_t mavlink_msg_scaled_imu2_get_xmag(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 16);
}






static inline int16_t mavlink_msg_scaled_imu2_get_ymag(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 18);
}






static inline int16_t mavlink_msg_scaled_imu2_get_zmag(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 20);
}







static inline void mavlink_msg_scaled_imu2_decode(const mavlink_message_t* msg, mavlink_scaled_imu2_t* scaled_imu2)
{
# 423 "./lib/main/mavlink/common/./mavlink_msg_scaled_imu2.h"
 memcpy(scaled_imu2, ((const char *)(&((msg)->payload64[0]))), 22);

}
# 740 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_log_request_list.h" 1


#define MAVLINK_MSG_ID_LOG_REQUEST_LIST 117

typedef struct __mavlink_log_request_list_t
{
 uint16_t start;
 uint16_t end;
 uint8_t target_system;
 uint8_t target_component;
} mavlink_log_request_list_t;

#define MAVLINK_MSG_ID_LOG_REQUEST_LIST_LEN 6
#define MAVLINK_MSG_ID_117_LEN 6

#define MAVLINK_MSG_ID_LOG_REQUEST_LIST_CRC 128
#define MAVLINK_MSG_ID_117_CRC 128



#define MAVLINK_MESSAGE_INFO_LOG_REQUEST_LIST { "LOG_REQUEST_LIST", 4, { { "start", NULL, MAVLINK_TYPE_UINT16_T, 0, 0, offsetof(mavlink_log_request_list_t, start) }, { "end", NULL, MAVLINK_TYPE_UINT16_T, 0, 2, offsetof(mavlink_log_request_list_t, end) }, { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 4, offsetof(mavlink_log_request_list_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 5, offsetof(mavlink_log_request_list_t, target_component) }, } }
# 44 "./lib/main/mavlink/common/./mavlink_msg_log_request_list.h"
static inline uint16_t mavlink_msg_log_request_list_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_system, uint8_t target_component, uint16_t start, uint16_t end)
{
# 56 "./lib/main/mavlink/common/./mavlink_msg_log_request_list.h"
 mavlink_log_request_list_t packet;
 packet.start = start;
 packet.end = end;
 packet.target_system = target_system;
 packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 6);


 msg->msgid = 117;

    return mavlink_finalize_message(msg, system_id, component_id, 6, 128);



}
# 85 "./lib/main/mavlink/common/./mavlink_msg_log_request_list.h"
static inline uint16_t mavlink_msg_log_request_list_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_system,uint8_t target_component,uint16_t start,uint16_t end)
{
# 98 "./lib/main/mavlink/common/./mavlink_msg_log_request_list.h"
 mavlink_log_request_list_t packet;
 packet.start = start;
 packet.end = end;
 packet.target_system = target_system;
 packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 6);


 msg->msgid = 117;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 6, 128);



}
# 123 "./lib/main/mavlink/common/./mavlink_msg_log_request_list.h"
static inline uint16_t mavlink_msg_log_request_list_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_log_request_list_t* log_request_list)
{
 return mavlink_msg_log_request_list_pack(system_id, component_id, msg, log_request_list->target_system, log_request_list->target_component, log_request_list->start, log_request_list->end);
}
# 137 "./lib/main/mavlink/common/./mavlink_msg_log_request_list.h"
static inline uint16_t mavlink_msg_log_request_list_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_log_request_list_t* log_request_list)
{
 return mavlink_msg_log_request_list_pack_chan(system_id, component_id, chan, msg, log_request_list->target_system, log_request_list->target_component, log_request_list->start, log_request_list->end);
}
# 230 "./lib/main/mavlink/common/./mavlink_msg_log_request_list.h"
static inline uint8_t mavlink_msg_log_request_list_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[4];
}






static inline uint8_t mavlink_msg_log_request_list_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[5];
}






static inline uint16_t mavlink_msg_log_request_list_get_start(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 0);
}






static inline uint16_t mavlink_msg_log_request_list_get_end(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 2);
}







static inline void mavlink_msg_log_request_list_decode(const mavlink_message_t* msg, mavlink_log_request_list_t* log_request_list)
{






 memcpy(log_request_list, ((const char *)(&((msg)->payload64[0]))), 6);

}
# 741 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_log_entry.h" 1


#define MAVLINK_MSG_ID_LOG_ENTRY 118

typedef struct __mavlink_log_entry_t
{
 uint32_t time_utc;
 uint32_t size;
 uint16_t id;
 uint16_t num_logs;
 uint16_t last_log_num;
} mavlink_log_entry_t;

#define MAVLINK_MSG_ID_LOG_ENTRY_LEN 14
#define MAVLINK_MSG_ID_118_LEN 14

#define MAVLINK_MSG_ID_LOG_ENTRY_CRC 56
#define MAVLINK_MSG_ID_118_CRC 56



#define MAVLINK_MESSAGE_INFO_LOG_ENTRY { "LOG_ENTRY", 5, { { "time_utc", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_log_entry_t, time_utc) }, { "size", NULL, MAVLINK_TYPE_UINT32_T, 0, 4, offsetof(mavlink_log_entry_t, size) }, { "id", NULL, MAVLINK_TYPE_UINT16_T, 0, 8, offsetof(mavlink_log_entry_t, id) }, { "num_logs", NULL, MAVLINK_TYPE_UINT16_T, 0, 10, offsetof(mavlink_log_entry_t, num_logs) }, { "last_log_num", NULL, MAVLINK_TYPE_UINT16_T, 0, 12, offsetof(mavlink_log_entry_t, last_log_num) }, } }
# 47 "./lib/main/mavlink/common/./mavlink_msg_log_entry.h"
static inline uint16_t mavlink_msg_log_entry_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint16_t id, uint16_t num_logs, uint16_t last_log_num, uint32_t time_utc, uint32_t size)
{
# 60 "./lib/main/mavlink/common/./mavlink_msg_log_entry.h"
 mavlink_log_entry_t packet;
 packet.time_utc = time_utc;
 packet.size = size;
 packet.id = id;
 packet.num_logs = num_logs;
 packet.last_log_num = last_log_num;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 14);


 msg->msgid = 118;

    return mavlink_finalize_message(msg, system_id, component_id, 14, 56);



}
# 91 "./lib/main/mavlink/common/./mavlink_msg_log_entry.h"
static inline uint16_t mavlink_msg_log_entry_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint16_t id,uint16_t num_logs,uint16_t last_log_num,uint32_t time_utc,uint32_t size)
{
# 105 "./lib/main/mavlink/common/./mavlink_msg_log_entry.h"
 mavlink_log_entry_t packet;
 packet.time_utc = time_utc;
 packet.size = size;
 packet.id = id;
 packet.num_logs = num_logs;
 packet.last_log_num = last_log_num;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 14);


 msg->msgid = 118;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 14, 56);



}
# 131 "./lib/main/mavlink/common/./mavlink_msg_log_entry.h"
static inline uint16_t mavlink_msg_log_entry_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_log_entry_t* log_entry)
{
 return mavlink_msg_log_entry_pack(system_id, component_id, msg, log_entry->id, log_entry->num_logs, log_entry->last_log_num, log_entry->time_utc, log_entry->size);
}
# 145 "./lib/main/mavlink/common/./mavlink_msg_log_entry.h"
static inline uint16_t mavlink_msg_log_entry_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_log_entry_t* log_entry)
{
 return mavlink_msg_log_entry_pack_chan(system_id, component_id, chan, msg, log_entry->id, log_entry->num_logs, log_entry->last_log_num, log_entry->time_utc, log_entry->size);
}
# 243 "./lib/main/mavlink/common/./mavlink_msg_log_entry.h"
static inline uint16_t mavlink_msg_log_entry_get_id(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 8);
}






static inline uint16_t mavlink_msg_log_entry_get_num_logs(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 10);
}






static inline uint16_t mavlink_msg_log_entry_get_last_log_num(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 12);
}






static inline uint32_t mavlink_msg_log_entry_get_time_utc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint32_t mavlink_msg_log_entry_get_size(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 4);
}







static inline void mavlink_msg_log_entry_decode(const mavlink_message_t* msg, mavlink_log_entry_t* log_entry)
{







 memcpy(log_entry, ((const char *)(&((msg)->payload64[0]))), 14);

}
# 742 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_log_request_data.h" 1


#define MAVLINK_MSG_ID_LOG_REQUEST_DATA 119

typedef struct __mavlink_log_request_data_t
{
 uint32_t ofs;
 uint32_t count;
 uint16_t id;
 uint8_t target_system;
 uint8_t target_component;
} mavlink_log_request_data_t;

#define MAVLINK_MSG_ID_LOG_REQUEST_DATA_LEN 12
#define MAVLINK_MSG_ID_119_LEN 12

#define MAVLINK_MSG_ID_LOG_REQUEST_DATA_CRC 116
#define MAVLINK_MSG_ID_119_CRC 116



#define MAVLINK_MESSAGE_INFO_LOG_REQUEST_DATA { "LOG_REQUEST_DATA", 5, { { "ofs", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_log_request_data_t, ofs) }, { "count", NULL, MAVLINK_TYPE_UINT32_T, 0, 4, offsetof(mavlink_log_request_data_t, count) }, { "id", NULL, MAVLINK_TYPE_UINT16_T, 0, 8, offsetof(mavlink_log_request_data_t, id) }, { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 10, offsetof(mavlink_log_request_data_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 11, offsetof(mavlink_log_request_data_t, target_component) }, } }
# 47 "./lib/main/mavlink/common/./mavlink_msg_log_request_data.h"
static inline uint16_t mavlink_msg_log_request_data_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_system, uint8_t target_component, uint16_t id, uint32_t ofs, uint32_t count)
{
# 60 "./lib/main/mavlink/common/./mavlink_msg_log_request_data.h"
 mavlink_log_request_data_t packet;
 packet.ofs = ofs;
 packet.count = count;
 packet.id = id;
 packet.target_system = target_system;
 packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 12);


 msg->msgid = 119;

    return mavlink_finalize_message(msg, system_id, component_id, 12, 116);



}
# 91 "./lib/main/mavlink/common/./mavlink_msg_log_request_data.h"
static inline uint16_t mavlink_msg_log_request_data_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_system,uint8_t target_component,uint16_t id,uint32_t ofs,uint32_t count)
{
# 105 "./lib/main/mavlink/common/./mavlink_msg_log_request_data.h"
 mavlink_log_request_data_t packet;
 packet.ofs = ofs;
 packet.count = count;
 packet.id = id;
 packet.target_system = target_system;
 packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 12);


 msg->msgid = 119;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 12, 116);



}
# 131 "./lib/main/mavlink/common/./mavlink_msg_log_request_data.h"
static inline uint16_t mavlink_msg_log_request_data_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_log_request_data_t* log_request_data)
{
 return mavlink_msg_log_request_data_pack(system_id, component_id, msg, log_request_data->target_system, log_request_data->target_component, log_request_data->id, log_request_data->ofs, log_request_data->count);
}
# 145 "./lib/main/mavlink/common/./mavlink_msg_log_request_data.h"
static inline uint16_t mavlink_msg_log_request_data_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_log_request_data_t* log_request_data)
{
 return mavlink_msg_log_request_data_pack_chan(system_id, component_id, chan, msg, log_request_data->target_system, log_request_data->target_component, log_request_data->id, log_request_data->ofs, log_request_data->count);
}
# 243 "./lib/main/mavlink/common/./mavlink_msg_log_request_data.h"
static inline uint8_t mavlink_msg_log_request_data_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[10];
}






static inline uint8_t mavlink_msg_log_request_data_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[11];
}






static inline uint16_t mavlink_msg_log_request_data_get_id(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 8);
}






static inline uint32_t mavlink_msg_log_request_data_get_ofs(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint32_t mavlink_msg_log_request_data_get_count(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 4);
}







static inline void mavlink_msg_log_request_data_decode(const mavlink_message_t* msg, mavlink_log_request_data_t* log_request_data)
{







 memcpy(log_request_data, ((const char *)(&((msg)->payload64[0]))), 12);

}
# 743 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_log_data.h" 1


#define MAVLINK_MSG_ID_LOG_DATA 120

typedef struct __mavlink_log_data_t
{
 uint32_t ofs;
 uint16_t id;
 uint8_t count;
 uint8_t data[90];
} mavlink_log_data_t;

#define MAVLINK_MSG_ID_LOG_DATA_LEN 97
#define MAVLINK_MSG_ID_120_LEN 97

#define MAVLINK_MSG_ID_LOG_DATA_CRC 134
#define MAVLINK_MSG_ID_120_CRC 134

#define MAVLINK_MSG_LOG_DATA_FIELD_DATA_LEN 90

#define MAVLINK_MESSAGE_INFO_LOG_DATA { "LOG_DATA", 4, { { "ofs", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_log_data_t, ofs) }, { "id", NULL, MAVLINK_TYPE_UINT16_T, 0, 4, offsetof(mavlink_log_data_t, id) }, { "count", NULL, MAVLINK_TYPE_UINT8_T, 0, 6, offsetof(mavlink_log_data_t, count) }, { "data", NULL, MAVLINK_TYPE_UINT8_T, 90, 7, offsetof(mavlink_log_data_t, data) }, } }
# 44 "./lib/main/mavlink/common/./mavlink_msg_log_data.h"
static inline uint16_t mavlink_msg_log_data_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint16_t id, uint32_t ofs, uint8_t count, const uint8_t *data)
{
# 55 "./lib/main/mavlink/common/./mavlink_msg_log_data.h"
 mavlink_log_data_t packet;
 packet.ofs = ofs;
 packet.id = id;
 packet.count = count;
 mav_array_memcpy(packet.data, data, sizeof(uint8_t)*90);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 97);


 msg->msgid = 120;

    return mavlink_finalize_message(msg, system_id, component_id, 97, 134);



}
# 83 "./lib/main/mavlink/common/./mavlink_msg_log_data.h"
static inline uint16_t mavlink_msg_log_data_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint16_t id,uint32_t ofs,uint8_t count,const uint8_t *data)
{
# 95 "./lib/main/mavlink/common/./mavlink_msg_log_data.h"
 mavlink_log_data_t packet;
 packet.ofs = ofs;
 packet.id = id;
 packet.count = count;
 mav_array_memcpy(packet.data, data, sizeof(uint8_t)*90);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 97);


 msg->msgid = 120;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 97, 134);



}
# 119 "./lib/main/mavlink/common/./mavlink_msg_log_data.h"
static inline uint16_t mavlink_msg_log_data_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_log_data_t* log_data)
{
 return mavlink_msg_log_data_pack(system_id, component_id, msg, log_data->id, log_data->ofs, log_data->count, log_data->data);
}
# 133 "./lib/main/mavlink/common/./mavlink_msg_log_data.h"
static inline uint16_t mavlink_msg_log_data_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_log_data_t* log_data)
{
 return mavlink_msg_log_data_pack_chan(system_id, component_id, chan, msg, log_data->id, log_data->ofs, log_data->count, log_data->data);
}
# 222 "./lib/main/mavlink/common/./mavlink_msg_log_data.h"
static inline uint16_t mavlink_msg_log_data_get_id(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 4);
}






static inline uint32_t mavlink_msg_log_data_get_ofs(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_log_data_get_count(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[6];
}






static inline uint16_t mavlink_msg_log_data_get_data(const mavlink_message_t* msg, uint8_t *data)
{
 return _MAV_RETURN_uint8_t_array(msg, data, 90, 7);
}







static inline void mavlink_msg_log_data_decode(const mavlink_message_t* msg, mavlink_log_data_t* log_data)
{






 memcpy(log_data, ((const char *)(&((msg)->payload64[0]))), 97);

}
# 744 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_log_erase.h" 1


#define MAVLINK_MSG_ID_LOG_ERASE 121

typedef struct __mavlink_log_erase_t
{
 uint8_t target_system;
 uint8_t target_component;
} mavlink_log_erase_t;

#define MAVLINK_MSG_ID_LOG_ERASE_LEN 2
#define MAVLINK_MSG_ID_121_LEN 2

#define MAVLINK_MSG_ID_LOG_ERASE_CRC 237
#define MAVLINK_MSG_ID_121_CRC 237



#define MAVLINK_MESSAGE_INFO_LOG_ERASE { "LOG_ERASE", 2, { { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 0, offsetof(mavlink_log_erase_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 1, offsetof(mavlink_log_erase_t, target_component) }, } }
# 38 "./lib/main/mavlink/common/./mavlink_msg_log_erase.h"
static inline uint16_t mavlink_msg_log_erase_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_system, uint8_t target_component)
{







 mavlink_log_erase_t packet;
 packet.target_system = target_system;
 packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


 msg->msgid = 121;

    return mavlink_finalize_message(msg, system_id, component_id, 2, 237);



}
# 73 "./lib/main/mavlink/common/./mavlink_msg_log_erase.h"
static inline uint16_t mavlink_msg_log_erase_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_system,uint8_t target_component)
{







 mavlink_log_erase_t packet;
 packet.target_system = target_system;
 packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


 msg->msgid = 121;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 2, 237);



}
# 107 "./lib/main/mavlink/common/./mavlink_msg_log_erase.h"
static inline uint16_t mavlink_msg_log_erase_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_log_erase_t* log_erase)
{
 return mavlink_msg_log_erase_pack(system_id, component_id, msg, log_erase->target_system, log_erase->target_component);
}
# 121 "./lib/main/mavlink/common/./mavlink_msg_log_erase.h"
static inline uint16_t mavlink_msg_log_erase_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_log_erase_t* log_erase)
{
 return mavlink_msg_log_erase_pack_chan(system_id, component_id, chan, msg, log_erase->target_system, log_erase->target_component);
}
# 204 "./lib/main/mavlink/common/./mavlink_msg_log_erase.h"
static inline uint8_t mavlink_msg_log_erase_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_log_erase_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}







static inline void mavlink_msg_log_erase_decode(const mavlink_message_t* msg, mavlink_log_erase_t* log_erase)
{




 memcpy(log_erase, ((const char *)(&((msg)->payload64[0]))), 2);

}
# 745 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_log_request_end.h" 1


#define MAVLINK_MSG_ID_LOG_REQUEST_END 122

typedef struct __mavlink_log_request_end_t
{
 uint8_t target_system;
 uint8_t target_component;
} mavlink_log_request_end_t;

#define MAVLINK_MSG_ID_LOG_REQUEST_END_LEN 2
#define MAVLINK_MSG_ID_122_LEN 2

#define MAVLINK_MSG_ID_LOG_REQUEST_END_CRC 203
#define MAVLINK_MSG_ID_122_CRC 203



#define MAVLINK_MESSAGE_INFO_LOG_REQUEST_END { "LOG_REQUEST_END", 2, { { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 0, offsetof(mavlink_log_request_end_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 1, offsetof(mavlink_log_request_end_t, target_component) }, } }
# 38 "./lib/main/mavlink/common/./mavlink_msg_log_request_end.h"
static inline uint16_t mavlink_msg_log_request_end_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_system, uint8_t target_component)
{







 mavlink_log_request_end_t packet;
 packet.target_system = target_system;
 packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


 msg->msgid = 122;

    return mavlink_finalize_message(msg, system_id, component_id, 2, 203);



}
# 73 "./lib/main/mavlink/common/./mavlink_msg_log_request_end.h"
static inline uint16_t mavlink_msg_log_request_end_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_system,uint8_t target_component)
{







 mavlink_log_request_end_t packet;
 packet.target_system = target_system;
 packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


 msg->msgid = 122;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 2, 203);



}
# 107 "./lib/main/mavlink/common/./mavlink_msg_log_request_end.h"
static inline uint16_t mavlink_msg_log_request_end_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_log_request_end_t* log_request_end)
{
 return mavlink_msg_log_request_end_pack(system_id, component_id, msg, log_request_end->target_system, log_request_end->target_component);
}
# 121 "./lib/main/mavlink/common/./mavlink_msg_log_request_end.h"
static inline uint16_t mavlink_msg_log_request_end_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_log_request_end_t* log_request_end)
{
 return mavlink_msg_log_request_end_pack_chan(system_id, component_id, chan, msg, log_request_end->target_system, log_request_end->target_component);
}
# 204 "./lib/main/mavlink/common/./mavlink_msg_log_request_end.h"
static inline uint8_t mavlink_msg_log_request_end_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_log_request_end_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}







static inline void mavlink_msg_log_request_end_decode(const mavlink_message_t* msg, mavlink_log_request_end_t* log_request_end)
{




 memcpy(log_request_end, ((const char *)(&((msg)->payload64[0]))), 2);

}
# 746 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_gps_inject_data.h" 1


#define MAVLINK_MSG_ID_GPS_INJECT_DATA 123

typedef struct __mavlink_gps_inject_data_t
{
 uint8_t target_system;
 uint8_t target_component;
 uint8_t len;
 uint8_t data[110];
} mavlink_gps_inject_data_t;

#define MAVLINK_MSG_ID_GPS_INJECT_DATA_LEN 113
#define MAVLINK_MSG_ID_123_LEN 113

#define MAVLINK_MSG_ID_GPS_INJECT_DATA_CRC 250
#define MAVLINK_MSG_ID_123_CRC 250

#define MAVLINK_MSG_GPS_INJECT_DATA_FIELD_DATA_LEN 110

#define MAVLINK_MESSAGE_INFO_GPS_INJECT_DATA { "GPS_INJECT_DATA", 4, { { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 0, offsetof(mavlink_gps_inject_data_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 1, offsetof(mavlink_gps_inject_data_t, target_component) }, { "len", NULL, MAVLINK_TYPE_UINT8_T, 0, 2, offsetof(mavlink_gps_inject_data_t, len) }, { "data", NULL, MAVLINK_TYPE_UINT8_T, 110, 3, offsetof(mavlink_gps_inject_data_t, data) }, } }
# 44 "./lib/main/mavlink/common/./mavlink_msg_gps_inject_data.h"
static inline uint16_t mavlink_msg_gps_inject_data_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_system, uint8_t target_component, uint8_t len, const uint8_t *data)
{
# 55 "./lib/main/mavlink/common/./mavlink_msg_gps_inject_data.h"
 mavlink_gps_inject_data_t packet;
 packet.target_system = target_system;
 packet.target_component = target_component;
 packet.len = len;
 mav_array_memcpy(packet.data, data, sizeof(uint8_t)*110);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 113);


 msg->msgid = 123;

    return mavlink_finalize_message(msg, system_id, component_id, 113, 250);



}
# 83 "./lib/main/mavlink/common/./mavlink_msg_gps_inject_data.h"
static inline uint16_t mavlink_msg_gps_inject_data_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_system,uint8_t target_component,uint8_t len,const uint8_t *data)
{
# 95 "./lib/main/mavlink/common/./mavlink_msg_gps_inject_data.h"
 mavlink_gps_inject_data_t packet;
 packet.target_system = target_system;
 packet.target_component = target_component;
 packet.len = len;
 mav_array_memcpy(packet.data, data, sizeof(uint8_t)*110);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 113);


 msg->msgid = 123;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 113, 250);



}
# 119 "./lib/main/mavlink/common/./mavlink_msg_gps_inject_data.h"
static inline uint16_t mavlink_msg_gps_inject_data_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_gps_inject_data_t* gps_inject_data)
{
 return mavlink_msg_gps_inject_data_pack(system_id, component_id, msg, gps_inject_data->target_system, gps_inject_data->target_component, gps_inject_data->len, gps_inject_data->data);
}
# 133 "./lib/main/mavlink/common/./mavlink_msg_gps_inject_data.h"
static inline uint16_t mavlink_msg_gps_inject_data_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_gps_inject_data_t* gps_inject_data)
{
 return mavlink_msg_gps_inject_data_pack_chan(system_id, component_id, chan, msg, gps_inject_data->target_system, gps_inject_data->target_component, gps_inject_data->len, gps_inject_data->data);
}
# 222 "./lib/main/mavlink/common/./mavlink_msg_gps_inject_data.h"
static inline uint8_t mavlink_msg_gps_inject_data_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_gps_inject_data_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}






static inline uint8_t mavlink_msg_gps_inject_data_get_len(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}






static inline uint16_t mavlink_msg_gps_inject_data_get_data(const mavlink_message_t* msg, uint8_t *data)
{
 return _MAV_RETURN_uint8_t_array(msg, data, 110, 3);
}







static inline void mavlink_msg_gps_inject_data_decode(const mavlink_message_t* msg, mavlink_gps_inject_data_t* gps_inject_data)
{






 memcpy(gps_inject_data, ((const char *)(&((msg)->payload64[0]))), 113);

}
# 747 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_gps2_raw.h" 1


#define MAVLINK_MSG_ID_GPS2_RAW 124

typedef struct __mavlink_gps2_raw_t
{
 uint64_t time_usec;
 int32_t lat;
 int32_t lon;
 int32_t alt;
 uint32_t dgps_age;
 uint16_t eph;
 uint16_t epv;
 uint16_t vel;
 uint16_t cog;
 uint8_t fix_type;
 uint8_t satellites_visible;
 uint8_t dgps_numch;
} mavlink_gps2_raw_t;

#define MAVLINK_MSG_ID_GPS2_RAW_LEN 35
#define MAVLINK_MSG_ID_124_LEN 35

#define MAVLINK_MSG_ID_GPS2_RAW_CRC 87
#define MAVLINK_MSG_ID_124_CRC 87



#define MAVLINK_MESSAGE_INFO_GPS2_RAW { "GPS2_RAW", 12, { { "time_usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_gps2_raw_t, time_usec) }, { "lat", NULL, MAVLINK_TYPE_INT32_T, 0, 8, offsetof(mavlink_gps2_raw_t, lat) }, { "lon", NULL, MAVLINK_TYPE_INT32_T, 0, 12, offsetof(mavlink_gps2_raw_t, lon) }, { "alt", NULL, MAVLINK_TYPE_INT32_T, 0, 16, offsetof(mavlink_gps2_raw_t, alt) }, { "dgps_age", NULL, MAVLINK_TYPE_UINT32_T, 0, 20, offsetof(mavlink_gps2_raw_t, dgps_age) }, { "eph", NULL, MAVLINK_TYPE_UINT16_T, 0, 24, offsetof(mavlink_gps2_raw_t, eph) }, { "epv", NULL, MAVLINK_TYPE_UINT16_T, 0, 26, offsetof(mavlink_gps2_raw_t, epv) }, { "vel", NULL, MAVLINK_TYPE_UINT16_T, 0, 28, offsetof(mavlink_gps2_raw_t, vel) }, { "cog", NULL, MAVLINK_TYPE_UINT16_T, 0, 30, offsetof(mavlink_gps2_raw_t, cog) }, { "fix_type", NULL, MAVLINK_TYPE_UINT8_T, 0, 32, offsetof(mavlink_gps2_raw_t, fix_type) }, { "satellites_visible", NULL, MAVLINK_TYPE_UINT8_T, 0, 33, offsetof(mavlink_gps2_raw_t, satellites_visible) }, { "dgps_numch", NULL, MAVLINK_TYPE_UINT8_T, 0, 34, offsetof(mavlink_gps2_raw_t, dgps_numch) }, } }
# 68 "./lib/main/mavlink/common/./mavlink_msg_gps2_raw.h"
static inline uint16_t mavlink_msg_gps2_raw_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint64_t time_usec, uint8_t fix_type, int32_t lat, int32_t lon, int32_t alt, uint16_t eph, uint16_t epv, uint16_t vel, uint16_t cog, uint8_t satellites_visible, uint8_t dgps_numch, uint32_t dgps_age)
{
# 88 "./lib/main/mavlink/common/./mavlink_msg_gps2_raw.h"
 mavlink_gps2_raw_t packet;
 packet.time_usec = time_usec;
 packet.lat = lat;
 packet.lon = lon;
 packet.alt = alt;
 packet.dgps_age = dgps_age;
 packet.eph = eph;
 packet.epv = epv;
 packet.vel = vel;
 packet.cog = cog;
 packet.fix_type = fix_type;
 packet.satellites_visible = satellites_visible;
 packet.dgps_numch = dgps_numch;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 35);


 msg->msgid = 124;

    return mavlink_finalize_message(msg, system_id, component_id, 35, 87);



}
# 133 "./lib/main/mavlink/common/./mavlink_msg_gps2_raw.h"
static inline uint16_t mavlink_msg_gps2_raw_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint64_t time_usec,uint8_t fix_type,int32_t lat,int32_t lon,int32_t alt,uint16_t eph,uint16_t epv,uint16_t vel,uint16_t cog,uint8_t satellites_visible,uint8_t dgps_numch,uint32_t dgps_age)
{
# 154 "./lib/main/mavlink/common/./mavlink_msg_gps2_raw.h"
 mavlink_gps2_raw_t packet;
 packet.time_usec = time_usec;
 packet.lat = lat;
 packet.lon = lon;
 packet.alt = alt;
 packet.dgps_age = dgps_age;
 packet.eph = eph;
 packet.epv = epv;
 packet.vel = vel;
 packet.cog = cog;
 packet.fix_type = fix_type;
 packet.satellites_visible = satellites_visible;
 packet.dgps_numch = dgps_numch;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 35);


 msg->msgid = 124;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 35, 87);



}
# 187 "./lib/main/mavlink/common/./mavlink_msg_gps2_raw.h"
static inline uint16_t mavlink_msg_gps2_raw_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_gps2_raw_t* gps2_raw)
{
 return mavlink_msg_gps2_raw_pack(system_id, component_id, msg, gps2_raw->time_usec, gps2_raw->fix_type, gps2_raw->lat, gps2_raw->lon, gps2_raw->alt, gps2_raw->eph, gps2_raw->epv, gps2_raw->vel, gps2_raw->cog, gps2_raw->satellites_visible, gps2_raw->dgps_numch, gps2_raw->dgps_age);
}
# 201 "./lib/main/mavlink/common/./mavlink_msg_gps2_raw.h"
static inline uint16_t mavlink_msg_gps2_raw_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_gps2_raw_t* gps2_raw)
{
 return mavlink_msg_gps2_raw_pack_chan(system_id, component_id, chan, msg, gps2_raw->time_usec, gps2_raw->fix_type, gps2_raw->lat, gps2_raw->lon, gps2_raw->alt, gps2_raw->eph, gps2_raw->epv, gps2_raw->vel, gps2_raw->cog, gps2_raw->satellites_visible, gps2_raw->dgps_numch, gps2_raw->dgps_age);
}
# 334 "./lib/main/mavlink/common/./mavlink_msg_gps2_raw.h"
static inline uint64_t mavlink_msg_gps2_raw_get_time_usec(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint8_t mavlink_msg_gps2_raw_get_fix_type(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[32];
}






static inline int32_t mavlink_msg_gps2_raw_get_lat(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 8);
}






static inline int32_t mavlink_msg_gps2_raw_get_lon(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 12);
}






static inline int32_t mavlink_msg_gps2_raw_get_alt(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 16);
}






static inline uint16_t mavlink_msg_gps2_raw_get_eph(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 24);
}






static inline uint16_t mavlink_msg_gps2_raw_get_epv(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 26);
}






static inline uint16_t mavlink_msg_gps2_raw_get_vel(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 28);
}






static inline uint16_t mavlink_msg_gps2_raw_get_cog(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 30);
}






static inline uint8_t mavlink_msg_gps2_raw_get_satellites_visible(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[33];
}






static inline uint8_t mavlink_msg_gps2_raw_get_dgps_numch(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[34];
}






static inline uint32_t mavlink_msg_gps2_raw_get_dgps_age(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 20);
}







static inline void mavlink_msg_gps2_raw_decode(const mavlink_message_t* msg, mavlink_gps2_raw_t* gps2_raw)
{
# 471 "./lib/main/mavlink/common/./mavlink_msg_gps2_raw.h"
 memcpy(gps2_raw, ((const char *)(&((msg)->payload64[0]))), 35);

}
# 748 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_power_status.h" 1


#define MAVLINK_MSG_ID_POWER_STATUS 125

typedef struct __mavlink_power_status_t
{
 uint16_t Vcc;
 uint16_t Vservo;
 uint16_t flags;
} mavlink_power_status_t;

#define MAVLINK_MSG_ID_POWER_STATUS_LEN 6
#define MAVLINK_MSG_ID_125_LEN 6

#define MAVLINK_MSG_ID_POWER_STATUS_CRC 203
#define MAVLINK_MSG_ID_125_CRC 203



#define MAVLINK_MESSAGE_INFO_POWER_STATUS { "POWER_STATUS", 3, { { "Vcc", NULL, MAVLINK_TYPE_UINT16_T, 0, 0, offsetof(mavlink_power_status_t, Vcc) }, { "Vservo", NULL, MAVLINK_TYPE_UINT16_T, 0, 2, offsetof(mavlink_power_status_t, Vservo) }, { "flags", NULL, MAVLINK_TYPE_UINT16_T, 0, 4, offsetof(mavlink_power_status_t, flags) }, } }
# 41 "./lib/main/mavlink/common/./mavlink_msg_power_status.h"
static inline uint16_t mavlink_msg_power_status_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint16_t Vcc, uint16_t Vservo, uint16_t flags)
{
# 52 "./lib/main/mavlink/common/./mavlink_msg_power_status.h"
 mavlink_power_status_t packet;
 packet.Vcc = Vcc;
 packet.Vservo = Vservo;
 packet.flags = flags;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 6);


 msg->msgid = 125;

    return mavlink_finalize_message(msg, system_id, component_id, 6, 203);



}
# 79 "./lib/main/mavlink/common/./mavlink_msg_power_status.h"
static inline uint16_t mavlink_msg_power_status_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint16_t Vcc,uint16_t Vservo,uint16_t flags)
{
# 91 "./lib/main/mavlink/common/./mavlink_msg_power_status.h"
 mavlink_power_status_t packet;
 packet.Vcc = Vcc;
 packet.Vservo = Vservo;
 packet.flags = flags;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 6);


 msg->msgid = 125;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 6, 203);



}
# 115 "./lib/main/mavlink/common/./mavlink_msg_power_status.h"
static inline uint16_t mavlink_msg_power_status_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_power_status_t* power_status)
{
 return mavlink_msg_power_status_pack(system_id, component_id, msg, power_status->Vcc, power_status->Vservo, power_status->flags);
}
# 129 "./lib/main/mavlink/common/./mavlink_msg_power_status.h"
static inline uint16_t mavlink_msg_power_status_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_power_status_t* power_status)
{
 return mavlink_msg_power_status_pack_chan(system_id, component_id, chan, msg, power_status->Vcc, power_status->Vservo, power_status->flags);
}
# 217 "./lib/main/mavlink/common/./mavlink_msg_power_status.h"
static inline uint16_t mavlink_msg_power_status_get_Vcc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 0);
}






static inline uint16_t mavlink_msg_power_status_get_Vservo(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 2);
}






static inline uint16_t mavlink_msg_power_status_get_flags(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 4);
}







static inline void mavlink_msg_power_status_decode(const mavlink_message_t* msg, mavlink_power_status_t* power_status)
{





 memcpy(power_status, ((const char *)(&((msg)->payload64[0]))), 6);

}
# 749 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_serial_control.h" 1


#define MAVLINK_MSG_ID_SERIAL_CONTROL 126

typedef struct __mavlink_serial_control_t
{
 uint32_t baudrate;
 uint16_t timeout;
 uint8_t device;
 uint8_t flags;
 uint8_t count;
 uint8_t data[70];
} mavlink_serial_control_t;

#define MAVLINK_MSG_ID_SERIAL_CONTROL_LEN 79
#define MAVLINK_MSG_ID_126_LEN 79

#define MAVLINK_MSG_ID_SERIAL_CONTROL_CRC 220
#define MAVLINK_MSG_ID_126_CRC 220

#define MAVLINK_MSG_SERIAL_CONTROL_FIELD_DATA_LEN 70

#define MAVLINK_MESSAGE_INFO_SERIAL_CONTROL { "SERIAL_CONTROL", 6, { { "baudrate", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_serial_control_t, baudrate) }, { "timeout", NULL, MAVLINK_TYPE_UINT16_T, 0, 4, offsetof(mavlink_serial_control_t, timeout) }, { "device", NULL, MAVLINK_TYPE_UINT8_T, 0, 6, offsetof(mavlink_serial_control_t, device) }, { "flags", NULL, MAVLINK_TYPE_UINT8_T, 0, 7, offsetof(mavlink_serial_control_t, flags) }, { "count", NULL, MAVLINK_TYPE_UINT8_T, 0, 8, offsetof(mavlink_serial_control_t, count) }, { "data", NULL, MAVLINK_TYPE_UINT8_T, 70, 9, offsetof(mavlink_serial_control_t, data) }, } }
# 50 "./lib/main/mavlink/common/./mavlink_msg_serial_control.h"
static inline uint16_t mavlink_msg_serial_control_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t device, uint8_t flags, uint16_t timeout, uint32_t baudrate, uint8_t count, const uint8_t *data)
{
# 63 "./lib/main/mavlink/common/./mavlink_msg_serial_control.h"
 mavlink_serial_control_t packet;
 packet.baudrate = baudrate;
 packet.timeout = timeout;
 packet.device = device;
 packet.flags = flags;
 packet.count = count;
 mav_array_memcpy(packet.data, data, sizeof(uint8_t)*70);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 79);


 msg->msgid = 126;

    return mavlink_finalize_message(msg, system_id, component_id, 79, 220);



}
# 95 "./lib/main/mavlink/common/./mavlink_msg_serial_control.h"
static inline uint16_t mavlink_msg_serial_control_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t device,uint8_t flags,uint16_t timeout,uint32_t baudrate,uint8_t count,const uint8_t *data)
{
# 109 "./lib/main/mavlink/common/./mavlink_msg_serial_control.h"
 mavlink_serial_control_t packet;
 packet.baudrate = baudrate;
 packet.timeout = timeout;
 packet.device = device;
 packet.flags = flags;
 packet.count = count;
 mav_array_memcpy(packet.data, data, sizeof(uint8_t)*70);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 79);


 msg->msgid = 126;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 79, 220);



}
# 135 "./lib/main/mavlink/common/./mavlink_msg_serial_control.h"
static inline uint16_t mavlink_msg_serial_control_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_serial_control_t* serial_control)
{
 return mavlink_msg_serial_control_pack(system_id, component_id, msg, serial_control->device, serial_control->flags, serial_control->timeout, serial_control->baudrate, serial_control->count, serial_control->data);
}
# 149 "./lib/main/mavlink/common/./mavlink_msg_serial_control.h"
static inline uint16_t mavlink_msg_serial_control_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_serial_control_t* serial_control)
{
 return mavlink_msg_serial_control_pack_chan(system_id, component_id, chan, msg, serial_control->device, serial_control->flags, serial_control->timeout, serial_control->baudrate, serial_control->count, serial_control->data);
}
# 248 "./lib/main/mavlink/common/./mavlink_msg_serial_control.h"
static inline uint8_t mavlink_msg_serial_control_get_device(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[6];
}






static inline uint8_t mavlink_msg_serial_control_get_flags(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[7];
}






static inline uint16_t mavlink_msg_serial_control_get_timeout(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 4);
}






static inline uint32_t mavlink_msg_serial_control_get_baudrate(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_serial_control_get_count(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[8];
}






static inline uint16_t mavlink_msg_serial_control_get_data(const mavlink_message_t* msg, uint8_t *data)
{
 return _MAV_RETURN_uint8_t_array(msg, data, 70, 9);
}







static inline void mavlink_msg_serial_control_decode(const mavlink_message_t* msg, mavlink_serial_control_t* serial_control)
{
# 319 "./lib/main/mavlink/common/./mavlink_msg_serial_control.h"
 memcpy(serial_control, ((const char *)(&((msg)->payload64[0]))), 79);

}
# 750 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_gps_rtk.h" 1


#define MAVLINK_MSG_ID_GPS_RTK 127

typedef struct __mavlink_gps_rtk_t
{
 uint32_t time_last_baseline_ms;
 uint32_t tow;
 int32_t baseline_a_mm;
 int32_t baseline_b_mm;
 int32_t baseline_c_mm;
 uint32_t accuracy;
 int32_t iar_num_hypotheses;
 uint16_t wn;
 uint8_t rtk_receiver_id;
 uint8_t rtk_health;
 uint8_t rtk_rate;
 uint8_t nsats;
 uint8_t baseline_coords_type;
} mavlink_gps_rtk_t;

#define MAVLINK_MSG_ID_GPS_RTK_LEN 35
#define MAVLINK_MSG_ID_127_LEN 35

#define MAVLINK_MSG_ID_GPS_RTK_CRC 25
#define MAVLINK_MSG_ID_127_CRC 25



#define MAVLINK_MESSAGE_INFO_GPS_RTK { "GPS_RTK", 13, { { "time_last_baseline_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_gps_rtk_t, time_last_baseline_ms) }, { "tow", NULL, MAVLINK_TYPE_UINT32_T, 0, 4, offsetof(mavlink_gps_rtk_t, tow) }, { "baseline_a_mm", NULL, MAVLINK_TYPE_INT32_T, 0, 8, offsetof(mavlink_gps_rtk_t, baseline_a_mm) }, { "baseline_b_mm", NULL, MAVLINK_TYPE_INT32_T, 0, 12, offsetof(mavlink_gps_rtk_t, baseline_b_mm) }, { "baseline_c_mm", NULL, MAVLINK_TYPE_INT32_T, 0, 16, offsetof(mavlink_gps_rtk_t, baseline_c_mm) }, { "accuracy", NULL, MAVLINK_TYPE_UINT32_T, 0, 20, offsetof(mavlink_gps_rtk_t, accuracy) }, { "iar_num_hypotheses", NULL, MAVLINK_TYPE_INT32_T, 0, 24, offsetof(mavlink_gps_rtk_t, iar_num_hypotheses) }, { "wn", NULL, MAVLINK_TYPE_UINT16_T, 0, 28, offsetof(mavlink_gps_rtk_t, wn) }, { "rtk_receiver_id", NULL, MAVLINK_TYPE_UINT8_T, 0, 30, offsetof(mavlink_gps_rtk_t, rtk_receiver_id) }, { "rtk_health", NULL, MAVLINK_TYPE_UINT8_T, 0, 31, offsetof(mavlink_gps_rtk_t, rtk_health) }, { "rtk_rate", NULL, MAVLINK_TYPE_UINT8_T, 0, 32, offsetof(mavlink_gps_rtk_t, rtk_rate) }, { "nsats", NULL, MAVLINK_TYPE_UINT8_T, 0, 33, offsetof(mavlink_gps_rtk_t, nsats) }, { "baseline_coords_type", NULL, MAVLINK_TYPE_UINT8_T, 0, 34, offsetof(mavlink_gps_rtk_t, baseline_coords_type) }, } }
# 71 "./lib/main/mavlink/common/./mavlink_msg_gps_rtk.h"
static inline uint16_t mavlink_msg_gps_rtk_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_last_baseline_ms, uint8_t rtk_receiver_id, uint16_t wn, uint32_t tow, uint8_t rtk_health, uint8_t rtk_rate, uint8_t nsats, uint8_t baseline_coords_type, int32_t baseline_a_mm, int32_t baseline_b_mm, int32_t baseline_c_mm, uint32_t accuracy, int32_t iar_num_hypotheses)
{
# 92 "./lib/main/mavlink/common/./mavlink_msg_gps_rtk.h"
 mavlink_gps_rtk_t packet;
 packet.time_last_baseline_ms = time_last_baseline_ms;
 packet.tow = tow;
 packet.baseline_a_mm = baseline_a_mm;
 packet.baseline_b_mm = baseline_b_mm;
 packet.baseline_c_mm = baseline_c_mm;
 packet.accuracy = accuracy;
 packet.iar_num_hypotheses = iar_num_hypotheses;
 packet.wn = wn;
 packet.rtk_receiver_id = rtk_receiver_id;
 packet.rtk_health = rtk_health;
 packet.rtk_rate = rtk_rate;
 packet.nsats = nsats;
 packet.baseline_coords_type = baseline_coords_type;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 35);


 msg->msgid = 127;

    return mavlink_finalize_message(msg, system_id, component_id, 35, 25);



}
# 139 "./lib/main/mavlink/common/./mavlink_msg_gps_rtk.h"
static inline uint16_t mavlink_msg_gps_rtk_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_last_baseline_ms,uint8_t rtk_receiver_id,uint16_t wn,uint32_t tow,uint8_t rtk_health,uint8_t rtk_rate,uint8_t nsats,uint8_t baseline_coords_type,int32_t baseline_a_mm,int32_t baseline_b_mm,int32_t baseline_c_mm,uint32_t accuracy,int32_t iar_num_hypotheses)
{
# 161 "./lib/main/mavlink/common/./mavlink_msg_gps_rtk.h"
 mavlink_gps_rtk_t packet;
 packet.time_last_baseline_ms = time_last_baseline_ms;
 packet.tow = tow;
 packet.baseline_a_mm = baseline_a_mm;
 packet.baseline_b_mm = baseline_b_mm;
 packet.baseline_c_mm = baseline_c_mm;
 packet.accuracy = accuracy;
 packet.iar_num_hypotheses = iar_num_hypotheses;
 packet.wn = wn;
 packet.rtk_receiver_id = rtk_receiver_id;
 packet.rtk_health = rtk_health;
 packet.rtk_rate = rtk_rate;
 packet.nsats = nsats;
 packet.baseline_coords_type = baseline_coords_type;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 35);


 msg->msgid = 127;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 35, 25);



}
# 195 "./lib/main/mavlink/common/./mavlink_msg_gps_rtk.h"
static inline uint16_t mavlink_msg_gps_rtk_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_gps_rtk_t* gps_rtk)
{
 return mavlink_msg_gps_rtk_pack(system_id, component_id, msg, gps_rtk->time_last_baseline_ms, gps_rtk->rtk_receiver_id, gps_rtk->wn, gps_rtk->tow, gps_rtk->rtk_health, gps_rtk->rtk_rate, gps_rtk->nsats, gps_rtk->baseline_coords_type, gps_rtk->baseline_a_mm, gps_rtk->baseline_b_mm, gps_rtk->baseline_c_mm, gps_rtk->accuracy, gps_rtk->iar_num_hypotheses);
}
# 209 "./lib/main/mavlink/common/./mavlink_msg_gps_rtk.h"
static inline uint16_t mavlink_msg_gps_rtk_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_gps_rtk_t* gps_rtk)
{
 return mavlink_msg_gps_rtk_pack_chan(system_id, component_id, chan, msg, gps_rtk->time_last_baseline_ms, gps_rtk->rtk_receiver_id, gps_rtk->wn, gps_rtk->tow, gps_rtk->rtk_health, gps_rtk->rtk_rate, gps_rtk->nsats, gps_rtk->baseline_coords_type, gps_rtk->baseline_a_mm, gps_rtk->baseline_b_mm, gps_rtk->baseline_c_mm, gps_rtk->accuracy, gps_rtk->iar_num_hypotheses);
}
# 347 "./lib/main/mavlink/common/./mavlink_msg_gps_rtk.h"
static inline uint32_t mavlink_msg_gps_rtk_get_time_last_baseline_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_gps_rtk_get_rtk_receiver_id(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[30];
}






static inline uint16_t mavlink_msg_gps_rtk_get_wn(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 28);
}






static inline uint32_t mavlink_msg_gps_rtk_get_tow(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 4);
}






static inline uint8_t mavlink_msg_gps_rtk_get_rtk_health(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[31];
}






static inline uint8_t mavlink_msg_gps_rtk_get_rtk_rate(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[32];
}






static inline uint8_t mavlink_msg_gps_rtk_get_nsats(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[33];
}






static inline uint8_t mavlink_msg_gps_rtk_get_baseline_coords_type(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[34];
}






static inline int32_t mavlink_msg_gps_rtk_get_baseline_a_mm(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 8);
}






static inline int32_t mavlink_msg_gps_rtk_get_baseline_b_mm(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 12);
}






static inline int32_t mavlink_msg_gps_rtk_get_baseline_c_mm(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 16);
}






static inline uint32_t mavlink_msg_gps_rtk_get_accuracy(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 20);
}






static inline int32_t mavlink_msg_gps_rtk_get_iar_num_hypotheses(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 24);
}







static inline void mavlink_msg_gps_rtk_decode(const mavlink_message_t* msg, mavlink_gps_rtk_t* gps_rtk)
{
# 495 "./lib/main/mavlink/common/./mavlink_msg_gps_rtk.h"
 memcpy(gps_rtk, ((const char *)(&((msg)->payload64[0]))), 35);

}
# 751 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_gps2_rtk.h" 1


#define MAVLINK_MSG_ID_GPS2_RTK 128

typedef struct __mavlink_gps2_rtk_t
{
 uint32_t time_last_baseline_ms;
 uint32_t tow;
 int32_t baseline_a_mm;
 int32_t baseline_b_mm;
 int32_t baseline_c_mm;
 uint32_t accuracy;
 int32_t iar_num_hypotheses;
 uint16_t wn;
 uint8_t rtk_receiver_id;
 uint8_t rtk_health;
 uint8_t rtk_rate;
 uint8_t nsats;
 uint8_t baseline_coords_type;
} mavlink_gps2_rtk_t;

#define MAVLINK_MSG_ID_GPS2_RTK_LEN 35
#define MAVLINK_MSG_ID_128_LEN 35

#define MAVLINK_MSG_ID_GPS2_RTK_CRC 226
#define MAVLINK_MSG_ID_128_CRC 226



#define MAVLINK_MESSAGE_INFO_GPS2_RTK { "GPS2_RTK", 13, { { "time_last_baseline_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_gps2_rtk_t, time_last_baseline_ms) }, { "tow", NULL, MAVLINK_TYPE_UINT32_T, 0, 4, offsetof(mavlink_gps2_rtk_t, tow) }, { "baseline_a_mm", NULL, MAVLINK_TYPE_INT32_T, 0, 8, offsetof(mavlink_gps2_rtk_t, baseline_a_mm) }, { "baseline_b_mm", NULL, MAVLINK_TYPE_INT32_T, 0, 12, offsetof(mavlink_gps2_rtk_t, baseline_b_mm) }, { "baseline_c_mm", NULL, MAVLINK_TYPE_INT32_T, 0, 16, offsetof(mavlink_gps2_rtk_t, baseline_c_mm) }, { "accuracy", NULL, MAVLINK_TYPE_UINT32_T, 0, 20, offsetof(mavlink_gps2_rtk_t, accuracy) }, { "iar_num_hypotheses", NULL, MAVLINK_TYPE_INT32_T, 0, 24, offsetof(mavlink_gps2_rtk_t, iar_num_hypotheses) }, { "wn", NULL, MAVLINK_TYPE_UINT16_T, 0, 28, offsetof(mavlink_gps2_rtk_t, wn) }, { "rtk_receiver_id", NULL, MAVLINK_TYPE_UINT8_T, 0, 30, offsetof(mavlink_gps2_rtk_t, rtk_receiver_id) }, { "rtk_health", NULL, MAVLINK_TYPE_UINT8_T, 0, 31, offsetof(mavlink_gps2_rtk_t, rtk_health) }, { "rtk_rate", NULL, MAVLINK_TYPE_UINT8_T, 0, 32, offsetof(mavlink_gps2_rtk_t, rtk_rate) }, { "nsats", NULL, MAVLINK_TYPE_UINT8_T, 0, 33, offsetof(mavlink_gps2_rtk_t, nsats) }, { "baseline_coords_type", NULL, MAVLINK_TYPE_UINT8_T, 0, 34, offsetof(mavlink_gps2_rtk_t, baseline_coords_type) }, } }
# 71 "./lib/main/mavlink/common/./mavlink_msg_gps2_rtk.h"
static inline uint16_t mavlink_msg_gps2_rtk_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_last_baseline_ms, uint8_t rtk_receiver_id, uint16_t wn, uint32_t tow, uint8_t rtk_health, uint8_t rtk_rate, uint8_t nsats, uint8_t baseline_coords_type, int32_t baseline_a_mm, int32_t baseline_b_mm, int32_t baseline_c_mm, uint32_t accuracy, int32_t iar_num_hypotheses)
{
# 92 "./lib/main/mavlink/common/./mavlink_msg_gps2_rtk.h"
 mavlink_gps2_rtk_t packet;
 packet.time_last_baseline_ms = time_last_baseline_ms;
 packet.tow = tow;
 packet.baseline_a_mm = baseline_a_mm;
 packet.baseline_b_mm = baseline_b_mm;
 packet.baseline_c_mm = baseline_c_mm;
 packet.accuracy = accuracy;
 packet.iar_num_hypotheses = iar_num_hypotheses;
 packet.wn = wn;
 packet.rtk_receiver_id = rtk_receiver_id;
 packet.rtk_health = rtk_health;
 packet.rtk_rate = rtk_rate;
 packet.nsats = nsats;
 packet.baseline_coords_type = baseline_coords_type;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 35);


 msg->msgid = 128;

    return mavlink_finalize_message(msg, system_id, component_id, 35, 226);



}
# 139 "./lib/main/mavlink/common/./mavlink_msg_gps2_rtk.h"
static inline uint16_t mavlink_msg_gps2_rtk_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_last_baseline_ms,uint8_t rtk_receiver_id,uint16_t wn,uint32_t tow,uint8_t rtk_health,uint8_t rtk_rate,uint8_t nsats,uint8_t baseline_coords_type,int32_t baseline_a_mm,int32_t baseline_b_mm,int32_t baseline_c_mm,uint32_t accuracy,int32_t iar_num_hypotheses)
{
# 161 "./lib/main/mavlink/common/./mavlink_msg_gps2_rtk.h"
 mavlink_gps2_rtk_t packet;
 packet.time_last_baseline_ms = time_last_baseline_ms;
 packet.tow = tow;
 packet.baseline_a_mm = baseline_a_mm;
 packet.baseline_b_mm = baseline_b_mm;
 packet.baseline_c_mm = baseline_c_mm;
 packet.accuracy = accuracy;
 packet.iar_num_hypotheses = iar_num_hypotheses;
 packet.wn = wn;
 packet.rtk_receiver_id = rtk_receiver_id;
 packet.rtk_health = rtk_health;
 packet.rtk_rate = rtk_rate;
 packet.nsats = nsats;
 packet.baseline_coords_type = baseline_coords_type;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 35);


 msg->msgid = 128;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 35, 226);



}
# 195 "./lib/main/mavlink/common/./mavlink_msg_gps2_rtk.h"
static inline uint16_t mavlink_msg_gps2_rtk_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_gps2_rtk_t* gps2_rtk)
{
 return mavlink_msg_gps2_rtk_pack(system_id, component_id, msg, gps2_rtk->time_last_baseline_ms, gps2_rtk->rtk_receiver_id, gps2_rtk->wn, gps2_rtk->tow, gps2_rtk->rtk_health, gps2_rtk->rtk_rate, gps2_rtk->nsats, gps2_rtk->baseline_coords_type, gps2_rtk->baseline_a_mm, gps2_rtk->baseline_b_mm, gps2_rtk->baseline_c_mm, gps2_rtk->accuracy, gps2_rtk->iar_num_hypotheses);
}
# 209 "./lib/main/mavlink/common/./mavlink_msg_gps2_rtk.h"
static inline uint16_t mavlink_msg_gps2_rtk_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_gps2_rtk_t* gps2_rtk)
{
 return mavlink_msg_gps2_rtk_pack_chan(system_id, component_id, chan, msg, gps2_rtk->time_last_baseline_ms, gps2_rtk->rtk_receiver_id, gps2_rtk->wn, gps2_rtk->tow, gps2_rtk->rtk_health, gps2_rtk->rtk_rate, gps2_rtk->nsats, gps2_rtk->baseline_coords_type, gps2_rtk->baseline_a_mm, gps2_rtk->baseline_b_mm, gps2_rtk->baseline_c_mm, gps2_rtk->accuracy, gps2_rtk->iar_num_hypotheses);
}
# 347 "./lib/main/mavlink/common/./mavlink_msg_gps2_rtk.h"
static inline uint32_t mavlink_msg_gps2_rtk_get_time_last_baseline_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_gps2_rtk_get_rtk_receiver_id(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[30];
}






static inline uint16_t mavlink_msg_gps2_rtk_get_wn(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 28);
}






static inline uint32_t mavlink_msg_gps2_rtk_get_tow(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 4);
}






static inline uint8_t mavlink_msg_gps2_rtk_get_rtk_health(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[31];
}






static inline uint8_t mavlink_msg_gps2_rtk_get_rtk_rate(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[32];
}






static inline uint8_t mavlink_msg_gps2_rtk_get_nsats(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[33];
}






static inline uint8_t mavlink_msg_gps2_rtk_get_baseline_coords_type(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[34];
}






static inline int32_t mavlink_msg_gps2_rtk_get_baseline_a_mm(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 8);
}






static inline int32_t mavlink_msg_gps2_rtk_get_baseline_b_mm(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 12);
}






static inline int32_t mavlink_msg_gps2_rtk_get_baseline_c_mm(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 16);
}






static inline uint32_t mavlink_msg_gps2_rtk_get_accuracy(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 20);
}






static inline int32_t mavlink_msg_gps2_rtk_get_iar_num_hypotheses(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 24);
}







static inline void mavlink_msg_gps2_rtk_decode(const mavlink_message_t* msg, mavlink_gps2_rtk_t* gps2_rtk)
{
# 495 "./lib/main/mavlink/common/./mavlink_msg_gps2_rtk.h"
 memcpy(gps2_rtk, ((const char *)(&((msg)->payload64[0]))), 35);

}
# 752 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_scaled_imu3.h" 1


#define MAVLINK_MSG_ID_SCALED_IMU3 129

typedef struct __mavlink_scaled_imu3_t
{
 uint32_t time_boot_ms;
 int16_t xacc;
 int16_t yacc;
 int16_t zacc;
 int16_t xgyro;
 int16_t ygyro;
 int16_t zgyro;
 int16_t xmag;
 int16_t ymag;
 int16_t zmag;
} mavlink_scaled_imu3_t;

#define MAVLINK_MSG_ID_SCALED_IMU3_LEN 22
#define MAVLINK_MSG_ID_129_LEN 22

#define MAVLINK_MSG_ID_SCALED_IMU3_CRC 46
#define MAVLINK_MSG_ID_129_CRC 46



#define MAVLINK_MESSAGE_INFO_SCALED_IMU3 { "SCALED_IMU3", 10, { { "time_boot_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_scaled_imu3_t, time_boot_ms) }, { "xacc", NULL, MAVLINK_TYPE_INT16_T, 0, 4, offsetof(mavlink_scaled_imu3_t, xacc) }, { "yacc", NULL, MAVLINK_TYPE_INT16_T, 0, 6, offsetof(mavlink_scaled_imu3_t, yacc) }, { "zacc", NULL, MAVLINK_TYPE_INT16_T, 0, 8, offsetof(mavlink_scaled_imu3_t, zacc) }, { "xgyro", NULL, MAVLINK_TYPE_INT16_T, 0, 10, offsetof(mavlink_scaled_imu3_t, xgyro) }, { "ygyro", NULL, MAVLINK_TYPE_INT16_T, 0, 12, offsetof(mavlink_scaled_imu3_t, ygyro) }, { "zgyro", NULL, MAVLINK_TYPE_INT16_T, 0, 14, offsetof(mavlink_scaled_imu3_t, zgyro) }, { "xmag", NULL, MAVLINK_TYPE_INT16_T, 0, 16, offsetof(mavlink_scaled_imu3_t, xmag) }, { "ymag", NULL, MAVLINK_TYPE_INT16_T, 0, 18, offsetof(mavlink_scaled_imu3_t, ymag) }, { "zmag", NULL, MAVLINK_TYPE_INT16_T, 0, 20, offsetof(mavlink_scaled_imu3_t, zmag) }, } }
# 62 "./lib/main/mavlink/common/./mavlink_msg_scaled_imu3.h"
static inline uint16_t mavlink_msg_scaled_imu3_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_boot_ms, int16_t xacc, int16_t yacc, int16_t zacc, int16_t xgyro, int16_t ygyro, int16_t zgyro, int16_t xmag, int16_t ymag, int16_t zmag)
{
# 80 "./lib/main/mavlink/common/./mavlink_msg_scaled_imu3.h"
 mavlink_scaled_imu3_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.xacc = xacc;
 packet.yacc = yacc;
 packet.zacc = zacc;
 packet.xgyro = xgyro;
 packet.ygyro = ygyro;
 packet.zgyro = zgyro;
 packet.xmag = xmag;
 packet.ymag = ymag;
 packet.zmag = zmag;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


 msg->msgid = 129;

    return mavlink_finalize_message(msg, system_id, component_id, 22, 46);



}
# 121 "./lib/main/mavlink/common/./mavlink_msg_scaled_imu3.h"
static inline uint16_t mavlink_msg_scaled_imu3_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_boot_ms,int16_t xacc,int16_t yacc,int16_t zacc,int16_t xgyro,int16_t ygyro,int16_t zgyro,int16_t xmag,int16_t ymag,int16_t zmag)
{
# 140 "./lib/main/mavlink/common/./mavlink_msg_scaled_imu3.h"
 mavlink_scaled_imu3_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.xacc = xacc;
 packet.yacc = yacc;
 packet.zacc = zacc;
 packet.xgyro = xgyro;
 packet.ygyro = ygyro;
 packet.zgyro = zgyro;
 packet.xmag = xmag;
 packet.ymag = ymag;
 packet.zmag = zmag;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


 msg->msgid = 129;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 22, 46);



}
# 171 "./lib/main/mavlink/common/./mavlink_msg_scaled_imu3.h"
static inline uint16_t mavlink_msg_scaled_imu3_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_scaled_imu3_t* scaled_imu3)
{
 return mavlink_msg_scaled_imu3_pack(system_id, component_id, msg, scaled_imu3->time_boot_ms, scaled_imu3->xacc, scaled_imu3->yacc, scaled_imu3->zacc, scaled_imu3->xgyro, scaled_imu3->ygyro, scaled_imu3->zgyro, scaled_imu3->xmag, scaled_imu3->ymag, scaled_imu3->zmag);
}
# 185 "./lib/main/mavlink/common/./mavlink_msg_scaled_imu3.h"
static inline uint16_t mavlink_msg_scaled_imu3_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_scaled_imu3_t* scaled_imu3)
{
 return mavlink_msg_scaled_imu3_pack_chan(system_id, component_id, chan, msg, scaled_imu3->time_boot_ms, scaled_imu3->xacc, scaled_imu3->yacc, scaled_imu3->zacc, scaled_imu3->xgyro, scaled_imu3->ygyro, scaled_imu3->zgyro, scaled_imu3->xmag, scaled_imu3->ymag, scaled_imu3->zmag);
}
# 308 "./lib/main/mavlink/common/./mavlink_msg_scaled_imu3.h"
static inline uint32_t mavlink_msg_scaled_imu3_get_time_boot_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline int16_t mavlink_msg_scaled_imu3_get_xacc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 4);
}






static inline int16_t mavlink_msg_scaled_imu3_get_yacc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 6);
}






static inline int16_t mavlink_msg_scaled_imu3_get_zacc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 8);
}






static inline int16_t mavlink_msg_scaled_imu3_get_xgyro(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 10);
}






static inline int16_t mavlink_msg_scaled_imu3_get_ygyro(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 12);
}






static inline int16_t mavlink_msg_scaled_imu3_get_zgyro(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 14);
}






static inline int16_t mavlink_msg_scaled_imu3_get_xmag(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 16);
}






static inline int16_t mavlink_msg_scaled_imu3_get_ymag(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 18);
}






static inline int16_t mavlink_msg_scaled_imu3_get_zmag(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 20);
}







static inline void mavlink_msg_scaled_imu3_decode(const mavlink_message_t* msg, mavlink_scaled_imu3_t* scaled_imu3)
{
# 423 "./lib/main/mavlink/common/./mavlink_msg_scaled_imu3.h"
 memcpy(scaled_imu3, ((const char *)(&((msg)->payload64[0]))), 22);

}
# 753 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_data_transmission_handshake.h" 1


#define MAVLINK_MSG_ID_DATA_TRANSMISSION_HANDSHAKE 130

typedef struct __mavlink_data_transmission_handshake_t
{
 uint32_t size;
 uint16_t width;
 uint16_t height;
 uint16_t packets;
 uint8_t type;
 uint8_t payload;
 uint8_t jpg_quality;
} mavlink_data_transmission_handshake_t;

#define MAVLINK_MSG_ID_DATA_TRANSMISSION_HANDSHAKE_LEN 13
#define MAVLINK_MSG_ID_130_LEN 13

#define MAVLINK_MSG_ID_DATA_TRANSMISSION_HANDSHAKE_CRC 29
#define MAVLINK_MSG_ID_130_CRC 29



#define MAVLINK_MESSAGE_INFO_DATA_TRANSMISSION_HANDSHAKE { "DATA_TRANSMISSION_HANDSHAKE", 7, { { "size", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_data_transmission_handshake_t, size) }, { "width", NULL, MAVLINK_TYPE_UINT16_T, 0, 4, offsetof(mavlink_data_transmission_handshake_t, width) }, { "height", NULL, MAVLINK_TYPE_UINT16_T, 0, 6, offsetof(mavlink_data_transmission_handshake_t, height) }, { "packets", NULL, MAVLINK_TYPE_UINT16_T, 0, 8, offsetof(mavlink_data_transmission_handshake_t, packets) }, { "type", NULL, MAVLINK_TYPE_UINT8_T, 0, 10, offsetof(mavlink_data_transmission_handshake_t, type) }, { "payload", NULL, MAVLINK_TYPE_UINT8_T, 0, 11, offsetof(mavlink_data_transmission_handshake_t, payload) }, { "jpg_quality", NULL, MAVLINK_TYPE_UINT8_T, 0, 12, offsetof(mavlink_data_transmission_handshake_t, jpg_quality) }, } }
# 53 "./lib/main/mavlink/common/./mavlink_msg_data_transmission_handshake.h"
static inline uint16_t mavlink_msg_data_transmission_handshake_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t type, uint32_t size, uint16_t width, uint16_t height, uint16_t packets, uint8_t payload, uint8_t jpg_quality)
{
# 68 "./lib/main/mavlink/common/./mavlink_msg_data_transmission_handshake.h"
 mavlink_data_transmission_handshake_t packet;
 packet.size = size;
 packet.width = width;
 packet.height = height;
 packet.packets = packets;
 packet.type = type;
 packet.payload = payload;
 packet.jpg_quality = jpg_quality;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 13);


 msg->msgid = 130;

    return mavlink_finalize_message(msg, system_id, component_id, 13, 29);



}
# 103 "./lib/main/mavlink/common/./mavlink_msg_data_transmission_handshake.h"
static inline uint16_t mavlink_msg_data_transmission_handshake_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t type,uint32_t size,uint16_t width,uint16_t height,uint16_t packets,uint8_t payload,uint8_t jpg_quality)
{
# 119 "./lib/main/mavlink/common/./mavlink_msg_data_transmission_handshake.h"
 mavlink_data_transmission_handshake_t packet;
 packet.size = size;
 packet.width = width;
 packet.height = height;
 packet.packets = packets;
 packet.type = type;
 packet.payload = payload;
 packet.jpg_quality = jpg_quality;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 13);


 msg->msgid = 130;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 13, 29);



}
# 147 "./lib/main/mavlink/common/./mavlink_msg_data_transmission_handshake.h"
static inline uint16_t mavlink_msg_data_transmission_handshake_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_data_transmission_handshake_t* data_transmission_handshake)
{
 return mavlink_msg_data_transmission_handshake_pack(system_id, component_id, msg, data_transmission_handshake->type, data_transmission_handshake->size, data_transmission_handshake->width, data_transmission_handshake->height, data_transmission_handshake->packets, data_transmission_handshake->payload, data_transmission_handshake->jpg_quality);
}
# 161 "./lib/main/mavlink/common/./mavlink_msg_data_transmission_handshake.h"
static inline uint16_t mavlink_msg_data_transmission_handshake_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_data_transmission_handshake_t* data_transmission_handshake)
{
 return mavlink_msg_data_transmission_handshake_pack_chan(system_id, component_id, chan, msg, data_transmission_handshake->type, data_transmission_handshake->size, data_transmission_handshake->width, data_transmission_handshake->height, data_transmission_handshake->packets, data_transmission_handshake->payload, data_transmission_handshake->jpg_quality);
}
# 269 "./lib/main/mavlink/common/./mavlink_msg_data_transmission_handshake.h"
static inline uint8_t mavlink_msg_data_transmission_handshake_get_type(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[10];
}






static inline uint32_t mavlink_msg_data_transmission_handshake_get_size(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint16_t mavlink_msg_data_transmission_handshake_get_width(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 4);
}






static inline uint16_t mavlink_msg_data_transmission_handshake_get_height(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 6);
}






static inline uint16_t mavlink_msg_data_transmission_handshake_get_packets(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 8);
}






static inline uint8_t mavlink_msg_data_transmission_handshake_get_payload(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[11];
}






static inline uint8_t mavlink_msg_data_transmission_handshake_get_jpg_quality(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[12];
}







static inline void mavlink_msg_data_transmission_handshake_decode(const mavlink_message_t* msg, mavlink_data_transmission_handshake_t* data_transmission_handshake)
{
# 351 "./lib/main/mavlink/common/./mavlink_msg_data_transmission_handshake.h"
 memcpy(data_transmission_handshake, ((const char *)(&((msg)->payload64[0]))), 13);

}
# 754 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_encapsulated_data.h" 1


#define MAVLINK_MSG_ID_ENCAPSULATED_DATA 131

typedef struct __mavlink_encapsulated_data_t
{
 uint16_t seqnr;
 uint8_t data[253];
} mavlink_encapsulated_data_t;

#define MAVLINK_MSG_ID_ENCAPSULATED_DATA_LEN 255
#define MAVLINK_MSG_ID_131_LEN 255

#define MAVLINK_MSG_ID_ENCAPSULATED_DATA_CRC 223
#define MAVLINK_MSG_ID_131_CRC 223

#define MAVLINK_MSG_ENCAPSULATED_DATA_FIELD_DATA_LEN 253

#define MAVLINK_MESSAGE_INFO_ENCAPSULATED_DATA { "ENCAPSULATED_DATA", 2, { { "seqnr", NULL, MAVLINK_TYPE_UINT16_T, 0, 0, offsetof(mavlink_encapsulated_data_t, seqnr) }, { "data", NULL, MAVLINK_TYPE_UINT8_T, 253, 2, offsetof(mavlink_encapsulated_data_t, data) }, } }
# 38 "./lib/main/mavlink/common/./mavlink_msg_encapsulated_data.h"
static inline uint16_t mavlink_msg_encapsulated_data_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint16_t seqnr, const uint8_t *data)
{






 mavlink_encapsulated_data_t packet;
 packet.seqnr = seqnr;
 mav_array_memcpy(packet.data, data, sizeof(uint8_t)*253);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 255);


 msg->msgid = 131;

    return mavlink_finalize_message(msg, system_id, component_id, 255, 223);



}
# 71 "./lib/main/mavlink/common/./mavlink_msg_encapsulated_data.h"
static inline uint16_t mavlink_msg_encapsulated_data_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint16_t seqnr,const uint8_t *data)
{






 mavlink_encapsulated_data_t packet;
 packet.seqnr = seqnr;
 mav_array_memcpy(packet.data, data, sizeof(uint8_t)*253);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 255);


 msg->msgid = 131;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 255, 223);



}
# 103 "./lib/main/mavlink/common/./mavlink_msg_encapsulated_data.h"
static inline uint16_t mavlink_msg_encapsulated_data_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_encapsulated_data_t* encapsulated_data)
{
 return mavlink_msg_encapsulated_data_pack(system_id, component_id, msg, encapsulated_data->seqnr, encapsulated_data->data);
}
# 117 "./lib/main/mavlink/common/./mavlink_msg_encapsulated_data.h"
static inline uint16_t mavlink_msg_encapsulated_data_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_encapsulated_data_t* encapsulated_data)
{
 return mavlink_msg_encapsulated_data_pack_chan(system_id, component_id, chan, msg, encapsulated_data->seqnr, encapsulated_data->data);
}
# 196 "./lib/main/mavlink/common/./mavlink_msg_encapsulated_data.h"
static inline uint16_t mavlink_msg_encapsulated_data_get_seqnr(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 0);
}






static inline uint16_t mavlink_msg_encapsulated_data_get_data(const mavlink_message_t* msg, uint8_t *data)
{
 return _MAV_RETURN_uint8_t_array(msg, data, 253, 2);
}







static inline void mavlink_msg_encapsulated_data_decode(const mavlink_message_t* msg, mavlink_encapsulated_data_t* encapsulated_data)
{




 memcpy(encapsulated_data, ((const char *)(&((msg)->payload64[0]))), 255);

}
# 755 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_distance_sensor.h" 1


#define MAVLINK_MSG_ID_DISTANCE_SENSOR 132

typedef struct __mavlink_distance_sensor_t
{
 uint32_t time_boot_ms;
 uint16_t min_distance;
 uint16_t max_distance;
 uint16_t current_distance;
 uint8_t type;
 uint8_t id;
 uint8_t orientation;
 uint8_t covariance;
} mavlink_distance_sensor_t;

#define MAVLINK_MSG_ID_DISTANCE_SENSOR_LEN 14
#define MAVLINK_MSG_ID_132_LEN 14

#define MAVLINK_MSG_ID_DISTANCE_SENSOR_CRC 85
#define MAVLINK_MSG_ID_132_CRC 85



#define MAVLINK_MESSAGE_INFO_DISTANCE_SENSOR { "DISTANCE_SENSOR", 8, { { "time_boot_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_distance_sensor_t, time_boot_ms) }, { "min_distance", NULL, MAVLINK_TYPE_UINT16_T, 0, 4, offsetof(mavlink_distance_sensor_t, min_distance) }, { "max_distance", NULL, MAVLINK_TYPE_UINT16_T, 0, 6, offsetof(mavlink_distance_sensor_t, max_distance) }, { "current_distance", NULL, MAVLINK_TYPE_UINT16_T, 0, 8, offsetof(mavlink_distance_sensor_t, current_distance) }, { "type", NULL, MAVLINK_TYPE_UINT8_T, 0, 10, offsetof(mavlink_distance_sensor_t, type) }, { "id", NULL, MAVLINK_TYPE_UINT8_T, 0, 11, offsetof(mavlink_distance_sensor_t, id) }, { "orientation", NULL, MAVLINK_TYPE_UINT8_T, 0, 12, offsetof(mavlink_distance_sensor_t, orientation) }, { "covariance", NULL, MAVLINK_TYPE_UINT8_T, 0, 13, offsetof(mavlink_distance_sensor_t, covariance) }, } }
# 56 "./lib/main/mavlink/common/./mavlink_msg_distance_sensor.h"
static inline uint16_t mavlink_msg_distance_sensor_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_boot_ms, uint16_t min_distance, uint16_t max_distance, uint16_t current_distance, uint8_t type, uint8_t id, uint8_t orientation, uint8_t covariance)
{
# 72 "./lib/main/mavlink/common/./mavlink_msg_distance_sensor.h"
 mavlink_distance_sensor_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.min_distance = min_distance;
 packet.max_distance = max_distance;
 packet.current_distance = current_distance;
 packet.type = type;
 packet.id = id;
 packet.orientation = orientation;
 packet.covariance = covariance;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 14);


 msg->msgid = 132;

    return mavlink_finalize_message(msg, system_id, component_id, 14, 85);



}
# 109 "./lib/main/mavlink/common/./mavlink_msg_distance_sensor.h"
static inline uint16_t mavlink_msg_distance_sensor_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_boot_ms,uint16_t min_distance,uint16_t max_distance,uint16_t current_distance,uint8_t type,uint8_t id,uint8_t orientation,uint8_t covariance)
{
# 126 "./lib/main/mavlink/common/./mavlink_msg_distance_sensor.h"
 mavlink_distance_sensor_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.min_distance = min_distance;
 packet.max_distance = max_distance;
 packet.current_distance = current_distance;
 packet.type = type;
 packet.id = id;
 packet.orientation = orientation;
 packet.covariance = covariance;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 14);


 msg->msgid = 132;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 14, 85);



}
# 155 "./lib/main/mavlink/common/./mavlink_msg_distance_sensor.h"
static inline uint16_t mavlink_msg_distance_sensor_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_distance_sensor_t* distance_sensor)
{
 return mavlink_msg_distance_sensor_pack(system_id, component_id, msg, distance_sensor->time_boot_ms, distance_sensor->min_distance, distance_sensor->max_distance, distance_sensor->current_distance, distance_sensor->type, distance_sensor->id, distance_sensor->orientation, distance_sensor->covariance);
}
# 169 "./lib/main/mavlink/common/./mavlink_msg_distance_sensor.h"
static inline uint16_t mavlink_msg_distance_sensor_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_distance_sensor_t* distance_sensor)
{
 return mavlink_msg_distance_sensor_pack_chan(system_id, component_id, chan, msg, distance_sensor->time_boot_ms, distance_sensor->min_distance, distance_sensor->max_distance, distance_sensor->current_distance, distance_sensor->type, distance_sensor->id, distance_sensor->orientation, distance_sensor->covariance);
}
# 282 "./lib/main/mavlink/common/./mavlink_msg_distance_sensor.h"
static inline uint32_t mavlink_msg_distance_sensor_get_time_boot_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint16_t mavlink_msg_distance_sensor_get_min_distance(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 4);
}






static inline uint16_t mavlink_msg_distance_sensor_get_max_distance(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 6);
}






static inline uint16_t mavlink_msg_distance_sensor_get_current_distance(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 8);
}






static inline uint8_t mavlink_msg_distance_sensor_get_type(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[10];
}






static inline uint8_t mavlink_msg_distance_sensor_get_id(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[11];
}






static inline uint8_t mavlink_msg_distance_sensor_get_orientation(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[12];
}






static inline uint8_t mavlink_msg_distance_sensor_get_covariance(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[13];
}







static inline void mavlink_msg_distance_sensor_decode(const mavlink_message_t* msg, mavlink_distance_sensor_t* distance_sensor)
{
# 375 "./lib/main/mavlink/common/./mavlink_msg_distance_sensor.h"
 memcpy(distance_sensor, ((const char *)(&((msg)->payload64[0]))), 14);

}
# 756 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_terrain_request.h" 1


#define MAVLINK_MSG_ID_TERRAIN_REQUEST 133

typedef struct __mavlink_terrain_request_t
{
 uint64_t mask;
 int32_t lat;
 int32_t lon;
 uint16_t grid_spacing;
} mavlink_terrain_request_t;

#define MAVLINK_MSG_ID_TERRAIN_REQUEST_LEN 18
#define MAVLINK_MSG_ID_133_LEN 18

#define MAVLINK_MSG_ID_TERRAIN_REQUEST_CRC 6
#define MAVLINK_MSG_ID_133_CRC 6



#define MAVLINK_MESSAGE_INFO_TERRAIN_REQUEST { "TERRAIN_REQUEST", 4, { { "mask", "0x%07x", MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_terrain_request_t, mask) }, { "lat", NULL, MAVLINK_TYPE_INT32_T, 0, 8, offsetof(mavlink_terrain_request_t, lat) }, { "lon", NULL, MAVLINK_TYPE_INT32_T, 0, 12, offsetof(mavlink_terrain_request_t, lon) }, { "grid_spacing", NULL, MAVLINK_TYPE_UINT16_T, 0, 16, offsetof(mavlink_terrain_request_t, grid_spacing) }, } }
# 44 "./lib/main/mavlink/common/./mavlink_msg_terrain_request.h"
static inline uint16_t mavlink_msg_terrain_request_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             int32_t lat, int32_t lon, uint16_t grid_spacing, uint64_t mask)
{
# 56 "./lib/main/mavlink/common/./mavlink_msg_terrain_request.h"
 mavlink_terrain_request_t packet;
 packet.mask = mask;
 packet.lat = lat;
 packet.lon = lon;
 packet.grid_spacing = grid_spacing;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 18);


 msg->msgid = 133;

    return mavlink_finalize_message(msg, system_id, component_id, 18, 6);



}
# 85 "./lib/main/mavlink/common/./mavlink_msg_terrain_request.h"
static inline uint16_t mavlink_msg_terrain_request_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 int32_t lat,int32_t lon,uint16_t grid_spacing,uint64_t mask)
{
# 98 "./lib/main/mavlink/common/./mavlink_msg_terrain_request.h"
 mavlink_terrain_request_t packet;
 packet.mask = mask;
 packet.lat = lat;
 packet.lon = lon;
 packet.grid_spacing = grid_spacing;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 18);


 msg->msgid = 133;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 18, 6);



}
# 123 "./lib/main/mavlink/common/./mavlink_msg_terrain_request.h"
static inline uint16_t mavlink_msg_terrain_request_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_terrain_request_t* terrain_request)
{
 return mavlink_msg_terrain_request_pack(system_id, component_id, msg, terrain_request->lat, terrain_request->lon, terrain_request->grid_spacing, terrain_request->mask);
}
# 137 "./lib/main/mavlink/common/./mavlink_msg_terrain_request.h"
static inline uint16_t mavlink_msg_terrain_request_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_terrain_request_t* terrain_request)
{
 return mavlink_msg_terrain_request_pack_chan(system_id, component_id, chan, msg, terrain_request->lat, terrain_request->lon, terrain_request->grid_spacing, terrain_request->mask);
}
# 230 "./lib/main/mavlink/common/./mavlink_msg_terrain_request.h"
static inline int32_t mavlink_msg_terrain_request_get_lat(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 8);
}






static inline int32_t mavlink_msg_terrain_request_get_lon(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 12);
}






static inline uint16_t mavlink_msg_terrain_request_get_grid_spacing(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 16);
}






static inline uint64_t mavlink_msg_terrain_request_get_mask(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}







static inline void mavlink_msg_terrain_request_decode(const mavlink_message_t* msg, mavlink_terrain_request_t* terrain_request)
{






 memcpy(terrain_request, ((const char *)(&((msg)->payload64[0]))), 18);

}
# 757 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_terrain_data.h" 1


#define MAVLINK_MSG_ID_TERRAIN_DATA 134

typedef struct __mavlink_terrain_data_t
{
 int32_t lat;
 int32_t lon;
 uint16_t grid_spacing;
 int16_t data[16];
 uint8_t gridbit;
} mavlink_terrain_data_t;

#define MAVLINK_MSG_ID_TERRAIN_DATA_LEN 43
#define MAVLINK_MSG_ID_134_LEN 43

#define MAVLINK_MSG_ID_TERRAIN_DATA_CRC 229
#define MAVLINK_MSG_ID_134_CRC 229

#define MAVLINK_MSG_TERRAIN_DATA_FIELD_DATA_LEN 16

#define MAVLINK_MESSAGE_INFO_TERRAIN_DATA { "TERRAIN_DATA", 5, { { "lat", NULL, MAVLINK_TYPE_INT32_T, 0, 0, offsetof(mavlink_terrain_data_t, lat) }, { "lon", NULL, MAVLINK_TYPE_INT32_T, 0, 4, offsetof(mavlink_terrain_data_t, lon) }, { "grid_spacing", NULL, MAVLINK_TYPE_UINT16_T, 0, 8, offsetof(mavlink_terrain_data_t, grid_spacing) }, { "data", NULL, MAVLINK_TYPE_INT16_T, 16, 10, offsetof(mavlink_terrain_data_t, data) }, { "gridbit", NULL, MAVLINK_TYPE_UINT8_T, 0, 42, offsetof(mavlink_terrain_data_t, gridbit) }, } }
# 47 "./lib/main/mavlink/common/./mavlink_msg_terrain_data.h"
static inline uint16_t mavlink_msg_terrain_data_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             int32_t lat, int32_t lon, uint16_t grid_spacing, uint8_t gridbit, const int16_t *data)
{
# 59 "./lib/main/mavlink/common/./mavlink_msg_terrain_data.h"
 mavlink_terrain_data_t packet;
 packet.lat = lat;
 packet.lon = lon;
 packet.grid_spacing = grid_spacing;
 packet.gridbit = gridbit;
 mav_array_memcpy(packet.data, data, sizeof(int16_t)*16);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 43);


 msg->msgid = 134;

    return mavlink_finalize_message(msg, system_id, component_id, 43, 229);



}
# 89 "./lib/main/mavlink/common/./mavlink_msg_terrain_data.h"
static inline uint16_t mavlink_msg_terrain_data_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 int32_t lat,int32_t lon,uint16_t grid_spacing,uint8_t gridbit,const int16_t *data)
{
# 102 "./lib/main/mavlink/common/./mavlink_msg_terrain_data.h"
 mavlink_terrain_data_t packet;
 packet.lat = lat;
 packet.lon = lon;
 packet.grid_spacing = grid_spacing;
 packet.gridbit = gridbit;
 mav_array_memcpy(packet.data, data, sizeof(int16_t)*16);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 43);


 msg->msgid = 134;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 43, 229);



}
# 127 "./lib/main/mavlink/common/./mavlink_msg_terrain_data.h"
static inline uint16_t mavlink_msg_terrain_data_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_terrain_data_t* terrain_data)
{
 return mavlink_msg_terrain_data_pack(system_id, component_id, msg, terrain_data->lat, terrain_data->lon, terrain_data->grid_spacing, terrain_data->gridbit, terrain_data->data);
}
# 141 "./lib/main/mavlink/common/./mavlink_msg_terrain_data.h"
static inline uint16_t mavlink_msg_terrain_data_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_terrain_data_t* terrain_data)
{
 return mavlink_msg_terrain_data_pack_chan(system_id, component_id, chan, msg, terrain_data->lat, terrain_data->lon, terrain_data->grid_spacing, terrain_data->gridbit, terrain_data->data);
}
# 235 "./lib/main/mavlink/common/./mavlink_msg_terrain_data.h"
static inline int32_t mavlink_msg_terrain_data_get_lat(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 0);
}






static inline int32_t mavlink_msg_terrain_data_get_lon(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 4);
}






static inline uint16_t mavlink_msg_terrain_data_get_grid_spacing(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 8);
}






static inline uint8_t mavlink_msg_terrain_data_get_gridbit(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[42];
}






static inline uint16_t mavlink_msg_terrain_data_get_data(const mavlink_message_t* msg, int16_t *data)
{
 return _MAV_RETURN_int16_t_array(msg, data, 16, 10);
}







static inline void mavlink_msg_terrain_data_decode(const mavlink_message_t* msg, mavlink_terrain_data_t* terrain_data)
{







 memcpy(terrain_data, ((const char *)(&((msg)->payload64[0]))), 43);

}
# 758 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_terrain_check.h" 1


#define MAVLINK_MSG_ID_TERRAIN_CHECK 135

typedef struct __mavlink_terrain_check_t
{
 int32_t lat;
 int32_t lon;
} mavlink_terrain_check_t;

#define MAVLINK_MSG_ID_TERRAIN_CHECK_LEN 8
#define MAVLINK_MSG_ID_135_LEN 8

#define MAVLINK_MSG_ID_TERRAIN_CHECK_CRC 203
#define MAVLINK_MSG_ID_135_CRC 203



#define MAVLINK_MESSAGE_INFO_TERRAIN_CHECK { "TERRAIN_CHECK", 2, { { "lat", NULL, MAVLINK_TYPE_INT32_T, 0, 0, offsetof(mavlink_terrain_check_t, lat) }, { "lon", NULL, MAVLINK_TYPE_INT32_T, 0, 4, offsetof(mavlink_terrain_check_t, lon) }, } }
# 38 "./lib/main/mavlink/common/./mavlink_msg_terrain_check.h"
static inline uint16_t mavlink_msg_terrain_check_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             int32_t lat, int32_t lon)
{







 mavlink_terrain_check_t packet;
 packet.lat = lat;
 packet.lon = lon;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 8);


 msg->msgid = 135;

    return mavlink_finalize_message(msg, system_id, component_id, 8, 203);



}
# 73 "./lib/main/mavlink/common/./mavlink_msg_terrain_check.h"
static inline uint16_t mavlink_msg_terrain_check_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 int32_t lat,int32_t lon)
{







 mavlink_terrain_check_t packet;
 packet.lat = lat;
 packet.lon = lon;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 8);


 msg->msgid = 135;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 8, 203);



}
# 107 "./lib/main/mavlink/common/./mavlink_msg_terrain_check.h"
static inline uint16_t mavlink_msg_terrain_check_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_terrain_check_t* terrain_check)
{
 return mavlink_msg_terrain_check_pack(system_id, component_id, msg, terrain_check->lat, terrain_check->lon);
}
# 121 "./lib/main/mavlink/common/./mavlink_msg_terrain_check.h"
static inline uint16_t mavlink_msg_terrain_check_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_terrain_check_t* terrain_check)
{
 return mavlink_msg_terrain_check_pack_chan(system_id, component_id, chan, msg, terrain_check->lat, terrain_check->lon);
}
# 204 "./lib/main/mavlink/common/./mavlink_msg_terrain_check.h"
static inline int32_t mavlink_msg_terrain_check_get_lat(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 0);
}






static inline int32_t mavlink_msg_terrain_check_get_lon(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 4);
}







static inline void mavlink_msg_terrain_check_decode(const mavlink_message_t* msg, mavlink_terrain_check_t* terrain_check)
{




 memcpy(terrain_check, ((const char *)(&((msg)->payload64[0]))), 8);

}
# 759 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_terrain_report.h" 1


#define MAVLINK_MSG_ID_TERRAIN_REPORT 136

typedef struct __mavlink_terrain_report_t
{
 int32_t lat;
 int32_t lon;
 float terrain_height;
 float current_height;
 uint16_t spacing;
 uint16_t pending;
 uint16_t loaded;
} mavlink_terrain_report_t;

#define MAVLINK_MSG_ID_TERRAIN_REPORT_LEN 22
#define MAVLINK_MSG_ID_136_LEN 22

#define MAVLINK_MSG_ID_TERRAIN_REPORT_CRC 1
#define MAVLINK_MSG_ID_136_CRC 1



#define MAVLINK_MESSAGE_INFO_TERRAIN_REPORT { "TERRAIN_REPORT", 7, { { "lat", NULL, MAVLINK_TYPE_INT32_T, 0, 0, offsetof(mavlink_terrain_report_t, lat) }, { "lon", NULL, MAVLINK_TYPE_INT32_T, 0, 4, offsetof(mavlink_terrain_report_t, lon) }, { "terrain_height", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_terrain_report_t, terrain_height) }, { "current_height", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_terrain_report_t, current_height) }, { "spacing", NULL, MAVLINK_TYPE_UINT16_T, 0, 16, offsetof(mavlink_terrain_report_t, spacing) }, { "pending", NULL, MAVLINK_TYPE_UINT16_T, 0, 18, offsetof(mavlink_terrain_report_t, pending) }, { "loaded", NULL, MAVLINK_TYPE_UINT16_T, 0, 20, offsetof(mavlink_terrain_report_t, loaded) }, } }
# 53 "./lib/main/mavlink/common/./mavlink_msg_terrain_report.h"
static inline uint16_t mavlink_msg_terrain_report_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             int32_t lat, int32_t lon, uint16_t spacing, float terrain_height, float current_height, uint16_t pending, uint16_t loaded)
{
# 68 "./lib/main/mavlink/common/./mavlink_msg_terrain_report.h"
 mavlink_terrain_report_t packet;
 packet.lat = lat;
 packet.lon = lon;
 packet.terrain_height = terrain_height;
 packet.current_height = current_height;
 packet.spacing = spacing;
 packet.pending = pending;
 packet.loaded = loaded;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


 msg->msgid = 136;

    return mavlink_finalize_message(msg, system_id, component_id, 22, 1);



}
# 103 "./lib/main/mavlink/common/./mavlink_msg_terrain_report.h"
static inline uint16_t mavlink_msg_terrain_report_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 int32_t lat,int32_t lon,uint16_t spacing,float terrain_height,float current_height,uint16_t pending,uint16_t loaded)
{
# 119 "./lib/main/mavlink/common/./mavlink_msg_terrain_report.h"
 mavlink_terrain_report_t packet;
 packet.lat = lat;
 packet.lon = lon;
 packet.terrain_height = terrain_height;
 packet.current_height = current_height;
 packet.spacing = spacing;
 packet.pending = pending;
 packet.loaded = loaded;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


 msg->msgid = 136;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 22, 1);



}
# 147 "./lib/main/mavlink/common/./mavlink_msg_terrain_report.h"
static inline uint16_t mavlink_msg_terrain_report_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_terrain_report_t* terrain_report)
{
 return mavlink_msg_terrain_report_pack(system_id, component_id, msg, terrain_report->lat, terrain_report->lon, terrain_report->spacing, terrain_report->terrain_height, terrain_report->current_height, terrain_report->pending, terrain_report->loaded);
}
# 161 "./lib/main/mavlink/common/./mavlink_msg_terrain_report.h"
static inline uint16_t mavlink_msg_terrain_report_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_terrain_report_t* terrain_report)
{
 return mavlink_msg_terrain_report_pack_chan(system_id, component_id, chan, msg, terrain_report->lat, terrain_report->lon, terrain_report->spacing, terrain_report->terrain_height, terrain_report->current_height, terrain_report->pending, terrain_report->loaded);
}
# 269 "./lib/main/mavlink/common/./mavlink_msg_terrain_report.h"
static inline int32_t mavlink_msg_terrain_report_get_lat(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 0);
}






static inline int32_t mavlink_msg_terrain_report_get_lon(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 4);
}






static inline uint16_t mavlink_msg_terrain_report_get_spacing(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 16);
}






static inline float mavlink_msg_terrain_report_get_terrain_height(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_terrain_report_get_current_height(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline uint16_t mavlink_msg_terrain_report_get_pending(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 18);
}






static inline uint16_t mavlink_msg_terrain_report_get_loaded(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 20);
}







static inline void mavlink_msg_terrain_report_decode(const mavlink_message_t* msg, mavlink_terrain_report_t* terrain_report)
{
# 351 "./lib/main/mavlink/common/./mavlink_msg_terrain_report.h"
 memcpy(terrain_report, ((const char *)(&((msg)->payload64[0]))), 22);

}
# 760 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_scaled_pressure2.h" 1


#define MAVLINK_MSG_ID_SCALED_PRESSURE2 137

typedef struct __mavlink_scaled_pressure2_t
{
 uint32_t time_boot_ms;
 float press_abs;
 float press_diff;
 int16_t temperature;
} mavlink_scaled_pressure2_t;

#define MAVLINK_MSG_ID_SCALED_PRESSURE2_LEN 14
#define MAVLINK_MSG_ID_137_LEN 14

#define MAVLINK_MSG_ID_SCALED_PRESSURE2_CRC 195
#define MAVLINK_MSG_ID_137_CRC 195



#define MAVLINK_MESSAGE_INFO_SCALED_PRESSURE2 { "SCALED_PRESSURE2", 4, { { "time_boot_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_scaled_pressure2_t, time_boot_ms) }, { "press_abs", NULL, MAVLINK_TYPE_FLOAT, 0, 4, offsetof(mavlink_scaled_pressure2_t, press_abs) }, { "press_diff", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_scaled_pressure2_t, press_diff) }, { "temperature", NULL, MAVLINK_TYPE_INT16_T, 0, 12, offsetof(mavlink_scaled_pressure2_t, temperature) }, } }
# 44 "./lib/main/mavlink/common/./mavlink_msg_scaled_pressure2.h"
static inline uint16_t mavlink_msg_scaled_pressure2_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_boot_ms, float press_abs, float press_diff, int16_t temperature)
{
# 56 "./lib/main/mavlink/common/./mavlink_msg_scaled_pressure2.h"
 mavlink_scaled_pressure2_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.press_abs = press_abs;
 packet.press_diff = press_diff;
 packet.temperature = temperature;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 14);


 msg->msgid = 137;

    return mavlink_finalize_message(msg, system_id, component_id, 14, 195);



}
# 85 "./lib/main/mavlink/common/./mavlink_msg_scaled_pressure2.h"
static inline uint16_t mavlink_msg_scaled_pressure2_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_boot_ms,float press_abs,float press_diff,int16_t temperature)
{
# 98 "./lib/main/mavlink/common/./mavlink_msg_scaled_pressure2.h"
 mavlink_scaled_pressure2_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.press_abs = press_abs;
 packet.press_diff = press_diff;
 packet.temperature = temperature;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 14);


 msg->msgid = 137;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 14, 195);



}
# 123 "./lib/main/mavlink/common/./mavlink_msg_scaled_pressure2.h"
static inline uint16_t mavlink_msg_scaled_pressure2_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_scaled_pressure2_t* scaled_pressure2)
{
 return mavlink_msg_scaled_pressure2_pack(system_id, component_id, msg, scaled_pressure2->time_boot_ms, scaled_pressure2->press_abs, scaled_pressure2->press_diff, scaled_pressure2->temperature);
}
# 137 "./lib/main/mavlink/common/./mavlink_msg_scaled_pressure2.h"
static inline uint16_t mavlink_msg_scaled_pressure2_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_scaled_pressure2_t* scaled_pressure2)
{
 return mavlink_msg_scaled_pressure2_pack_chan(system_id, component_id, chan, msg, scaled_pressure2->time_boot_ms, scaled_pressure2->press_abs, scaled_pressure2->press_diff, scaled_pressure2->temperature);
}
# 230 "./lib/main/mavlink/common/./mavlink_msg_scaled_pressure2.h"
static inline uint32_t mavlink_msg_scaled_pressure2_get_time_boot_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline float mavlink_msg_scaled_pressure2_get_press_abs(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_scaled_pressure2_get_press_diff(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline int16_t mavlink_msg_scaled_pressure2_get_temperature(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 12);
}







static inline void mavlink_msg_scaled_pressure2_decode(const mavlink_message_t* msg, mavlink_scaled_pressure2_t* scaled_pressure2)
{






 memcpy(scaled_pressure2, ((const char *)(&((msg)->payload64[0]))), 14);

}
# 761 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_att_pos_mocap.h" 1


#define MAVLINK_MSG_ID_ATT_POS_MOCAP 138

typedef struct __mavlink_att_pos_mocap_t
{
 uint64_t time_usec;
 float q[4];
 float x;
 float y;
 float z;
} mavlink_att_pos_mocap_t;

#define MAVLINK_MSG_ID_ATT_POS_MOCAP_LEN 36
#define MAVLINK_MSG_ID_138_LEN 36

#define MAVLINK_MSG_ID_ATT_POS_MOCAP_CRC 109
#define MAVLINK_MSG_ID_138_CRC 109

#define MAVLINK_MSG_ATT_POS_MOCAP_FIELD_Q_LEN 4

#define MAVLINK_MESSAGE_INFO_ATT_POS_MOCAP { "ATT_POS_MOCAP", 5, { { "time_usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_att_pos_mocap_t, time_usec) }, { "q", NULL, MAVLINK_TYPE_FLOAT, 4, 8, offsetof(mavlink_att_pos_mocap_t, q) }, { "x", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_att_pos_mocap_t, x) }, { "y", NULL, MAVLINK_TYPE_FLOAT, 0, 28, offsetof(mavlink_att_pos_mocap_t, y) }, { "z", NULL, MAVLINK_TYPE_FLOAT, 0, 32, offsetof(mavlink_att_pos_mocap_t, z) }, } }
# 47 "./lib/main/mavlink/common/./mavlink_msg_att_pos_mocap.h"
static inline uint16_t mavlink_msg_att_pos_mocap_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint64_t time_usec, const float *q, float x, float y, float z)
{
# 59 "./lib/main/mavlink/common/./mavlink_msg_att_pos_mocap.h"
 mavlink_att_pos_mocap_t packet;
 packet.time_usec = time_usec;
 packet.x = x;
 packet.y = y;
 packet.z = z;
 mav_array_memcpy(packet.q, q, sizeof(float)*4);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 36);


 msg->msgid = 138;

    return mavlink_finalize_message(msg, system_id, component_id, 36, 109);



}
# 89 "./lib/main/mavlink/common/./mavlink_msg_att_pos_mocap.h"
static inline uint16_t mavlink_msg_att_pos_mocap_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint64_t time_usec,const float *q,float x,float y,float z)
{
# 102 "./lib/main/mavlink/common/./mavlink_msg_att_pos_mocap.h"
 mavlink_att_pos_mocap_t packet;
 packet.time_usec = time_usec;
 packet.x = x;
 packet.y = y;
 packet.z = z;
 mav_array_memcpy(packet.q, q, sizeof(float)*4);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 36);


 msg->msgid = 138;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 36, 109);



}
# 127 "./lib/main/mavlink/common/./mavlink_msg_att_pos_mocap.h"
static inline uint16_t mavlink_msg_att_pos_mocap_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_att_pos_mocap_t* att_pos_mocap)
{
 return mavlink_msg_att_pos_mocap_pack(system_id, component_id, msg, att_pos_mocap->time_usec, att_pos_mocap->q, att_pos_mocap->x, att_pos_mocap->y, att_pos_mocap->z);
}
# 141 "./lib/main/mavlink/common/./mavlink_msg_att_pos_mocap.h"
static inline uint16_t mavlink_msg_att_pos_mocap_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_att_pos_mocap_t* att_pos_mocap)
{
 return mavlink_msg_att_pos_mocap_pack_chan(system_id, component_id, chan, msg, att_pos_mocap->time_usec, att_pos_mocap->q, att_pos_mocap->x, att_pos_mocap->y, att_pos_mocap->z);
}
# 235 "./lib/main/mavlink/common/./mavlink_msg_att_pos_mocap.h"
static inline uint64_t mavlink_msg_att_pos_mocap_get_time_usec(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint16_t mavlink_msg_att_pos_mocap_get_q(const mavlink_message_t* msg, float *q)
{
 return _MAV_RETURN_float_array(msg, q, 4, 8);
}






static inline float mavlink_msg_att_pos_mocap_get_x(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_att_pos_mocap_get_y(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_att_pos_mocap_get_z(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 32);
}







static inline void mavlink_msg_att_pos_mocap_decode(const mavlink_message_t* msg, mavlink_att_pos_mocap_t* att_pos_mocap)
{







 memcpy(att_pos_mocap, ((const char *)(&((msg)->payload64[0]))), 36);

}
# 762 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_set_actuator_control_target.h" 1


#define MAVLINK_MSG_ID_SET_ACTUATOR_CONTROL_TARGET 139

typedef struct __mavlink_set_actuator_control_target_t
{
 uint64_t time_usec;
 float controls[8];
 uint8_t group_mlx;
 uint8_t target_system;
 uint8_t target_component;
} mavlink_set_actuator_control_target_t;

#define MAVLINK_MSG_ID_SET_ACTUATOR_CONTROL_TARGET_LEN 43
#define MAVLINK_MSG_ID_139_LEN 43

#define MAVLINK_MSG_ID_SET_ACTUATOR_CONTROL_TARGET_CRC 168
#define MAVLINK_MSG_ID_139_CRC 168

#define MAVLINK_MSG_SET_ACTUATOR_CONTROL_TARGET_FIELD_CONTROLS_LEN 8

#define MAVLINK_MESSAGE_INFO_SET_ACTUATOR_CONTROL_TARGET { "SET_ACTUATOR_CONTROL_TARGET", 5, { { "time_usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_set_actuator_control_target_t, time_usec) }, { "controls", NULL, MAVLINK_TYPE_FLOAT, 8, 8, offsetof(mavlink_set_actuator_control_target_t, controls) }, { "group_mlx", NULL, MAVLINK_TYPE_UINT8_T, 0, 40, offsetof(mavlink_set_actuator_control_target_t, group_mlx) }, { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 41, offsetof(mavlink_set_actuator_control_target_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 42, offsetof(mavlink_set_actuator_control_target_t, target_component) }, } }
# 47 "./lib/main/mavlink/common/./mavlink_msg_set_actuator_control_target.h"
static inline uint16_t mavlink_msg_set_actuator_control_target_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint64_t time_usec, uint8_t group_mlx, uint8_t target_system, uint8_t target_component, const float *controls)
{
# 59 "./lib/main/mavlink/common/./mavlink_msg_set_actuator_control_target.h"
 mavlink_set_actuator_control_target_t packet;
 packet.time_usec = time_usec;
 packet.group_mlx = group_mlx;
 packet.target_system = target_system;
 packet.target_component = target_component;
 mav_array_memcpy(packet.controls, controls, sizeof(float)*8);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 43);


 msg->msgid = 139;

    return mavlink_finalize_message(msg, system_id, component_id, 43, 168);



}
# 89 "./lib/main/mavlink/common/./mavlink_msg_set_actuator_control_target.h"
static inline uint16_t mavlink_msg_set_actuator_control_target_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint64_t time_usec,uint8_t group_mlx,uint8_t target_system,uint8_t target_component,const float *controls)
{
# 102 "./lib/main/mavlink/common/./mavlink_msg_set_actuator_control_target.h"
 mavlink_set_actuator_control_target_t packet;
 packet.time_usec = time_usec;
 packet.group_mlx = group_mlx;
 packet.target_system = target_system;
 packet.target_component = target_component;
 mav_array_memcpy(packet.controls, controls, sizeof(float)*8);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 43);


 msg->msgid = 139;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 43, 168);



}
# 127 "./lib/main/mavlink/common/./mavlink_msg_set_actuator_control_target.h"
static inline uint16_t mavlink_msg_set_actuator_control_target_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_set_actuator_control_target_t* set_actuator_control_target)
{
 return mavlink_msg_set_actuator_control_target_pack(system_id, component_id, msg, set_actuator_control_target->time_usec, set_actuator_control_target->group_mlx, set_actuator_control_target->target_system, set_actuator_control_target->target_component, set_actuator_control_target->controls);
}
# 141 "./lib/main/mavlink/common/./mavlink_msg_set_actuator_control_target.h"
static inline uint16_t mavlink_msg_set_actuator_control_target_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_set_actuator_control_target_t* set_actuator_control_target)
{
 return mavlink_msg_set_actuator_control_target_pack_chan(system_id, component_id, chan, msg, set_actuator_control_target->time_usec, set_actuator_control_target->group_mlx, set_actuator_control_target->target_system, set_actuator_control_target->target_component, set_actuator_control_target->controls);
}
# 235 "./lib/main/mavlink/common/./mavlink_msg_set_actuator_control_target.h"
static inline uint64_t mavlink_msg_set_actuator_control_target_get_time_usec(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint8_t mavlink_msg_set_actuator_control_target_get_group_mlx(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[40];
}






static inline uint8_t mavlink_msg_set_actuator_control_target_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[41];
}






static inline uint8_t mavlink_msg_set_actuator_control_target_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[42];
}






static inline uint16_t mavlink_msg_set_actuator_control_target_get_controls(const mavlink_message_t* msg, float *controls)
{
 return _MAV_RETURN_float_array(msg, controls, 8, 8);
}







static inline void mavlink_msg_set_actuator_control_target_decode(const mavlink_message_t* msg, mavlink_set_actuator_control_target_t* set_actuator_control_target)
{







 memcpy(set_actuator_control_target, ((const char *)(&((msg)->payload64[0]))), 43);

}
# 763 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_actuator_control_target.h" 1


#define MAVLINK_MSG_ID_ACTUATOR_CONTROL_TARGET 140

typedef struct __mavlink_actuator_control_target_t
{
 uint64_t time_usec;
 float controls[8];
 uint8_t group_mlx;
} mavlink_actuator_control_target_t;

#define MAVLINK_MSG_ID_ACTUATOR_CONTROL_TARGET_LEN 41
#define MAVLINK_MSG_ID_140_LEN 41

#define MAVLINK_MSG_ID_ACTUATOR_CONTROL_TARGET_CRC 181
#define MAVLINK_MSG_ID_140_CRC 181

#define MAVLINK_MSG_ACTUATOR_CONTROL_TARGET_FIELD_CONTROLS_LEN 8

#define MAVLINK_MESSAGE_INFO_ACTUATOR_CONTROL_TARGET { "ACTUATOR_CONTROL_TARGET", 3, { { "time_usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_actuator_control_target_t, time_usec) }, { "controls", NULL, MAVLINK_TYPE_FLOAT, 8, 8, offsetof(mavlink_actuator_control_target_t, controls) }, { "group_mlx", NULL, MAVLINK_TYPE_UINT8_T, 0, 40, offsetof(mavlink_actuator_control_target_t, group_mlx) }, } }
# 41 "./lib/main/mavlink/common/./mavlink_msg_actuator_control_target.h"
static inline uint16_t mavlink_msg_actuator_control_target_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint64_t time_usec, uint8_t group_mlx, const float *controls)
{







 mavlink_actuator_control_target_t packet;
 packet.time_usec = time_usec;
 packet.group_mlx = group_mlx;
 mav_array_memcpy(packet.controls, controls, sizeof(float)*8);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 41);


 msg->msgid = 140;

    return mavlink_finalize_message(msg, system_id, component_id, 41, 181);



}
# 77 "./lib/main/mavlink/common/./mavlink_msg_actuator_control_target.h"
static inline uint16_t mavlink_msg_actuator_control_target_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint64_t time_usec,uint8_t group_mlx,const float *controls)
{







 mavlink_actuator_control_target_t packet;
 packet.time_usec = time_usec;
 packet.group_mlx = group_mlx;
 mav_array_memcpy(packet.controls, controls, sizeof(float)*8);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 41);


 msg->msgid = 140;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 41, 181);



}
# 111 "./lib/main/mavlink/common/./mavlink_msg_actuator_control_target.h"
static inline uint16_t mavlink_msg_actuator_control_target_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_actuator_control_target_t* actuator_control_target)
{
 return mavlink_msg_actuator_control_target_pack(system_id, component_id, msg, actuator_control_target->time_usec, actuator_control_target->group_mlx, actuator_control_target->controls);
}
# 125 "./lib/main/mavlink/common/./mavlink_msg_actuator_control_target.h"
static inline uint16_t mavlink_msg_actuator_control_target_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_actuator_control_target_t* actuator_control_target)
{
 return mavlink_msg_actuator_control_target_pack_chan(system_id, component_id, chan, msg, actuator_control_target->time_usec, actuator_control_target->group_mlx, actuator_control_target->controls);
}
# 209 "./lib/main/mavlink/common/./mavlink_msg_actuator_control_target.h"
static inline uint64_t mavlink_msg_actuator_control_target_get_time_usec(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint8_t mavlink_msg_actuator_control_target_get_group_mlx(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[40];
}






static inline uint16_t mavlink_msg_actuator_control_target_get_controls(const mavlink_message_t* msg, float *controls)
{
 return _MAV_RETURN_float_array(msg, controls, 8, 8);
}







static inline void mavlink_msg_actuator_control_target_decode(const mavlink_message_t* msg, mavlink_actuator_control_target_t* actuator_control_target)
{





 memcpy(actuator_control_target, ((const char *)(&((msg)->payload64[0]))), 41);

}
# 764 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_battery_status.h" 1


#define MAVLINK_MSG_ID_BATTERY_STATUS 147

typedef struct __mavlink_battery_status_t
{
 int32_t current_consumed;
 int32_t energy_consumed;
 int16_t temperature;
 uint16_t voltages[10];
 int16_t current_battery;
 uint8_t id;
 uint8_t battery_function;
 uint8_t type;
 int8_t battery_remaining;
} mavlink_battery_status_t;

#define MAVLINK_MSG_ID_BATTERY_STATUS_LEN 36
#define MAVLINK_MSG_ID_147_LEN 36

#define MAVLINK_MSG_ID_BATTERY_STATUS_CRC 154
#define MAVLINK_MSG_ID_147_CRC 154

#define MAVLINK_MSG_BATTERY_STATUS_FIELD_VOLTAGES_LEN 10

#define MAVLINK_MESSAGE_INFO_BATTERY_STATUS { "BATTERY_STATUS", 9, { { "current_consumed", NULL, MAVLINK_TYPE_INT32_T, 0, 0, offsetof(mavlink_battery_status_t, current_consumed) }, { "energy_consumed", NULL, MAVLINK_TYPE_INT32_T, 0, 4, offsetof(mavlink_battery_status_t, energy_consumed) }, { "temperature", NULL, MAVLINK_TYPE_INT16_T, 0, 8, offsetof(mavlink_battery_status_t, temperature) }, { "voltages", NULL, MAVLINK_TYPE_UINT16_T, 10, 10, offsetof(mavlink_battery_status_t, voltages) }, { "current_battery", NULL, MAVLINK_TYPE_INT16_T, 0, 30, offsetof(mavlink_battery_status_t, current_battery) }, { "id", NULL, MAVLINK_TYPE_UINT8_T, 0, 32, offsetof(mavlink_battery_status_t, id) }, { "battery_function", NULL, MAVLINK_TYPE_UINT8_T, 0, 33, offsetof(mavlink_battery_status_t, battery_function) }, { "type", NULL, MAVLINK_TYPE_UINT8_T, 0, 34, offsetof(mavlink_battery_status_t, type) }, { "battery_remaining", NULL, MAVLINK_TYPE_INT8_T, 0, 35, offsetof(mavlink_battery_status_t, battery_remaining) }, } }
# 59 "./lib/main/mavlink/common/./mavlink_msg_battery_status.h"
static inline uint16_t mavlink_msg_battery_status_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t id, uint8_t battery_function, uint8_t type, int16_t temperature, const uint16_t *voltages, int16_t current_battery, int32_t current_consumed, int32_t energy_consumed, int8_t battery_remaining)
{
# 75 "./lib/main/mavlink/common/./mavlink_msg_battery_status.h"
 mavlink_battery_status_t packet;
 packet.current_consumed = current_consumed;
 packet.energy_consumed = energy_consumed;
 packet.temperature = temperature;
 packet.current_battery = current_battery;
 packet.id = id;
 packet.battery_function = battery_function;
 packet.type = type;
 packet.battery_remaining = battery_remaining;
 mav_array_memcpy(packet.voltages, voltages, sizeof(uint16_t)*10);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 36);


 msg->msgid = 147;

    return mavlink_finalize_message(msg, system_id, component_id, 36, 154);



}
# 113 "./lib/main/mavlink/common/./mavlink_msg_battery_status.h"
static inline uint16_t mavlink_msg_battery_status_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t id,uint8_t battery_function,uint8_t type,int16_t temperature,const uint16_t *voltages,int16_t current_battery,int32_t current_consumed,int32_t energy_consumed,int8_t battery_remaining)
{
# 130 "./lib/main/mavlink/common/./mavlink_msg_battery_status.h"
 mavlink_battery_status_t packet;
 packet.current_consumed = current_consumed;
 packet.energy_consumed = energy_consumed;
 packet.temperature = temperature;
 packet.current_battery = current_battery;
 packet.id = id;
 packet.battery_function = battery_function;
 packet.type = type;
 packet.battery_remaining = battery_remaining;
 mav_array_memcpy(packet.voltages, voltages, sizeof(uint16_t)*10);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 36);


 msg->msgid = 147;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 36, 154);



}
# 159 "./lib/main/mavlink/common/./mavlink_msg_battery_status.h"
static inline uint16_t mavlink_msg_battery_status_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_battery_status_t* battery_status)
{
 return mavlink_msg_battery_status_pack(system_id, component_id, msg, battery_status->id, battery_status->battery_function, battery_status->type, battery_status->temperature, battery_status->voltages, battery_status->current_battery, battery_status->current_consumed, battery_status->energy_consumed, battery_status->battery_remaining);
}
# 173 "./lib/main/mavlink/common/./mavlink_msg_battery_status.h"
static inline uint16_t mavlink_msg_battery_status_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_battery_status_t* battery_status)
{
 return mavlink_msg_battery_status_pack_chan(system_id, component_id, chan, msg, battery_status->id, battery_status->battery_function, battery_status->type, battery_status->temperature, battery_status->voltages, battery_status->current_battery, battery_status->current_consumed, battery_status->energy_consumed, battery_status->battery_remaining);
}
# 287 "./lib/main/mavlink/common/./mavlink_msg_battery_status.h"
static inline uint8_t mavlink_msg_battery_status_get_id(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[32];
}






static inline uint8_t mavlink_msg_battery_status_get_battery_function(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[33];
}






static inline uint8_t mavlink_msg_battery_status_get_type(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[34];
}






static inline int16_t mavlink_msg_battery_status_get_temperature(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 8);
}






static inline uint16_t mavlink_msg_battery_status_get_voltages(const mavlink_message_t* msg, uint16_t *voltages)
{
 return _MAV_RETURN_uint16_t_array(msg, voltages, 10, 10);
}






static inline int16_t mavlink_msg_battery_status_get_current_battery(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 30);
}






static inline int32_t mavlink_msg_battery_status_get_current_consumed(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 0);
}






static inline int32_t mavlink_msg_battery_status_get_energy_consumed(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 4);
}






static inline int8_t mavlink_msg_battery_status_get_battery_remaining(const mavlink_message_t* msg)
{
 return (const int8_t)((const char *)(&((msg)->payload64[0])))[35];
}







static inline void mavlink_msg_battery_status_decode(const mavlink_message_t* msg, mavlink_battery_status_t* battery_status)
{
# 391 "./lib/main/mavlink/common/./mavlink_msg_battery_status.h"
 memcpy(battery_status, ((const char *)(&((msg)->payload64[0]))), 36);

}
# 765 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_autopilot_version.h" 1


#define MAVLINK_MSG_ID_AUTOPILOT_VERSION 148

typedef struct __mavlink_autopilot_version_t
{
 uint64_t capabilities;
 uint64_t uid;
 uint32_t flight_sw_version;
 uint32_t middleware_sw_version;
 uint32_t os_sw_version;
 uint32_t board_version;
 uint16_t vendor_id;
 uint16_t product_id;
 uint8_t flight_custom_version[8];
 uint8_t middleware_custom_version[8];
 uint8_t os_custom_version[8];
} mavlink_autopilot_version_t;

#define MAVLINK_MSG_ID_AUTOPILOT_VERSION_LEN 60
#define MAVLINK_MSG_ID_148_LEN 60

#define MAVLINK_MSG_ID_AUTOPILOT_VERSION_CRC 178
#define MAVLINK_MSG_ID_148_CRC 178

#define MAVLINK_MSG_AUTOPILOT_VERSION_FIELD_FLIGHT_CUSTOM_VERSION_LEN 8
#define MAVLINK_MSG_AUTOPILOT_VERSION_FIELD_MIDDLEWARE_CUSTOM_VERSION_LEN 8
#define MAVLINK_MSG_AUTOPILOT_VERSION_FIELD_OS_CUSTOM_VERSION_LEN 8

#define MAVLINK_MESSAGE_INFO_AUTOPILOT_VERSION { "AUTOPILOT_VERSION", 11, { { "capabilities", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_autopilot_version_t, capabilities) }, { "uid", NULL, MAVLINK_TYPE_UINT64_T, 0, 8, offsetof(mavlink_autopilot_version_t, uid) }, { "flight_sw_version", NULL, MAVLINK_TYPE_UINT32_T, 0, 16, offsetof(mavlink_autopilot_version_t, flight_sw_version) }, { "middleware_sw_version", NULL, MAVLINK_TYPE_UINT32_T, 0, 20, offsetof(mavlink_autopilot_version_t, middleware_sw_version) }, { "os_sw_version", NULL, MAVLINK_TYPE_UINT32_T, 0, 24, offsetof(mavlink_autopilot_version_t, os_sw_version) }, { "board_version", NULL, MAVLINK_TYPE_UINT32_T, 0, 28, offsetof(mavlink_autopilot_version_t, board_version) }, { "vendor_id", NULL, MAVLINK_TYPE_UINT16_T, 0, 32, offsetof(mavlink_autopilot_version_t, vendor_id) }, { "product_id", NULL, MAVLINK_TYPE_UINT16_T, 0, 34, offsetof(mavlink_autopilot_version_t, product_id) }, { "flight_custom_version", NULL, MAVLINK_TYPE_UINT8_T, 8, 36, offsetof(mavlink_autopilot_version_t, flight_custom_version) }, { "middleware_custom_version", NULL, MAVLINK_TYPE_UINT8_T, 8, 44, offsetof(mavlink_autopilot_version_t, middleware_custom_version) }, { "os_custom_version", NULL, MAVLINK_TYPE_UINT8_T, 8, 52, offsetof(mavlink_autopilot_version_t, os_custom_version) }, } }
# 67 "./lib/main/mavlink/common/./mavlink_msg_autopilot_version.h"
static inline uint16_t mavlink_msg_autopilot_version_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint64_t capabilities, uint32_t flight_sw_version, uint32_t middleware_sw_version, uint32_t os_sw_version, uint32_t board_version, const uint8_t *flight_custom_version, const uint8_t *middleware_custom_version, const uint8_t *os_custom_version, uint16_t vendor_id, uint16_t product_id, uint64_t uid)
{
# 85 "./lib/main/mavlink/common/./mavlink_msg_autopilot_version.h"
 mavlink_autopilot_version_t packet;
 packet.capabilities = capabilities;
 packet.uid = uid;
 packet.flight_sw_version = flight_sw_version;
 packet.middleware_sw_version = middleware_sw_version;
 packet.os_sw_version = os_sw_version;
 packet.board_version = board_version;
 packet.vendor_id = vendor_id;
 packet.product_id = product_id;
 mav_array_memcpy(packet.flight_custom_version, flight_custom_version, sizeof(uint8_t)*8);
 mav_array_memcpy(packet.middleware_custom_version, middleware_custom_version, sizeof(uint8_t)*8);
 mav_array_memcpy(packet.os_custom_version, os_custom_version, sizeof(uint8_t)*8);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 60);


 msg->msgid = 148;

    return mavlink_finalize_message(msg, system_id, component_id, 60, 178);



}
# 127 "./lib/main/mavlink/common/./mavlink_msg_autopilot_version.h"
static inline uint16_t mavlink_msg_autopilot_version_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint64_t capabilities,uint32_t flight_sw_version,uint32_t middleware_sw_version,uint32_t os_sw_version,uint32_t board_version,const uint8_t *flight_custom_version,const uint8_t *middleware_custom_version,const uint8_t *os_custom_version,uint16_t vendor_id,uint16_t product_id,uint64_t uid)
{
# 146 "./lib/main/mavlink/common/./mavlink_msg_autopilot_version.h"
 mavlink_autopilot_version_t packet;
 packet.capabilities = capabilities;
 packet.uid = uid;
 packet.flight_sw_version = flight_sw_version;
 packet.middleware_sw_version = middleware_sw_version;
 packet.os_sw_version = os_sw_version;
 packet.board_version = board_version;
 packet.vendor_id = vendor_id;
 packet.product_id = product_id;
 mav_array_memcpy(packet.flight_custom_version, flight_custom_version, sizeof(uint8_t)*8);
 mav_array_memcpy(packet.middleware_custom_version, middleware_custom_version, sizeof(uint8_t)*8);
 mav_array_memcpy(packet.os_custom_version, os_custom_version, sizeof(uint8_t)*8);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 60);


 msg->msgid = 148;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 60, 178);



}
# 177 "./lib/main/mavlink/common/./mavlink_msg_autopilot_version.h"
static inline uint16_t mavlink_msg_autopilot_version_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_autopilot_version_t* autopilot_version)
{
 return mavlink_msg_autopilot_version_pack(system_id, component_id, msg, autopilot_version->capabilities, autopilot_version->flight_sw_version, autopilot_version->middleware_sw_version, autopilot_version->os_sw_version, autopilot_version->board_version, autopilot_version->flight_custom_version, autopilot_version->middleware_custom_version, autopilot_version->os_custom_version, autopilot_version->vendor_id, autopilot_version->product_id, autopilot_version->uid);
}
# 191 "./lib/main/mavlink/common/./mavlink_msg_autopilot_version.h"
static inline uint16_t mavlink_msg_autopilot_version_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_autopilot_version_t* autopilot_version)
{
 return mavlink_msg_autopilot_version_pack_chan(system_id, component_id, chan, msg, autopilot_version->capabilities, autopilot_version->flight_sw_version, autopilot_version->middleware_sw_version, autopilot_version->os_sw_version, autopilot_version->board_version, autopilot_version->flight_custom_version, autopilot_version->middleware_custom_version, autopilot_version->os_custom_version, autopilot_version->vendor_id, autopilot_version->product_id, autopilot_version->uid);
}
# 315 "./lib/main/mavlink/common/./mavlink_msg_autopilot_version.h"
static inline uint64_t mavlink_msg_autopilot_version_get_capabilities(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint32_t mavlink_msg_autopilot_version_get_flight_sw_version(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 16);
}






static inline uint32_t mavlink_msg_autopilot_version_get_middleware_sw_version(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 20);
}






static inline uint32_t mavlink_msg_autopilot_version_get_os_sw_version(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 24);
}






static inline uint32_t mavlink_msg_autopilot_version_get_board_version(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 28);
}






static inline uint16_t mavlink_msg_autopilot_version_get_flight_custom_version(const mavlink_message_t* msg, uint8_t *flight_custom_version)
{
 return _MAV_RETURN_uint8_t_array(msg, flight_custom_version, 8, 36);
}






static inline uint16_t mavlink_msg_autopilot_version_get_middleware_custom_version(const mavlink_message_t* msg, uint8_t *middleware_custom_version)
{
 return _MAV_RETURN_uint8_t_array(msg, middleware_custom_version, 8, 44);
}






static inline uint16_t mavlink_msg_autopilot_version_get_os_custom_version(const mavlink_message_t* msg, uint8_t *os_custom_version)
{
 return _MAV_RETURN_uint8_t_array(msg, os_custom_version, 8, 52);
}






static inline uint16_t mavlink_msg_autopilot_version_get_vendor_id(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 32);
}






static inline uint16_t mavlink_msg_autopilot_version_get_product_id(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 34);
}






static inline uint64_t mavlink_msg_autopilot_version_get_uid(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 8);
}







static inline void mavlink_msg_autopilot_version_decode(const mavlink_message_t* msg, mavlink_autopilot_version_t* autopilot_version)
{
# 441 "./lib/main/mavlink/common/./mavlink_msg_autopilot_version.h"
 memcpy(autopilot_version, ((const char *)(&((msg)->payload64[0]))), 60);

}
# 766 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_v2_extension.h" 1


#define MAVLINK_MSG_ID_V2_EXTENSION 248

typedef struct __mavlink_v2_extension_t
{
 uint16_t message_type;
 uint8_t target_network;
 uint8_t target_system;
 uint8_t target_component;
 uint8_t payload[249];
} mavlink_v2_extension_t;

#define MAVLINK_MSG_ID_V2_EXTENSION_LEN 254
#define MAVLINK_MSG_ID_248_LEN 254

#define MAVLINK_MSG_ID_V2_EXTENSION_CRC 8
#define MAVLINK_MSG_ID_248_CRC 8

#define MAVLINK_MSG_V2_EXTENSION_FIELD_PAYLOAD_LEN 249

#define MAVLINK_MESSAGE_INFO_V2_EXTENSION { "V2_EXTENSION", 5, { { "message_type", NULL, MAVLINK_TYPE_UINT16_T, 0, 0, offsetof(mavlink_v2_extension_t, message_type) }, { "target_network", NULL, MAVLINK_TYPE_UINT8_T, 0, 2, offsetof(mavlink_v2_extension_t, target_network) }, { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 3, offsetof(mavlink_v2_extension_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 4, offsetof(mavlink_v2_extension_t, target_component) }, { "payload", NULL, MAVLINK_TYPE_UINT8_T, 249, 5, offsetof(mavlink_v2_extension_t, payload) }, } }
# 47 "./lib/main/mavlink/common/./mavlink_msg_v2_extension.h"
static inline uint16_t mavlink_msg_v2_extension_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_network, uint8_t target_system, uint8_t target_component, uint16_t message_type, const uint8_t *payload)
{
# 59 "./lib/main/mavlink/common/./mavlink_msg_v2_extension.h"
 mavlink_v2_extension_t packet;
 packet.message_type = message_type;
 packet.target_network = target_network;
 packet.target_system = target_system;
 packet.target_component = target_component;
 mav_array_memcpy(packet.payload, payload, sizeof(uint8_t)*249);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 254);


 msg->msgid = 248;

    return mavlink_finalize_message(msg, system_id, component_id, 254, 8);



}
# 89 "./lib/main/mavlink/common/./mavlink_msg_v2_extension.h"
static inline uint16_t mavlink_msg_v2_extension_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_network,uint8_t target_system,uint8_t target_component,uint16_t message_type,const uint8_t *payload)
{
# 102 "./lib/main/mavlink/common/./mavlink_msg_v2_extension.h"
 mavlink_v2_extension_t packet;
 packet.message_type = message_type;
 packet.target_network = target_network;
 packet.target_system = target_system;
 packet.target_component = target_component;
 mav_array_memcpy(packet.payload, payload, sizeof(uint8_t)*249);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 254);


 msg->msgid = 248;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 254, 8);



}
# 127 "./lib/main/mavlink/common/./mavlink_msg_v2_extension.h"
static inline uint16_t mavlink_msg_v2_extension_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_v2_extension_t* v2_extension)
{
 return mavlink_msg_v2_extension_pack(system_id, component_id, msg, v2_extension->target_network, v2_extension->target_system, v2_extension->target_component, v2_extension->message_type, v2_extension->payload);
}
# 141 "./lib/main/mavlink/common/./mavlink_msg_v2_extension.h"
static inline uint16_t mavlink_msg_v2_extension_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_v2_extension_t* v2_extension)
{
 return mavlink_msg_v2_extension_pack_chan(system_id, component_id, chan, msg, v2_extension->target_network, v2_extension->target_system, v2_extension->target_component, v2_extension->message_type, v2_extension->payload);
}
# 235 "./lib/main/mavlink/common/./mavlink_msg_v2_extension.h"
static inline uint8_t mavlink_msg_v2_extension_get_target_network(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}






static inline uint8_t mavlink_msg_v2_extension_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[3];
}






static inline uint8_t mavlink_msg_v2_extension_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[4];
}






static inline uint16_t mavlink_msg_v2_extension_get_message_type(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 0);
}






static inline uint16_t mavlink_msg_v2_extension_get_payload(const mavlink_message_t* msg, uint8_t *payload)
{
 return _MAV_RETURN_uint8_t_array(msg, payload, 249, 5);
}







static inline void mavlink_msg_v2_extension_decode(const mavlink_message_t* msg, mavlink_v2_extension_t* v2_extension)
{







 memcpy(v2_extension, ((const char *)(&((msg)->payload64[0]))), 254);

}
# 767 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_memory_vect.h" 1


#define MAVLINK_MSG_ID_MEMORY_VECT 249

typedef struct __mavlink_memory_vect_t
{
 uint16_t address;
 uint8_t ver;
 uint8_t type;
 int8_t value[32];
} mavlink_memory_vect_t;

#define MAVLINK_MSG_ID_MEMORY_VECT_LEN 36
#define MAVLINK_MSG_ID_249_LEN 36

#define MAVLINK_MSG_ID_MEMORY_VECT_CRC 204
#define MAVLINK_MSG_ID_249_CRC 204

#define MAVLINK_MSG_MEMORY_VECT_FIELD_VALUE_LEN 32

#define MAVLINK_MESSAGE_INFO_MEMORY_VECT { "MEMORY_VECT", 4, { { "address", NULL, MAVLINK_TYPE_UINT16_T, 0, 0, offsetof(mavlink_memory_vect_t, address) }, { "ver", NULL, MAVLINK_TYPE_UINT8_T, 0, 2, offsetof(mavlink_memory_vect_t, ver) }, { "type", NULL, MAVLINK_TYPE_UINT8_T, 0, 3, offsetof(mavlink_memory_vect_t, type) }, { "value", NULL, MAVLINK_TYPE_INT8_T, 32, 4, offsetof(mavlink_memory_vect_t, value) }, } }
# 44 "./lib/main/mavlink/common/./mavlink_msg_memory_vect.h"
static inline uint16_t mavlink_msg_memory_vect_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint16_t address, uint8_t ver, uint8_t type, const int8_t *value)
{
# 55 "./lib/main/mavlink/common/./mavlink_msg_memory_vect.h"
 mavlink_memory_vect_t packet;
 packet.address = address;
 packet.ver = ver;
 packet.type = type;
 mav_array_memcpy(packet.value, value, sizeof(int8_t)*32);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 36);


 msg->msgid = 249;

    return mavlink_finalize_message(msg, system_id, component_id, 36, 204);



}
# 83 "./lib/main/mavlink/common/./mavlink_msg_memory_vect.h"
static inline uint16_t mavlink_msg_memory_vect_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint16_t address,uint8_t ver,uint8_t type,const int8_t *value)
{
# 95 "./lib/main/mavlink/common/./mavlink_msg_memory_vect.h"
 mavlink_memory_vect_t packet;
 packet.address = address;
 packet.ver = ver;
 packet.type = type;
 mav_array_memcpy(packet.value, value, sizeof(int8_t)*32);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 36);


 msg->msgid = 249;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 36, 204);



}
# 119 "./lib/main/mavlink/common/./mavlink_msg_memory_vect.h"
static inline uint16_t mavlink_msg_memory_vect_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_memory_vect_t* memory_vect)
{
 return mavlink_msg_memory_vect_pack(system_id, component_id, msg, memory_vect->address, memory_vect->ver, memory_vect->type, memory_vect->value);
}
# 133 "./lib/main/mavlink/common/./mavlink_msg_memory_vect.h"
static inline uint16_t mavlink_msg_memory_vect_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_memory_vect_t* memory_vect)
{
 return mavlink_msg_memory_vect_pack_chan(system_id, component_id, chan, msg, memory_vect->address, memory_vect->ver, memory_vect->type, memory_vect->value);
}
# 222 "./lib/main/mavlink/common/./mavlink_msg_memory_vect.h"
static inline uint16_t mavlink_msg_memory_vect_get_address(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 0);
}






static inline uint8_t mavlink_msg_memory_vect_get_ver(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}






static inline uint8_t mavlink_msg_memory_vect_get_type(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[3];
}






static inline uint16_t mavlink_msg_memory_vect_get_value(const mavlink_message_t* msg, int8_t *value)
{
 return _MAV_RETURN_int8_t_array(msg, value, 32, 4);
}







static inline void mavlink_msg_memory_vect_decode(const mavlink_message_t* msg, mavlink_memory_vect_t* memory_vect)
{






 memcpy(memory_vect, ((const char *)(&((msg)->payload64[0]))), 36);

}
# 768 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_debug_vect.h" 1


#define MAVLINK_MSG_ID_DEBUG_VECT 250

typedef struct __mavlink_debug_vect_t
{
 uint64_t time_usec;
 float x;
 float y;
 float z;
 char name[10];
} mavlink_debug_vect_t;

#define MAVLINK_MSG_ID_DEBUG_VECT_LEN 30
#define MAVLINK_MSG_ID_250_LEN 30

#define MAVLINK_MSG_ID_DEBUG_VECT_CRC 49
#define MAVLINK_MSG_ID_250_CRC 49

#define MAVLINK_MSG_DEBUG_VECT_FIELD_NAME_LEN 10

#define MAVLINK_MESSAGE_INFO_DEBUG_VECT { "DEBUG_VECT", 5, { { "time_usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_debug_vect_t, time_usec) }, { "x", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_debug_vect_t, x) }, { "y", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_debug_vect_t, y) }, { "z", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_debug_vect_t, z) }, { "name", NULL, MAVLINK_TYPE_CHAR, 10, 20, offsetof(mavlink_debug_vect_t, name) }, } }
# 47 "./lib/main/mavlink/common/./mavlink_msg_debug_vect.h"
static inline uint16_t mavlink_msg_debug_vect_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             const char *name, uint64_t time_usec, float x, float y, float z)
{
# 59 "./lib/main/mavlink/common/./mavlink_msg_debug_vect.h"
 mavlink_debug_vect_t packet;
 packet.time_usec = time_usec;
 packet.x = x;
 packet.y = y;
 packet.z = z;
 mav_array_memcpy(packet.name, name, sizeof(char)*10);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 30);


 msg->msgid = 250;

    return mavlink_finalize_message(msg, system_id, component_id, 30, 49);



}
# 89 "./lib/main/mavlink/common/./mavlink_msg_debug_vect.h"
static inline uint16_t mavlink_msg_debug_vect_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 const char *name,uint64_t time_usec,float x,float y,float z)
{
# 102 "./lib/main/mavlink/common/./mavlink_msg_debug_vect.h"
 mavlink_debug_vect_t packet;
 packet.time_usec = time_usec;
 packet.x = x;
 packet.y = y;
 packet.z = z;
 mav_array_memcpy(packet.name, name, sizeof(char)*10);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 30);


 msg->msgid = 250;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 30, 49);



}
# 127 "./lib/main/mavlink/common/./mavlink_msg_debug_vect.h"
static inline uint16_t mavlink_msg_debug_vect_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_debug_vect_t* debug_vect)
{
 return mavlink_msg_debug_vect_pack(system_id, component_id, msg, debug_vect->name, debug_vect->time_usec, debug_vect->x, debug_vect->y, debug_vect->z);
}
# 141 "./lib/main/mavlink/common/./mavlink_msg_debug_vect.h"
static inline uint16_t mavlink_msg_debug_vect_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_debug_vect_t* debug_vect)
{
 return mavlink_msg_debug_vect_pack_chan(system_id, component_id, chan, msg, debug_vect->name, debug_vect->time_usec, debug_vect->x, debug_vect->y, debug_vect->z);
}
# 235 "./lib/main/mavlink/common/./mavlink_msg_debug_vect.h"
static inline uint16_t mavlink_msg_debug_vect_get_name(const mavlink_message_t* msg, char *name)
{
 return _MAV_RETURN_char_array(msg, name, 10, 20);
}






static inline uint64_t mavlink_msg_debug_vect_get_time_usec(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}






static inline float mavlink_msg_debug_vect_get_x(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_debug_vect_get_y(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_debug_vect_get_z(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 16);
}







static inline void mavlink_msg_debug_vect_decode(const mavlink_message_t* msg, mavlink_debug_vect_t* debug_vect)
{







 memcpy(debug_vect, ((const char *)(&((msg)->payload64[0]))), 30);

}
# 769 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_named_value_float.h" 1


#define MAVLINK_MSG_ID_NAMED_VALUE_FLOAT 251

typedef struct __mavlink_named_value_float_t
{
 uint32_t time_boot_ms;
 float value;
 char name[10];
} mavlink_named_value_float_t;

#define MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_LEN 18
#define MAVLINK_MSG_ID_251_LEN 18

#define MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_CRC 170
#define MAVLINK_MSG_ID_251_CRC 170

#define MAVLINK_MSG_NAMED_VALUE_FLOAT_FIELD_NAME_LEN 10

#define MAVLINK_MESSAGE_INFO_NAMED_VALUE_FLOAT { "NAMED_VALUE_FLOAT", 3, { { "time_boot_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_named_value_float_t, time_boot_ms) }, { "value", NULL, MAVLINK_TYPE_FLOAT, 0, 4, offsetof(mavlink_named_value_float_t, value) }, { "name", NULL, MAVLINK_TYPE_CHAR, 10, 8, offsetof(mavlink_named_value_float_t, name) }, } }
# 41 "./lib/main/mavlink/common/./mavlink_msg_named_value_float.h"
static inline uint16_t mavlink_msg_named_value_float_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_boot_ms, const char *name, float value)
{







 mavlink_named_value_float_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.value = value;
 mav_array_memcpy(packet.name, name, sizeof(char)*10);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 18);


 msg->msgid = 251;

    return mavlink_finalize_message(msg, system_id, component_id, 18, 170);



}
# 77 "./lib/main/mavlink/common/./mavlink_msg_named_value_float.h"
static inline uint16_t mavlink_msg_named_value_float_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_boot_ms,const char *name,float value)
{







 mavlink_named_value_float_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.value = value;
 mav_array_memcpy(packet.name, name, sizeof(char)*10);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 18);


 msg->msgid = 251;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 18, 170);



}
# 111 "./lib/main/mavlink/common/./mavlink_msg_named_value_float.h"
static inline uint16_t mavlink_msg_named_value_float_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_named_value_float_t* named_value_float)
{
 return mavlink_msg_named_value_float_pack(system_id, component_id, msg, named_value_float->time_boot_ms, named_value_float->name, named_value_float->value);
}
# 125 "./lib/main/mavlink/common/./mavlink_msg_named_value_float.h"
static inline uint16_t mavlink_msg_named_value_float_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_named_value_float_t* named_value_float)
{
 return mavlink_msg_named_value_float_pack_chan(system_id, component_id, chan, msg, named_value_float->time_boot_ms, named_value_float->name, named_value_float->value);
}
# 209 "./lib/main/mavlink/common/./mavlink_msg_named_value_float.h"
static inline uint32_t mavlink_msg_named_value_float_get_time_boot_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint16_t mavlink_msg_named_value_float_get_name(const mavlink_message_t* msg, char *name)
{
 return _MAV_RETURN_char_array(msg, name, 10, 8);
}






static inline float mavlink_msg_named_value_float_get_value(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 4);
}







static inline void mavlink_msg_named_value_float_decode(const mavlink_message_t* msg, mavlink_named_value_float_t* named_value_float)
{





 memcpy(named_value_float, ((const char *)(&((msg)->payload64[0]))), 18);

}
# 770 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_named_value_int.h" 1


#define MAVLINK_MSG_ID_NAMED_VALUE_INT 252

typedef struct __mavlink_named_value_int_t
{
 uint32_t time_boot_ms;
 int32_t value;
 char name[10];
} mavlink_named_value_int_t;

#define MAVLINK_MSG_ID_NAMED_VALUE_INT_LEN 18
#define MAVLINK_MSG_ID_252_LEN 18

#define MAVLINK_MSG_ID_NAMED_VALUE_INT_CRC 44
#define MAVLINK_MSG_ID_252_CRC 44

#define MAVLINK_MSG_NAMED_VALUE_INT_FIELD_NAME_LEN 10

#define MAVLINK_MESSAGE_INFO_NAMED_VALUE_INT { "NAMED_VALUE_INT", 3, { { "time_boot_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_named_value_int_t, time_boot_ms) }, { "value", NULL, MAVLINK_TYPE_INT32_T, 0, 4, offsetof(mavlink_named_value_int_t, value) }, { "name", NULL, MAVLINK_TYPE_CHAR, 10, 8, offsetof(mavlink_named_value_int_t, name) }, } }
# 41 "./lib/main/mavlink/common/./mavlink_msg_named_value_int.h"
static inline uint16_t mavlink_msg_named_value_int_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_boot_ms, const char *name, int32_t value)
{







 mavlink_named_value_int_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.value = value;
 mav_array_memcpy(packet.name, name, sizeof(char)*10);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 18);


 msg->msgid = 252;

    return mavlink_finalize_message(msg, system_id, component_id, 18, 44);



}
# 77 "./lib/main/mavlink/common/./mavlink_msg_named_value_int.h"
static inline uint16_t mavlink_msg_named_value_int_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_boot_ms,const char *name,int32_t value)
{







 mavlink_named_value_int_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.value = value;
 mav_array_memcpy(packet.name, name, sizeof(char)*10);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 18);


 msg->msgid = 252;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 18, 44);



}
# 111 "./lib/main/mavlink/common/./mavlink_msg_named_value_int.h"
static inline uint16_t mavlink_msg_named_value_int_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_named_value_int_t* named_value_int)
{
 return mavlink_msg_named_value_int_pack(system_id, component_id, msg, named_value_int->time_boot_ms, named_value_int->name, named_value_int->value);
}
# 125 "./lib/main/mavlink/common/./mavlink_msg_named_value_int.h"
static inline uint16_t mavlink_msg_named_value_int_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_named_value_int_t* named_value_int)
{
 return mavlink_msg_named_value_int_pack_chan(system_id, component_id, chan, msg, named_value_int->time_boot_ms, named_value_int->name, named_value_int->value);
}
# 209 "./lib/main/mavlink/common/./mavlink_msg_named_value_int.h"
static inline uint32_t mavlink_msg_named_value_int_get_time_boot_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint16_t mavlink_msg_named_value_int_get_name(const mavlink_message_t* msg, char *name)
{
 return _MAV_RETURN_char_array(msg, name, 10, 8);
}






static inline int32_t mavlink_msg_named_value_int_get_value(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 4);
}







static inline void mavlink_msg_named_value_int_decode(const mavlink_message_t* msg, mavlink_named_value_int_t* named_value_int)
{





 memcpy(named_value_int, ((const char *)(&((msg)->payload64[0]))), 18);

}
# 771 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_statustext.h" 1


#define MAVLINK_MSG_ID_STATUSTEXT 253

typedef struct __mavlink_statustext_t
{
 uint8_t severity;
 char text[50];
} mavlink_statustext_t;

#define MAVLINK_MSG_ID_STATUSTEXT_LEN 51
#define MAVLINK_MSG_ID_253_LEN 51

#define MAVLINK_MSG_ID_STATUSTEXT_CRC 83
#define MAVLINK_MSG_ID_253_CRC 83

#define MAVLINK_MSG_STATUSTEXT_FIELD_TEXT_LEN 50

#define MAVLINK_MESSAGE_INFO_STATUSTEXT { "STATUSTEXT", 2, { { "severity", NULL, MAVLINK_TYPE_UINT8_T, 0, 0, offsetof(mavlink_statustext_t, severity) }, { "text", NULL, MAVLINK_TYPE_CHAR, 50, 1, offsetof(mavlink_statustext_t, text) }, } }
# 38 "./lib/main/mavlink/common/./mavlink_msg_statustext.h"
static inline uint16_t mavlink_msg_statustext_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t severity, const char *text)
{






 mavlink_statustext_t packet;
 packet.severity = severity;
 mav_array_memcpy(packet.text, text, sizeof(char)*50);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 51);


 msg->msgid = 253;

    return mavlink_finalize_message(msg, system_id, component_id, 51, 83);



}
# 71 "./lib/main/mavlink/common/./mavlink_msg_statustext.h"
static inline uint16_t mavlink_msg_statustext_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t severity,const char *text)
{






 mavlink_statustext_t packet;
 packet.severity = severity;
 mav_array_memcpy(packet.text, text, sizeof(char)*50);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 51);


 msg->msgid = 253;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 51, 83);



}
# 103 "./lib/main/mavlink/common/./mavlink_msg_statustext.h"
static inline uint16_t mavlink_msg_statustext_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_statustext_t* statustext)
{
 return mavlink_msg_statustext_pack(system_id, component_id, msg, statustext->severity, statustext->text);
}
# 117 "./lib/main/mavlink/common/./mavlink_msg_statustext.h"
static inline uint16_t mavlink_msg_statustext_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_statustext_t* statustext)
{
 return mavlink_msg_statustext_pack_chan(system_id, component_id, chan, msg, statustext->severity, statustext->text);
}
# 196 "./lib/main/mavlink/common/./mavlink_msg_statustext.h"
static inline uint8_t mavlink_msg_statustext_get_severity(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint16_t mavlink_msg_statustext_get_text(const mavlink_message_t* msg, char *text)
{
 return _MAV_RETURN_char_array(msg, text, 50, 1);
}







static inline void mavlink_msg_statustext_decode(const mavlink_message_t* msg, mavlink_statustext_t* statustext)
{




 memcpy(statustext, ((const char *)(&((msg)->payload64[0]))), 51);

}
# 772 "./lib/main/mavlink/common/common.h" 2
# 1 "./lib/main/mavlink/common/./mavlink_msg_debug.h" 1


#define MAVLINK_MSG_ID_DEBUG 254

typedef struct __mavlink_debug_t
{
 uint32_t time_boot_ms;
 float value;
 uint8_t ind;
} mavlink_debug_t;

#define MAVLINK_MSG_ID_DEBUG_LEN 9
#define MAVLINK_MSG_ID_254_LEN 9

#define MAVLINK_MSG_ID_DEBUG_CRC 46
#define MAVLINK_MSG_ID_254_CRC 46



#define MAVLINK_MESSAGE_INFO_DEBUG { "DEBUG", 3, { { "time_boot_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_debug_t, time_boot_ms) }, { "value", NULL, MAVLINK_TYPE_FLOAT, 0, 4, offsetof(mavlink_debug_t, value) }, { "ind", NULL, MAVLINK_TYPE_UINT8_T, 0, 8, offsetof(mavlink_debug_t, ind) }, } }
# 41 "./lib/main/mavlink/common/./mavlink_msg_debug.h"
static inline uint16_t mavlink_msg_debug_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_boot_ms, uint8_t ind, float value)
{
# 52 "./lib/main/mavlink/common/./mavlink_msg_debug.h"
 mavlink_debug_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.value = value;
 packet.ind = ind;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 9);


 msg->msgid = 254;

    return mavlink_finalize_message(msg, system_id, component_id, 9, 46);



}
# 79 "./lib/main/mavlink/common/./mavlink_msg_debug.h"
static inline uint16_t mavlink_msg_debug_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_boot_ms,uint8_t ind,float value)
{
# 91 "./lib/main/mavlink/common/./mavlink_msg_debug.h"
 mavlink_debug_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.value = value;
 packet.ind = ind;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 9);


 msg->msgid = 254;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 9, 46);



}
# 115 "./lib/main/mavlink/common/./mavlink_msg_debug.h"
static inline uint16_t mavlink_msg_debug_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_debug_t* debug)
{
 return mavlink_msg_debug_pack(system_id, component_id, msg, debug->time_boot_ms, debug->ind, debug->value);
}
# 129 "./lib/main/mavlink/common/./mavlink_msg_debug.h"
static inline uint16_t mavlink_msg_debug_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_debug_t* debug)
{
 return mavlink_msg_debug_pack_chan(system_id, component_id, chan, msg, debug->time_boot_ms, debug->ind, debug->value);
}
# 217 "./lib/main/mavlink/common/./mavlink_msg_debug.h"
static inline uint32_t mavlink_msg_debug_get_time_boot_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_debug_get_ind(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[8];
}






static inline float mavlink_msg_debug_get_value(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 4);
}







static inline void mavlink_msg_debug_decode(const mavlink_message_t* msg, mavlink_debug_t* debug)
{





 memcpy(debug, ((const char *)(&((msg)->payload64[0]))), 9);

}
# 773 "./lib/main/mavlink/common/common.h" 2
# 26 "./lib/main/mavlink/common/mavlink.h" 2
# 79 "./src/main/telemetry/mavlink.c" 2

# 1 "./src/main/fc/cleanflight_fc.h" 1
# 18 "./src/main/fc/cleanflight_fc.h"
       

extern int16_t magHold;
extern int16_t telemTemperature1;

void applyAndSaveAccelerometerTrimsDelta(rollAndPitchTrims_t *rollAndPitchTrimsDelta);
void handleInflightCalibrationStickPosition();

void mwDisarm(void);
void mwArm(void);

_Bool isCalibrating(void);
# 81 "./src/main/telemetry/mavlink.c" 2



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"

#pragma GCC diagnostic pop

#define TELEMETRY_MAVLINK_INITIAL_PORT_MODE MODE_TX
#define TELEMETRY_MAVLINK_MAXRATE 50
#define TELEMETRY_MAVLINK_DELAY ((1000 * 1000) / TELEMETRY_MAVLINK_MAXRATE)

extern uint16_t rssi;

static serialPort_t *mavlinkPort = ((void *)0);
static serialPortConfig_t *portConfig;

static _Bool mavlinkTelemetryEnabled = 0;
static portSharing_e mavlinkPortSharing;


static const uint8_t mavRates[] = {
    [MAV_DATA_STREAM_EXTENDED_STATUS] = 2,
    [MAV_DATA_STREAM_RC_CHANNELS] = 5,
    [MAV_DATA_STREAM_POSITION] = 2,
    [MAV_DATA_STREAM_EXTRA1] = 10,
    [MAV_DATA_STREAM_EXTRA2] = 10
};

#define MAXSTREAMS (sizeof(mavRates) / sizeof(mavRates[0]))

static uint8_t mavTicks[(sizeof(mavRates) / sizeof(mavRates[0]))];
static mavlink_message_t mavMsg;
static uint8_t mavBuffer[(255 + ((5 + 1) + 2))];
static uint32_t lastMavlinkMessage = 0;

static int mavlinkStreamTrigger(enum MAV_DATA_STREAM streamNum)
{
    uint8_t rate = (uint8_t) mavRates[streamNum];
    if (rate == 0) {
        return 0;
    }

    if (mavTicks[streamNum] == 0) {

        if (rate > 50) {
            rate = 50;
        }

        mavTicks[streamNum] = (50 / rate);
        return 1;
    }


    mavTicks[streamNum]--;
    return 0;
}


static void mavlinkSerialWrite(uint8_t * buf, uint16_t length)
{
    for (int i = 0; i < length; i++)
        serialWrite(mavlinkPort, buf[i]);
}

void freeMAVLinkTelemetryPort(void)
{
    closeSerialPort(mavlinkPort);
    mavlinkPort = ((void *)0);
    mavlinkTelemetryEnabled = 0;
}

void initMAVLinkTelemetry(void)
{
    portConfig = findSerialPortConfig(FUNCTION_TELEMETRY_MAVLINK);
    mavlinkPortSharing = determinePortSharing(portConfig, FUNCTION_TELEMETRY_MAVLINK);
}

void configureMAVLinkTelemetryPort(void)
{
    if (!portConfig) {
        return;
    }

    baudRate_e baudRateIndex = portConfig->baudRates[BAUDRATE_TELEMETRY];
    if (baudRateIndex == BAUD_AUTO) {

        baudRateIndex = BAUD_57600;
    }

    mavlinkPort = openSerialPort(portConfig->identifier, FUNCTION_TELEMETRY_MAVLINK, ((void *)0), baudRates[baudRateIndex], MODE_TX, SERIAL_NOT_INVERTED);

    if (!mavlinkPort) {
        return;
    }

    mavlinkTelemetryEnabled = 1;
}

_Bool checkMAVLinkTelemetryState(void)
{
    _Bool newTelemetryEnabledValue = telemetryDetermineEnabledState(mavlinkPortSharing);

    if (newTelemetryEnabledValue == mavlinkTelemetryEnabled) {
        return 0;
    }

    if (newTelemetryEnabledValue)
        configureMAVLinkTelemetryPort();
    else
        freeMAVLinkTelemetryPort();

    return 1;
}

void mavlinkSendSystemStatus(void)
{
    uint16_t msgLength;

    uint32_t onboardControlAndSensors = 35843;
# 212 "./src/main/telemetry/mavlink.c"
    if (sensors(SENSOR_MAG)) onboardControlAndSensors |= 4100;
    if (sensors(SENSOR_BARO)) onboardControlAndSensors |= 8200;
    if (sensors(SENSOR_GPS)) onboardControlAndSensors |= 16416;

    amperageMeter_t *amperageMeter = getAmperageMeter(batteryConfig()->amperageMeterSource);

    mavlink_msg_sys_status_pack(0, 200, &mavMsg,





        onboardControlAndSensors,

        onboardControlAndSensors,

        onboardControlAndSensors & 1023,

        0,

        feature(FEATURE_VBAT) ? vbat * 100 : 0,

        feature(FEATURE_AMPERAGE_METER) ? amperageMeter->amperage : -1,

        feature(FEATURE_VBAT) ? batteryVoltagePercentage() : 100,

        0,

        0,

        0,

        0,

        0,

        0);
    msgLength = mavlink_msg_to_send_buffer(mavBuffer, &mavMsg);
    mavlinkSerialWrite(mavBuffer, msgLength);
}

void mavlinkSendRCChannelsAndRSSI(void)
{
    uint16_t msgLength;
    mavlink_msg_rc_channels_raw_pack(0, 200, &mavMsg,

        millis(),

        0,

        (rxRuntimeConfig.channelCount >= 1) ? rcData[0] : 0,

        (rxRuntimeConfig.channelCount >= 2) ? rcData[1] : 0,

        (rxRuntimeConfig.channelCount >= 3) ? rcData[2] : 0,

        (rxRuntimeConfig.channelCount >= 4) ? rcData[3] : 0,

        (rxRuntimeConfig.channelCount >= 5) ? rcData[4] : 0,

        (rxRuntimeConfig.channelCount >= 6) ? rcData[5] : 0,

        (rxRuntimeConfig.channelCount >= 7) ? rcData[6] : 0,

        (rxRuntimeConfig.channelCount >= 8) ? rcData[7] : 0,

        scaleRange(rssi, 0, 1023, 0, 255));
    msgLength = mavlink_msg_to_send_buffer(mavBuffer, &mavMsg);
    mavlinkSerialWrite(mavBuffer, msgLength);
}


void mavlinkSendPosition(void)
{
    uint16_t msgLength;
    uint8_t gpsFixType = 0;

    if (!sensors(SENSOR_GPS))
        return;

    if (!(stateFlags & (GPS_FIX))) {
        gpsFixType = 1;
    }
    else {
        if (GPS_numSat < 5) {
            gpsFixType = 2;
        }
        else {
            gpsFixType = 3;
        }
    }

    mavlink_msg_gps_raw_int_pack(0, 200, &mavMsg,

        micros(),

        gpsFixType,

        GPS_coord[0],

        GPS_coord[1],

        GPS_altitude * 1000,

        65535,

        65535,

        GPS_speed,

        GPS_ground_course * 10,

        GPS_numSat);
    msgLength = mavlink_msg_to_send_buffer(mavBuffer, &mavMsg);
    mavlinkSerialWrite(mavBuffer, msgLength);


    mavlink_msg_global_position_int_pack(0, 200, &mavMsg,

        micros(),

        GPS_coord[0],

        GPS_coord[1],

        GPS_altitude * 1000,


        (sensors(SENSOR_SONAR) || sensors(SENSOR_BARO)) ? altitudeHoldGetEstimatedAltitude() * 10 : GPS_altitude * 1000,




        0,

        0,

        0,

        (attitude.values.yaw / 10)
    );
    msgLength = mavlink_msg_to_send_buffer(mavBuffer, &mavMsg);
    mavlinkSerialWrite(mavBuffer, msgLength);

    mavlink_msg_gps_global_origin_pack(0, 200, &mavMsg,

        GPS_home[0],

        GPS_home[1],

        0);
    msgLength = mavlink_msg_to_send_buffer(mavBuffer, &mavMsg);
    mavlinkSerialWrite(mavBuffer, msgLength);
}


void mavlinkSendAttitude(void)
{
    uint16_t msgLength;
    mavlink_msg_attitude_pack(0, 200, &mavMsg,

        millis(),

        ((attitude.values.roll / 10.0f) * 0.0174532925f),

        ((-attitude.values.pitch / 10.0f) * 0.0174532925f),

        ((attitude.values.yaw / 10.0f) * 0.0174532925f),

        0,

        0,

        0);
    msgLength = mavlink_msg_to_send_buffer(mavBuffer, &mavMsg);
    mavlinkSerialWrite(mavBuffer, msgLength);
}

void mavlinkSendHUDAndHeartbeat(void)
{
    uint16_t msgLength;
    float mavAltitude = 0;
    float mavGroundSpeed = 0;
    float mavAirSpeed = 0;



    if (sensors(SENSOR_GPS)) {
        mavGroundSpeed = GPS_speed / 100.0;
    }




    if (sensors(SENSOR_SONAR) || sensors(SENSOR_BARO)) {

        mavAltitude = altitudeHoldGetEstimatedAltitude() / 100.0;
    }

    else if (sensors(SENSOR_GPS)) {

        mavAltitude = GPS_altitude;
    }
# 423 "./src/main/telemetry/mavlink.c"
    mavlink_msg_vfr_hud_pack(0, 200, &mavMsg,

        mavAirSpeed,

        mavGroundSpeed,

        (attitude.values.yaw / 10),

        scaleRange(constrain(rcData[THROTTLE], 1000, 2000), 1000, 2000, 0, 100),

        mavAltitude,

        0);
    msgLength = mavlink_msg_to_send_buffer(mavBuffer, &mavMsg);
    mavlinkSerialWrite(mavBuffer, msgLength);


    uint8_t mavModes = MAV_MODE_FLAG_MANUAL_INPUT_ENABLED;
    if ((armingFlags & (ARMED)))
        mavModes |= MAV_MODE_FLAG_SAFETY_ARMED;

    uint8_t mavSystemType;
    switch(mixerConfig()->mixerMode)
    {
        case MIXER_TRI:
            mavSystemType = MAV_TYPE_TRICOPTER;
            break;
        case MIXER_QUADP:
        case MIXER_QUADX:
        case MIXER_Y4:
        case MIXER_VTAIL4:
            mavSystemType = MAV_TYPE_QUADROTOR;
            break;
        case MIXER_Y6:
        case MIXER_HEX6:
        case MIXER_HEX6X:
            mavSystemType = MAV_TYPE_HEXAROTOR;
            break;
        case MIXER_OCTOX8:
        case MIXER_OCTOFLATP:
        case MIXER_OCTOFLATX:
            mavSystemType = MAV_TYPE_OCTOROTOR;
            break;
        case MIXER_FLYING_WING:
        case MIXER_AIRPLANE:
            mavSystemType = MAV_TYPE_FIXED_WING;
            break;
        case MIXER_HELI_120_CCPM:
        case MIXER_HELI_90_DEG:
            mavSystemType = MAV_TYPE_HELICOPTER;
            break;
        default:
            mavSystemType = MAV_TYPE_GENERIC;
            break;
    }


    uint8_t mavCustomMode = 1;

    if ((flightModeFlags & (ANGLE_MODE)) || (flightModeFlags & (HORIZON_MODE))) {
        mavCustomMode = 0;
        mavModes |= MAV_MODE_FLAG_STABILIZE_ENABLED;
    }
    if ((flightModeFlags & (BARO_MODE)) || (flightModeFlags & (SONAR_MODE)))
        mavCustomMode = 2;
    if ((flightModeFlags & (GPS_HOME_MODE)))
        mavCustomMode = 6;
    if ((flightModeFlags & (GPS_HOLD_MODE)))
        mavCustomMode = 16;

    uint8_t mavSystemState = 0;
    if ((armingFlags & (ARMED))) {
        if (failsafeIsActive()) {
            mavSystemState = MAV_STATE_CRITICAL;
        }
        else {
            mavSystemState = MAV_STATE_ACTIVE;
        }
    }
    else if (isCalibrating()) {
        mavSystemState = MAV_STATE_CALIBRATING;
    }
    else {
        mavSystemState = MAV_STATE_STANDBY;
    }

    mavlink_msg_heartbeat_pack(0, 200, &mavMsg,

        mavSystemType,

        MAV_AUTOPILOT_GENERIC,

        mavModes,

        mavCustomMode,

        mavSystemState);
    msgLength = mavlink_msg_to_send_buffer(mavBuffer, &mavMsg);
    mavlinkSerialWrite(mavBuffer, msgLength);
}

void processMAVLinkTelemetry(void)
{

    if (mavlinkStreamTrigger(MAV_DATA_STREAM_EXTENDED_STATUS)) {
        mavlinkSendSystemStatus();
    }

    if (mavlinkStreamTrigger(MAV_DATA_STREAM_RC_CHANNELS)) {
        mavlinkSendRCChannelsAndRSSI();
    }


    if (mavlinkStreamTrigger(MAV_DATA_STREAM_POSITION)) {
        mavlinkSendPosition();
    }


    if (mavlinkStreamTrigger(MAV_DATA_STREAM_EXTRA1)) {
        mavlinkSendAttitude();
    }

    if (mavlinkStreamTrigger(MAV_DATA_STREAM_EXTRA2)) {
        mavlinkSendHUDAndHeartbeat();
    }
}

void handleMAVLinkTelemetry(void)
{
    if (!mavlinkTelemetryEnabled) {
        return;
    }

    if (!mavlinkPort) {
        return;
    }

    uint32_t now = micros();
    if ((now - lastMavlinkMessage) >= ((1000 * 1000) / 50)) {
        processMAVLinkTelemetry();
        lastMavlinkMessage = now;
    }
}
